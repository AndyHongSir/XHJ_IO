// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SCMessage.proto

#ifndef PROTOBUF_SCMessage_2eproto__INCLUDED
#define PROTOBUF_SCMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "scbase.pb.h"
#include "XML.pb.h"
#include "StoC.pb.h"
#include "MessageHeader.pb.h"
// @@protoc_insertion_point(includes)

namespace jynetwork {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SCMessage_2eproto();
void protobuf_AssignDesc_SCMessage_2eproto();
void protobuf_ShutdownFile_SCMessage_2eproto();

class SCMessageNetBattlePrepare;
class SCMessageNetBattleOper;
class SCMessageBattleReward;
class SCMessageLoginAuth;
class SCMessageGateAuth;
class sPlaneEquipStats;
class SCUserDetailInfo;
class SCMessageOperationResult;
class SCMessageShopItem;
class SCMessageBattleSweepReward;
class SCMessageBattleSweepReward_RewardInfo;
class SCMessageBattleRewardEnd;
class sPlayerSave;
class SCOpponentDetailInfo;
class SCQueryDetailInfo;
class SCMessagePong;
class SCMessageBattlePrepare;
class SysNotice;
class SCMessageSysNotice;
class SysMail;
class SCMessageMail;
class SCMessageRankList;
class SCMessageRankList_RankInfo;
class SCMessageBattleCheck;
class SCMessageCorpsOper;
class CorpsInfo;
class SCMessageCorpsInfo;
class CorpsBossInfo;
class CorpsBossPlayerInfo;
class SCMessageCorpsBossInfo;
class SCMessageCorpsList;
class MessagePKOper;
class SCMessagePKOperResult;
class SCMessageFriendList;
class SCMessageFriendList_FriendInfo;

// ===================================================================

class SCMessageNetBattlePrepare : public ::google::protobuf::MessageLite {
 public:
  SCMessageNetBattlePrepare();
  virtual ~SCMessageNetBattlePrepare();

  SCMessageNetBattlePrepare(const SCMessageNetBattlePrepare& from);

  inline SCMessageNetBattlePrepare& operator=(const SCMessageNetBattlePrepare& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageNetBattlePrepare& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageNetBattlePrepare* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageNetBattlePrepare* other);

  // implements Message ----------------------------------------------

  SCMessageNetBattlePrepare* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageNetBattlePrepare& from);
  void MergeFrom(const SCMessageNetBattlePrepare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.SCQueryDetailInfo friend_detail = 2;
  inline int friend_detail_size() const;
  inline void clear_friend_detail();
  static const int kFriendDetailFieldNumber = 2;
  inline const ::jynetwork::proto::SCQueryDetailInfo& friend_detail(int index) const;
  inline ::jynetwork::proto::SCQueryDetailInfo* mutable_friend_detail(int index);
  inline ::jynetwork::proto::SCQueryDetailInfo* add_friend_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >&
      friend_detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >*
      mutable_friend_detail();

  // optional .jynetwork.proto.eOpertionResult result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::jynetwork::proto::eOpertionResult result() const;
  inline void set_result(::jynetwork::proto::eOpertionResult value);

  // optional uint32 rand_num = 3;
  inline bool has_rand_num() const;
  inline void clear_rand_num();
  static const int kRandNumFieldNumber = 3;
  inline ::google::protobuf::uint32 rand_num() const;
  inline void set_rand_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageNetBattlePrepare)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_rand_num();
  inline void clear_has_rand_num();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo > friend_detail_;
  ::google::protobuf::uint32 map_id_;
  int result_;
  ::google::protobuf::uint32 rand_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageNetBattlePrepare* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageNetBattleOper : public ::google::protobuf::MessageLite {
 public:
  SCMessageNetBattleOper();
  virtual ~SCMessageNetBattleOper();

  SCMessageNetBattleOper(const SCMessageNetBattleOper& from);

  inline SCMessageNetBattleOper& operator=(const SCMessageNetBattleOper& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageNetBattleOper& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageNetBattleOper* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageNetBattleOper* other);

  // implements Message ----------------------------------------------

  SCMessageNetBattleOper* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageNetBattleOper& from);
  void MergeFrom(const SCMessageNetBattleOper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jynetwork.proto.NetBattleOper opers = 1;
  inline int opers_size() const;
  inline void clear_opers();
  static const int kOpersFieldNumber = 1;
  inline const ::jynetwork::proto::NetBattleOper& opers(int index) const;
  inline ::jynetwork::proto::NetBattleOper* mutable_opers(int index);
  inline ::jynetwork::proto::NetBattleOper* add_opers();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetBattleOper >&
      opers() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetBattleOper >*
      mutable_opers();

  // optional uint32 battle_time = 2;
  inline bool has_battle_time() const;
  inline void clear_battle_time();
  static const int kBattleTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 battle_time() const;
  inline void set_battle_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageNetBattleOper)
 private:
  inline void set_has_battle_time();
  inline void clear_has_battle_time();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetBattleOper > opers_;
  ::google::protobuf::uint32 battle_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageNetBattleOper* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageBattleReward : public ::google::protobuf::MessageLite {
 public:
  SCMessageBattleReward();
  virtual ~SCMessageBattleReward();

  SCMessageBattleReward(const SCMessageBattleReward& from);

  inline SCMessageBattleReward& operator=(const SCMessageBattleReward& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageBattleReward& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageBattleReward* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageBattleReward* other);

  // implements Message ----------------------------------------------

  SCMessageBattleReward* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageBattleReward& from);
  void MergeFrom(const SCMessageBattleReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // optional uint32 score = 28;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 28;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sPersonEquipStats equip = 3;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 3;
  inline const ::jynetwork::proto::sPersonEquipStats& equip(int index) const;
  inline ::jynetwork::proto::sPersonEquipStats* mutable_equip(int index);
  inline ::jynetwork::proto::sPersonEquipStats* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
      mutable_equip();

  // repeated .jynetwork.proto.sPersonItemStats item = 4;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::jynetwork::proto::sPersonItemStats& item(int index) const;
  inline ::jynetwork::proto::sPersonItemStats* mutable_item(int index);
  inline ::jynetwork::proto::sPersonItemStats* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
      mutable_item();

  // optional uint32 difficult = 5;
  inline bool has_difficult() const;
  inline void clear_difficult();
  static const int kDifficultFieldNumber = 5;
  inline ::google::protobuf::uint32 difficult() const;
  inline void set_difficult(::google::protobuf::uint32 value);

  // optional uint32 battle_score = 6;
  inline bool has_battle_score() const;
  inline void clear_battle_score();
  static const int kBattleScoreFieldNumber = 6;
  inline ::google::protobuf::uint32 battle_score() const;
  inline void set_battle_score(::google::protobuf::uint32 value);

  // optional uint32 battle_money = 7;
  inline bool has_battle_money() const;
  inline void clear_battle_money();
  static const int kBattleMoneyFieldNumber = 7;
  inline ::google::protobuf::uint32 battle_money() const;
  inline void set_battle_money(::google::protobuf::uint32 value);

  // optional uint32 battle_star = 8;
  inline bool has_battle_star() const;
  inline void clear_battle_star();
  static const int kBattleStarFieldNumber = 8;
  inline ::google::protobuf::uint32 battle_star() const;
  inline void set_battle_star(::google::protobuf::uint32 value);

  // optional uint32 old_level = 9;
  inline bool has_old_level() const;
  inline void clear_old_level();
  static const int kOldLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 old_level() const;
  inline void set_old_level(::google::protobuf::uint32 value);

  // optional uint32 old_exp = 10;
  inline bool has_old_exp() const;
  inline void clear_old_exp();
  static const int kOldExpFieldNumber = 10;
  inline ::google::protobuf::uint32 old_exp() const;
  inline void set_old_exp(::google::protobuf::uint32 value);

  // optional uint32 card_exp = 11;
  inline bool has_card_exp() const;
  inline void clear_card_exp();
  static const int kCardExpFieldNumber = 11;
  inline ::google::protobuf::uint32 card_exp() const;
  inline void set_card_exp(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eOpertionResult result = 12;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 12;
  inline ::jynetwork::proto::eOpertionResult result() const;
  inline void set_result(::jynetwork::proto::eOpertionResult value);

  // optional uint32 hit_score = 13;
  inline bool has_hit_score() const;
  inline void clear_hit_score();
  static const int kHitScoreFieldNumber = 13;
  inline ::google::protobuf::uint32 hit_score() const;
  inline void set_hit_score(::google::protobuf::uint32 value);

  // optional uint32 time_score = 14;
  inline bool has_time_score() const;
  inline void clear_time_score();
  static const int kTimeScoreFieldNumber = 14;
  inline ::google::protobuf::uint32 time_score() const;
  inline void set_time_score(::google::protobuf::uint32 value);

  // optional uint32 catlog = 15;
  inline bool has_catlog() const;
  inline void clear_catlog();
  static const int kCatlogFieldNumber = 15;
  inline ::google::protobuf::uint32 catlog() const;
  inline void set_catlog(::google::protobuf::uint32 value);

  // optional uint32 endless_wave = 16;
  inline bool has_endless_wave() const;
  inline void clear_endless_wave();
  static const int kEndlessWaveFieldNumber = 16;
  inline ::google::protobuf::uint32 endless_wave() const;
  inline void set_endless_wave(::google::protobuf::uint32 value);

  // repeated uint32 double_damage_score = 17;
  inline int double_damage_score_size() const;
  inline void clear_double_damage_score();
  static const int kDoubleDamageScoreFieldNumber = 17;
  inline ::google::protobuf::uint32 double_damage_score(int index) const;
  inline void set_double_damage_score(int index, ::google::protobuf::uint32 value);
  inline void add_double_damage_score(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      double_damage_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_double_damage_score();

  // repeated uint32 double_kill_score = 18;
  inline int double_kill_score_size() const;
  inline void clear_double_kill_score();
  static const int kDoubleKillScoreFieldNumber = 18;
  inline ::google::protobuf::uint32 double_kill_score(int index) const;
  inline void set_double_kill_score(int index, ::google::protobuf::uint32 value);
  inline void add_double_kill_score(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      double_kill_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_double_kill_score();

  // repeated uint32 double_boss_score = 19;
  inline int double_boss_score_size() const;
  inline void clear_double_boss_score();
  static const int kDoubleBossScoreFieldNumber = 19;
  inline ::google::protobuf::uint32 double_boss_score(int index) const;
  inline void set_double_boss_score(int index, ::google::protobuf::uint32 value);
  inline void add_double_boss_score(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      double_boss_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_double_boss_score();

  // repeated .jynetwork.proto.sPersonItemStats mvp_item = 20;
  inline int mvp_item_size() const;
  inline void clear_mvp_item();
  static const int kMvpItemFieldNumber = 20;
  inline const ::jynetwork::proto::sPersonItemStats& mvp_item(int index) const;
  inline ::jynetwork::proto::sPersonItemStats* mutable_mvp_item(int index);
  inline ::jynetwork::proto::sPersonItemStats* add_mvp_item();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
      mvp_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
      mutable_mvp_item();

  // optional uint32 boss_single = 21;
  inline bool has_boss_single() const;
  inline void clear_boss_single();
  static const int kBossSingleFieldNumber = 21;
  inline ::google::protobuf::uint32 boss_single() const;
  inline void set_boss_single(::google::protobuf::uint32 value);

  // optional uint32 boss_total = 22;
  inline bool has_boss_total() const;
  inline void clear_boss_total();
  static const int kBossTotalFieldNumber = 22;
  inline ::google::protobuf::uint32 boss_total() const;
  inline void set_boss_total(::google::protobuf::uint32 value);

  // optional uint32 boss_rank = 23;
  inline bool has_boss_rank() const;
  inline void clear_boss_rank();
  static const int kBossRankFieldNumber = 23;
  inline ::google::protobuf::uint32 boss_rank() const;
  inline void set_boss_rank(::google::protobuf::uint32 value);

  // optional uint32 wait_player_reward = 24;
  inline bool has_wait_player_reward() const;
  inline void clear_wait_player_reward();
  static const int kWaitPlayerRewardFieldNumber = 24;
  inline ::google::protobuf::uint32 wait_player_reward() const;
  inline void set_wait_player_reward(::google::protobuf::uint32 value);

  // optional int32 arena_score = 25;
  inline bool has_arena_score() const;
  inline void clear_arena_score();
  static const int kArenaScoreFieldNumber = 25;
  inline ::google::protobuf::int32 arena_score() const;
  inline void set_arena_score(::google::protobuf::int32 value);

  // optional uint32 arena_result = 26;
  inline bool has_arena_result() const;
  inline void clear_arena_result();
  static const int kArenaResultFieldNumber = 26;
  inline ::google::protobuf::uint32 arena_result() const;
  inline void set_arena_result(::google::protobuf::uint32 value);

  // optional uint32 arena_continue_win = 27;
  inline bool has_arena_continue_win() const;
  inline void clear_arena_continue_win();
  static const int kArenaContinueWinFieldNumber = 27;
  inline ::google::protobuf::uint32 arena_continue_win() const;
  inline void set_arena_continue_win(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageBattleReward)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_difficult();
  inline void clear_has_difficult();
  inline void set_has_battle_score();
  inline void clear_has_battle_score();
  inline void set_has_battle_money();
  inline void clear_has_battle_money();
  inline void set_has_battle_star();
  inline void clear_has_battle_star();
  inline void set_has_old_level();
  inline void clear_has_old_level();
  inline void set_has_old_exp();
  inline void clear_has_old_exp();
  inline void set_has_card_exp();
  inline void clear_has_card_exp();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_hit_score();
  inline void clear_has_hit_score();
  inline void set_has_time_score();
  inline void clear_has_time_score();
  inline void set_has_catlog();
  inline void clear_has_catlog();
  inline void set_has_endless_wave();
  inline void clear_has_endless_wave();
  inline void set_has_boss_single();
  inline void clear_has_boss_single();
  inline void set_has_boss_total();
  inline void clear_has_boss_total();
  inline void set_has_boss_rank();
  inline void clear_has_boss_rank();
  inline void set_has_wait_player_reward();
  inline void clear_has_wait_player_reward();
  inline void set_has_arena_score();
  inline void clear_has_arena_score();
  inline void set_has_arena_result();
  inline void clear_has_arena_result();
  inline void set_has_arena_continue_win();
  inline void clear_has_arena_continue_win();

  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats > equip_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 difficult_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats > item_;
  ::google::protobuf::uint32 battle_score_;
  ::google::protobuf::uint32 battle_money_;
  ::google::protobuf::uint32 battle_star_;
  ::google::protobuf::uint32 old_level_;
  ::google::protobuf::uint32 old_exp_;
  ::google::protobuf::uint32 card_exp_;
  int result_;
  ::google::protobuf::uint32 hit_score_;
  ::google::protobuf::uint32 time_score_;
  ::google::protobuf::uint32 catlog_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > double_damage_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > double_kill_score_;
  ::google::protobuf::uint32 endless_wave_;
  ::google::protobuf::uint32 boss_single_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > double_boss_score_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats > mvp_item_;
  ::google::protobuf::uint32 boss_total_;
  ::google::protobuf::uint32 boss_rank_;
  ::google::protobuf::uint32 wait_player_reward_;
  ::google::protobuf::int32 arena_score_;
  ::google::protobuf::uint32 arena_result_;
  ::google::protobuf::uint32 arena_continue_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageBattleReward* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageLoginAuth : public ::google::protobuf::MessageLite {
 public:
  SCMessageLoginAuth();
  virtual ~SCMessageLoginAuth();

  SCMessageLoginAuth(const SCMessageLoginAuth& from);

  inline SCMessageLoginAuth& operator=(const SCMessageLoginAuth& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageLoginAuth& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageLoginAuth* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageLoginAuth* other);

  // implements Message ----------------------------------------------

  SCMessageLoginAuth* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageLoginAuth& from);
  void MergeFrom(const SCMessageLoginAuth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .jynetwork.proto.eLoginResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::jynetwork::proto::eLoginResult result() const;
  inline void set_result(::jynetwork::proto::eLoginResult value);

  // optional int32 acc_id = 2;
  inline bool has_acc_id() const;
  inline void clear_acc_id();
  static const int kAccIdFieldNumber = 2;
  inline ::google::protobuf::int32 acc_id() const;
  inline void set_acc_id(::google::protobuf::int32 value);

  // optional uint32 session_key = 3;
  inline bool has_session_key() const;
  inline void clear_session_key();
  static const int kSessionKeyFieldNumber = 3;
  inline ::google::protobuf::uint32 session_key() const;
  inline void set_session_key(::google::protobuf::uint32 value);

  // optional uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional string gate_ip = 5;
  inline bool has_gate_ip() const;
  inline void clear_gate_ip();
  static const int kGateIpFieldNumber = 5;
  inline const ::std::string& gate_ip() const;
  inline void set_gate_ip(const ::std::string& value);
  inline void set_gate_ip(const char* value);
  inline void set_gate_ip(const char* value, size_t size);
  inline ::std::string* mutable_gate_ip();
  inline ::std::string* release_gate_ip();
  inline void set_allocated_gate_ip(::std::string* gate_ip);

  // optional string user_name = 6;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string sdk_id = 7;
  inline bool has_sdk_id() const;
  inline void clear_sdk_id();
  static const int kSdkIdFieldNumber = 7;
  inline const ::std::string& sdk_id() const;
  inline void set_sdk_id(const ::std::string& value);
  inline void set_sdk_id(const char* value);
  inline void set_sdk_id(const char* value, size_t size);
  inline ::std::string* mutable_sdk_id();
  inline ::std::string* release_sdk_id();
  inline void set_allocated_sdk_id(::std::string* sdk_id);

  // optional uint32 is_need_disconnect = 8;
  inline bool has_is_need_disconnect() const;
  inline void clear_is_need_disconnect();
  static const int kIsNeedDisconnectFieldNumber = 8;
  inline ::google::protobuf::uint32 is_need_disconnect() const;
  inline void set_is_need_disconnect(::google::protobuf::uint32 value);

  // optional uint32 lang_id = 9;
  inline bool has_lang_id() const;
  inline void clear_lang_id();
  static const int kLangIdFieldNumber = 9;
  inline ::google::protobuf::uint32 lang_id() const;
  inline void set_lang_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageLoginAuth)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_acc_id();
  inline void clear_has_acc_id();
  inline void set_has_session_key();
  inline void clear_has_session_key();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_gate_ip();
  inline void clear_has_gate_ip();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_sdk_id();
  inline void clear_has_sdk_id();
  inline void set_has_is_need_disconnect();
  inline void clear_has_is_need_disconnect();
  inline void set_has_lang_id();
  inline void clear_has_lang_id();

  int result_;
  ::google::protobuf::int32 acc_id_;
  ::google::protobuf::uint32 session_key_;
  ::google::protobuf::uint32 port_;
  ::std::string* gate_ip_;
  ::std::string* user_name_;
  ::std::string* sdk_id_;
  ::google::protobuf::uint32 is_need_disconnect_;
  ::google::protobuf::uint32 lang_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageLoginAuth* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageGateAuth : public ::google::protobuf::MessageLite {
 public:
  SCMessageGateAuth();
  virtual ~SCMessageGateAuth();

  SCMessageGateAuth(const SCMessageGateAuth& from);

  inline SCMessageGateAuth& operator=(const SCMessageGateAuth& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageGateAuth& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageGateAuth* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageGateAuth* other);

  // implements Message ----------------------------------------------

  SCMessageGateAuth* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageGateAuth& from);
  void MergeFrom(const SCMessageGateAuth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .jynetwork.proto.eLoginResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::jynetwork::proto::eLoginResult result() const;
  inline void set_result(::jynetwork::proto::eLoginResult value);

  // optional uint32 acc_id = 2;
  inline bool has_acc_id() const;
  inline void clear_acc_id();
  static const int kAccIdFieldNumber = 2;
  inline ::google::protobuf::uint32 acc_id() const;
  inline void set_acc_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageGateAuth)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_acc_id();
  inline void clear_has_acc_id();

  int result_;
  ::google::protobuf::uint32 acc_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageGateAuth* default_instance_;
};
// -------------------------------------------------------------------

class sPlaneEquipStats : public ::google::protobuf::MessageLite {
 public:
  sPlaneEquipStats();
  virtual ~sPlaneEquipStats();

  sPlaneEquipStats(const sPlaneEquipStats& from);

  inline sPlaneEquipStats& operator=(const sPlaneEquipStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPlaneEquipStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPlaneEquipStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPlaneEquipStats* other);

  // implements Message ----------------------------------------------

  sPlaneEquipStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPlaneEquipStats& from);
  void MergeFrom(const sPlaneEquipStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 equipid = 2;
  inline bool has_equipid() const;
  inline void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  inline ::google::protobuf::uint32 equipid() const;
  inline void set_equipid(::google::protobuf::uint32 value);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 intensify = 4;
  inline bool has_intensify() const;
  inline void clear_intensify();
  static const int kIntensifyFieldNumber = 4;
  inline ::google::protobuf::uint32 intensify() const;
  inline void set_intensify(::google::protobuf::uint32 value);

  // optional uint32 exp = 5;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 starlv = 6;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarlvFieldNumber = 6;
  inline ::google::protobuf::uint32 starlv() const;
  inline void set_starlv(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.ePersonalOpertionType oper = 7;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 7;
  inline ::jynetwork::proto::ePersonalOpertionType oper() const;
  inline void set_oper(::jynetwork::proto::ePersonalOpertionType value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPlaneEquipStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_intensify();
  inline void clear_has_intensify();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_starlv();
  inline void clear_has_starlv();
  inline void set_has_oper();
  inline void clear_has_oper();

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 equipid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 intensify_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 starlv_;
  int oper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static sPlaneEquipStats* default_instance_;
};
// -------------------------------------------------------------------

class SCUserDetailInfo : public ::google::protobuf::MessageLite {
 public:
  SCUserDetailInfo();
  virtual ~SCUserDetailInfo();

  SCUserDetailInfo(const SCUserDetailInfo& from);

  inline SCUserDetailInfo& operator=(const SCUserDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCUserDetailInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCUserDetailInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCUserDetailInfo* other);

  // implements Message ----------------------------------------------

  SCUserDetailInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCUserDetailInfo& from);
  void MergeFrom(const SCUserDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 acc_id = 1;
  inline bool has_acc_id() const;
  inline void clear_acc_id();
  static const int kAccIdFieldNumber = 1;
  inline ::google::protobuf::uint32 acc_id() const;
  inline void set_acc_id(::google::protobuf::uint32 value);

  // optional uint32 isnewchar = 2;
  inline bool has_isnewchar() const;
  inline void clear_isnewchar();
  static const int kIsnewcharFieldNumber = 2;
  inline ::google::protobuf::uint32 isnewchar() const;
  inline void set_isnewchar(::google::protobuf::uint32 value);

  // optional uint32 isfulldata = 3;
  inline bool has_isfulldata() const;
  inline void clear_isfulldata();
  static const int kIsfulldataFieldNumber = 3;
  inline ::google::protobuf::uint32 isfulldata() const;
  inline void set_isfulldata(::google::protobuf::uint32 value);

  // optional string sname = 4;
  inline bool has_sname() const;
  inline void clear_sname();
  static const int kSnameFieldNumber = 4;
  inline const ::std::string& sname() const;
  inline void set_sname(const ::std::string& value);
  inline void set_sname(const char* value);
  inline void set_sname(const char* value, size_t size);
  inline ::std::string* mutable_sname();
  inline ::std::string* release_sname();
  inline void set_allocated_sname(::std::string* sname);

  // repeated uint32 equip_id = 5;
  inline int equip_id_size() const;
  inline void clear_equip_id();
  static const int kEquipIdFieldNumber = 5;
  inline ::google::protobuf::uint32 equip_id(int index) const;
  inline void set_equip_id(int index, ::google::protobuf::uint32 value);
  inline void add_equip_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      equip_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_equip_id();

  // optional uint32 team_lv = 6;
  inline bool has_team_lv() const;
  inline void clear_team_lv();
  static const int kTeamLvFieldNumber = 6;
  inline ::google::protobuf::uint32 team_lv() const;
  inline void set_team_lv(::google::protobuf::uint32 value);

  // optional uint32 team_exp = 7;
  inline bool has_team_exp() const;
  inline void clear_team_exp();
  static const int kTeamExpFieldNumber = 7;
  inline ::google::protobuf::uint32 team_exp() const;
  inline void set_team_exp(::google::protobuf::uint32 value);

  // optional uint32 cup_score_total = 8;
  inline bool has_cup_score_total() const;
  inline void clear_cup_score_total();
  static const int kCupScoreTotalFieldNumber = 8;
  inline ::google::protobuf::uint32 cup_score_total() const;
  inline void set_cup_score_total(::google::protobuf::uint32 value);

  // optional uint32 cup_score = 9;
  inline bool has_cup_score() const;
  inline void clear_cup_score();
  static const int kCupScoreFieldNumber = 9;
  inline ::google::protobuf::uint32 cup_score() const;
  inline void set_cup_score(::google::protobuf::uint32 value);

  // optional uint32 league_score_total = 10;
  inline bool has_league_score_total() const;
  inline void clear_league_score_total();
  static const int kLeagueScoreTotalFieldNumber = 10;
  inline ::google::protobuf::uint32 league_score_total() const;
  inline void set_league_score_total(::google::protobuf::uint32 value);

  // optional uint32 league_score = 11;
  inline bool has_league_score() const;
  inline void clear_league_score();
  static const int kLeagueScoreFieldNumber = 11;
  inline ::google::protobuf::uint32 league_score() const;
  inline void set_league_score(::google::protobuf::uint32 value);

  // optional uint32 win_total = 12;
  inline bool has_win_total() const;
  inline void clear_win_total();
  static const int kWinTotalFieldNumber = 12;
  inline ::google::protobuf::uint32 win_total() const;
  inline void set_win_total(::google::protobuf::uint32 value);

  // optional uint32 lost_total = 13;
  inline bool has_lost_total() const;
  inline void clear_lost_total();
  static const int kLostTotalFieldNumber = 13;
  inline ::google::protobuf::uint32 lost_total() const;
  inline void set_lost_total(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sPlaneEquipStats equip = 14;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 14;
  inline const ::jynetwork::proto::sPlaneEquipStats& equip(int index) const;
  inline ::jynetwork::proto::sPlaneEquipStats* mutable_equip(int index);
  inline ::jynetwork::proto::sPlaneEquipStats* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPlaneEquipStats >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPlaneEquipStats >*
      mutable_equip();

  // optional uint64 stat_num = 15;
  inline bool has_stat_num() const;
  inline void clear_stat_num();
  static const int kStatNumFieldNumber = 15;
  inline ::google::protobuf::uint64 stat_num() const;
  inline void set_stat_num(::google::protobuf::uint64 value);

  // optional uint32 guildid = 906;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 906;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional uint32 viplevel = 907;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 907;
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);

  // optional uint32 vipexp = 908;
  inline bool has_vipexp() const;
  inline void clear_vipexp();
  static const int kVipexpFieldNumber = 908;
  inline ::google::protobuf::uint32 vipexp() const;
  inline void set_vipexp(::google::protobuf::uint32 value);

  // optional int32 money = 909;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 909;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional int32 diamonds = 910;
  inline bool has_diamonds() const;
  inline void clear_diamonds();
  static const int kDiamondsFieldNumber = 910;
  inline ::google::protobuf::int32 diamonds() const;
  inline void set_diamonds(::google::protobuf::int32 value);

  // optional uint32 charslot = 911;
  inline bool has_charslot() const;
  inline void clear_charslot();
  static const int kCharslotFieldNumber = 911;
  inline ::google::protobuf::uint32 charslot() const;
  inline void set_charslot(::google::protobuf::uint32 value);

  // optional uint32 guide = 912;
  inline bool has_guide() const;
  inline void clear_guide();
  static const int kGuideFieldNumber = 912;
  inline ::google::protobuf::uint32 guide() const;
  inline void set_guide(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sCharactorInit chars = 913;
  inline int chars_size() const;
  inline void clear_chars();
  static const int kCharsFieldNumber = 913;
  inline const ::jynetwork::proto::sCharactorInit& chars(int index) const;
  inline ::jynetwork::proto::sCharactorInit* mutable_chars(int index);
  inline ::jynetwork::proto::sCharactorInit* add_chars();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit >&
      chars() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit >*
      mutable_chars();

  // repeated .jynetwork.proto.sPersonCardStats cards = 914;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 914;
  inline const ::jynetwork::proto::sPersonCardStats& cards(int index) const;
  inline ::jynetwork::proto::sPersonCardStats* mutable_cards(int index);
  inline ::jynetwork::proto::sPersonCardStats* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats >*
      mutable_cards();

  // repeated .jynetwork.proto.sPersonItemStats item = 916;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 916;
  inline const ::jynetwork::proto::sPersonItemStats& item(int index) const;
  inline ::jynetwork::proto::sPersonItemStats* mutable_item(int index);
  inline ::jynetwork::proto::sPersonItemStats* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
      mutable_item();

  // repeated .jynetwork.proto.sCastleInfo castles = 917;
  inline int castles_size() const;
  inline void clear_castles();
  static const int kCastlesFieldNumber = 917;
  inline const ::jynetwork::proto::sCastleInfo& castles(int index) const;
  inline ::jynetwork::proto::sCastleInfo* mutable_castles(int index);
  inline ::jynetwork::proto::sCastleInfo* add_castles();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo >&
      castles() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo >*
      mutable_castles();

  // optional uint32 staminanow = 918;
  inline bool has_staminanow() const;
  inline void clear_staminanow();
  static const int kStaminanowFieldNumber = 918;
  inline ::google::protobuf::uint32 staminanow() const;
  inline void set_staminanow(::google::protobuf::uint32 value);

  // optional uint32 staminamax = 919;
  inline bool has_staminamax() const;
  inline void clear_staminamax();
  static const int kStaminamaxFieldNumber = 919;
  inline ::google::protobuf::uint32 staminamax() const;
  inline void set_staminamax(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sPersonSkillStats skills = 920;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 920;
  inline const ::jynetwork::proto::sPersonSkillStats& skills(int index) const;
  inline ::jynetwork::proto::sPersonSkillStats* mutable_skills(int index);
  inline ::jynetwork::proto::sPersonSkillStats* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats >*
      mutable_skills();

  // repeated .jynetwork.proto.sPersonTaskStats tasks = 921;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 921;
  inline const ::jynetwork::proto::sPersonTaskStats& tasks(int index) const;
  inline ::jynetwork::proto::sPersonTaskStats* mutable_tasks(int index);
  inline ::jynetwork::proto::sPersonTaskStats* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonTaskStats >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonTaskStats >*
      mutable_tasks();

  // optional uint32 buy_stamina = 922;
  inline bool has_buy_stamina() const;
  inline void clear_buy_stamina();
  static const int kBuyStaminaFieldNumber = 922;
  inline ::google::protobuf::uint32 buy_stamina() const;
  inline void set_buy_stamina(::google::protobuf::uint32 value);

  // optional uint32 buy_gold = 923;
  inline bool has_buy_gold() const;
  inline void clear_buy_gold();
  static const int kBuyGoldFieldNumber = 923;
  inline ::google::protobuf::uint32 buy_gold() const;
  inline void set_buy_gold(::google::protobuf::uint32 value);

  // repeated uint32 refresh_shop = 924;
  inline int refresh_shop_size() const;
  inline void clear_refresh_shop();
  static const int kRefreshShopFieldNumber = 924;
  inline ::google::protobuf::uint32 refresh_shop(int index) const;
  inline void set_refresh_shop(int index, ::google::protobuf::uint32 value);
  inline void add_refresh_shop(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      refresh_shop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_refresh_shop();

  // repeated .jynetwork.proto.sCastleInfo last_castle = 935;
  inline int last_castle_size() const;
  inline void clear_last_castle();
  static const int kLastCastleFieldNumber = 935;
  inline const ::jynetwork::proto::sCastleInfo& last_castle(int index) const;
  inline ::jynetwork::proto::sCastleInfo* mutable_last_castle(int index);
  inline ::jynetwork::proto::sCastleInfo* add_last_castle();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo >&
      last_castle() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo >*
      mutable_last_castle();

  // optional uint32 show_new_map = 936;
  inline bool has_show_new_map() const;
  inline void clear_show_new_map();
  static const int kShowNewMapFieldNumber = 936;
  inline ::google::protobuf::uint32 show_new_map() const;
  inline void set_show_new_map(::google::protobuf::uint32 value);

  // optional uint32 week_login = 937;
  inline bool has_week_login() const;
  inline void clear_week_login();
  static const int kWeekLoginFieldNumber = 937;
  inline ::google::protobuf::uint32 week_login() const;
  inline void set_week_login(::google::protobuf::uint32 value);

  // optional uint32 week_day_login = 938;
  inline bool has_week_day_login() const;
  inline void clear_week_day_login();
  static const int kWeekDayLoginFieldNumber = 938;
  inline ::google::protobuf::uint32 week_day_login() const;
  inline void set_week_day_login(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sPersonItemStats week_item = 939;
  inline int week_item_size() const;
  inline void clear_week_item();
  static const int kWeekItemFieldNumber = 939;
  inline const ::jynetwork::proto::sPersonItemStats& week_item(int index) const;
  inline ::jynetwork::proto::sPersonItemStats* mutable_week_item(int index);
  inline ::jynetwork::proto::sPersonItemStats* add_week_item();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
      week_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
      mutable_week_item();

  // optional uint32 oper_index = 940;
  inline bool has_oper_index() const;
  inline void clear_oper_index();
  static const int kOperIndexFieldNumber = 940;
  inline ::google::protobuf::uint32 oper_index() const;
  inline void set_oper_index(::google::protobuf::uint32 value);

  // repeated uint32 reset_free = 941;
  inline int reset_free_size() const;
  inline void clear_reset_free();
  static const int kResetFreeFieldNumber = 941;
  inline ::google::protobuf::uint32 reset_free(int index) const;
  inline void set_reset_free(int index, ::google::protobuf::uint32 value);
  inline void add_reset_free(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      reset_free() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_reset_free();

  // repeated uint32 reset_time = 943;
  inline int reset_time_size() const;
  inline void clear_reset_time();
  static const int kResetTimeFieldNumber = 943;
  inline ::google::protobuf::uint32 reset_time(int index) const;
  inline void set_reset_time(int index, ::google::protobuf::uint32 value);
  inline void add_reset_time(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      reset_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_reset_time();

  // optional uint32 endless_wave = 944;
  inline bool has_endless_wave() const;
  inline void clear_endless_wave();
  static const int kEndlessWaveFieldNumber = 944;
  inline ::google::protobuf::uint32 endless_wave() const;
  inline void set_endless_wave(::google::protobuf::uint32 value);

  // optional uint32 corps_guide = 945;
  inline bool has_corps_guide() const;
  inline void clear_corps_guide();
  static const int kCorpsGuideFieldNumber = 945;
  inline ::google::protobuf::uint32 corps_guide() const;
  inline void set_corps_guide(::google::protobuf::uint32 value);

  // optional uint32 total_charge = 946;
  inline bool has_total_charge() const;
  inline void clear_total_charge();
  static const int kTotalChargeFieldNumber = 946;
  inline ::google::protobuf::uint32 total_charge() const;
  inline void set_total_charge(::google::protobuf::uint32 value);

  // optional uint32 day_charge = 947;
  inline bool has_day_charge() const;
  inline void clear_day_charge();
  static const int kDayChargeFieldNumber = 947;
  inline ::google::protobuf::uint32 day_charge() const;
  inline void set_day_charge(::google::protobuf::uint32 value);

  // optional uint32 month_card = 948;
  inline bool has_month_card() const;
  inline void clear_month_card();
  static const int kMonthCardFieldNumber = 948;
  inline ::google::protobuf::uint32 month_card() const;
  inline void set_month_card(::google::protobuf::uint32 value);

  // optional uint32 forever_card = 949;
  inline bool has_forever_card() const;
  inline void clear_forever_card();
  static const int kForeverCardFieldNumber = 949;
  inline ::google::protobuf::uint32 forever_card() const;
  inline void set_forever_card(::google::protobuf::uint32 value);

  // optional uint32 sys_setting = 950;
  inline bool has_sys_setting() const;
  inline void clear_sys_setting();
  static const int kSysSettingFieldNumber = 950;
  inline ::google::protobuf::uint32 sys_setting() const;
  inline void set_sys_setting(::google::protobuf::uint32 value);

  // optional uint32 today_roulette = 951;
  inline bool has_today_roulette() const;
  inline void clear_today_roulette();
  static const int kTodayRouletteFieldNumber = 951;
  inline ::google::protobuf::uint32 today_roulette() const;
  inline void set_today_roulette(::google::protobuf::uint32 value);

  // optional uint32 today_ten_roulette = 952;
  inline bool has_today_ten_roulette() const;
  inline void clear_today_ten_roulette();
  static const int kTodayTenRouletteFieldNumber = 952;
  inline ::google::protobuf::uint32 today_ten_roulette() const;
  inline void set_today_ten_roulette(::google::protobuf::uint32 value);

  // optional uint32 today_small_charge = 953;
  inline bool has_today_small_charge() const;
  inline void clear_today_small_charge();
  static const int kTodaySmallChargeFieldNumber = 953;
  inline ::google::protobuf::uint32 today_small_charge() const;
  inline void set_today_small_charge(::google::protobuf::uint32 value);

  // optional uint32 crystal = 954;
  inline bool has_crystal() const;
  inline void clear_crystal();
  static const int kCrystalFieldNumber = 954;
  inline ::google::protobuf::uint32 crystal() const;
  inline void set_crystal(::google::protobuf::uint32 value);

  // optional uint32 double_open = 955;
  inline bool has_double_open() const;
  inline void clear_double_open();
  static const int kDoubleOpenFieldNumber = 955;
  inline ::google::protobuf::uint32 double_open() const;
  inline void set_double_open(::google::protobuf::uint32 value);

  // optional uint32 endless_check_wave = 956;
  inline bool has_endless_check_wave() const;
  inline void clear_endless_check_wave();
  static const int kEndlessCheckWaveFieldNumber = 956;
  inline ::google::protobuf::uint32 endless_check_wave() const;
  inline void set_endless_check_wave(::google::protobuf::uint32 value);

  // optional uint32 endless_check_score = 957;
  inline bool has_endless_check_score() const;
  inline void clear_endless_check_score();
  static const int kEndlessCheckScoreFieldNumber = 957;
  inline ::google::protobuf::uint32 endless_check_score() const;
  inline void set_endless_check_score(::google::protobuf::uint32 value);

  // optional uint32 check_point = 958;
  inline bool has_check_point() const;
  inline void clear_check_point();
  static const int kCheckPointFieldNumber = 958;
  inline ::google::protobuf::uint32 check_point() const;
  inline void set_check_point(::google::protobuf::uint32 value);

  // optional uint32 is_cheat = 999;
  inline bool has_is_cheat() const;
  inline void clear_is_cheat();
  static const int kIsCheatFieldNumber = 999;
  inline ::google::protobuf::uint32 is_cheat() const;
  inline void set_is_cheat(::google::protobuf::uint32 value);

  // optional uint32 server_local_time = 10100;
  inline bool has_server_local_time() const;
  inline void clear_server_local_time();
  static const int kServerLocalTimeFieldNumber = 10100;
  inline ::google::protobuf::uint32 server_local_time() const;
  inline void set_server_local_time(::google::protobuf::uint32 value);

  // optional string create_time = 10101;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 10101;
  inline const ::std::string& create_time() const;
  inline void set_create_time(const ::std::string& value);
  inline void set_create_time(const char* value);
  inline void set_create_time(const char* value, size_t size);
  inline ::std::string* mutable_create_time();
  inline ::std::string* release_create_time();
  inline void set_allocated_create_time(::std::string* create_time);

  // optional string login_time = 10102;
  inline bool has_login_time() const;
  inline void clear_login_time();
  static const int kLoginTimeFieldNumber = 10102;
  inline const ::std::string& login_time() const;
  inline void set_login_time(const ::std::string& value);
  inline void set_login_time(const char* value);
  inline void set_login_time(const char* value, size_t size);
  inline ::std::string* mutable_login_time();
  inline ::std::string* release_login_time();
  inline void set_allocated_login_time(::std::string* login_time);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCUserDetailInfo)
 private:
  inline void set_has_acc_id();
  inline void clear_has_acc_id();
  inline void set_has_isnewchar();
  inline void clear_has_isnewchar();
  inline void set_has_isfulldata();
  inline void clear_has_isfulldata();
  inline void set_has_sname();
  inline void clear_has_sname();
  inline void set_has_team_lv();
  inline void clear_has_team_lv();
  inline void set_has_team_exp();
  inline void clear_has_team_exp();
  inline void set_has_cup_score_total();
  inline void clear_has_cup_score_total();
  inline void set_has_cup_score();
  inline void clear_has_cup_score();
  inline void set_has_league_score_total();
  inline void clear_has_league_score_total();
  inline void set_has_league_score();
  inline void clear_has_league_score();
  inline void set_has_win_total();
  inline void clear_has_win_total();
  inline void set_has_lost_total();
  inline void clear_has_lost_total();
  inline void set_has_stat_num();
  inline void clear_has_stat_num();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_vipexp();
  inline void clear_has_vipexp();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_diamonds();
  inline void clear_has_diamonds();
  inline void set_has_charslot();
  inline void clear_has_charslot();
  inline void set_has_guide();
  inline void clear_has_guide();
  inline void set_has_staminanow();
  inline void clear_has_staminanow();
  inline void set_has_staminamax();
  inline void clear_has_staminamax();
  inline void set_has_buy_stamina();
  inline void clear_has_buy_stamina();
  inline void set_has_buy_gold();
  inline void clear_has_buy_gold();
  inline void set_has_show_new_map();
  inline void clear_has_show_new_map();
  inline void set_has_week_login();
  inline void clear_has_week_login();
  inline void set_has_week_day_login();
  inline void clear_has_week_day_login();
  inline void set_has_oper_index();
  inline void clear_has_oper_index();
  inline void set_has_endless_wave();
  inline void clear_has_endless_wave();
  inline void set_has_corps_guide();
  inline void clear_has_corps_guide();
  inline void set_has_total_charge();
  inline void clear_has_total_charge();
  inline void set_has_day_charge();
  inline void clear_has_day_charge();
  inline void set_has_month_card();
  inline void clear_has_month_card();
  inline void set_has_forever_card();
  inline void clear_has_forever_card();
  inline void set_has_sys_setting();
  inline void clear_has_sys_setting();
  inline void set_has_today_roulette();
  inline void clear_has_today_roulette();
  inline void set_has_today_ten_roulette();
  inline void clear_has_today_ten_roulette();
  inline void set_has_today_small_charge();
  inline void clear_has_today_small_charge();
  inline void set_has_crystal();
  inline void clear_has_crystal();
  inline void set_has_double_open();
  inline void clear_has_double_open();
  inline void set_has_endless_check_wave();
  inline void clear_has_endless_check_wave();
  inline void set_has_endless_check_score();
  inline void clear_has_endless_check_score();
  inline void set_has_check_point();
  inline void clear_has_check_point();
  inline void set_has_is_cheat();
  inline void clear_has_is_cheat();
  inline void set_has_server_local_time();
  inline void clear_has_server_local_time();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_login_time();
  inline void clear_has_login_time();

  ::google::protobuf::uint32 acc_id_;
  ::google::protobuf::uint32 isnewchar_;
  ::std::string* sname_;
  ::google::protobuf::uint32 isfulldata_;
  ::google::protobuf::uint32 team_lv_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > equip_id_;
  ::google::protobuf::uint32 team_exp_;
  ::google::protobuf::uint32 cup_score_total_;
  ::google::protobuf::uint32 cup_score_;
  ::google::protobuf::uint32 league_score_total_;
  ::google::protobuf::uint32 league_score_;
  ::google::protobuf::uint32 win_total_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPlaneEquipStats > equip_;
  ::google::protobuf::uint32 lost_total_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint64 stat_num_;
  ::google::protobuf::uint32 viplevel_;
  ::google::protobuf::uint32 vipexp_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 diamonds_;
  ::google::protobuf::uint32 charslot_;
  ::google::protobuf::uint32 guide_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit > chars_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats > cards_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats > item_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo > castles_;
  ::google::protobuf::uint32 staminanow_;
  ::google::protobuf::uint32 staminamax_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats > skills_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonTaskStats > tasks_;
  ::google::protobuf::uint32 buy_stamina_;
  ::google::protobuf::uint32 buy_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > refresh_shop_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo > last_castle_;
  ::google::protobuf::uint32 show_new_map_;
  ::google::protobuf::uint32 week_login_;
  ::google::protobuf::uint32 week_day_login_;
  ::google::protobuf::uint32 oper_index_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats > week_item_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > reset_free_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > reset_time_;
  ::google::protobuf::uint32 endless_wave_;
  ::google::protobuf::uint32 corps_guide_;
  ::google::protobuf::uint32 total_charge_;
  ::google::protobuf::uint32 day_charge_;
  ::google::protobuf::uint32 month_card_;
  ::google::protobuf::uint32 forever_card_;
  ::google::protobuf::uint32 sys_setting_;
  ::google::protobuf::uint32 today_roulette_;
  ::google::protobuf::uint32 today_ten_roulette_;
  ::google::protobuf::uint32 today_small_charge_;
  ::google::protobuf::uint32 crystal_;
  ::google::protobuf::uint32 double_open_;
  ::google::protobuf::uint32 endless_check_wave_;
  ::google::protobuf::uint32 endless_check_score_;
  ::google::protobuf::uint32 check_point_;
  ::google::protobuf::uint32 is_cheat_;
  ::std::string* create_time_;
  ::std::string* login_time_;
  ::google::protobuf::uint32 server_local_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(60 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCUserDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageOperationResult : public ::google::protobuf::MessageLite {
 public:
  SCMessageOperationResult();
  virtual ~SCMessageOperationResult();

  SCMessageOperationResult(const SCMessageOperationResult& from);

  inline SCMessageOperationResult& operator=(const SCMessageOperationResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageOperationResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageOperationResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageOperationResult* other);

  // implements Message ----------------------------------------------

  SCMessageOperationResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageOperationResult& from);
  void MergeFrom(const SCMessageOperationResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .jynetwork.proto.eOpertionResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::jynetwork::proto::eOpertionResult result() const;
  inline void set_result(::jynetwork::proto::eOpertionResult value);

  // required .jynetwork.proto.eOpertionType operatin = 2;
  inline bool has_operatin() const;
  inline void clear_operatin();
  static const int kOperatinFieldNumber = 2;
  inline ::jynetwork::proto::eOpertionType operatin() const;
  inline void set_operatin(::jynetwork::proto::eOpertionType value);

  // optional uint32 acc_id = 3;
  inline bool has_acc_id() const;
  inline void clear_acc_id();
  static const int kAccIdFieldNumber = 3;
  inline ::google::protobuf::uint32 acc_id() const;
  inline void set_acc_id(::google::protobuf::uint32 value);

  // optional uint32 bonus = 4;
  inline bool has_bonus() const;
  inline void clear_bonus();
  static const int kBonusFieldNumber = 4;
  inline ::google::protobuf::uint32 bonus() const;
  inline void set_bonus(::google::protobuf::uint32 value);

  // optional uint32 next_item = 5;
  inline bool has_next_item() const;
  inline void clear_next_item();
  static const int kNextItemFieldNumber = 5;
  inline ::google::protobuf::uint32 next_item() const;
  inline void set_next_item(::google::protobuf::uint32 value);

  // optional uint32 oper_value = 6;
  inline bool has_oper_value() const;
  inline void clear_oper_value();
  static const int kOperValueFieldNumber = 6;
  inline ::google::protobuf::uint32 oper_value() const;
  inline void set_oper_value(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem simple_item = 7;
  inline int simple_item_size() const;
  inline void clear_simple_item();
  static const int kSimpleItemFieldNumber = 7;
  inline const ::jynetwork::proto::sSimpleItem& simple_item(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_simple_item(int index);
  inline ::jynetwork::proto::sSimpleItem* add_simple_item();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      simple_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_simple_item();

  // optional uint64 oper_value2 = 8;
  inline bool has_oper_value2() const;
  inline void clear_oper_value2();
  static const int kOperValue2FieldNumber = 8;
  inline ::google::protobuf::uint64 oper_value2() const;
  inline void set_oper_value2(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageOperationResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_operatin();
  inline void clear_has_operatin();
  inline void set_has_acc_id();
  inline void clear_has_acc_id();
  inline void set_has_bonus();
  inline void clear_has_bonus();
  inline void set_has_next_item();
  inline void clear_has_next_item();
  inline void set_has_oper_value();
  inline void clear_has_oper_value();
  inline void set_has_oper_value2();
  inline void clear_has_oper_value2();

  int result_;
  int operatin_;
  ::google::protobuf::uint32 acc_id_;
  ::google::protobuf::uint32 bonus_;
  ::google::protobuf::uint32 next_item_;
  ::google::protobuf::uint32 oper_value_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > simple_item_;
  ::google::protobuf::uint64 oper_value2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageOperationResult* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageShopItem : public ::google::protobuf::MessageLite {
 public:
  SCMessageShopItem();
  virtual ~SCMessageShopItem();

  SCMessageShopItem(const SCMessageShopItem& from);

  inline SCMessageShopItem& operator=(const SCMessageShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageShopItem& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageShopItem* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageShopItem* other);

  // implements Message ----------------------------------------------

  SCMessageShopItem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageShopItem& from);
  void MergeFrom(const SCMessageShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 shop_type = 1;
  inline bool has_shop_type() const;
  inline void clear_shop_type();
  static const int kShopTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 shop_type() const;
  inline void set_shop_type(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::jynetwork::proto::sSimpleItem& item(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_item(int index);
  inline ::jynetwork::proto::sSimpleItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageShopItem)
 private:
  inline void set_has_shop_type();
  inline void clear_has_shop_type();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > item_;
  ::google::protobuf::uint32 shop_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageShopItem* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageBattleSweepReward_RewardInfo : public ::google::protobuf::MessageLite {
 public:
  SCMessageBattleSweepReward_RewardInfo();
  virtual ~SCMessageBattleSweepReward_RewardInfo();

  SCMessageBattleSweepReward_RewardInfo(const SCMessageBattleSweepReward_RewardInfo& from);

  inline SCMessageBattleSweepReward_RewardInfo& operator=(const SCMessageBattleSweepReward_RewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageBattleSweepReward_RewardInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageBattleSweepReward_RewardInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageBattleSweepReward_RewardInfo* other);

  // implements Message ----------------------------------------------

  SCMessageBattleSweepReward_RewardInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageBattleSweepReward_RewardInfo& from);
  void MergeFrom(const SCMessageBattleSweepReward_RewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jynetwork.proto.sPersonEquipStats equip = 1;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 1;
  inline const ::jynetwork::proto::sPersonEquipStats& equip(int index) const;
  inline ::jynetwork::proto::sPersonEquipStats* mutable_equip(int index);
  inline ::jynetwork::proto::sPersonEquipStats* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
      mutable_equip();

  // repeated .jynetwork.proto.sPersonItemStats item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::jynetwork::proto::sPersonItemStats& item(int index) const;
  inline ::jynetwork::proto::sPersonItemStats* mutable_item(int index);
  inline ::jynetwork::proto::sPersonItemStats* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageBattleSweepReward.RewardInfo)
 private:

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats > equip_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageBattleSweepReward_RewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageBattleSweepReward : public ::google::protobuf::MessageLite {
 public:
  SCMessageBattleSweepReward();
  virtual ~SCMessageBattleSweepReward();

  SCMessageBattleSweepReward(const SCMessageBattleSweepReward& from);

  inline SCMessageBattleSweepReward& operator=(const SCMessageBattleSweepReward& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageBattleSweepReward& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageBattleSweepReward* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageBattleSweepReward* other);

  // implements Message ----------------------------------------------

  SCMessageBattleSweepReward* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageBattleSweepReward& from);
  void MergeFrom(const SCMessageBattleSweepReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef SCMessageBattleSweepReward_RewardInfo RewardInfo;

  // accessors -------------------------------------------------------

  // optional uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // optional uint32 difficult = 2;
  inline bool has_difficult() const;
  inline void clear_difficult();
  static const int kDifficultFieldNumber = 2;
  inline ::google::protobuf::uint32 difficult() const;
  inline void set_difficult(::google::protobuf::uint32 value);

  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 battle_money = 4;
  inline bool has_battle_money() const;
  inline void clear_battle_money();
  static const int kBattleMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 battle_money() const;
  inline void set_battle_money(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.SCMessageBattleSweepReward.RewardInfo reward = 5;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline const ::jynetwork::proto::SCMessageBattleSweepReward_RewardInfo& reward(int index) const;
  inline ::jynetwork::proto::SCMessageBattleSweepReward_RewardInfo* mutable_reward(int index);
  inline ::jynetwork::proto::SCMessageBattleSweepReward_RewardInfo* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageBattleSweepReward_RewardInfo >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageBattleSweepReward_RewardInfo >*
      mutable_reward();

  // optional uint32 battle_star = 6;
  inline bool has_battle_star() const;
  inline void clear_battle_star();
  static const int kBattleStarFieldNumber = 6;
  inline ::google::protobuf::uint32 battle_star() const;
  inline void set_battle_star(::google::protobuf::uint32 value);

  // optional uint32 old_level = 7;
  inline bool has_old_level() const;
  inline void clear_old_level();
  static const int kOldLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 old_level() const;
  inline void set_old_level(::google::protobuf::uint32 value);

  // optional uint32 old_exp = 8;
  inline bool has_old_exp() const;
  inline void clear_old_exp();
  static const int kOldExpFieldNumber = 8;
  inline ::google::protobuf::uint32 old_exp() const;
  inline void set_old_exp(::google::protobuf::uint32 value);

  // optional uint32 card_exp = 9;
  inline bool has_card_exp() const;
  inline void clear_card_exp();
  static const int kCardExpFieldNumber = 9;
  inline ::google::protobuf::uint32 card_exp() const;
  inline void set_card_exp(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eOpertionResult result = 10;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 10;
  inline ::jynetwork::proto::eOpertionResult result() const;
  inline void set_result(::jynetwork::proto::eOpertionResult value);

  // optional uint32 catlog = 11;
  inline bool has_catlog() const;
  inline void clear_catlog();
  static const int kCatlogFieldNumber = 11;
  inline ::google::protobuf::uint32 catlog() const;
  inline void set_catlog(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageBattleSweepReward)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_difficult();
  inline void clear_has_difficult();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_battle_money();
  inline void clear_has_battle_money();
  inline void set_has_battle_star();
  inline void clear_has_battle_star();
  inline void set_has_old_level();
  inline void clear_has_old_level();
  inline void set_has_old_exp();
  inline void clear_has_old_exp();
  inline void set_has_card_exp();
  inline void clear_has_card_exp();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_catlog();
  inline void clear_has_catlog();

  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 difficult_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 battle_money_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageBattleSweepReward_RewardInfo > reward_;
  ::google::protobuf::uint32 battle_star_;
  ::google::protobuf::uint32 old_level_;
  ::google::protobuf::uint32 old_exp_;
  ::google::protobuf::uint32 card_exp_;
  int result_;
  ::google::protobuf::uint32 catlog_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageBattleSweepReward* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageBattleRewardEnd : public ::google::protobuf::MessageLite {
 public:
  SCMessageBattleRewardEnd();
  virtual ~SCMessageBattleRewardEnd();

  SCMessageBattleRewardEnd(const SCMessageBattleRewardEnd& from);

  inline SCMessageBattleRewardEnd& operator=(const SCMessageBattleRewardEnd& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageBattleRewardEnd& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageBattleRewardEnd* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageBattleRewardEnd* other);

  // implements Message ----------------------------------------------

  SCMessageBattleRewardEnd* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageBattleRewardEnd& from);
  void MergeFrom(const SCMessageBattleRewardEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // optional uint32 difficult = 2;
  inline bool has_difficult() const;
  inline void clear_difficult();
  static const int kDifficultFieldNumber = 2;
  inline ::google::protobuf::uint32 difficult() const;
  inline void set_difficult(::google::protobuf::uint32 value);

  // optional uint32 catlog = 3;
  inline bool has_catlog() const;
  inline void clear_catlog();
  static const int kCatlogFieldNumber = 3;
  inline ::google::protobuf::uint32 catlog() const;
  inline void set_catlog(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageBattleRewardEnd)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_difficult();
  inline void clear_has_difficult();
  inline void set_has_catlog();
  inline void clear_has_catlog();

  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 difficult_;
  ::google::protobuf::uint32 catlog_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageBattleRewardEnd* default_instance_;
};
// -------------------------------------------------------------------

class sPlayerSave : public ::google::protobuf::MessageLite {
 public:
  sPlayerSave();
  virtual ~sPlayerSave();

  sPlayerSave(const sPlayerSave& from);

  inline sPlayerSave& operator=(const sPlayerSave& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPlayerSave& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPlayerSave* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPlayerSave* other);

  // implements Message ----------------------------------------------

  sPlayerSave* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPlayerSave& from);
  void MergeFrom(const sPlayerSave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jynetwork.proto.SCUserDetailInfo udi = 1;
  inline bool has_udi() const;
  inline void clear_udi();
  static const int kUdiFieldNumber = 1;
  inline const ::jynetwork::proto::SCUserDetailInfo& udi() const;
  inline ::jynetwork::proto::SCUserDetailInfo* mutable_udi();
  inline ::jynetwork::proto::SCUserDetailInfo* release_udi();
  inline void set_allocated_udi(::jynetwork::proto::SCUserDetailInfo* udi);

  // optional .jynetwork.proto.sCastleComplete cc = 2;
  inline bool has_cc() const;
  inline void clear_cc();
  static const int kCcFieldNumber = 2;
  inline const ::jynetwork::proto::sCastleComplete& cc() const;
  inline ::jynetwork::proto::sCastleComplete* mutable_cc();
  inline ::jynetwork::proto::sCastleComplete* release_cc();
  inline void set_allocated_cc(::jynetwork::proto::sCastleComplete* cc);

  // repeated .jynetwork.proto.sPersonEquipStats otherequip = 3;
  inline int otherequip_size() const;
  inline void clear_otherequip();
  static const int kOtherequipFieldNumber = 3;
  inline const ::jynetwork::proto::sPersonEquipStats& otherequip(int index) const;
  inline ::jynetwork::proto::sPersonEquipStats* mutable_otherequip(int index);
  inline ::jynetwork::proto::sPersonEquipStats* add_otherequip();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
      otherequip() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
      mutable_otherequip();

  // optional uint32 version = 4;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 itemdbid = 5;
  inline bool has_itemdbid() const;
  inline void clear_itemdbid();
  static const int kItemdbidFieldNumber = 5;
  inline ::google::protobuf::uint32 itemdbid() const;
  inline void set_itemdbid(::google::protobuf::uint32 value);

  // optional uint32 equipdbid = 6;
  inline bool has_equipdbid() const;
  inline void clear_equipdbid();
  static const int kEquipdbidFieldNumber = 6;
  inline ::google::protobuf::uint32 equipdbid() const;
  inline void set_equipdbid(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sPersonEquipStats dropquip = 7;
  inline int dropquip_size() const;
  inline void clear_dropquip();
  static const int kDropquipFieldNumber = 7;
  inline const ::jynetwork::proto::sPersonEquipStats& dropquip(int index) const;
  inline ::jynetwork::proto::sPersonEquipStats* mutable_dropquip(int index);
  inline ::jynetwork::proto::sPersonEquipStats* add_dropquip();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
      dropquip() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
      mutable_dropquip();

  // repeated .jynetwork.proto.sPersonItemStats dropitem = 8;
  inline int dropitem_size() const;
  inline void clear_dropitem();
  static const int kDropitemFieldNumber = 8;
  inline const ::jynetwork::proto::sPersonItemStats& dropitem(int index) const;
  inline ::jynetwork::proto::sPersonItemStats* mutable_dropitem(int index);
  inline ::jynetwork::proto::sPersonItemStats* add_dropitem();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
      dropitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
      mutable_dropitem();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPlayerSave)
 private:
  inline void set_has_udi();
  inline void clear_has_udi();
  inline void set_has_cc();
  inline void clear_has_cc();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_itemdbid();
  inline void clear_has_itemdbid();
  inline void set_has_equipdbid();
  inline void clear_has_equipdbid();

  ::jynetwork::proto::SCUserDetailInfo* udi_;
  ::jynetwork::proto::sCastleComplete* cc_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats > otherequip_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 itemdbid_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats > dropquip_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats > dropitem_;
  ::google::protobuf::uint32 equipdbid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static sPlayerSave* default_instance_;
};
// -------------------------------------------------------------------

class SCOpponentDetailInfo : public ::google::protobuf::MessageLite {
 public:
  SCOpponentDetailInfo();
  virtual ~SCOpponentDetailInfo();

  SCOpponentDetailInfo(const SCOpponentDetailInfo& from);

  inline SCOpponentDetailInfo& operator=(const SCOpponentDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCOpponentDetailInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCOpponentDetailInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCOpponentDetailInfo* other);

  // implements Message ----------------------------------------------

  SCOpponentDetailInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCOpponentDetailInfo& from);
  void MergeFrom(const SCOpponentDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 acc_id = 1;
  inline bool has_acc_id() const;
  inline void clear_acc_id();
  static const int kAccIdFieldNumber = 1;
  inline ::google::protobuf::uint32 acc_id() const;
  inline void set_acc_id(::google::protobuf::uint32 value);

  // optional bytes sname = 2;
  inline bool has_sname() const;
  inline void clear_sname();
  static const int kSnameFieldNumber = 2;
  inline const ::std::string& sname() const;
  inline void set_sname(const ::std::string& value);
  inline void set_sname(const char* value);
  inline void set_sname(const void* value, size_t size);
  inline ::std::string* mutable_sname();
  inline ::std::string* release_sname();
  inline void set_allocated_sname(::std::string* sname);

  // optional .jynetwork.proto.eCampBelong campbelong = 3;
  inline bool has_campbelong() const;
  inline void clear_campbelong();
  static const int kCampbelongFieldNumber = 3;
  inline ::jynetwork::proto::eCampBelong campbelong() const;
  inline void set_campbelong(::jynetwork::proto::eCampBelong value);

  // optional uint32 guildid = 4;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 4;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional uint32 viplevel = 5;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 5;
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);

  // optional uint32 charslot = 6;
  inline bool has_charslot() const;
  inline void clear_charslot();
  static const int kCharslotFieldNumber = 6;
  inline ::google::protobuf::uint32 charslot() const;
  inline void set_charslot(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sCharactorInit chars = 7;
  inline int chars_size() const;
  inline void clear_chars();
  static const int kCharsFieldNumber = 7;
  inline const ::jynetwork::proto::sCharactorInit& chars(int index) const;
  inline ::jynetwork::proto::sCharactorInit* mutable_chars(int index);
  inline ::jynetwork::proto::sCharactorInit* add_chars();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit >&
      chars() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit >*
      mutable_chars();

  // repeated .jynetwork.proto.sPersonCardStats cards = 8;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 8;
  inline const ::jynetwork::proto::sPersonCardStats& cards(int index) const;
  inline ::jynetwork::proto::sPersonCardStats* mutable_cards(int index);
  inline ::jynetwork::proto::sPersonCardStats* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats >*
      mutable_cards();

  // repeated .jynetwork.proto.sPersonEquipStats equip = 9;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 9;
  inline const ::jynetwork::proto::sPersonEquipStats& equip(int index) const;
  inline ::jynetwork::proto::sPersonEquipStats* mutable_equip(int index);
  inline ::jynetwork::proto::sPersonEquipStats* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
      mutable_equip();

  // repeated .jynetwork.proto.sPersonSkillStats skills = 10;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 10;
  inline const ::jynetwork::proto::sPersonSkillStats& skills(int index) const;
  inline ::jynetwork::proto::sPersonSkillStats* mutable_skills(int index);
  inline ::jynetwork::proto::sPersonSkillStats* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats >*
      mutable_skills();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCOpponentDetailInfo)
 private:
  inline void set_has_acc_id();
  inline void clear_has_acc_id();
  inline void set_has_sname();
  inline void clear_has_sname();
  inline void set_has_campbelong();
  inline void clear_has_campbelong();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_charslot();
  inline void clear_has_charslot();

  ::std::string* sname_;
  ::google::protobuf::uint32 acc_id_;
  int campbelong_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 viplevel_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit > chars_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats > cards_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats > equip_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats > skills_;
  ::google::protobuf::uint32 charslot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCOpponentDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class SCQueryDetailInfo : public ::google::protobuf::MessageLite {
 public:
  SCQueryDetailInfo();
  virtual ~SCQueryDetailInfo();

  SCQueryDetailInfo(const SCQueryDetailInfo& from);

  inline SCQueryDetailInfo& operator=(const SCQueryDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCQueryDetailInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCQueryDetailInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCQueryDetailInfo* other);

  // implements Message ----------------------------------------------

  SCQueryDetailInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCQueryDetailInfo& from);
  void MergeFrom(const SCQueryDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 acc_id = 1;
  inline bool has_acc_id() const;
  inline void clear_acc_id();
  static const int kAccIdFieldNumber = 1;
  inline ::google::protobuf::uint32 acc_id() const;
  inline void set_acc_id(::google::protobuf::uint32 value);

  // optional bytes sname = 2;
  inline bool has_sname() const;
  inline void clear_sname();
  static const int kSnameFieldNumber = 2;
  inline const ::std::string& sname() const;
  inline void set_sname(const ::std::string& value);
  inline void set_sname(const char* value);
  inline void set_sname(const void* value, size_t size);
  inline ::std::string* mutable_sname();
  inline ::std::string* release_sname();
  inline void set_allocated_sname(::std::string* sname);

  // optional uint32 guildid = 4;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 4;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional uint32 viplevel = 5;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 5;
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);

  // optional uint32 char_lv = 14;
  inline bool has_char_lv() const;
  inline void clear_char_lv();
  static const int kCharLvFieldNumber = 14;
  inline ::google::protobuf::uint32 char_lv() const;
  inline void set_char_lv(::google::protobuf::uint32 value);

  // optional uint32 is_ai = 23;
  inline bool has_is_ai() const;
  inline void clear_is_ai();
  static const int kIsAiFieldNumber = 23;
  inline ::google::protobuf::uint32 is_ai() const;
  inline void set_is_ai(::google::protobuf::uint32 value);

  // optional uint32 charslot = 6;
  inline bool has_charslot() const;
  inline void clear_charslot();
  static const int kCharslotFieldNumber = 6;
  inline ::google::protobuf::uint32 charslot() const;
  inline void set_charslot(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sCharactorInit chars = 7;
  inline int chars_size() const;
  inline void clear_chars();
  static const int kCharsFieldNumber = 7;
  inline const ::jynetwork::proto::sCharactorInit& chars(int index) const;
  inline ::jynetwork::proto::sCharactorInit* mutable_chars(int index);
  inline ::jynetwork::proto::sCharactorInit* add_chars();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit >&
      chars() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit >*
      mutable_chars();

  // repeated .jynetwork.proto.sPersonCardStats cards = 8;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 8;
  inline const ::jynetwork::proto::sPersonCardStats& cards(int index) const;
  inline ::jynetwork::proto::sPersonCardStats* mutable_cards(int index);
  inline ::jynetwork::proto::sPersonCardStats* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats >*
      mutable_cards();

  // repeated .jynetwork.proto.sPersonEquipStats equip = 9;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 9;
  inline const ::jynetwork::proto::sPersonEquipStats& equip(int index) const;
  inline ::jynetwork::proto::sPersonEquipStats* mutable_equip(int index);
  inline ::jynetwork::proto::sPersonEquipStats* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
      mutable_equip();

  // repeated .jynetwork.proto.sPersonSkillStats skills = 10;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 10;
  inline const ::jynetwork::proto::sPersonSkillStats& skills(int index) const;
  inline ::jynetwork::proto::sPersonSkillStats* mutable_skills(int index);
  inline ::jynetwork::proto::sPersonSkillStats* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats >*
      mutable_skills();

  // optional uint32 query_type = 11;
  inline bool has_query_type() const;
  inline void clear_query_type();
  static const int kQueryTypeFieldNumber = 11;
  inline ::google::protobuf::uint32 query_type() const;
  inline void set_query_type(::google::protobuf::uint32 value);

  // optional uint32 query_job = 12;
  inline bool has_query_job() const;
  inline void clear_query_job();
  static const int kQueryJobFieldNumber = 12;
  inline ::google::protobuf::uint32 query_job() const;
  inline void set_query_job(::google::protobuf::uint32 value);

  // optional uint32 my_acc_id = 13;
  inline bool has_my_acc_id() const;
  inline void clear_my_acc_id();
  static const int kMyAccIdFieldNumber = 13;
  inline ::google::protobuf::uint32 my_acc_id() const;
  inline void set_my_acc_id(::google::protobuf::uint32 value);

  // optional uint32 char_power = 15;
  inline bool has_char_power() const;
  inline void clear_char_power();
  static const int kCharPowerFieldNumber = 15;
  inline ::google::protobuf::uint32 char_power() const;
  inline void set_char_power(::google::protobuf::uint32 value);

  // optional uint32 position = 16;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 16;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // optional uint32 cost_stamina = 17;
  inline bool has_cost_stamina() const;
  inline void clear_cost_stamina();
  static const int kCostStaminaFieldNumber = 17;
  inline ::google::protobuf::uint32 cost_stamina() const;
  inline void set_cost_stamina(::google::protobuf::uint32 value);

  // optional uint32 char_power_1 = 18;
  inline bool has_char_power_1() const;
  inline void clear_char_power_1();
  static const int kCharPower1FieldNumber = 18;
  inline ::google::protobuf::uint32 char_power_1() const;
  inline void set_char_power_1(::google::protobuf::uint32 value);

  // optional uint32 char_power_2 = 19;
  inline bool has_char_power_2() const;
  inline void clear_char_power_2();
  static const int kCharPower2FieldNumber = 19;
  inline ::google::protobuf::uint32 char_power_2() const;
  inline void set_char_power_2(::google::protobuf::uint32 value);

  // optional uint32 char_power_3 = 20;
  inline bool has_char_power_3() const;
  inline void clear_char_power_3();
  static const int kCharPower3FieldNumber = 20;
  inline ::google::protobuf::uint32 char_power_3() const;
  inline void set_char_power_3(::google::protobuf::uint32 value);

  // optional uint32 local_name = 21;
  inline bool has_local_name() const;
  inline void clear_local_name();
  static const int kLocalNameFieldNumber = 21;
  inline ::google::protobuf::uint32 local_name() const;
  inline void set_local_name(::google::protobuf::uint32 value);

  // optional uint32 max_hard_stage = 22;
  inline bool has_max_hard_stage() const;
  inline void clear_max_hard_stage();
  static const int kMaxHardStageFieldNumber = 22;
  inline ::google::protobuf::uint32 max_hard_stage() const;
  inline void set_max_hard_stage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCQueryDetailInfo)
 private:
  inline void set_has_acc_id();
  inline void clear_has_acc_id();
  inline void set_has_sname();
  inline void clear_has_sname();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_char_lv();
  inline void clear_has_char_lv();
  inline void set_has_is_ai();
  inline void clear_has_is_ai();
  inline void set_has_charslot();
  inline void clear_has_charslot();
  inline void set_has_query_type();
  inline void clear_has_query_type();
  inline void set_has_query_job();
  inline void clear_has_query_job();
  inline void set_has_my_acc_id();
  inline void clear_has_my_acc_id();
  inline void set_has_char_power();
  inline void clear_has_char_power();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_cost_stamina();
  inline void clear_has_cost_stamina();
  inline void set_has_char_power_1();
  inline void clear_has_char_power_1();
  inline void set_has_char_power_2();
  inline void clear_has_char_power_2();
  inline void set_has_char_power_3();
  inline void clear_has_char_power_3();
  inline void set_has_local_name();
  inline void clear_has_local_name();
  inline void set_has_max_hard_stage();
  inline void clear_has_max_hard_stage();

  ::std::string* sname_;
  ::google::protobuf::uint32 acc_id_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 viplevel_;
  ::google::protobuf::uint32 char_lv_;
  ::google::protobuf::uint32 is_ai_;
  ::google::protobuf::uint32 charslot_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit > chars_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats > cards_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats > equip_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats > skills_;
  ::google::protobuf::uint32 query_type_;
  ::google::protobuf::uint32 query_job_;
  ::google::protobuf::uint32 my_acc_id_;
  ::google::protobuf::uint32 char_power_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 cost_stamina_;
  ::google::protobuf::uint32 char_power_1_;
  ::google::protobuf::uint32 char_power_2_;
  ::google::protobuf::uint32 char_power_3_;
  ::google::protobuf::uint32 local_name_;
  ::google::protobuf::uint32 max_hard_stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCQueryDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class SCMessagePong : public ::google::protobuf::MessageLite {
 public:
  SCMessagePong();
  virtual ~SCMessagePong();

  SCMessagePong(const SCMessagePong& from);

  inline SCMessagePong& operator=(const SCMessagePong& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessagePong& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessagePong* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessagePong* other);

  // implements Message ----------------------------------------------

  SCMessagePong* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessagePong& from);
  void MergeFrom(const SCMessagePong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessagePong)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::uint32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessagePong* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageBattlePrepare : public ::google::protobuf::MessageLite {
 public:
  SCMessageBattlePrepare();
  virtual ~SCMessageBattlePrepare();

  SCMessageBattlePrepare(const SCMessageBattlePrepare& from);

  inline SCMessageBattlePrepare& operator=(const SCMessageBattlePrepare& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageBattlePrepare& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageBattlePrepare* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageBattlePrepare* other);

  // implements Message ----------------------------------------------

  SCMessageBattlePrepare* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageBattlePrepare& from);
  void MergeFrom(const SCMessageBattlePrepare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // optional uint32 rand_num = 2;
  inline bool has_rand_num() const;
  inline void clear_rand_num();
  static const int kRandNumFieldNumber = 2;
  inline ::google::protobuf::uint32 rand_num() const;
  inline void set_rand_num(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sPersonEquipStats equip = 3;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 3;
  inline const ::jynetwork::proto::sPersonEquipStats& equip(int index) const;
  inline ::jynetwork::proto::sPersonEquipStats* mutable_equip(int index);
  inline ::jynetwork::proto::sPersonEquipStats* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
      mutable_equip();

  // repeated .jynetwork.proto.sPersonItemStats item = 4;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::jynetwork::proto::sPersonItemStats& item(int index) const;
  inline ::jynetwork::proto::sPersonItemStats* mutable_item(int index);
  inline ::jynetwork::proto::sPersonItemStats* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
      mutable_item();

  // optional uint32 difficult = 5;
  inline bool has_difficult() const;
  inline void clear_difficult();
  static const int kDifficultFieldNumber = 5;
  inline ::google::protobuf::uint32 difficult() const;
  inline void set_difficult(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eOpertionResult result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline ::jynetwork::proto::eOpertionResult result() const;
  inline void set_result(::jynetwork::proto::eOpertionResult value);

  // optional uint32 dropmiddle = 7;
  inline bool has_dropmiddle() const;
  inline void clear_dropmiddle();
  static const int kDropmiddleFieldNumber = 7;
  inline ::google::protobuf::uint32 dropmiddle() const;
  inline void set_dropmiddle(::google::protobuf::uint32 value);

  // optional uint32 dropgoblin = 8;
  inline bool has_dropgoblin() const;
  inline void clear_dropgoblin();
  static const int kDropgoblinFieldNumber = 8;
  inline ::google::protobuf::uint32 dropgoblin() const;
  inline void set_dropgoblin(::google::protobuf::uint32 value);

  // optional uint32 total_money = 9;
  inline bool has_total_money() const;
  inline void clear_total_money();
  static const int kTotalMoneyFieldNumber = 9;
  inline ::google::protobuf::uint32 total_money() const;
  inline void set_total_money(::google::protobuf::uint32 value);

  // optional uint32 catlog = 10;
  inline bool has_catlog() const;
  inline void clear_catlog();
  static const int kCatlogFieldNumber = 10;
  inline ::google::protobuf::uint32 catlog() const;
  inline void set_catlog(::google::protobuf::uint32 value);

  // optional uint32 start_pos = 11;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 11;
  inline ::google::protobuf::uint32 start_pos() const;
  inline void set_start_pos(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.SCQueryDetailInfo friend_detail = 12;
  inline int friend_detail_size() const;
  inline void clear_friend_detail();
  static const int kFriendDetailFieldNumber = 12;
  inline const ::jynetwork::proto::SCQueryDetailInfo& friend_detail(int index) const;
  inline ::jynetwork::proto::SCQueryDetailInfo* mutable_friend_detail(int index);
  inline ::jynetwork::proto::SCQueryDetailInfo* add_friend_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >&
      friend_detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >*
      mutable_friend_detail();

  // repeated .jynetwork.proto.SCQueryDetailInfo oppo_detail = 13;
  inline int oppo_detail_size() const;
  inline void clear_oppo_detail();
  static const int kOppoDetailFieldNumber = 13;
  inline const ::jynetwork::proto::SCQueryDetailInfo& oppo_detail(int index) const;
  inline ::jynetwork::proto::SCQueryDetailInfo* mutable_oppo_detail(int index);
  inline ::jynetwork::proto::SCQueryDetailInfo* add_oppo_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >&
      oppo_detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >*
      mutable_oppo_detail();

  // optional int32 posx = 14;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 14;
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 posy = 15;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 15;
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // optional uint32 group = 16;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 16;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional uint32 endless_money = 17;
  inline bool has_endless_money() const;
  inline void clear_endless_money();
  static const int kEndlessMoneyFieldNumber = 17;
  inline ::google::protobuf::uint32 endless_money() const;
  inline void set_endless_money(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.sGameStats arena_stats = 18;
  inline bool has_arena_stats() const;
  inline void clear_arena_stats();
  static const int kArenaStatsFieldNumber = 18;
  inline const ::jynetwork::proto::sGameStats& arena_stats() const;
  inline ::jynetwork::proto::sGameStats* mutable_arena_stats();
  inline ::jynetwork::proto::sGameStats* release_arena_stats();
  inline void set_allocated_arena_stats(::jynetwork::proto::sGameStats* arena_stats);

  // optional uint32 monster_lv = 19;
  inline bool has_monster_lv() const;
  inline void clear_monster_lv();
  static const int kMonsterLvFieldNumber = 19;
  inline ::google::protobuf::uint32 monster_lv() const;
  inline void set_monster_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageBattlePrepare)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_rand_num();
  inline void clear_has_rand_num();
  inline void set_has_difficult();
  inline void clear_has_difficult();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_dropmiddle();
  inline void clear_has_dropmiddle();
  inline void set_has_dropgoblin();
  inline void clear_has_dropgoblin();
  inline void set_has_total_money();
  inline void clear_has_total_money();
  inline void set_has_catlog();
  inline void clear_has_catlog();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_endless_money();
  inline void clear_has_endless_money();
  inline void set_has_arena_stats();
  inline void clear_has_arena_stats();
  inline void set_has_monster_lv();
  inline void clear_has_monster_lv();

  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 rand_num_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats > equip_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats > item_;
  ::google::protobuf::uint32 difficult_;
  int result_;
  ::google::protobuf::uint32 dropmiddle_;
  ::google::protobuf::uint32 dropgoblin_;
  ::google::protobuf::uint32 total_money_;
  ::google::protobuf::uint32 catlog_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo > friend_detail_;
  ::google::protobuf::uint32 start_pos_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo > oppo_detail_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::uint32 group_;
  ::jynetwork::proto::sGameStats* arena_stats_;
  ::google::protobuf::uint32 endless_money_;
  ::google::protobuf::uint32 monster_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageBattlePrepare* default_instance_;
};
// -------------------------------------------------------------------

class SysNotice : public ::google::protobuf::MessageLite {
 public:
  SysNotice();
  virtual ~SysNotice();

  SysNotice(const SysNotice& from);

  inline SysNotice& operator=(const SysNotice& from) {
    CopyFrom(from);
    return *this;
  }

  static const SysNotice& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SysNotice* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SysNotice* other);

  // implements Message ----------------------------------------------

  SysNotice* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SysNotice& from);
  void MergeFrom(const SysNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes sname = 1;
  inline bool has_sname() const;
  inline void clear_sname();
  static const int kSnameFieldNumber = 1;
  inline const ::std::string& sname() const;
  inline void set_sname(const ::std::string& value);
  inline void set_sname(const char* value);
  inline void set_sname(const void* value, size_t size);
  inline ::std::string* mutable_sname();
  inline ::std::string* release_sname();
  inline void set_allocated_sname(::std::string* sname);

  // optional int32 lang_id = 2;
  inline bool has_lang_id() const;
  inline void clear_lang_id();
  static const int kLangIdFieldNumber = 2;
  inline ::google::protobuf::int32 lang_id() const;
  inline void set_lang_id(::google::protobuf::int32 value);

  // optional int32 value1 = 3;
  inline bool has_value1() const;
  inline void clear_value1();
  static const int kValue1FieldNumber = 3;
  inline ::google::protobuf::int32 value1() const;
  inline void set_value1(::google::protobuf::int32 value);

  // optional int32 value2 = 4;
  inline bool has_value2() const;
  inline void clear_value2();
  static const int kValue2FieldNumber = 4;
  inline ::google::protobuf::int32 value2() const;
  inline void set_value2(::google::protobuf::int32 value);

  // optional bytes value3 = 5;
  inline bool has_value3() const;
  inline void clear_value3();
  static const int kValue3FieldNumber = 5;
  inline const ::std::string& value3() const;
  inline void set_value3(const ::std::string& value);
  inline void set_value3(const char* value);
  inline void set_value3(const void* value, size_t size);
  inline ::std::string* mutable_value3();
  inline ::std::string* release_value3();
  inline void set_allocated_value3(::std::string* value3);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SysNotice)
 private:
  inline void set_has_sname();
  inline void clear_has_sname();
  inline void set_has_lang_id();
  inline void clear_has_lang_id();
  inline void set_has_value1();
  inline void clear_has_value1();
  inline void set_has_value2();
  inline void clear_has_value2();
  inline void set_has_value3();
  inline void clear_has_value3();

  ::std::string* sname_;
  ::google::protobuf::int32 lang_id_;
  ::google::protobuf::int32 value1_;
  ::std::string* value3_;
  ::google::protobuf::int32 value2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SysNotice* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageSysNotice : public ::google::protobuf::MessageLite {
 public:
  SCMessageSysNotice();
  virtual ~SCMessageSysNotice();

  SCMessageSysNotice(const SCMessageSysNotice& from);

  inline SCMessageSysNotice& operator=(const SCMessageSysNotice& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageSysNotice& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageSysNotice* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageSysNotice* other);

  // implements Message ----------------------------------------------

  SCMessageSysNotice* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageSysNotice& from);
  void MergeFrom(const SCMessageSysNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jynetwork.proto.SysNotice equip = 1;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 1;
  inline const ::jynetwork::proto::SysNotice& equip(int index) const;
  inline ::jynetwork::proto::SysNotice* mutable_equip(int index);
  inline ::jynetwork::proto::SysNotice* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SysNotice >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SysNotice >*
      mutable_equip();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageSysNotice)
 private:

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SysNotice > equip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageSysNotice* default_instance_;
};
// -------------------------------------------------------------------

class SysMail : public ::google::protobuf::MessageLite {
 public:
  SysMail();
  virtual ~SysMail();

  SysMail(const SysMail& from);

  inline SysMail& operator=(const SysMail& from) {
    CopyFrom(from);
    return *this;
  }

  static const SysMail& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SysMail* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SysMail* other);

  // implements Message ----------------------------------------------

  SysMail* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SysMail& from);
  void MergeFrom(const SysMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::int64 mail_id() const;
  inline void set_mail_id(::google::protobuf::int64 value);

  // optional bytes mail_title = 2;
  inline bool has_mail_title() const;
  inline void clear_mail_title();
  static const int kMailTitleFieldNumber = 2;
  inline const ::std::string& mail_title() const;
  inline void set_mail_title(const ::std::string& value);
  inline void set_mail_title(const char* value);
  inline void set_mail_title(const void* value, size_t size);
  inline ::std::string* mutable_mail_title();
  inline ::std::string* release_mail_title();
  inline void set_allocated_mail_title(::std::string* mail_title);

  // optional bytes mail_content = 3;
  inline bool has_mail_content() const;
  inline void clear_mail_content();
  static const int kMailContentFieldNumber = 3;
  inline const ::std::string& mail_content() const;
  inline void set_mail_content(const ::std::string& value);
  inline void set_mail_content(const char* value);
  inline void set_mail_content(const void* value, size_t size);
  inline ::std::string* mutable_mail_content();
  inline ::std::string* release_mail_content();
  inline void set_allocated_mail_content(::std::string* mail_content);

  // optional uint32 mail_item = 4;
  inline bool has_mail_item() const;
  inline void clear_mail_item();
  static const int kMailItemFieldNumber = 4;
  inline ::google::protobuf::uint32 mail_item() const;
  inline void set_mail_item(::google::protobuf::uint32 value);

  // optional int32 has_read = 5;
  inline bool has_has_read() const;
  inline void clear_has_read();
  static const int kHasReadFieldNumber = 5;
  inline ::google::protobuf::int32 has_read() const;
  inline void set_has_read(::google::protobuf::int32 value);

  // optional int32 mail_type = 6;
  inline bool has_mail_type() const;
  inline void clear_mail_type();
  static const int kMailTypeFieldNumber = 6;
  inline ::google::protobuf::int32 mail_type() const;
  inline void set_mail_type(::google::protobuf::int32 value);

  // repeated .jynetwork.proto.sSimpleItem reward_item = 7;
  inline int reward_item_size() const;
  inline void clear_reward_item();
  static const int kRewardItemFieldNumber = 7;
  inline const ::jynetwork::proto::sSimpleItem& reward_item(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_reward_item(int index);
  inline ::jynetwork::proto::sSimpleItem* add_reward_item();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      reward_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_reward_item();

  // optional .jynetwork.proto.ePersonalOpertionType oper = 8;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 8;
  inline ::jynetwork::proto::ePersonalOpertionType oper() const;
  inline void set_oper(::jynetwork::proto::ePersonalOpertionType value);

  // optional int32 map_id = 9;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 9;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SysMail)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_mail_title();
  inline void clear_has_mail_title();
  inline void set_has_mail_content();
  inline void clear_has_mail_content();
  inline void set_has_mail_item();
  inline void clear_has_mail_item();
  inline void set_has_has_read();
  inline void clear_has_has_read();
  inline void set_has_mail_type();
  inline void clear_has_mail_type();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_map_id();
  inline void clear_has_map_id();

  ::google::protobuf::int64 mail_id_;
  ::std::string* mail_title_;
  ::std::string* mail_content_;
  ::google::protobuf::uint32 mail_item_;
  ::google::protobuf::int32 has_read_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > reward_item_;
  ::google::protobuf::int32 mail_type_;
  int oper_;
  ::google::protobuf::int32 map_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SysMail* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageMail : public ::google::protobuf::MessageLite {
 public:
  SCMessageMail();
  virtual ~SCMessageMail();

  SCMessageMail(const SCMessageMail& from);

  inline SCMessageMail& operator=(const SCMessageMail& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageMail& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageMail* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageMail* other);

  // implements Message ----------------------------------------------

  SCMessageMail* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageMail& from);
  void MergeFrom(const SCMessageMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jynetwork.proto.SysMail mail = 1;
  inline int mail_size() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 1;
  inline const ::jynetwork::proto::SysMail& mail(int index) const;
  inline ::jynetwork::proto::SysMail* mutable_mail(int index);
  inline ::jynetwork::proto::SysMail* add_mail();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SysMail >&
      mail() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SysMail >*
      mutable_mail();

  // optional int32 is_last_one = 2;
  inline bool has_is_last_one() const;
  inline void clear_is_last_one();
  static const int kIsLastOneFieldNumber = 2;
  inline ::google::protobuf::int32 is_last_one() const;
  inline void set_is_last_one(::google::protobuf::int32 value);

  // optional int32 has_new_mail = 3;
  inline bool has_has_new_mail() const;
  inline void clear_has_new_mail();
  static const int kHasNewMailFieldNumber = 3;
  inline ::google::protobuf::int32 has_new_mail() const;
  inline void set_has_new_mail(::google::protobuf::int32 value);

  // optional int32 new_mail_type = 4;
  inline bool has_new_mail_type() const;
  inline void clear_new_mail_type();
  static const int kNewMailTypeFieldNumber = 4;
  inline ::google::protobuf::int32 new_mail_type() const;
  inline void set_new_mail_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageMail)
 private:
  inline void set_has_is_last_one();
  inline void clear_has_is_last_one();
  inline void set_has_has_new_mail();
  inline void clear_has_has_new_mail();
  inline void set_has_new_mail_type();
  inline void clear_has_new_mail_type();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SysMail > mail_;
  ::google::protobuf::int32 is_last_one_;
  ::google::protobuf::int32 has_new_mail_;
  ::google::protobuf::int32 new_mail_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageMail* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageRankList_RankInfo : public ::google::protobuf::MessageLite {
 public:
  SCMessageRankList_RankInfo();
  virtual ~SCMessageRankList_RankInfo();

  SCMessageRankList_RankInfo(const SCMessageRankList_RankInfo& from);

  inline SCMessageRankList_RankInfo& operator=(const SCMessageRankList_RankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageRankList_RankInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageRankList_RankInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageRankList_RankInfo* other);

  // implements Message ----------------------------------------------

  SCMessageRankList_RankInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageRankList_RankInfo& from);
  void MergeFrom(const SCMessageRankList_RankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 char_id = 1;
  inline bool has_char_id() const;
  inline void clear_char_id();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 char_id() const;
  inline void set_char_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 job = 6;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 6;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 rank_value = 7;
  inline bool has_rank_value() const;
  inline void clear_rank_value();
  static const int kRankValueFieldNumber = 7;
  inline ::google::protobuf::uint32 rank_value() const;
  inline void set_rank_value(::google::protobuf::uint32 value);

  // optional uint32 corps_id = 8;
  inline bool has_corps_id() const;
  inline void clear_corps_id();
  static const int kCorpsIdFieldNumber = 8;
  inline ::google::protobuf::uint32 corps_id() const;
  inline void set_corps_id(::google::protobuf::uint32 value);

  // optional uint64 rank_value2 = 9;
  inline bool has_rank_value2() const;
  inline void clear_rank_value2();
  static const int kRankValue2FieldNumber = 9;
  inline ::google::protobuf::uint64 rank_value2() const;
  inline void set_rank_value2(::google::protobuf::uint64 value);

  // optional uint64 rank_value3 = 10;
  inline bool has_rank_value3() const;
  inline void clear_rank_value3();
  static const int kRankValue3FieldNumber = 10;
  inline ::google::protobuf::uint64 rank_value3() const;
  inline void set_rank_value3(::google::protobuf::uint64 value);

  // optional uint64 rank_value4 = 11;
  inline bool has_rank_value4() const;
  inline void clear_rank_value4();
  static const int kRankValue4FieldNumber = 11;
  inline ::google::protobuf::uint64 rank_value4() const;
  inline void set_rank_value4(::google::protobuf::uint64 value);

  // optional bytes rank_value5 = 12;
  inline bool has_rank_value5() const;
  inline void clear_rank_value5();
  static const int kRankValue5FieldNumber = 12;
  inline const ::std::string& rank_value5() const;
  inline void set_rank_value5(const ::std::string& value);
  inline void set_rank_value5(const char* value);
  inline void set_rank_value5(const void* value, size_t size);
  inline ::std::string* mutable_rank_value5();
  inline ::std::string* release_rank_value5();
  inline void set_allocated_rank_value5(::std::string* rank_value5);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageRankList.RankInfo)
 private:
  inline void set_has_char_id();
  inline void clear_has_char_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_rank_value();
  inline void clear_has_rank_value();
  inline void set_has_corps_id();
  inline void clear_has_corps_id();
  inline void set_has_rank_value2();
  inline void clear_has_rank_value2();
  inline void set_has_rank_value3();
  inline void clear_has_rank_value3();
  inline void set_has_rank_value4();
  inline void clear_has_rank_value4();
  inline void set_has_rank_value5();
  inline void clear_has_rank_value5();

  ::std::string* name_;
  ::google::protobuf::uint32 char_id_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 rank_value_;
  ::google::protobuf::uint64 rank_value2_;
  ::google::protobuf::uint64 rank_value3_;
  ::google::protobuf::uint64 rank_value4_;
  ::std::string* rank_value5_;
  ::google::protobuf::uint32 corps_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageRankList_RankInfo* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageRankList : public ::google::protobuf::MessageLite {
 public:
  SCMessageRankList();
  virtual ~SCMessageRankList();

  SCMessageRankList(const SCMessageRankList& from);

  inline SCMessageRankList& operator=(const SCMessageRankList& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageRankList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageRankList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageRankList* other);

  // implements Message ----------------------------------------------

  SCMessageRankList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageRankList& from);
  void MergeFrom(const SCMessageRankList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef SCMessageRankList_RankInfo RankInfo;

  // accessors -------------------------------------------------------

  // repeated .jynetwork.proto.SCMessageRankList.RankInfo rank_info = 1;
  inline int rank_info_size() const;
  inline void clear_rank_info();
  static const int kRankInfoFieldNumber = 1;
  inline const ::jynetwork::proto::SCMessageRankList_RankInfo& rank_info(int index) const;
  inline ::jynetwork::proto::SCMessageRankList_RankInfo* mutable_rank_info(int index);
  inline ::jynetwork::proto::SCMessageRankList_RankInfo* add_rank_info();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageRankList_RankInfo >&
      rank_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageRankList_RankInfo >*
      mutable_rank_info();

  // optional bytes rank_time = 2;
  inline bool has_rank_time() const;
  inline void clear_rank_time();
  static const int kRankTimeFieldNumber = 2;
  inline const ::std::string& rank_time() const;
  inline void set_rank_time(const ::std::string& value);
  inline void set_rank_time(const char* value);
  inline void set_rank_time(const void* value, size_t size);
  inline ::std::string* mutable_rank_time();
  inline ::std::string* release_rank_time();
  inline void set_allocated_rank_time(::std::string* rank_time);

  // optional uint32 my_rank = 3;
  inline bool has_my_rank() const;
  inline void clear_my_rank();
  static const int kMyRankFieldNumber = 3;
  inline ::google::protobuf::uint32 my_rank() const;
  inline void set_my_rank(::google::protobuf::uint32 value);

  // optional uint32 page = 4;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 4;
  inline ::google::protobuf::uint32 page() const;
  inline void set_page(::google::protobuf::uint32 value);

  // optional uint32 rank_type = 5;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 rank_type() const;
  inline void set_rank_type(::google::protobuf::uint32 value);

  // optional float boss_hp = 6;
  inline bool has_boss_hp() const;
  inline void clear_boss_hp();
  static const int kBossHpFieldNumber = 6;
  inline float boss_hp() const;
  inline void set_boss_hp(float value);

  // optional uint32 remain_boss_time = 7;
  inline bool has_remain_boss_time() const;
  inline void clear_remain_boss_time();
  static const int kRemainBossTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 remain_boss_time() const;
  inline void set_remain_boss_time(::google::protobuf::uint32 value);

  // optional uint64 arena_score = 8;
  inline bool has_arena_score() const;
  inline void clear_arena_score();
  static const int kArenaScoreFieldNumber = 8;
  inline ::google::protobuf::uint64 arena_score() const;
  inline void set_arena_score(::google::protobuf::uint64 value);

  // optional uint64 arena_rank = 9;
  inline bool has_arena_rank() const;
  inline void clear_arena_rank();
  static const int kArenaRankFieldNumber = 9;
  inline ::google::protobuf::uint64 arena_rank() const;
  inline void set_arena_rank(::google::protobuf::uint64 value);

  // optional uint64 arena_rank_old = 10;
  inline bool has_arena_rank_old() const;
  inline void clear_arena_rank_old();
  static const int kArenaRankOldFieldNumber = 10;
  inline ::google::protobuf::uint64 arena_rank_old() const;
  inline void set_arena_rank_old(::google::protobuf::uint64 value);

  // optional uint64 arena_cd = 11;
  inline bool has_arena_cd() const;
  inline void clear_arena_cd();
  static const int kArenaCdFieldNumber = 11;
  inline ::google::protobuf::uint64 arena_cd() const;
  inline void set_arena_cd(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageRankList)
 private:
  inline void set_has_rank_time();
  inline void clear_has_rank_time();
  inline void set_has_my_rank();
  inline void clear_has_my_rank();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_boss_hp();
  inline void clear_has_boss_hp();
  inline void set_has_remain_boss_time();
  inline void clear_has_remain_boss_time();
  inline void set_has_arena_score();
  inline void clear_has_arena_score();
  inline void set_has_arena_rank();
  inline void clear_has_arena_rank();
  inline void set_has_arena_rank_old();
  inline void clear_has_arena_rank_old();
  inline void set_has_arena_cd();
  inline void clear_has_arena_cd();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageRankList_RankInfo > rank_info_;
  ::std::string* rank_time_;
  ::google::protobuf::uint32 my_rank_;
  ::google::protobuf::uint32 page_;
  ::google::protobuf::uint32 rank_type_;
  float boss_hp_;
  ::google::protobuf::uint64 arena_score_;
  ::google::protobuf::uint64 arena_rank_;
  ::google::protobuf::uint64 arena_rank_old_;
  ::google::protobuf::uint64 arena_cd_;
  ::google::protobuf::uint32 remain_boss_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageRankList* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageBattleCheck : public ::google::protobuf::MessageLite {
 public:
  SCMessageBattleCheck();
  virtual ~SCMessageBattleCheck();

  SCMessageBattleCheck(const SCMessageBattleCheck& from);

  inline SCMessageBattleCheck& operator=(const SCMessageBattleCheck& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageBattleCheck& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageBattleCheck* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageBattleCheck* other);

  // implements Message ----------------------------------------------

  SCMessageBattleCheck* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageBattleCheck& from);
  void MergeFrom(const SCMessageBattleCheck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 check_id = 1;
  inline bool has_check_id() const;
  inline void clear_check_id();
  static const int kCheckIdFieldNumber = 1;
  inline ::google::protobuf::uint32 check_id() const;
  inline void set_check_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageBattleCheck)
 private:
  inline void set_has_check_id();
  inline void clear_has_check_id();

  ::google::protobuf::uint32 check_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageBattleCheck* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageCorpsOper : public ::google::protobuf::MessageLite {
 public:
  SCMessageCorpsOper();
  virtual ~SCMessageCorpsOper();

  SCMessageCorpsOper(const SCMessageCorpsOper& from);

  inline SCMessageCorpsOper& operator=(const SCMessageCorpsOper& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageCorpsOper& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageCorpsOper* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageCorpsOper* other);

  // implements Message ----------------------------------------------

  SCMessageCorpsOper* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageCorpsOper& from);
  void MergeFrom(const SCMessageCorpsOper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .jynetwork.proto.eCorpsOpertionType oper = 1;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 1;
  inline ::jynetwork::proto::eCorpsOpertionType oper() const;
  inline void set_oper(::jynetwork::proto::eCorpsOpertionType value);

  // optional uint32 corps_id = 2;
  inline bool has_corps_id() const;
  inline void clear_corps_id();
  static const int kCorpsIdFieldNumber = 2;
  inline ::google::protobuf::uint32 corps_id() const;
  inline void set_corps_id(::google::protobuf::uint32 value);

  // optional uint32 char_id = 3;
  inline bool has_char_id() const;
  inline void clear_char_id();
  static const int kCharIdFieldNumber = 3;
  inline ::google::protobuf::uint32 char_id() const;
  inline void set_char_id(::google::protobuf::uint32 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .jynetwork.proto.eOpertionResult result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::jynetwork::proto::eOpertionResult result() const;
  inline void set_result(::jynetwork::proto::eOpertionResult value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageCorpsOper)
 private:
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_corps_id();
  inline void clear_has_corps_id();
  inline void set_has_char_id();
  inline void clear_has_char_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_result();
  inline void clear_has_result();

  int oper_;
  ::google::protobuf::uint32 corps_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 char_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageCorpsOper* default_instance_;
};
// -------------------------------------------------------------------

class CorpsInfo : public ::google::protobuf::MessageLite {
 public:
  CorpsInfo();
  virtual ~CorpsInfo();

  CorpsInfo(const CorpsInfo& from);

  inline CorpsInfo& operator=(const CorpsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CorpsInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CorpsInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CorpsInfo* other);

  // implements Message ----------------------------------------------

  CorpsInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CorpsInfo& from);
  void MergeFrom(const CorpsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 corps_id = 1;
  inline bool has_corps_id() const;
  inline void clear_corps_id();
  static const int kCorpsIdFieldNumber = 1;
  inline ::google::protobuf::uint32 corps_id() const;
  inline void set_corps_id(::google::protobuf::uint32 value);

  // optional bytes corps_name = 2;
  inline bool has_corps_name() const;
  inline void clear_corps_name();
  static const int kCorpsNameFieldNumber = 2;
  inline const ::std::string& corps_name() const;
  inline void set_corps_name(const ::std::string& value);
  inline void set_corps_name(const char* value);
  inline void set_corps_name(const void* value, size_t size);
  inline ::std::string* mutable_corps_name();
  inline ::std::string* release_corps_name();
  inline void set_allocated_corps_name(::std::string* corps_name);

  // optional uint32 corps_lv = 3;
  inline bool has_corps_lv() const;
  inline void clear_corps_lv();
  static const int kCorpsLvFieldNumber = 3;
  inline ::google::protobuf::uint32 corps_lv() const;
  inline void set_corps_lv(::google::protobuf::uint32 value);

  // optional uint32 corps_exp = 4;
  inline bool has_corps_exp() const;
  inline void clear_corps_exp();
  static const int kCorpsExpFieldNumber = 4;
  inline ::google::protobuf::uint32 corps_exp() const;
  inline void set_corps_exp(::google::protobuf::uint32 value);

  // optional bytes corps_intro = 5;
  inline bool has_corps_intro() const;
  inline void clear_corps_intro();
  static const int kCorpsIntroFieldNumber = 5;
  inline const ::std::string& corps_intro() const;
  inline void set_corps_intro(const ::std::string& value);
  inline void set_corps_intro(const char* value);
  inline void set_corps_intro(const void* value, size_t size);
  inline ::std::string* mutable_corps_intro();
  inline ::std::string* release_corps_intro();
  inline void set_allocated_corps_intro(::std::string* corps_intro);

  // optional uint32 corps_power = 6;
  inline bool has_corps_power() const;
  inline void clear_corps_power();
  static const int kCorpsPowerFieldNumber = 6;
  inline ::google::protobuf::uint32 corps_power() const;
  inline void set_corps_power(::google::protobuf::uint32 value);

  // optional uint32 corps_member_count = 7;
  inline bool has_corps_member_count() const;
  inline void clear_corps_member_count();
  static const int kCorpsMemberCountFieldNumber = 7;
  inline ::google::protobuf::uint32 corps_member_count() const;
  inline void set_corps_member_count(::google::protobuf::uint32 value);

  // optional uint32 corps_member_max = 8;
  inline bool has_corps_member_max() const;
  inline void clear_corps_member_max();
  static const int kCorpsMemberMaxFieldNumber = 8;
  inline ::google::protobuf::uint32 corps_member_max() const;
  inline void set_corps_member_max(::google::protobuf::uint32 value);

  // optional uint32 corps_join = 9;
  inline bool has_corps_join() const;
  inline void clear_corps_join();
  static const int kCorpsJoinFieldNumber = 9;
  inline ::google::protobuf::uint32 corps_join() const;
  inline void set_corps_join(::google::protobuf::uint32 value);

  // optional uint32 is_apply = 10;
  inline bool has_is_apply() const;
  inline void clear_is_apply();
  static const int kIsApplyFieldNumber = 10;
  inline ::google::protobuf::uint32 is_apply() const;
  inline void set_is_apply(::google::protobuf::uint32 value);

  // optional uint32 corps_rank = 11;
  inline bool has_corps_rank() const;
  inline void clear_corps_rank();
  static const int kCorpsRankFieldNumber = 11;
  inline ::google::protobuf::uint32 corps_rank() const;
  inline void set_corps_rank(::google::protobuf::uint32 value);

  // optional uint32 hunter_point = 12;
  inline bool has_hunter_point() const;
  inline void clear_hunter_point();
  static const int kHunterPointFieldNumber = 12;
  inline ::google::protobuf::uint32 hunter_point() const;
  inline void set_hunter_point(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.CorpsInfo)
 private:
  inline void set_has_corps_id();
  inline void clear_has_corps_id();
  inline void set_has_corps_name();
  inline void clear_has_corps_name();
  inline void set_has_corps_lv();
  inline void clear_has_corps_lv();
  inline void set_has_corps_exp();
  inline void clear_has_corps_exp();
  inline void set_has_corps_intro();
  inline void clear_has_corps_intro();
  inline void set_has_corps_power();
  inline void clear_has_corps_power();
  inline void set_has_corps_member_count();
  inline void clear_has_corps_member_count();
  inline void set_has_corps_member_max();
  inline void clear_has_corps_member_max();
  inline void set_has_corps_join();
  inline void clear_has_corps_join();
  inline void set_has_is_apply();
  inline void clear_has_is_apply();
  inline void set_has_corps_rank();
  inline void clear_has_corps_rank();
  inline void set_has_hunter_point();
  inline void clear_has_hunter_point();

  ::std::string* corps_name_;
  ::google::protobuf::uint32 corps_id_;
  ::google::protobuf::uint32 corps_lv_;
  ::std::string* corps_intro_;
  ::google::protobuf::uint32 corps_exp_;
  ::google::protobuf::uint32 corps_power_;
  ::google::protobuf::uint32 corps_member_count_;
  ::google::protobuf::uint32 corps_member_max_;
  ::google::protobuf::uint32 corps_join_;
  ::google::protobuf::uint32 is_apply_;
  ::google::protobuf::uint32 corps_rank_;
  ::google::protobuf::uint32 hunter_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static CorpsInfo* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageCorpsInfo : public ::google::protobuf::MessageLite {
 public:
  SCMessageCorpsInfo();
  virtual ~SCMessageCorpsInfo();

  SCMessageCorpsInfo(const SCMessageCorpsInfo& from);

  inline SCMessageCorpsInfo& operator=(const SCMessageCorpsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageCorpsInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageCorpsInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageCorpsInfo* other);

  // implements Message ----------------------------------------------

  SCMessageCorpsInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageCorpsInfo& from);
  void MergeFrom(const SCMessageCorpsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jynetwork.proto.CorpsInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::jynetwork::proto::CorpsInfo& info() const;
  inline ::jynetwork::proto::CorpsInfo* mutable_info();
  inline ::jynetwork::proto::CorpsInfo* release_info();
  inline void set_allocated_info(::jynetwork::proto::CorpsInfo* info);

  // repeated .jynetwork.proto.SCQueryDetailInfo char_info = 2;
  inline int char_info_size() const;
  inline void clear_char_info();
  static const int kCharInfoFieldNumber = 2;
  inline const ::jynetwork::proto::SCQueryDetailInfo& char_info(int index) const;
  inline ::jynetwork::proto::SCQueryDetailInfo* mutable_char_info(int index);
  inline ::jynetwork::proto::SCQueryDetailInfo* add_char_info();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >&
      char_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >*
      mutable_char_info();

  // optional uint32 my_acc_id = 3;
  inline bool has_my_acc_id() const;
  inline void clear_my_acc_id();
  static const int kMyAccIdFieldNumber = 3;
  inline ::google::protobuf::uint32 my_acc_id() const;
  inline void set_my_acc_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageCorpsInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_my_acc_id();
  inline void clear_has_my_acc_id();

  ::jynetwork::proto::CorpsInfo* info_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo > char_info_;
  ::google::protobuf::uint32 my_acc_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageCorpsInfo* default_instance_;
};
// -------------------------------------------------------------------

class CorpsBossInfo : public ::google::protobuf::MessageLite {
 public:
  CorpsBossInfo();
  virtual ~CorpsBossInfo();

  CorpsBossInfo(const CorpsBossInfo& from);

  inline CorpsBossInfo& operator=(const CorpsBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CorpsBossInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CorpsBossInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CorpsBossInfo* other);

  // implements Message ----------------------------------------------

  CorpsBossInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CorpsBossInfo& from);
  void MergeFrom(const CorpsBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // optional uint32 attack_id = 2;
  inline bool has_attack_id() const;
  inline void clear_attack_id();
  static const int kAttackIdFieldNumber = 2;
  inline ::google::protobuf::uint32 attack_id() const;
  inline void set_attack_id(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.CorpsBossPlayerInfo player_info = 3;
  inline int player_info_size() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 3;
  inline const ::jynetwork::proto::CorpsBossPlayerInfo& player_info(int index) const;
  inline ::jynetwork::proto::CorpsBossPlayerInfo* mutable_player_info(int index);
  inline ::jynetwork::proto::CorpsBossPlayerInfo* add_player_info();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossPlayerInfo >&
      player_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossPlayerInfo >*
      mutable_player_info();

  // optional uint32 is_open = 4;
  inline bool has_is_open() const;
  inline void clear_is_open();
  static const int kIsOpenFieldNumber = 4;
  inline ::google::protobuf::uint32 is_open() const;
  inline void set_is_open(::google::protobuf::uint32 value);

  // optional uint64 hp = 5;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 5;
  inline ::google::protobuf::uint64 hp() const;
  inline void set_hp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.CorpsBossInfo)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_attack_id();
  inline void clear_has_attack_id();
  inline void set_has_is_open();
  inline void clear_has_is_open();
  inline void set_has_hp();
  inline void clear_has_hp();

  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 attack_id_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossPlayerInfo > player_info_;
  ::google::protobuf::uint64 hp_;
  ::google::protobuf::uint32 is_open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static CorpsBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class CorpsBossPlayerInfo : public ::google::protobuf::MessageLite {
 public:
  CorpsBossPlayerInfo();
  virtual ~CorpsBossPlayerInfo();

  CorpsBossPlayerInfo(const CorpsBossPlayerInfo& from);

  inline CorpsBossPlayerInfo& operator=(const CorpsBossPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CorpsBossPlayerInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CorpsBossPlayerInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CorpsBossPlayerInfo* other);

  // implements Message ----------------------------------------------

  CorpsBossPlayerInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CorpsBossPlayerInfo& from);
  void MergeFrom(const CorpsBossPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // optional bytes player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const void* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.CorpsBossPlayerInfo)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::std::string* player_name_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static CorpsBossPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageCorpsBossInfo : public ::google::protobuf::MessageLite {
 public:
  SCMessageCorpsBossInfo();
  virtual ~SCMessageCorpsBossInfo();

  SCMessageCorpsBossInfo(const SCMessageCorpsBossInfo& from);

  inline SCMessageCorpsBossInfo& operator=(const SCMessageCorpsBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageCorpsBossInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageCorpsBossInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageCorpsBossInfo* other);

  // implements Message ----------------------------------------------

  SCMessageCorpsBossInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageCorpsBossInfo& from);
  void MergeFrom(const SCMessageCorpsBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jynetwork.proto.CorpsBossInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::jynetwork::proto::CorpsBossInfo& info(int index) const;
  inline ::jynetwork::proto::CorpsBossInfo* mutable_info(int index);
  inline ::jynetwork::proto::CorpsBossInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossInfo >*
      mutable_info();

  // optional uint32 my_acc_id = 3;
  inline bool has_my_acc_id() const;
  inline void clear_my_acc_id();
  static const int kMyAccIdFieldNumber = 3;
  inline ::google::protobuf::uint32 my_acc_id() const;
  inline void set_my_acc_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageCorpsBossInfo)
 private:
  inline void set_has_my_acc_id();
  inline void clear_has_my_acc_id();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossInfo > info_;
  ::google::protobuf::uint32 my_acc_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageCorpsBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageCorpsList : public ::google::protobuf::MessageLite {
 public:
  SCMessageCorpsList();
  virtual ~SCMessageCorpsList();

  SCMessageCorpsList(const SCMessageCorpsList& from);

  inline SCMessageCorpsList& operator=(const SCMessageCorpsList& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageCorpsList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageCorpsList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageCorpsList* other);

  // implements Message ----------------------------------------------

  SCMessageCorpsList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageCorpsList& from);
  void MergeFrom(const SCMessageCorpsList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jynetwork.proto.CorpsInfo corps_info = 1;
  inline int corps_info_size() const;
  inline void clear_corps_info();
  static const int kCorpsInfoFieldNumber = 1;
  inline const ::jynetwork::proto::CorpsInfo& corps_info(int index) const;
  inline ::jynetwork::proto::CorpsInfo* mutable_corps_info(int index);
  inline ::jynetwork::proto::CorpsInfo* add_corps_info();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsInfo >&
      corps_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsInfo >*
      mutable_corps_info();

  // optional uint32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 my_acc_id = 3;
  inline bool has_my_acc_id() const;
  inline void clear_my_acc_id();
  static const int kMyAccIdFieldNumber = 3;
  inline ::google::protobuf::uint32 my_acc_id() const;
  inline void set_my_acc_id(::google::protobuf::uint32 value);

  // repeated uint32 apply_list = 4;
  inline int apply_list_size() const;
  inline void clear_apply_list();
  static const int kApplyListFieldNumber = 4;
  inline ::google::protobuf::uint32 apply_list(int index) const;
  inline void set_apply_list(int index, ::google::protobuf::uint32 value);
  inline void add_apply_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      apply_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_apply_list();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageCorpsList)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_my_acc_id();
  inline void clear_has_my_acc_id();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsInfo > corps_info_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 my_acc_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > apply_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageCorpsList* default_instance_;
};
// -------------------------------------------------------------------

class MessagePKOper : public ::google::protobuf::MessageLite {
 public:
  MessagePKOper();
  virtual ~MessagePKOper();

  MessagePKOper(const MessagePKOper& from);

  inline MessagePKOper& operator=(const MessagePKOper& from) {
    CopyFrom(from);
    return *this;
  }

  static const MessagePKOper& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MessagePKOper* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MessagePKOper* other);

  // implements Message ----------------------------------------------

  MessagePKOper* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MessagePKOper& from);
  void MergeFrom(const MessagePKOper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jynetwork.proto.ePKOperationOper oper = 1;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 1;
  inline ::jynetwork::proto::ePKOperationOper oper() const;
  inline void set_oper(::jynetwork::proto::ePKOperationOper value);

  // optional uint32 skill_id = 2;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // optional uint32 hp = 3;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 3;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // optional uint32 posx = 4;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 4;
  inline ::google::protobuf::uint32 posx() const;
  inline void set_posx(::google::protobuf::uint32 value);

  // optional uint32 posy = 5;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 5;
  inline ::google::protobuf::uint32 posy() const;
  inline void set_posy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.MessagePKOper)
 private:
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();

  int oper_;
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 posx_;
  ::google::protobuf::uint32 posy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static MessagePKOper* default_instance_;
};
// -------------------------------------------------------------------

class SCMessagePKOperResult : public ::google::protobuf::MessageLite {
 public:
  SCMessagePKOperResult();
  virtual ~SCMessagePKOperResult();

  SCMessagePKOperResult(const SCMessagePKOperResult& from);

  inline SCMessagePKOperResult& operator=(const SCMessagePKOperResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessagePKOperResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessagePKOperResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessagePKOperResult* other);

  // implements Message ----------------------------------------------

  SCMessagePKOperResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessagePKOperResult& from);
  void MergeFrom(const SCMessagePKOperResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jynetwork.proto.ePKOperationOper oper = 1;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 1;
  inline ::jynetwork::proto::ePKOperationOper oper() const;
  inline void set_oper(::jynetwork::proto::ePKOperationOper value);

  // optional .jynetwork.proto.eOpertionResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::jynetwork::proto::eOpertionResult result() const;
  inline void set_result(::jynetwork::proto::eOpertionResult value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessagePKOperResult)
 private:
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_result();
  inline void clear_has_result();

  int oper_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessagePKOperResult* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageFriendList_FriendInfo : public ::google::protobuf::MessageLite {
 public:
  SCMessageFriendList_FriendInfo();
  virtual ~SCMessageFriendList_FriendInfo();

  SCMessageFriendList_FriendInfo(const SCMessageFriendList_FriendInfo& from);

  inline SCMessageFriendList_FriendInfo& operator=(const SCMessageFriendList_FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageFriendList_FriendInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageFriendList_FriendInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageFriendList_FriendInfo* other);

  // implements Message ----------------------------------------------

  SCMessageFriendList_FriendInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageFriendList_FriendInfo& from);
  void MergeFrom(const SCMessageFriendList_FriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 acc_id = 1;
  inline bool has_acc_id() const;
  inline void clear_acc_id();
  static const int kAccIdFieldNumber = 1;
  inline ::google::protobuf::uint32 acc_id() const;
  inline void set_acc_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 last_map = 5;
  inline bool has_last_map() const;
  inline void clear_last_map();
  static const int kLastMapFieldNumber = 5;
  inline ::google::protobuf::uint32 last_map() const;
  inline void set_last_map(::google::protobuf::uint32 value);

  // optional uint32 state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint32 friend_type = 7;
  inline bool has_friend_type() const;
  inline void clear_friend_type();
  static const int kFriendTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 friend_type() const;
  inline void set_friend_type(::google::protobuf::uint32 value);

  // optional uint32 fight_power = 8;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 8;
  inline ::google::protobuf::uint32 fight_power() const;
  inline void set_fight_power(::google::protobuf::uint32 value);

  // optional uint32 last_normal_map = 9;
  inline bool has_last_normal_map() const;
  inline void clear_last_normal_map();
  static const int kLastNormalMapFieldNumber = 9;
  inline ::google::protobuf::uint32 last_normal_map() const;
  inline void set_last_normal_map(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageFriendList.FriendInfo)
 private:
  inline void set_has_acc_id();
  inline void clear_has_acc_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_last_map();
  inline void clear_has_last_map();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_friend_type();
  inline void clear_has_friend_type();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();
  inline void set_has_last_normal_map();
  inline void clear_has_last_normal_map();

  ::std::string* name_;
  ::google::protobuf::uint32 acc_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 last_map_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 friend_type_;
  ::google::protobuf::uint32 fight_power_;
  ::google::protobuf::uint32 last_normal_map_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageFriendList_FriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class SCMessageFriendList : public ::google::protobuf::MessageLite {
 public:
  SCMessageFriendList();
  virtual ~SCMessageFriendList();

  SCMessageFriendList(const SCMessageFriendList& from);

  inline SCMessageFriendList& operator=(const SCMessageFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  static const SCMessageFriendList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SCMessageFriendList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SCMessageFriendList* other);

  // implements Message ----------------------------------------------

  SCMessageFriendList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SCMessageFriendList& from);
  void MergeFrom(const SCMessageFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef SCMessageFriendList_FriendInfo FriendInfo;

  // accessors -------------------------------------------------------

  // repeated .jynetwork.proto.SCMessageFriendList.FriendInfo friend_info = 1;
  inline int friend_info_size() const;
  inline void clear_friend_info();
  static const int kFriendInfoFieldNumber = 1;
  inline const ::jynetwork::proto::SCMessageFriendList_FriendInfo& friend_info(int index) const;
  inline ::jynetwork::proto::SCMessageFriendList_FriendInfo* mutable_friend_info(int index);
  inline ::jynetwork::proto::SCMessageFriendList_FriendInfo* add_friend_info();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageFriendList_FriendInfo >&
      friend_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageFriendList_FriendInfo >*
      mutable_friend_info();

  // repeated .jynetwork.proto.SCMessageFriendList.FriendInfo corps_info = 2;
  inline int corps_info_size() const;
  inline void clear_corps_info();
  static const int kCorpsInfoFieldNumber = 2;
  inline const ::jynetwork::proto::SCMessageFriendList_FriendInfo& corps_info(int index) const;
  inline ::jynetwork::proto::SCMessageFriendList_FriendInfo* mutable_corps_info(int index);
  inline ::jynetwork::proto::SCMessageFriendList_FriendInfo* add_corps_info();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageFriendList_FriendInfo >&
      corps_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageFriendList_FriendInfo >*
      mutable_corps_info();

  // optional uint32 from_acc_id = 3;
  inline bool has_from_acc_id() const;
  inline void clear_from_acc_id();
  static const int kFromAccIdFieldNumber = 3;
  inline ::google::protobuf::uint32 from_acc_id() const;
  inline void set_from_acc_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.SCMessageFriendList)
 private:
  inline void set_has_from_acc_id();
  inline void clear_has_from_acc_id();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageFriendList_FriendInfo > friend_info_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageFriendList_FriendInfo > corps_info_;
  ::google::protobuf::uint32 from_acc_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SCMessage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SCMessage_2eproto();
  #endif
  friend void protobuf_AssignDesc_SCMessage_2eproto();
  friend void protobuf_ShutdownFile_SCMessage_2eproto();

  void InitAsDefaultInstance();
  static SCMessageFriendList* default_instance_;
};
// ===================================================================


// ===================================================================

// SCMessageNetBattlePrepare

// optional uint32 map_id = 1;
inline bool SCMessageNetBattlePrepare::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageNetBattlePrepare::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageNetBattlePrepare::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageNetBattlePrepare::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 SCMessageNetBattlePrepare::map_id() const {
  return map_id_;
}
inline void SCMessageNetBattlePrepare::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// repeated .jynetwork.proto.SCQueryDetailInfo friend_detail = 2;
inline int SCMessageNetBattlePrepare::friend_detail_size() const {
  return friend_detail_.size();
}
inline void SCMessageNetBattlePrepare::clear_friend_detail() {
  friend_detail_.Clear();
}
inline const ::jynetwork::proto::SCQueryDetailInfo& SCMessageNetBattlePrepare::friend_detail(int index) const {
  return friend_detail_.Get(index);
}
inline ::jynetwork::proto::SCQueryDetailInfo* SCMessageNetBattlePrepare::mutable_friend_detail(int index) {
  return friend_detail_.Mutable(index);
}
inline ::jynetwork::proto::SCQueryDetailInfo* SCMessageNetBattlePrepare::add_friend_detail() {
  return friend_detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >&
SCMessageNetBattlePrepare::friend_detail() const {
  return friend_detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >*
SCMessageNetBattlePrepare::mutable_friend_detail() {
  return &friend_detail_;
}

// optional .jynetwork.proto.eOpertionResult result = 5;
inline bool SCMessageNetBattlePrepare::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageNetBattlePrepare::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageNetBattlePrepare::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageNetBattlePrepare::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::jynetwork::proto::eOpertionResult SCMessageNetBattlePrepare::result() const {
  return static_cast< ::jynetwork::proto::eOpertionResult >(result_);
}
inline void SCMessageNetBattlePrepare::set_result(::jynetwork::proto::eOpertionResult value) {
  assert(::jynetwork::proto::eOpertionResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 rand_num = 3;
inline bool SCMessageNetBattlePrepare::has_rand_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCMessageNetBattlePrepare::set_has_rand_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCMessageNetBattlePrepare::clear_has_rand_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCMessageNetBattlePrepare::clear_rand_num() {
  rand_num_ = 0u;
  clear_has_rand_num();
}
inline ::google::protobuf::uint32 SCMessageNetBattlePrepare::rand_num() const {
  return rand_num_;
}
inline void SCMessageNetBattlePrepare::set_rand_num(::google::protobuf::uint32 value) {
  set_has_rand_num();
  rand_num_ = value;
}

// -------------------------------------------------------------------

// SCMessageNetBattleOper

// repeated .jynetwork.proto.NetBattleOper opers = 1;
inline int SCMessageNetBattleOper::opers_size() const {
  return opers_.size();
}
inline void SCMessageNetBattleOper::clear_opers() {
  opers_.Clear();
}
inline const ::jynetwork::proto::NetBattleOper& SCMessageNetBattleOper::opers(int index) const {
  return opers_.Get(index);
}
inline ::jynetwork::proto::NetBattleOper* SCMessageNetBattleOper::mutable_opers(int index) {
  return opers_.Mutable(index);
}
inline ::jynetwork::proto::NetBattleOper* SCMessageNetBattleOper::add_opers() {
  return opers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetBattleOper >&
SCMessageNetBattleOper::opers() const {
  return opers_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetBattleOper >*
SCMessageNetBattleOper::mutable_opers() {
  return &opers_;
}

// optional uint32 battle_time = 2;
inline bool SCMessageNetBattleOper::has_battle_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageNetBattleOper::set_has_battle_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageNetBattleOper::clear_has_battle_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageNetBattleOper::clear_battle_time() {
  battle_time_ = 0u;
  clear_has_battle_time();
}
inline ::google::protobuf::uint32 SCMessageNetBattleOper::battle_time() const {
  return battle_time_;
}
inline void SCMessageNetBattleOper::set_battle_time(::google::protobuf::uint32 value) {
  set_has_battle_time();
  battle_time_ = value;
}

// -------------------------------------------------------------------

// SCMessageBattleReward

// optional uint32 map_id = 1;
inline bool SCMessageBattleReward::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageBattleReward::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageBattleReward::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageBattleReward::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::map_id() const {
  return map_id_;
}
inline void SCMessageBattleReward::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional uint32 score = 28;
inline bool SCMessageBattleReward::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageBattleReward::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageBattleReward::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageBattleReward::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::score() const {
  return score_;
}
inline void SCMessageBattleReward::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 exp = 2;
inline bool SCMessageBattleReward::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageBattleReward::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageBattleReward::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageBattleReward::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::exp() const {
  return exp_;
}
inline void SCMessageBattleReward::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// repeated .jynetwork.proto.sPersonEquipStats equip = 3;
inline int SCMessageBattleReward::equip_size() const {
  return equip_.size();
}
inline void SCMessageBattleReward::clear_equip() {
  equip_.Clear();
}
inline const ::jynetwork::proto::sPersonEquipStats& SCMessageBattleReward::equip(int index) const {
  return equip_.Get(index);
}
inline ::jynetwork::proto::sPersonEquipStats* SCMessageBattleReward::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::jynetwork::proto::sPersonEquipStats* SCMessageBattleReward::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
SCMessageBattleReward::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
SCMessageBattleReward::mutable_equip() {
  return &equip_;
}

// repeated .jynetwork.proto.sPersonItemStats item = 4;
inline int SCMessageBattleReward::item_size() const {
  return item_.size();
}
inline void SCMessageBattleReward::clear_item() {
  item_.Clear();
}
inline const ::jynetwork::proto::sPersonItemStats& SCMessageBattleReward::item(int index) const {
  return item_.Get(index);
}
inline ::jynetwork::proto::sPersonItemStats* SCMessageBattleReward::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::jynetwork::proto::sPersonItemStats* SCMessageBattleReward::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
SCMessageBattleReward::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
SCMessageBattleReward::mutable_item() {
  return &item_;
}

// optional uint32 difficult = 5;
inline bool SCMessageBattleReward::has_difficult() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCMessageBattleReward::set_has_difficult() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCMessageBattleReward::clear_has_difficult() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCMessageBattleReward::clear_difficult() {
  difficult_ = 0u;
  clear_has_difficult();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::difficult() const {
  return difficult_;
}
inline void SCMessageBattleReward::set_difficult(::google::protobuf::uint32 value) {
  set_has_difficult();
  difficult_ = value;
}

// optional uint32 battle_score = 6;
inline bool SCMessageBattleReward::has_battle_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCMessageBattleReward::set_has_battle_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCMessageBattleReward::clear_has_battle_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCMessageBattleReward::clear_battle_score() {
  battle_score_ = 0u;
  clear_has_battle_score();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::battle_score() const {
  return battle_score_;
}
inline void SCMessageBattleReward::set_battle_score(::google::protobuf::uint32 value) {
  set_has_battle_score();
  battle_score_ = value;
}

// optional uint32 battle_money = 7;
inline bool SCMessageBattleReward::has_battle_money() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SCMessageBattleReward::set_has_battle_money() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SCMessageBattleReward::clear_has_battle_money() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SCMessageBattleReward::clear_battle_money() {
  battle_money_ = 0u;
  clear_has_battle_money();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::battle_money() const {
  return battle_money_;
}
inline void SCMessageBattleReward::set_battle_money(::google::protobuf::uint32 value) {
  set_has_battle_money();
  battle_money_ = value;
}

// optional uint32 battle_star = 8;
inline bool SCMessageBattleReward::has_battle_star() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SCMessageBattleReward::set_has_battle_star() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SCMessageBattleReward::clear_has_battle_star() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SCMessageBattleReward::clear_battle_star() {
  battle_star_ = 0u;
  clear_has_battle_star();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::battle_star() const {
  return battle_star_;
}
inline void SCMessageBattleReward::set_battle_star(::google::protobuf::uint32 value) {
  set_has_battle_star();
  battle_star_ = value;
}

// optional uint32 old_level = 9;
inline bool SCMessageBattleReward::has_old_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SCMessageBattleReward::set_has_old_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SCMessageBattleReward::clear_has_old_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SCMessageBattleReward::clear_old_level() {
  old_level_ = 0u;
  clear_has_old_level();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::old_level() const {
  return old_level_;
}
inline void SCMessageBattleReward::set_old_level(::google::protobuf::uint32 value) {
  set_has_old_level();
  old_level_ = value;
}

// optional uint32 old_exp = 10;
inline bool SCMessageBattleReward::has_old_exp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SCMessageBattleReward::set_has_old_exp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SCMessageBattleReward::clear_has_old_exp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SCMessageBattleReward::clear_old_exp() {
  old_exp_ = 0u;
  clear_has_old_exp();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::old_exp() const {
  return old_exp_;
}
inline void SCMessageBattleReward::set_old_exp(::google::protobuf::uint32 value) {
  set_has_old_exp();
  old_exp_ = value;
}

// optional uint32 card_exp = 11;
inline bool SCMessageBattleReward::has_card_exp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SCMessageBattleReward::set_has_card_exp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SCMessageBattleReward::clear_has_card_exp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SCMessageBattleReward::clear_card_exp() {
  card_exp_ = 0u;
  clear_has_card_exp();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::card_exp() const {
  return card_exp_;
}
inline void SCMessageBattleReward::set_card_exp(::google::protobuf::uint32 value) {
  set_has_card_exp();
  card_exp_ = value;
}

// optional .jynetwork.proto.eOpertionResult result = 12;
inline bool SCMessageBattleReward::has_result() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SCMessageBattleReward::set_has_result() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SCMessageBattleReward::clear_has_result() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SCMessageBattleReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::jynetwork::proto::eOpertionResult SCMessageBattleReward::result() const {
  return static_cast< ::jynetwork::proto::eOpertionResult >(result_);
}
inline void SCMessageBattleReward::set_result(::jynetwork::proto::eOpertionResult value) {
  assert(::jynetwork::proto::eOpertionResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 hit_score = 13;
inline bool SCMessageBattleReward::has_hit_score() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SCMessageBattleReward::set_has_hit_score() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SCMessageBattleReward::clear_has_hit_score() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SCMessageBattleReward::clear_hit_score() {
  hit_score_ = 0u;
  clear_has_hit_score();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::hit_score() const {
  return hit_score_;
}
inline void SCMessageBattleReward::set_hit_score(::google::protobuf::uint32 value) {
  set_has_hit_score();
  hit_score_ = value;
}

// optional uint32 time_score = 14;
inline bool SCMessageBattleReward::has_time_score() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SCMessageBattleReward::set_has_time_score() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SCMessageBattleReward::clear_has_time_score() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SCMessageBattleReward::clear_time_score() {
  time_score_ = 0u;
  clear_has_time_score();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::time_score() const {
  return time_score_;
}
inline void SCMessageBattleReward::set_time_score(::google::protobuf::uint32 value) {
  set_has_time_score();
  time_score_ = value;
}

// optional uint32 catlog = 15;
inline bool SCMessageBattleReward::has_catlog() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SCMessageBattleReward::set_has_catlog() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SCMessageBattleReward::clear_has_catlog() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SCMessageBattleReward::clear_catlog() {
  catlog_ = 0u;
  clear_has_catlog();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::catlog() const {
  return catlog_;
}
inline void SCMessageBattleReward::set_catlog(::google::protobuf::uint32 value) {
  set_has_catlog();
  catlog_ = value;
}

// optional uint32 endless_wave = 16;
inline bool SCMessageBattleReward::has_endless_wave() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SCMessageBattleReward::set_has_endless_wave() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SCMessageBattleReward::clear_has_endless_wave() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SCMessageBattleReward::clear_endless_wave() {
  endless_wave_ = 0u;
  clear_has_endless_wave();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::endless_wave() const {
  return endless_wave_;
}
inline void SCMessageBattleReward::set_endless_wave(::google::protobuf::uint32 value) {
  set_has_endless_wave();
  endless_wave_ = value;
}

// repeated uint32 double_damage_score = 17;
inline int SCMessageBattleReward::double_damage_score_size() const {
  return double_damage_score_.size();
}
inline void SCMessageBattleReward::clear_double_damage_score() {
  double_damage_score_.Clear();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::double_damage_score(int index) const {
  return double_damage_score_.Get(index);
}
inline void SCMessageBattleReward::set_double_damage_score(int index, ::google::protobuf::uint32 value) {
  double_damage_score_.Set(index, value);
}
inline void SCMessageBattleReward::add_double_damage_score(::google::protobuf::uint32 value) {
  double_damage_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SCMessageBattleReward::double_damage_score() const {
  return double_damage_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SCMessageBattleReward::mutable_double_damage_score() {
  return &double_damage_score_;
}

// repeated uint32 double_kill_score = 18;
inline int SCMessageBattleReward::double_kill_score_size() const {
  return double_kill_score_.size();
}
inline void SCMessageBattleReward::clear_double_kill_score() {
  double_kill_score_.Clear();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::double_kill_score(int index) const {
  return double_kill_score_.Get(index);
}
inline void SCMessageBattleReward::set_double_kill_score(int index, ::google::protobuf::uint32 value) {
  double_kill_score_.Set(index, value);
}
inline void SCMessageBattleReward::add_double_kill_score(::google::protobuf::uint32 value) {
  double_kill_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SCMessageBattleReward::double_kill_score() const {
  return double_kill_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SCMessageBattleReward::mutable_double_kill_score() {
  return &double_kill_score_;
}

// repeated uint32 double_boss_score = 19;
inline int SCMessageBattleReward::double_boss_score_size() const {
  return double_boss_score_.size();
}
inline void SCMessageBattleReward::clear_double_boss_score() {
  double_boss_score_.Clear();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::double_boss_score(int index) const {
  return double_boss_score_.Get(index);
}
inline void SCMessageBattleReward::set_double_boss_score(int index, ::google::protobuf::uint32 value) {
  double_boss_score_.Set(index, value);
}
inline void SCMessageBattleReward::add_double_boss_score(::google::protobuf::uint32 value) {
  double_boss_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SCMessageBattleReward::double_boss_score() const {
  return double_boss_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SCMessageBattleReward::mutable_double_boss_score() {
  return &double_boss_score_;
}

// repeated .jynetwork.proto.sPersonItemStats mvp_item = 20;
inline int SCMessageBattleReward::mvp_item_size() const {
  return mvp_item_.size();
}
inline void SCMessageBattleReward::clear_mvp_item() {
  mvp_item_.Clear();
}
inline const ::jynetwork::proto::sPersonItemStats& SCMessageBattleReward::mvp_item(int index) const {
  return mvp_item_.Get(index);
}
inline ::jynetwork::proto::sPersonItemStats* SCMessageBattleReward::mutable_mvp_item(int index) {
  return mvp_item_.Mutable(index);
}
inline ::jynetwork::proto::sPersonItemStats* SCMessageBattleReward::add_mvp_item() {
  return mvp_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
SCMessageBattleReward::mvp_item() const {
  return mvp_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
SCMessageBattleReward::mutable_mvp_item() {
  return &mvp_item_;
}

// optional uint32 boss_single = 21;
inline bool SCMessageBattleReward::has_boss_single() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SCMessageBattleReward::set_has_boss_single() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SCMessageBattleReward::clear_has_boss_single() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SCMessageBattleReward::clear_boss_single() {
  boss_single_ = 0u;
  clear_has_boss_single();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::boss_single() const {
  return boss_single_;
}
inline void SCMessageBattleReward::set_boss_single(::google::protobuf::uint32 value) {
  set_has_boss_single();
  boss_single_ = value;
}

// optional uint32 boss_total = 22;
inline bool SCMessageBattleReward::has_boss_total() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SCMessageBattleReward::set_has_boss_total() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SCMessageBattleReward::clear_has_boss_total() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SCMessageBattleReward::clear_boss_total() {
  boss_total_ = 0u;
  clear_has_boss_total();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::boss_total() const {
  return boss_total_;
}
inline void SCMessageBattleReward::set_boss_total(::google::protobuf::uint32 value) {
  set_has_boss_total();
  boss_total_ = value;
}

// optional uint32 boss_rank = 23;
inline bool SCMessageBattleReward::has_boss_rank() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SCMessageBattleReward::set_has_boss_rank() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SCMessageBattleReward::clear_has_boss_rank() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SCMessageBattleReward::clear_boss_rank() {
  boss_rank_ = 0u;
  clear_has_boss_rank();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::boss_rank() const {
  return boss_rank_;
}
inline void SCMessageBattleReward::set_boss_rank(::google::protobuf::uint32 value) {
  set_has_boss_rank();
  boss_rank_ = value;
}

// optional uint32 wait_player_reward = 24;
inline bool SCMessageBattleReward::has_wait_player_reward() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SCMessageBattleReward::set_has_wait_player_reward() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SCMessageBattleReward::clear_has_wait_player_reward() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SCMessageBattleReward::clear_wait_player_reward() {
  wait_player_reward_ = 0u;
  clear_has_wait_player_reward();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::wait_player_reward() const {
  return wait_player_reward_;
}
inline void SCMessageBattleReward::set_wait_player_reward(::google::protobuf::uint32 value) {
  set_has_wait_player_reward();
  wait_player_reward_ = value;
}

// optional int32 arena_score = 25;
inline bool SCMessageBattleReward::has_arena_score() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SCMessageBattleReward::set_has_arena_score() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SCMessageBattleReward::clear_has_arena_score() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SCMessageBattleReward::clear_arena_score() {
  arena_score_ = 0;
  clear_has_arena_score();
}
inline ::google::protobuf::int32 SCMessageBattleReward::arena_score() const {
  return arena_score_;
}
inline void SCMessageBattleReward::set_arena_score(::google::protobuf::int32 value) {
  set_has_arena_score();
  arena_score_ = value;
}

// optional uint32 arena_result = 26;
inline bool SCMessageBattleReward::has_arena_result() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SCMessageBattleReward::set_has_arena_result() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SCMessageBattleReward::clear_has_arena_result() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SCMessageBattleReward::clear_arena_result() {
  arena_result_ = 0u;
  clear_has_arena_result();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::arena_result() const {
  return arena_result_;
}
inline void SCMessageBattleReward::set_arena_result(::google::protobuf::uint32 value) {
  set_has_arena_result();
  arena_result_ = value;
}

// optional uint32 arena_continue_win = 27;
inline bool SCMessageBattleReward::has_arena_continue_win() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SCMessageBattleReward::set_has_arena_continue_win() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SCMessageBattleReward::clear_has_arena_continue_win() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SCMessageBattleReward::clear_arena_continue_win() {
  arena_continue_win_ = 0u;
  clear_has_arena_continue_win();
}
inline ::google::protobuf::uint32 SCMessageBattleReward::arena_continue_win() const {
  return arena_continue_win_;
}
inline void SCMessageBattleReward::set_arena_continue_win(::google::protobuf::uint32 value) {
  set_has_arena_continue_win();
  arena_continue_win_ = value;
}

// -------------------------------------------------------------------

// SCMessageLoginAuth

// required .jynetwork.proto.eLoginResult result = 1;
inline bool SCMessageLoginAuth::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageLoginAuth::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageLoginAuth::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageLoginAuth::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::jynetwork::proto::eLoginResult SCMessageLoginAuth::result() const {
  return static_cast< ::jynetwork::proto::eLoginResult >(result_);
}
inline void SCMessageLoginAuth::set_result(::jynetwork::proto::eLoginResult value) {
  assert(::jynetwork::proto::eLoginResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 acc_id = 2;
inline bool SCMessageLoginAuth::has_acc_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageLoginAuth::set_has_acc_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageLoginAuth::clear_has_acc_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageLoginAuth::clear_acc_id() {
  acc_id_ = 0;
  clear_has_acc_id();
}
inline ::google::protobuf::int32 SCMessageLoginAuth::acc_id() const {
  return acc_id_;
}
inline void SCMessageLoginAuth::set_acc_id(::google::protobuf::int32 value) {
  set_has_acc_id();
  acc_id_ = value;
}

// optional uint32 session_key = 3;
inline bool SCMessageLoginAuth::has_session_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageLoginAuth::set_has_session_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageLoginAuth::clear_has_session_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageLoginAuth::clear_session_key() {
  session_key_ = 0u;
  clear_has_session_key();
}
inline ::google::protobuf::uint32 SCMessageLoginAuth::session_key() const {
  return session_key_;
}
inline void SCMessageLoginAuth::set_session_key(::google::protobuf::uint32 value) {
  set_has_session_key();
  session_key_ = value;
}

// optional uint32 port = 4;
inline bool SCMessageLoginAuth::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCMessageLoginAuth::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCMessageLoginAuth::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCMessageLoginAuth::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 SCMessageLoginAuth::port() const {
  return port_;
}
inline void SCMessageLoginAuth::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional string gate_ip = 5;
inline bool SCMessageLoginAuth::has_gate_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCMessageLoginAuth::set_has_gate_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCMessageLoginAuth::clear_has_gate_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCMessageLoginAuth::clear_gate_ip() {
  if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
    gate_ip_->clear();
  }
  clear_has_gate_ip();
}
inline const ::std::string& SCMessageLoginAuth::gate_ip() const {
  return *gate_ip_;
}
inline void SCMessageLoginAuth::set_gate_ip(const ::std::string& value) {
  set_has_gate_ip();
  if (gate_ip_ == &::google::protobuf::internal::kEmptyString) {
    gate_ip_ = new ::std::string;
  }
  gate_ip_->assign(value);
}
inline void SCMessageLoginAuth::set_gate_ip(const char* value) {
  set_has_gate_ip();
  if (gate_ip_ == &::google::protobuf::internal::kEmptyString) {
    gate_ip_ = new ::std::string;
  }
  gate_ip_->assign(value);
}
inline void SCMessageLoginAuth::set_gate_ip(const char* value, size_t size) {
  set_has_gate_ip();
  if (gate_ip_ == &::google::protobuf::internal::kEmptyString) {
    gate_ip_ = new ::std::string;
  }
  gate_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCMessageLoginAuth::mutable_gate_ip() {
  set_has_gate_ip();
  if (gate_ip_ == &::google::protobuf::internal::kEmptyString) {
    gate_ip_ = new ::std::string;
  }
  return gate_ip_;
}
inline ::std::string* SCMessageLoginAuth::release_gate_ip() {
  clear_has_gate_ip();
  if (gate_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gate_ip_;
    gate_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCMessageLoginAuth::set_allocated_gate_ip(::std::string* gate_ip) {
  if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_ip_;
  }
  if (gate_ip) {
    set_has_gate_ip();
    gate_ip_ = gate_ip;
  } else {
    clear_has_gate_ip();
    gate_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string user_name = 6;
inline bool SCMessageLoginAuth::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCMessageLoginAuth::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCMessageLoginAuth::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCMessageLoginAuth::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& SCMessageLoginAuth::user_name() const {
  return *user_name_;
}
inline void SCMessageLoginAuth::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void SCMessageLoginAuth::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void SCMessageLoginAuth::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCMessageLoginAuth::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* SCMessageLoginAuth::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCMessageLoginAuth::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sdk_id = 7;
inline bool SCMessageLoginAuth::has_sdk_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCMessageLoginAuth::set_has_sdk_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCMessageLoginAuth::clear_has_sdk_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCMessageLoginAuth::clear_sdk_id() {
  if (sdk_id_ != &::google::protobuf::internal::kEmptyString) {
    sdk_id_->clear();
  }
  clear_has_sdk_id();
}
inline const ::std::string& SCMessageLoginAuth::sdk_id() const {
  return *sdk_id_;
}
inline void SCMessageLoginAuth::set_sdk_id(const ::std::string& value) {
  set_has_sdk_id();
  if (sdk_id_ == &::google::protobuf::internal::kEmptyString) {
    sdk_id_ = new ::std::string;
  }
  sdk_id_->assign(value);
}
inline void SCMessageLoginAuth::set_sdk_id(const char* value) {
  set_has_sdk_id();
  if (sdk_id_ == &::google::protobuf::internal::kEmptyString) {
    sdk_id_ = new ::std::string;
  }
  sdk_id_->assign(value);
}
inline void SCMessageLoginAuth::set_sdk_id(const char* value, size_t size) {
  set_has_sdk_id();
  if (sdk_id_ == &::google::protobuf::internal::kEmptyString) {
    sdk_id_ = new ::std::string;
  }
  sdk_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCMessageLoginAuth::mutable_sdk_id() {
  set_has_sdk_id();
  if (sdk_id_ == &::google::protobuf::internal::kEmptyString) {
    sdk_id_ = new ::std::string;
  }
  return sdk_id_;
}
inline ::std::string* SCMessageLoginAuth::release_sdk_id() {
  clear_has_sdk_id();
  if (sdk_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sdk_id_;
    sdk_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCMessageLoginAuth::set_allocated_sdk_id(::std::string* sdk_id) {
  if (sdk_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_id_;
  }
  if (sdk_id) {
    set_has_sdk_id();
    sdk_id_ = sdk_id;
  } else {
    clear_has_sdk_id();
    sdk_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_need_disconnect = 8;
inline bool SCMessageLoginAuth::has_is_need_disconnect() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SCMessageLoginAuth::set_has_is_need_disconnect() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SCMessageLoginAuth::clear_has_is_need_disconnect() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SCMessageLoginAuth::clear_is_need_disconnect() {
  is_need_disconnect_ = 0u;
  clear_has_is_need_disconnect();
}
inline ::google::protobuf::uint32 SCMessageLoginAuth::is_need_disconnect() const {
  return is_need_disconnect_;
}
inline void SCMessageLoginAuth::set_is_need_disconnect(::google::protobuf::uint32 value) {
  set_has_is_need_disconnect();
  is_need_disconnect_ = value;
}

// optional uint32 lang_id = 9;
inline bool SCMessageLoginAuth::has_lang_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SCMessageLoginAuth::set_has_lang_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SCMessageLoginAuth::clear_has_lang_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SCMessageLoginAuth::clear_lang_id() {
  lang_id_ = 0u;
  clear_has_lang_id();
}
inline ::google::protobuf::uint32 SCMessageLoginAuth::lang_id() const {
  return lang_id_;
}
inline void SCMessageLoginAuth::set_lang_id(::google::protobuf::uint32 value) {
  set_has_lang_id();
  lang_id_ = value;
}

// -------------------------------------------------------------------

// SCMessageGateAuth

// required .jynetwork.proto.eLoginResult result = 1;
inline bool SCMessageGateAuth::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageGateAuth::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageGateAuth::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageGateAuth::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::jynetwork::proto::eLoginResult SCMessageGateAuth::result() const {
  return static_cast< ::jynetwork::proto::eLoginResult >(result_);
}
inline void SCMessageGateAuth::set_result(::jynetwork::proto::eLoginResult value) {
  assert(::jynetwork::proto::eLoginResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 acc_id = 2;
inline bool SCMessageGateAuth::has_acc_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageGateAuth::set_has_acc_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageGateAuth::clear_has_acc_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageGateAuth::clear_acc_id() {
  acc_id_ = 0u;
  clear_has_acc_id();
}
inline ::google::protobuf::uint32 SCMessageGateAuth::acc_id() const {
  return acc_id_;
}
inline void SCMessageGateAuth::set_acc_id(::google::protobuf::uint32 value) {
  set_has_acc_id();
  acc_id_ = value;
}

// -------------------------------------------------------------------

// sPlaneEquipStats

// optional uint64 uid = 1;
inline bool sPlaneEquipStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPlaneEquipStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPlaneEquipStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPlaneEquipStats::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 sPlaneEquipStats::uid() const {
  return uid_;
}
inline void sPlaneEquipStats::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 equipid = 2;
inline bool sPlaneEquipStats::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPlaneEquipStats::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPlaneEquipStats::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPlaneEquipStats::clear_equipid() {
  equipid_ = 0u;
  clear_has_equipid();
}
inline ::google::protobuf::uint32 sPlaneEquipStats::equipid() const {
  return equipid_;
}
inline void sPlaneEquipStats::set_equipid(::google::protobuf::uint32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional uint32 level = 3;
inline bool sPlaneEquipStats::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPlaneEquipStats::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPlaneEquipStats::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPlaneEquipStats::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 sPlaneEquipStats::level() const {
  return level_;
}
inline void sPlaneEquipStats::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 intensify = 4;
inline bool sPlaneEquipStats::has_intensify() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sPlaneEquipStats::set_has_intensify() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sPlaneEquipStats::clear_has_intensify() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sPlaneEquipStats::clear_intensify() {
  intensify_ = 0u;
  clear_has_intensify();
}
inline ::google::protobuf::uint32 sPlaneEquipStats::intensify() const {
  return intensify_;
}
inline void sPlaneEquipStats::set_intensify(::google::protobuf::uint32 value) {
  set_has_intensify();
  intensify_ = value;
}

// optional uint32 exp = 5;
inline bool sPlaneEquipStats::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sPlaneEquipStats::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sPlaneEquipStats::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sPlaneEquipStats::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 sPlaneEquipStats::exp() const {
  return exp_;
}
inline void sPlaneEquipStats::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 starlv = 6;
inline bool sPlaneEquipStats::has_starlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sPlaneEquipStats::set_has_starlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sPlaneEquipStats::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sPlaneEquipStats::clear_starlv() {
  starlv_ = 0u;
  clear_has_starlv();
}
inline ::google::protobuf::uint32 sPlaneEquipStats::starlv() const {
  return starlv_;
}
inline void sPlaneEquipStats::set_starlv(::google::protobuf::uint32 value) {
  set_has_starlv();
  starlv_ = value;
}

// optional .jynetwork.proto.ePersonalOpertionType oper = 7;
inline bool sPlaneEquipStats::has_oper() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sPlaneEquipStats::set_has_oper() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sPlaneEquipStats::clear_has_oper() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sPlaneEquipStats::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::jynetwork::proto::ePersonalOpertionType sPlaneEquipStats::oper() const {
  return static_cast< ::jynetwork::proto::ePersonalOpertionType >(oper_);
}
inline void sPlaneEquipStats::set_oper(::jynetwork::proto::ePersonalOpertionType value) {
  assert(::jynetwork::proto::ePersonalOpertionType_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// -------------------------------------------------------------------

// SCUserDetailInfo

// optional uint32 acc_id = 1;
inline bool SCUserDetailInfo::has_acc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCUserDetailInfo::set_has_acc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCUserDetailInfo::clear_has_acc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCUserDetailInfo::clear_acc_id() {
  acc_id_ = 0u;
  clear_has_acc_id();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::acc_id() const {
  return acc_id_;
}
inline void SCUserDetailInfo::set_acc_id(::google::protobuf::uint32 value) {
  set_has_acc_id();
  acc_id_ = value;
}

// optional uint32 isnewchar = 2;
inline bool SCUserDetailInfo::has_isnewchar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCUserDetailInfo::set_has_isnewchar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCUserDetailInfo::clear_has_isnewchar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCUserDetailInfo::clear_isnewchar() {
  isnewchar_ = 0u;
  clear_has_isnewchar();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::isnewchar() const {
  return isnewchar_;
}
inline void SCUserDetailInfo::set_isnewchar(::google::protobuf::uint32 value) {
  set_has_isnewchar();
  isnewchar_ = value;
}

// optional uint32 isfulldata = 3;
inline bool SCUserDetailInfo::has_isfulldata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCUserDetailInfo::set_has_isfulldata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCUserDetailInfo::clear_has_isfulldata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCUserDetailInfo::clear_isfulldata() {
  isfulldata_ = 0u;
  clear_has_isfulldata();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::isfulldata() const {
  return isfulldata_;
}
inline void SCUserDetailInfo::set_isfulldata(::google::protobuf::uint32 value) {
  set_has_isfulldata();
  isfulldata_ = value;
}

// optional string sname = 4;
inline bool SCUserDetailInfo::has_sname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCUserDetailInfo::set_has_sname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCUserDetailInfo::clear_has_sname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCUserDetailInfo::clear_sname() {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    sname_->clear();
  }
  clear_has_sname();
}
inline const ::std::string& SCUserDetailInfo::sname() const {
  return *sname_;
}
inline void SCUserDetailInfo::set_sname(const ::std::string& value) {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  sname_->assign(value);
}
inline void SCUserDetailInfo::set_sname(const char* value) {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  sname_->assign(value);
}
inline void SCUserDetailInfo::set_sname(const char* value, size_t size) {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  sname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCUserDetailInfo::mutable_sname() {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  return sname_;
}
inline ::std::string* SCUserDetailInfo::release_sname() {
  clear_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sname_;
    sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCUserDetailInfo::set_allocated_sname(::std::string* sname) {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    delete sname_;
  }
  if (sname) {
    set_has_sname();
    sname_ = sname;
  } else {
    clear_has_sname();
    sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 equip_id = 5;
inline int SCUserDetailInfo::equip_id_size() const {
  return equip_id_.size();
}
inline void SCUserDetailInfo::clear_equip_id() {
  equip_id_.Clear();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::equip_id(int index) const {
  return equip_id_.Get(index);
}
inline void SCUserDetailInfo::set_equip_id(int index, ::google::protobuf::uint32 value) {
  equip_id_.Set(index, value);
}
inline void SCUserDetailInfo::add_equip_id(::google::protobuf::uint32 value) {
  equip_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SCUserDetailInfo::equip_id() const {
  return equip_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SCUserDetailInfo::mutable_equip_id() {
  return &equip_id_;
}

// optional uint32 team_lv = 6;
inline bool SCUserDetailInfo::has_team_lv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCUserDetailInfo::set_has_team_lv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCUserDetailInfo::clear_has_team_lv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCUserDetailInfo::clear_team_lv() {
  team_lv_ = 0u;
  clear_has_team_lv();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::team_lv() const {
  return team_lv_;
}
inline void SCUserDetailInfo::set_team_lv(::google::protobuf::uint32 value) {
  set_has_team_lv();
  team_lv_ = value;
}

// optional uint32 team_exp = 7;
inline bool SCUserDetailInfo::has_team_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCUserDetailInfo::set_has_team_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCUserDetailInfo::clear_has_team_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCUserDetailInfo::clear_team_exp() {
  team_exp_ = 0u;
  clear_has_team_exp();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::team_exp() const {
  return team_exp_;
}
inline void SCUserDetailInfo::set_team_exp(::google::protobuf::uint32 value) {
  set_has_team_exp();
  team_exp_ = value;
}

// optional uint32 cup_score_total = 8;
inline bool SCUserDetailInfo::has_cup_score_total() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SCUserDetailInfo::set_has_cup_score_total() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SCUserDetailInfo::clear_has_cup_score_total() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SCUserDetailInfo::clear_cup_score_total() {
  cup_score_total_ = 0u;
  clear_has_cup_score_total();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::cup_score_total() const {
  return cup_score_total_;
}
inline void SCUserDetailInfo::set_cup_score_total(::google::protobuf::uint32 value) {
  set_has_cup_score_total();
  cup_score_total_ = value;
}

// optional uint32 cup_score = 9;
inline bool SCUserDetailInfo::has_cup_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SCUserDetailInfo::set_has_cup_score() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SCUserDetailInfo::clear_has_cup_score() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SCUserDetailInfo::clear_cup_score() {
  cup_score_ = 0u;
  clear_has_cup_score();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::cup_score() const {
  return cup_score_;
}
inline void SCUserDetailInfo::set_cup_score(::google::protobuf::uint32 value) {
  set_has_cup_score();
  cup_score_ = value;
}

// optional uint32 league_score_total = 10;
inline bool SCUserDetailInfo::has_league_score_total() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SCUserDetailInfo::set_has_league_score_total() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SCUserDetailInfo::clear_has_league_score_total() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SCUserDetailInfo::clear_league_score_total() {
  league_score_total_ = 0u;
  clear_has_league_score_total();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::league_score_total() const {
  return league_score_total_;
}
inline void SCUserDetailInfo::set_league_score_total(::google::protobuf::uint32 value) {
  set_has_league_score_total();
  league_score_total_ = value;
}

// optional uint32 league_score = 11;
inline bool SCUserDetailInfo::has_league_score() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SCUserDetailInfo::set_has_league_score() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SCUserDetailInfo::clear_has_league_score() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SCUserDetailInfo::clear_league_score() {
  league_score_ = 0u;
  clear_has_league_score();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::league_score() const {
  return league_score_;
}
inline void SCUserDetailInfo::set_league_score(::google::protobuf::uint32 value) {
  set_has_league_score();
  league_score_ = value;
}

// optional uint32 win_total = 12;
inline bool SCUserDetailInfo::has_win_total() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SCUserDetailInfo::set_has_win_total() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SCUserDetailInfo::clear_has_win_total() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SCUserDetailInfo::clear_win_total() {
  win_total_ = 0u;
  clear_has_win_total();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::win_total() const {
  return win_total_;
}
inline void SCUserDetailInfo::set_win_total(::google::protobuf::uint32 value) {
  set_has_win_total();
  win_total_ = value;
}

// optional uint32 lost_total = 13;
inline bool SCUserDetailInfo::has_lost_total() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SCUserDetailInfo::set_has_lost_total() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SCUserDetailInfo::clear_has_lost_total() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SCUserDetailInfo::clear_lost_total() {
  lost_total_ = 0u;
  clear_has_lost_total();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::lost_total() const {
  return lost_total_;
}
inline void SCUserDetailInfo::set_lost_total(::google::protobuf::uint32 value) {
  set_has_lost_total();
  lost_total_ = value;
}

// repeated .jynetwork.proto.sPlaneEquipStats equip = 14;
inline int SCUserDetailInfo::equip_size() const {
  return equip_.size();
}
inline void SCUserDetailInfo::clear_equip() {
  equip_.Clear();
}
inline const ::jynetwork::proto::sPlaneEquipStats& SCUserDetailInfo::equip(int index) const {
  return equip_.Get(index);
}
inline ::jynetwork::proto::sPlaneEquipStats* SCUserDetailInfo::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::jynetwork::proto::sPlaneEquipStats* SCUserDetailInfo::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPlaneEquipStats >&
SCUserDetailInfo::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPlaneEquipStats >*
SCUserDetailInfo::mutable_equip() {
  return &equip_;
}

// optional uint64 stat_num = 15;
inline bool SCUserDetailInfo::has_stat_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SCUserDetailInfo::set_has_stat_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SCUserDetailInfo::clear_has_stat_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SCUserDetailInfo::clear_stat_num() {
  stat_num_ = GOOGLE_ULONGLONG(0);
  clear_has_stat_num();
}
inline ::google::protobuf::uint64 SCUserDetailInfo::stat_num() const {
  return stat_num_;
}
inline void SCUserDetailInfo::set_stat_num(::google::protobuf::uint64 value) {
  set_has_stat_num();
  stat_num_ = value;
}

// optional uint32 guildid = 906;
inline bool SCUserDetailInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SCUserDetailInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SCUserDetailInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SCUserDetailInfo::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::guildid() const {
  return guildid_;
}
inline void SCUserDetailInfo::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 viplevel = 907;
inline bool SCUserDetailInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SCUserDetailInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SCUserDetailInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SCUserDetailInfo::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::viplevel() const {
  return viplevel_;
}
inline void SCUserDetailInfo::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional uint32 vipexp = 908;
inline bool SCUserDetailInfo::has_vipexp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SCUserDetailInfo::set_has_vipexp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SCUserDetailInfo::clear_has_vipexp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SCUserDetailInfo::clear_vipexp() {
  vipexp_ = 0u;
  clear_has_vipexp();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::vipexp() const {
  return vipexp_;
}
inline void SCUserDetailInfo::set_vipexp(::google::protobuf::uint32 value) {
  set_has_vipexp();
  vipexp_ = value;
}

// optional int32 money = 909;
inline bool SCUserDetailInfo::has_money() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SCUserDetailInfo::set_has_money() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SCUserDetailInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SCUserDetailInfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 SCUserDetailInfo::money() const {
  return money_;
}
inline void SCUserDetailInfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional int32 diamonds = 910;
inline bool SCUserDetailInfo::has_diamonds() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SCUserDetailInfo::set_has_diamonds() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SCUserDetailInfo::clear_has_diamonds() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SCUserDetailInfo::clear_diamonds() {
  diamonds_ = 0;
  clear_has_diamonds();
}
inline ::google::protobuf::int32 SCUserDetailInfo::diamonds() const {
  return diamonds_;
}
inline void SCUserDetailInfo::set_diamonds(::google::protobuf::int32 value) {
  set_has_diamonds();
  diamonds_ = value;
}

// optional uint32 charslot = 911;
inline bool SCUserDetailInfo::has_charslot() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SCUserDetailInfo::set_has_charslot() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SCUserDetailInfo::clear_has_charslot() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SCUserDetailInfo::clear_charslot() {
  charslot_ = 0u;
  clear_has_charslot();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::charslot() const {
  return charslot_;
}
inline void SCUserDetailInfo::set_charslot(::google::protobuf::uint32 value) {
  set_has_charslot();
  charslot_ = value;
}

// optional uint32 guide = 912;
inline bool SCUserDetailInfo::has_guide() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SCUserDetailInfo::set_has_guide() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SCUserDetailInfo::clear_has_guide() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SCUserDetailInfo::clear_guide() {
  guide_ = 0u;
  clear_has_guide();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::guide() const {
  return guide_;
}
inline void SCUserDetailInfo::set_guide(::google::protobuf::uint32 value) {
  set_has_guide();
  guide_ = value;
}

// repeated .jynetwork.proto.sCharactorInit chars = 913;
inline int SCUserDetailInfo::chars_size() const {
  return chars_.size();
}
inline void SCUserDetailInfo::clear_chars() {
  chars_.Clear();
}
inline const ::jynetwork::proto::sCharactorInit& SCUserDetailInfo::chars(int index) const {
  return chars_.Get(index);
}
inline ::jynetwork::proto::sCharactorInit* SCUserDetailInfo::mutable_chars(int index) {
  return chars_.Mutable(index);
}
inline ::jynetwork::proto::sCharactorInit* SCUserDetailInfo::add_chars() {
  return chars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit >&
SCUserDetailInfo::chars() const {
  return chars_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit >*
SCUserDetailInfo::mutable_chars() {
  return &chars_;
}

// repeated .jynetwork.proto.sPersonCardStats cards = 914;
inline int SCUserDetailInfo::cards_size() const {
  return cards_.size();
}
inline void SCUserDetailInfo::clear_cards() {
  cards_.Clear();
}
inline const ::jynetwork::proto::sPersonCardStats& SCUserDetailInfo::cards(int index) const {
  return cards_.Get(index);
}
inline ::jynetwork::proto::sPersonCardStats* SCUserDetailInfo::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::jynetwork::proto::sPersonCardStats* SCUserDetailInfo::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats >&
SCUserDetailInfo::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats >*
SCUserDetailInfo::mutable_cards() {
  return &cards_;
}

// repeated .jynetwork.proto.sPersonItemStats item = 916;
inline int SCUserDetailInfo::item_size() const {
  return item_.size();
}
inline void SCUserDetailInfo::clear_item() {
  item_.Clear();
}
inline const ::jynetwork::proto::sPersonItemStats& SCUserDetailInfo::item(int index) const {
  return item_.Get(index);
}
inline ::jynetwork::proto::sPersonItemStats* SCUserDetailInfo::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::jynetwork::proto::sPersonItemStats* SCUserDetailInfo::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
SCUserDetailInfo::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
SCUserDetailInfo::mutable_item() {
  return &item_;
}

// repeated .jynetwork.proto.sCastleInfo castles = 917;
inline int SCUserDetailInfo::castles_size() const {
  return castles_.size();
}
inline void SCUserDetailInfo::clear_castles() {
  castles_.Clear();
}
inline const ::jynetwork::proto::sCastleInfo& SCUserDetailInfo::castles(int index) const {
  return castles_.Get(index);
}
inline ::jynetwork::proto::sCastleInfo* SCUserDetailInfo::mutable_castles(int index) {
  return castles_.Mutable(index);
}
inline ::jynetwork::proto::sCastleInfo* SCUserDetailInfo::add_castles() {
  return castles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo >&
SCUserDetailInfo::castles() const {
  return castles_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo >*
SCUserDetailInfo::mutable_castles() {
  return &castles_;
}

// optional uint32 staminanow = 918;
inline bool SCUserDetailInfo::has_staminanow() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SCUserDetailInfo::set_has_staminanow() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SCUserDetailInfo::clear_has_staminanow() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SCUserDetailInfo::clear_staminanow() {
  staminanow_ = 0u;
  clear_has_staminanow();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::staminanow() const {
  return staminanow_;
}
inline void SCUserDetailInfo::set_staminanow(::google::protobuf::uint32 value) {
  set_has_staminanow();
  staminanow_ = value;
}

// optional uint32 staminamax = 919;
inline bool SCUserDetailInfo::has_staminamax() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SCUserDetailInfo::set_has_staminamax() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SCUserDetailInfo::clear_has_staminamax() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SCUserDetailInfo::clear_staminamax() {
  staminamax_ = 0u;
  clear_has_staminamax();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::staminamax() const {
  return staminamax_;
}
inline void SCUserDetailInfo::set_staminamax(::google::protobuf::uint32 value) {
  set_has_staminamax();
  staminamax_ = value;
}

// repeated .jynetwork.proto.sPersonSkillStats skills = 920;
inline int SCUserDetailInfo::skills_size() const {
  return skills_.size();
}
inline void SCUserDetailInfo::clear_skills() {
  skills_.Clear();
}
inline const ::jynetwork::proto::sPersonSkillStats& SCUserDetailInfo::skills(int index) const {
  return skills_.Get(index);
}
inline ::jynetwork::proto::sPersonSkillStats* SCUserDetailInfo::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::jynetwork::proto::sPersonSkillStats* SCUserDetailInfo::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats >&
SCUserDetailInfo::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats >*
SCUserDetailInfo::mutable_skills() {
  return &skills_;
}

// repeated .jynetwork.proto.sPersonTaskStats tasks = 921;
inline int SCUserDetailInfo::tasks_size() const {
  return tasks_.size();
}
inline void SCUserDetailInfo::clear_tasks() {
  tasks_.Clear();
}
inline const ::jynetwork::proto::sPersonTaskStats& SCUserDetailInfo::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::jynetwork::proto::sPersonTaskStats* SCUserDetailInfo::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::jynetwork::proto::sPersonTaskStats* SCUserDetailInfo::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonTaskStats >&
SCUserDetailInfo::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonTaskStats >*
SCUserDetailInfo::mutable_tasks() {
  return &tasks_;
}

// optional uint32 buy_stamina = 922;
inline bool SCUserDetailInfo::has_buy_stamina() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SCUserDetailInfo::set_has_buy_stamina() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SCUserDetailInfo::clear_has_buy_stamina() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SCUserDetailInfo::clear_buy_stamina() {
  buy_stamina_ = 0u;
  clear_has_buy_stamina();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::buy_stamina() const {
  return buy_stamina_;
}
inline void SCUserDetailInfo::set_buy_stamina(::google::protobuf::uint32 value) {
  set_has_buy_stamina();
  buy_stamina_ = value;
}

// optional uint32 buy_gold = 923;
inline bool SCUserDetailInfo::has_buy_gold() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SCUserDetailInfo::set_has_buy_gold() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SCUserDetailInfo::clear_has_buy_gold() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SCUserDetailInfo::clear_buy_gold() {
  buy_gold_ = 0u;
  clear_has_buy_gold();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::buy_gold() const {
  return buy_gold_;
}
inline void SCUserDetailInfo::set_buy_gold(::google::protobuf::uint32 value) {
  set_has_buy_gold();
  buy_gold_ = value;
}

// repeated uint32 refresh_shop = 924;
inline int SCUserDetailInfo::refresh_shop_size() const {
  return refresh_shop_.size();
}
inline void SCUserDetailInfo::clear_refresh_shop() {
  refresh_shop_.Clear();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::refresh_shop(int index) const {
  return refresh_shop_.Get(index);
}
inline void SCUserDetailInfo::set_refresh_shop(int index, ::google::protobuf::uint32 value) {
  refresh_shop_.Set(index, value);
}
inline void SCUserDetailInfo::add_refresh_shop(::google::protobuf::uint32 value) {
  refresh_shop_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SCUserDetailInfo::refresh_shop() const {
  return refresh_shop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SCUserDetailInfo::mutable_refresh_shop() {
  return &refresh_shop_;
}

// repeated .jynetwork.proto.sCastleInfo last_castle = 935;
inline int SCUserDetailInfo::last_castle_size() const {
  return last_castle_.size();
}
inline void SCUserDetailInfo::clear_last_castle() {
  last_castle_.Clear();
}
inline const ::jynetwork::proto::sCastleInfo& SCUserDetailInfo::last_castle(int index) const {
  return last_castle_.Get(index);
}
inline ::jynetwork::proto::sCastleInfo* SCUserDetailInfo::mutable_last_castle(int index) {
  return last_castle_.Mutable(index);
}
inline ::jynetwork::proto::sCastleInfo* SCUserDetailInfo::add_last_castle() {
  return last_castle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo >&
SCUserDetailInfo::last_castle() const {
  return last_castle_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo >*
SCUserDetailInfo::mutable_last_castle() {
  return &last_castle_;
}

// optional uint32 show_new_map = 936;
inline bool SCUserDetailInfo::has_show_new_map() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SCUserDetailInfo::set_has_show_new_map() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SCUserDetailInfo::clear_has_show_new_map() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SCUserDetailInfo::clear_show_new_map() {
  show_new_map_ = 0u;
  clear_has_show_new_map();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::show_new_map() const {
  return show_new_map_;
}
inline void SCUserDetailInfo::set_show_new_map(::google::protobuf::uint32 value) {
  set_has_show_new_map();
  show_new_map_ = value;
}

// optional uint32 week_login = 937;
inline bool SCUserDetailInfo::has_week_login() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SCUserDetailInfo::set_has_week_login() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SCUserDetailInfo::clear_has_week_login() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SCUserDetailInfo::clear_week_login() {
  week_login_ = 0u;
  clear_has_week_login();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::week_login() const {
  return week_login_;
}
inline void SCUserDetailInfo::set_week_login(::google::protobuf::uint32 value) {
  set_has_week_login();
  week_login_ = value;
}

// optional uint32 week_day_login = 938;
inline bool SCUserDetailInfo::has_week_day_login() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SCUserDetailInfo::set_has_week_day_login() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SCUserDetailInfo::clear_has_week_day_login() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SCUserDetailInfo::clear_week_day_login() {
  week_day_login_ = 0u;
  clear_has_week_day_login();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::week_day_login() const {
  return week_day_login_;
}
inline void SCUserDetailInfo::set_week_day_login(::google::protobuf::uint32 value) {
  set_has_week_day_login();
  week_day_login_ = value;
}

// repeated .jynetwork.proto.sPersonItemStats week_item = 939;
inline int SCUserDetailInfo::week_item_size() const {
  return week_item_.size();
}
inline void SCUserDetailInfo::clear_week_item() {
  week_item_.Clear();
}
inline const ::jynetwork::proto::sPersonItemStats& SCUserDetailInfo::week_item(int index) const {
  return week_item_.Get(index);
}
inline ::jynetwork::proto::sPersonItemStats* SCUserDetailInfo::mutable_week_item(int index) {
  return week_item_.Mutable(index);
}
inline ::jynetwork::proto::sPersonItemStats* SCUserDetailInfo::add_week_item() {
  return week_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
SCUserDetailInfo::week_item() const {
  return week_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
SCUserDetailInfo::mutable_week_item() {
  return &week_item_;
}

// optional uint32 oper_index = 940;
inline bool SCUserDetailInfo::has_oper_index() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SCUserDetailInfo::set_has_oper_index() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SCUserDetailInfo::clear_has_oper_index() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SCUserDetailInfo::clear_oper_index() {
  oper_index_ = 0u;
  clear_has_oper_index();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::oper_index() const {
  return oper_index_;
}
inline void SCUserDetailInfo::set_oper_index(::google::protobuf::uint32 value) {
  set_has_oper_index();
  oper_index_ = value;
}

// repeated uint32 reset_free = 941;
inline int SCUserDetailInfo::reset_free_size() const {
  return reset_free_.size();
}
inline void SCUserDetailInfo::clear_reset_free() {
  reset_free_.Clear();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::reset_free(int index) const {
  return reset_free_.Get(index);
}
inline void SCUserDetailInfo::set_reset_free(int index, ::google::protobuf::uint32 value) {
  reset_free_.Set(index, value);
}
inline void SCUserDetailInfo::add_reset_free(::google::protobuf::uint32 value) {
  reset_free_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SCUserDetailInfo::reset_free() const {
  return reset_free_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SCUserDetailInfo::mutable_reset_free() {
  return &reset_free_;
}

// repeated uint32 reset_time = 943;
inline int SCUserDetailInfo::reset_time_size() const {
  return reset_time_.size();
}
inline void SCUserDetailInfo::clear_reset_time() {
  reset_time_.Clear();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::reset_time(int index) const {
  return reset_time_.Get(index);
}
inline void SCUserDetailInfo::set_reset_time(int index, ::google::protobuf::uint32 value) {
  reset_time_.Set(index, value);
}
inline void SCUserDetailInfo::add_reset_time(::google::protobuf::uint32 value) {
  reset_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SCUserDetailInfo::reset_time() const {
  return reset_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SCUserDetailInfo::mutable_reset_time() {
  return &reset_time_;
}

// optional uint32 endless_wave = 944;
inline bool SCUserDetailInfo::has_endless_wave() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void SCUserDetailInfo::set_has_endless_wave() {
  _has_bits_[1] |= 0x00000200u;
}
inline void SCUserDetailInfo::clear_has_endless_wave() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void SCUserDetailInfo::clear_endless_wave() {
  endless_wave_ = 0u;
  clear_has_endless_wave();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::endless_wave() const {
  return endless_wave_;
}
inline void SCUserDetailInfo::set_endless_wave(::google::protobuf::uint32 value) {
  set_has_endless_wave();
  endless_wave_ = value;
}

// optional uint32 corps_guide = 945;
inline bool SCUserDetailInfo::has_corps_guide() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void SCUserDetailInfo::set_has_corps_guide() {
  _has_bits_[1] |= 0x00000400u;
}
inline void SCUserDetailInfo::clear_has_corps_guide() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void SCUserDetailInfo::clear_corps_guide() {
  corps_guide_ = 0u;
  clear_has_corps_guide();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::corps_guide() const {
  return corps_guide_;
}
inline void SCUserDetailInfo::set_corps_guide(::google::protobuf::uint32 value) {
  set_has_corps_guide();
  corps_guide_ = value;
}

// optional uint32 total_charge = 946;
inline bool SCUserDetailInfo::has_total_charge() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void SCUserDetailInfo::set_has_total_charge() {
  _has_bits_[1] |= 0x00000800u;
}
inline void SCUserDetailInfo::clear_has_total_charge() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void SCUserDetailInfo::clear_total_charge() {
  total_charge_ = 0u;
  clear_has_total_charge();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::total_charge() const {
  return total_charge_;
}
inline void SCUserDetailInfo::set_total_charge(::google::protobuf::uint32 value) {
  set_has_total_charge();
  total_charge_ = value;
}

// optional uint32 day_charge = 947;
inline bool SCUserDetailInfo::has_day_charge() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void SCUserDetailInfo::set_has_day_charge() {
  _has_bits_[1] |= 0x00001000u;
}
inline void SCUserDetailInfo::clear_has_day_charge() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void SCUserDetailInfo::clear_day_charge() {
  day_charge_ = 0u;
  clear_has_day_charge();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::day_charge() const {
  return day_charge_;
}
inline void SCUserDetailInfo::set_day_charge(::google::protobuf::uint32 value) {
  set_has_day_charge();
  day_charge_ = value;
}

// optional uint32 month_card = 948;
inline bool SCUserDetailInfo::has_month_card() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void SCUserDetailInfo::set_has_month_card() {
  _has_bits_[1] |= 0x00002000u;
}
inline void SCUserDetailInfo::clear_has_month_card() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void SCUserDetailInfo::clear_month_card() {
  month_card_ = 0u;
  clear_has_month_card();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::month_card() const {
  return month_card_;
}
inline void SCUserDetailInfo::set_month_card(::google::protobuf::uint32 value) {
  set_has_month_card();
  month_card_ = value;
}

// optional uint32 forever_card = 949;
inline bool SCUserDetailInfo::has_forever_card() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void SCUserDetailInfo::set_has_forever_card() {
  _has_bits_[1] |= 0x00004000u;
}
inline void SCUserDetailInfo::clear_has_forever_card() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void SCUserDetailInfo::clear_forever_card() {
  forever_card_ = 0u;
  clear_has_forever_card();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::forever_card() const {
  return forever_card_;
}
inline void SCUserDetailInfo::set_forever_card(::google::protobuf::uint32 value) {
  set_has_forever_card();
  forever_card_ = value;
}

// optional uint32 sys_setting = 950;
inline bool SCUserDetailInfo::has_sys_setting() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void SCUserDetailInfo::set_has_sys_setting() {
  _has_bits_[1] |= 0x00008000u;
}
inline void SCUserDetailInfo::clear_has_sys_setting() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void SCUserDetailInfo::clear_sys_setting() {
  sys_setting_ = 0u;
  clear_has_sys_setting();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::sys_setting() const {
  return sys_setting_;
}
inline void SCUserDetailInfo::set_sys_setting(::google::protobuf::uint32 value) {
  set_has_sys_setting();
  sys_setting_ = value;
}

// optional uint32 today_roulette = 951;
inline bool SCUserDetailInfo::has_today_roulette() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void SCUserDetailInfo::set_has_today_roulette() {
  _has_bits_[1] |= 0x00010000u;
}
inline void SCUserDetailInfo::clear_has_today_roulette() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void SCUserDetailInfo::clear_today_roulette() {
  today_roulette_ = 0u;
  clear_has_today_roulette();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::today_roulette() const {
  return today_roulette_;
}
inline void SCUserDetailInfo::set_today_roulette(::google::protobuf::uint32 value) {
  set_has_today_roulette();
  today_roulette_ = value;
}

// optional uint32 today_ten_roulette = 952;
inline bool SCUserDetailInfo::has_today_ten_roulette() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void SCUserDetailInfo::set_has_today_ten_roulette() {
  _has_bits_[1] |= 0x00020000u;
}
inline void SCUserDetailInfo::clear_has_today_ten_roulette() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void SCUserDetailInfo::clear_today_ten_roulette() {
  today_ten_roulette_ = 0u;
  clear_has_today_ten_roulette();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::today_ten_roulette() const {
  return today_ten_roulette_;
}
inline void SCUserDetailInfo::set_today_ten_roulette(::google::protobuf::uint32 value) {
  set_has_today_ten_roulette();
  today_ten_roulette_ = value;
}

// optional uint32 today_small_charge = 953;
inline bool SCUserDetailInfo::has_today_small_charge() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void SCUserDetailInfo::set_has_today_small_charge() {
  _has_bits_[1] |= 0x00040000u;
}
inline void SCUserDetailInfo::clear_has_today_small_charge() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void SCUserDetailInfo::clear_today_small_charge() {
  today_small_charge_ = 0u;
  clear_has_today_small_charge();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::today_small_charge() const {
  return today_small_charge_;
}
inline void SCUserDetailInfo::set_today_small_charge(::google::protobuf::uint32 value) {
  set_has_today_small_charge();
  today_small_charge_ = value;
}

// optional uint32 crystal = 954;
inline bool SCUserDetailInfo::has_crystal() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void SCUserDetailInfo::set_has_crystal() {
  _has_bits_[1] |= 0x00080000u;
}
inline void SCUserDetailInfo::clear_has_crystal() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void SCUserDetailInfo::clear_crystal() {
  crystal_ = 0u;
  clear_has_crystal();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::crystal() const {
  return crystal_;
}
inline void SCUserDetailInfo::set_crystal(::google::protobuf::uint32 value) {
  set_has_crystal();
  crystal_ = value;
}

// optional uint32 double_open = 955;
inline bool SCUserDetailInfo::has_double_open() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void SCUserDetailInfo::set_has_double_open() {
  _has_bits_[1] |= 0x00100000u;
}
inline void SCUserDetailInfo::clear_has_double_open() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void SCUserDetailInfo::clear_double_open() {
  double_open_ = 0u;
  clear_has_double_open();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::double_open() const {
  return double_open_;
}
inline void SCUserDetailInfo::set_double_open(::google::protobuf::uint32 value) {
  set_has_double_open();
  double_open_ = value;
}

// optional uint32 endless_check_wave = 956;
inline bool SCUserDetailInfo::has_endless_check_wave() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void SCUserDetailInfo::set_has_endless_check_wave() {
  _has_bits_[1] |= 0x00200000u;
}
inline void SCUserDetailInfo::clear_has_endless_check_wave() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void SCUserDetailInfo::clear_endless_check_wave() {
  endless_check_wave_ = 0u;
  clear_has_endless_check_wave();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::endless_check_wave() const {
  return endless_check_wave_;
}
inline void SCUserDetailInfo::set_endless_check_wave(::google::protobuf::uint32 value) {
  set_has_endless_check_wave();
  endless_check_wave_ = value;
}

// optional uint32 endless_check_score = 957;
inline bool SCUserDetailInfo::has_endless_check_score() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void SCUserDetailInfo::set_has_endless_check_score() {
  _has_bits_[1] |= 0x00400000u;
}
inline void SCUserDetailInfo::clear_has_endless_check_score() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void SCUserDetailInfo::clear_endless_check_score() {
  endless_check_score_ = 0u;
  clear_has_endless_check_score();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::endless_check_score() const {
  return endless_check_score_;
}
inline void SCUserDetailInfo::set_endless_check_score(::google::protobuf::uint32 value) {
  set_has_endless_check_score();
  endless_check_score_ = value;
}

// optional uint32 check_point = 958;
inline bool SCUserDetailInfo::has_check_point() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void SCUserDetailInfo::set_has_check_point() {
  _has_bits_[1] |= 0x00800000u;
}
inline void SCUserDetailInfo::clear_has_check_point() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void SCUserDetailInfo::clear_check_point() {
  check_point_ = 0u;
  clear_has_check_point();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::check_point() const {
  return check_point_;
}
inline void SCUserDetailInfo::set_check_point(::google::protobuf::uint32 value) {
  set_has_check_point();
  check_point_ = value;
}

// optional uint32 is_cheat = 999;
inline bool SCUserDetailInfo::has_is_cheat() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void SCUserDetailInfo::set_has_is_cheat() {
  _has_bits_[1] |= 0x01000000u;
}
inline void SCUserDetailInfo::clear_has_is_cheat() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void SCUserDetailInfo::clear_is_cheat() {
  is_cheat_ = 0u;
  clear_has_is_cheat();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::is_cheat() const {
  return is_cheat_;
}
inline void SCUserDetailInfo::set_is_cheat(::google::protobuf::uint32 value) {
  set_has_is_cheat();
  is_cheat_ = value;
}

// optional uint32 server_local_time = 10100;
inline bool SCUserDetailInfo::has_server_local_time() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void SCUserDetailInfo::set_has_server_local_time() {
  _has_bits_[1] |= 0x02000000u;
}
inline void SCUserDetailInfo::clear_has_server_local_time() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void SCUserDetailInfo::clear_server_local_time() {
  server_local_time_ = 0u;
  clear_has_server_local_time();
}
inline ::google::protobuf::uint32 SCUserDetailInfo::server_local_time() const {
  return server_local_time_;
}
inline void SCUserDetailInfo::set_server_local_time(::google::protobuf::uint32 value) {
  set_has_server_local_time();
  server_local_time_ = value;
}

// optional string create_time = 10101;
inline bool SCUserDetailInfo::has_create_time() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void SCUserDetailInfo::set_has_create_time() {
  _has_bits_[1] |= 0x04000000u;
}
inline void SCUserDetailInfo::clear_has_create_time() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void SCUserDetailInfo::clear_create_time() {
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    create_time_->clear();
  }
  clear_has_create_time();
}
inline const ::std::string& SCUserDetailInfo::create_time() const {
  return *create_time_;
}
inline void SCUserDetailInfo::set_create_time(const ::std::string& value) {
  set_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    create_time_ = new ::std::string;
  }
  create_time_->assign(value);
}
inline void SCUserDetailInfo::set_create_time(const char* value) {
  set_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    create_time_ = new ::std::string;
  }
  create_time_->assign(value);
}
inline void SCUserDetailInfo::set_create_time(const char* value, size_t size) {
  set_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    create_time_ = new ::std::string;
  }
  create_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCUserDetailInfo::mutable_create_time() {
  set_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    create_time_ = new ::std::string;
  }
  return create_time_;
}
inline ::std::string* SCUserDetailInfo::release_create_time() {
  clear_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = create_time_;
    create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCUserDetailInfo::set_allocated_create_time(::std::string* create_time) {
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_;
  }
  if (create_time) {
    set_has_create_time();
    create_time_ = create_time;
  } else {
    clear_has_create_time();
    create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string login_time = 10102;
inline bool SCUserDetailInfo::has_login_time() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void SCUserDetailInfo::set_has_login_time() {
  _has_bits_[1] |= 0x08000000u;
}
inline void SCUserDetailInfo::clear_has_login_time() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void SCUserDetailInfo::clear_login_time() {
  if (login_time_ != &::google::protobuf::internal::kEmptyString) {
    login_time_->clear();
  }
  clear_has_login_time();
}
inline const ::std::string& SCUserDetailInfo::login_time() const {
  return *login_time_;
}
inline void SCUserDetailInfo::set_login_time(const ::std::string& value) {
  set_has_login_time();
  if (login_time_ == &::google::protobuf::internal::kEmptyString) {
    login_time_ = new ::std::string;
  }
  login_time_->assign(value);
}
inline void SCUserDetailInfo::set_login_time(const char* value) {
  set_has_login_time();
  if (login_time_ == &::google::protobuf::internal::kEmptyString) {
    login_time_ = new ::std::string;
  }
  login_time_->assign(value);
}
inline void SCUserDetailInfo::set_login_time(const char* value, size_t size) {
  set_has_login_time();
  if (login_time_ == &::google::protobuf::internal::kEmptyString) {
    login_time_ = new ::std::string;
  }
  login_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCUserDetailInfo::mutable_login_time() {
  set_has_login_time();
  if (login_time_ == &::google::protobuf::internal::kEmptyString) {
    login_time_ = new ::std::string;
  }
  return login_time_;
}
inline ::std::string* SCUserDetailInfo::release_login_time() {
  clear_has_login_time();
  if (login_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_time_;
    login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCUserDetailInfo::set_allocated_login_time(::std::string* login_time) {
  if (login_time_ != &::google::protobuf::internal::kEmptyString) {
    delete login_time_;
  }
  if (login_time) {
    set_has_login_time();
    login_time_ = login_time;
  } else {
    clear_has_login_time();
    login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SCMessageOperationResult

// required .jynetwork.proto.eOpertionResult result = 1;
inline bool SCMessageOperationResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageOperationResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageOperationResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageOperationResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::jynetwork::proto::eOpertionResult SCMessageOperationResult::result() const {
  return static_cast< ::jynetwork::proto::eOpertionResult >(result_);
}
inline void SCMessageOperationResult::set_result(::jynetwork::proto::eOpertionResult value) {
  assert(::jynetwork::proto::eOpertionResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// required .jynetwork.proto.eOpertionType operatin = 2;
inline bool SCMessageOperationResult::has_operatin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageOperationResult::set_has_operatin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageOperationResult::clear_has_operatin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageOperationResult::clear_operatin() {
  operatin_ = 1;
  clear_has_operatin();
}
inline ::jynetwork::proto::eOpertionType SCMessageOperationResult::operatin() const {
  return static_cast< ::jynetwork::proto::eOpertionType >(operatin_);
}
inline void SCMessageOperationResult::set_operatin(::jynetwork::proto::eOpertionType value) {
  assert(::jynetwork::proto::eOpertionType_IsValid(value));
  set_has_operatin();
  operatin_ = value;
}

// optional uint32 acc_id = 3;
inline bool SCMessageOperationResult::has_acc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageOperationResult::set_has_acc_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageOperationResult::clear_has_acc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageOperationResult::clear_acc_id() {
  acc_id_ = 0u;
  clear_has_acc_id();
}
inline ::google::protobuf::uint32 SCMessageOperationResult::acc_id() const {
  return acc_id_;
}
inline void SCMessageOperationResult::set_acc_id(::google::protobuf::uint32 value) {
  set_has_acc_id();
  acc_id_ = value;
}

// optional uint32 bonus = 4;
inline bool SCMessageOperationResult::has_bonus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCMessageOperationResult::set_has_bonus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCMessageOperationResult::clear_has_bonus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCMessageOperationResult::clear_bonus() {
  bonus_ = 0u;
  clear_has_bonus();
}
inline ::google::protobuf::uint32 SCMessageOperationResult::bonus() const {
  return bonus_;
}
inline void SCMessageOperationResult::set_bonus(::google::protobuf::uint32 value) {
  set_has_bonus();
  bonus_ = value;
}

// optional uint32 next_item = 5;
inline bool SCMessageOperationResult::has_next_item() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCMessageOperationResult::set_has_next_item() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCMessageOperationResult::clear_has_next_item() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCMessageOperationResult::clear_next_item() {
  next_item_ = 0u;
  clear_has_next_item();
}
inline ::google::protobuf::uint32 SCMessageOperationResult::next_item() const {
  return next_item_;
}
inline void SCMessageOperationResult::set_next_item(::google::protobuf::uint32 value) {
  set_has_next_item();
  next_item_ = value;
}

// optional uint32 oper_value = 6;
inline bool SCMessageOperationResult::has_oper_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCMessageOperationResult::set_has_oper_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCMessageOperationResult::clear_has_oper_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCMessageOperationResult::clear_oper_value() {
  oper_value_ = 0u;
  clear_has_oper_value();
}
inline ::google::protobuf::uint32 SCMessageOperationResult::oper_value() const {
  return oper_value_;
}
inline void SCMessageOperationResult::set_oper_value(::google::protobuf::uint32 value) {
  set_has_oper_value();
  oper_value_ = value;
}

// repeated .jynetwork.proto.sSimpleItem simple_item = 7;
inline int SCMessageOperationResult::simple_item_size() const {
  return simple_item_.size();
}
inline void SCMessageOperationResult::clear_simple_item() {
  simple_item_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& SCMessageOperationResult::simple_item(int index) const {
  return simple_item_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* SCMessageOperationResult::mutable_simple_item(int index) {
  return simple_item_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* SCMessageOperationResult::add_simple_item() {
  return simple_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
SCMessageOperationResult::simple_item() const {
  return simple_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
SCMessageOperationResult::mutable_simple_item() {
  return &simple_item_;
}

// optional uint64 oper_value2 = 8;
inline bool SCMessageOperationResult::has_oper_value2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SCMessageOperationResult::set_has_oper_value2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SCMessageOperationResult::clear_has_oper_value2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SCMessageOperationResult::clear_oper_value2() {
  oper_value2_ = GOOGLE_ULONGLONG(0);
  clear_has_oper_value2();
}
inline ::google::protobuf::uint64 SCMessageOperationResult::oper_value2() const {
  return oper_value2_;
}
inline void SCMessageOperationResult::set_oper_value2(::google::protobuf::uint64 value) {
  set_has_oper_value2();
  oper_value2_ = value;
}

// -------------------------------------------------------------------

// SCMessageShopItem

// optional uint32 shop_type = 1;
inline bool SCMessageShopItem::has_shop_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageShopItem::set_has_shop_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageShopItem::clear_has_shop_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageShopItem::clear_shop_type() {
  shop_type_ = 0u;
  clear_has_shop_type();
}
inline ::google::protobuf::uint32 SCMessageShopItem::shop_type() const {
  return shop_type_;
}
inline void SCMessageShopItem::set_shop_type(::google::protobuf::uint32 value) {
  set_has_shop_type();
  shop_type_ = value;
}

// repeated .jynetwork.proto.sSimpleItem item = 2;
inline int SCMessageShopItem::item_size() const {
  return item_.size();
}
inline void SCMessageShopItem::clear_item() {
  item_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& SCMessageShopItem::item(int index) const {
  return item_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* SCMessageShopItem::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* SCMessageShopItem::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
SCMessageShopItem::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
SCMessageShopItem::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// SCMessageBattleSweepReward_RewardInfo

// repeated .jynetwork.proto.sPersonEquipStats equip = 1;
inline int SCMessageBattleSweepReward_RewardInfo::equip_size() const {
  return equip_.size();
}
inline void SCMessageBattleSweepReward_RewardInfo::clear_equip() {
  equip_.Clear();
}
inline const ::jynetwork::proto::sPersonEquipStats& SCMessageBattleSweepReward_RewardInfo::equip(int index) const {
  return equip_.Get(index);
}
inline ::jynetwork::proto::sPersonEquipStats* SCMessageBattleSweepReward_RewardInfo::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::jynetwork::proto::sPersonEquipStats* SCMessageBattleSweepReward_RewardInfo::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
SCMessageBattleSweepReward_RewardInfo::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
SCMessageBattleSweepReward_RewardInfo::mutable_equip() {
  return &equip_;
}

// repeated .jynetwork.proto.sPersonItemStats item = 2;
inline int SCMessageBattleSweepReward_RewardInfo::item_size() const {
  return item_.size();
}
inline void SCMessageBattleSweepReward_RewardInfo::clear_item() {
  item_.Clear();
}
inline const ::jynetwork::proto::sPersonItemStats& SCMessageBattleSweepReward_RewardInfo::item(int index) const {
  return item_.Get(index);
}
inline ::jynetwork::proto::sPersonItemStats* SCMessageBattleSweepReward_RewardInfo::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::jynetwork::proto::sPersonItemStats* SCMessageBattleSweepReward_RewardInfo::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
SCMessageBattleSweepReward_RewardInfo::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
SCMessageBattleSweepReward_RewardInfo::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// SCMessageBattleSweepReward

// optional uint32 map_id = 1;
inline bool SCMessageBattleSweepReward::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageBattleSweepReward::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageBattleSweepReward::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageBattleSweepReward::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 SCMessageBattleSweepReward::map_id() const {
  return map_id_;
}
inline void SCMessageBattleSweepReward::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional uint32 difficult = 2;
inline bool SCMessageBattleSweepReward::has_difficult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageBattleSweepReward::set_has_difficult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageBattleSweepReward::clear_has_difficult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageBattleSweepReward::clear_difficult() {
  difficult_ = 0u;
  clear_has_difficult();
}
inline ::google::protobuf::uint32 SCMessageBattleSweepReward::difficult() const {
  return difficult_;
}
inline void SCMessageBattleSweepReward::set_difficult(::google::protobuf::uint32 value) {
  set_has_difficult();
  difficult_ = value;
}

// optional uint32 exp = 3;
inline bool SCMessageBattleSweepReward::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageBattleSweepReward::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageBattleSweepReward::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageBattleSweepReward::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 SCMessageBattleSweepReward::exp() const {
  return exp_;
}
inline void SCMessageBattleSweepReward::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 battle_money = 4;
inline bool SCMessageBattleSweepReward::has_battle_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCMessageBattleSweepReward::set_has_battle_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCMessageBattleSweepReward::clear_has_battle_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCMessageBattleSweepReward::clear_battle_money() {
  battle_money_ = 0u;
  clear_has_battle_money();
}
inline ::google::protobuf::uint32 SCMessageBattleSweepReward::battle_money() const {
  return battle_money_;
}
inline void SCMessageBattleSweepReward::set_battle_money(::google::protobuf::uint32 value) {
  set_has_battle_money();
  battle_money_ = value;
}

// repeated .jynetwork.proto.SCMessageBattleSweepReward.RewardInfo reward = 5;
inline int SCMessageBattleSweepReward::reward_size() const {
  return reward_.size();
}
inline void SCMessageBattleSweepReward::clear_reward() {
  reward_.Clear();
}
inline const ::jynetwork::proto::SCMessageBattleSweepReward_RewardInfo& SCMessageBattleSweepReward::reward(int index) const {
  return reward_.Get(index);
}
inline ::jynetwork::proto::SCMessageBattleSweepReward_RewardInfo* SCMessageBattleSweepReward::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::jynetwork::proto::SCMessageBattleSweepReward_RewardInfo* SCMessageBattleSweepReward::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageBattleSweepReward_RewardInfo >&
SCMessageBattleSweepReward::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageBattleSweepReward_RewardInfo >*
SCMessageBattleSweepReward::mutable_reward() {
  return &reward_;
}

// optional uint32 battle_star = 6;
inline bool SCMessageBattleSweepReward::has_battle_star() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCMessageBattleSweepReward::set_has_battle_star() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCMessageBattleSweepReward::clear_has_battle_star() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCMessageBattleSweepReward::clear_battle_star() {
  battle_star_ = 0u;
  clear_has_battle_star();
}
inline ::google::protobuf::uint32 SCMessageBattleSweepReward::battle_star() const {
  return battle_star_;
}
inline void SCMessageBattleSweepReward::set_battle_star(::google::protobuf::uint32 value) {
  set_has_battle_star();
  battle_star_ = value;
}

// optional uint32 old_level = 7;
inline bool SCMessageBattleSweepReward::has_old_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCMessageBattleSweepReward::set_has_old_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCMessageBattleSweepReward::clear_has_old_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCMessageBattleSweepReward::clear_old_level() {
  old_level_ = 0u;
  clear_has_old_level();
}
inline ::google::protobuf::uint32 SCMessageBattleSweepReward::old_level() const {
  return old_level_;
}
inline void SCMessageBattleSweepReward::set_old_level(::google::protobuf::uint32 value) {
  set_has_old_level();
  old_level_ = value;
}

// optional uint32 old_exp = 8;
inline bool SCMessageBattleSweepReward::has_old_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SCMessageBattleSweepReward::set_has_old_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SCMessageBattleSweepReward::clear_has_old_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SCMessageBattleSweepReward::clear_old_exp() {
  old_exp_ = 0u;
  clear_has_old_exp();
}
inline ::google::protobuf::uint32 SCMessageBattleSweepReward::old_exp() const {
  return old_exp_;
}
inline void SCMessageBattleSweepReward::set_old_exp(::google::protobuf::uint32 value) {
  set_has_old_exp();
  old_exp_ = value;
}

// optional uint32 card_exp = 9;
inline bool SCMessageBattleSweepReward::has_card_exp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SCMessageBattleSweepReward::set_has_card_exp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SCMessageBattleSweepReward::clear_has_card_exp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SCMessageBattleSweepReward::clear_card_exp() {
  card_exp_ = 0u;
  clear_has_card_exp();
}
inline ::google::protobuf::uint32 SCMessageBattleSweepReward::card_exp() const {
  return card_exp_;
}
inline void SCMessageBattleSweepReward::set_card_exp(::google::protobuf::uint32 value) {
  set_has_card_exp();
  card_exp_ = value;
}

// optional .jynetwork.proto.eOpertionResult result = 10;
inline bool SCMessageBattleSweepReward::has_result() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SCMessageBattleSweepReward::set_has_result() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SCMessageBattleSweepReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SCMessageBattleSweepReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::jynetwork::proto::eOpertionResult SCMessageBattleSweepReward::result() const {
  return static_cast< ::jynetwork::proto::eOpertionResult >(result_);
}
inline void SCMessageBattleSweepReward::set_result(::jynetwork::proto::eOpertionResult value) {
  assert(::jynetwork::proto::eOpertionResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 catlog = 11;
inline bool SCMessageBattleSweepReward::has_catlog() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SCMessageBattleSweepReward::set_has_catlog() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SCMessageBattleSweepReward::clear_has_catlog() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SCMessageBattleSweepReward::clear_catlog() {
  catlog_ = 0u;
  clear_has_catlog();
}
inline ::google::protobuf::uint32 SCMessageBattleSweepReward::catlog() const {
  return catlog_;
}
inline void SCMessageBattleSweepReward::set_catlog(::google::protobuf::uint32 value) {
  set_has_catlog();
  catlog_ = value;
}

// -------------------------------------------------------------------

// SCMessageBattleRewardEnd

// optional uint32 map_id = 1;
inline bool SCMessageBattleRewardEnd::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageBattleRewardEnd::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageBattleRewardEnd::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageBattleRewardEnd::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 SCMessageBattleRewardEnd::map_id() const {
  return map_id_;
}
inline void SCMessageBattleRewardEnd::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional uint32 difficult = 2;
inline bool SCMessageBattleRewardEnd::has_difficult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageBattleRewardEnd::set_has_difficult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageBattleRewardEnd::clear_has_difficult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageBattleRewardEnd::clear_difficult() {
  difficult_ = 0u;
  clear_has_difficult();
}
inline ::google::protobuf::uint32 SCMessageBattleRewardEnd::difficult() const {
  return difficult_;
}
inline void SCMessageBattleRewardEnd::set_difficult(::google::protobuf::uint32 value) {
  set_has_difficult();
  difficult_ = value;
}

// optional uint32 catlog = 3;
inline bool SCMessageBattleRewardEnd::has_catlog() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageBattleRewardEnd::set_has_catlog() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageBattleRewardEnd::clear_has_catlog() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageBattleRewardEnd::clear_catlog() {
  catlog_ = 0u;
  clear_has_catlog();
}
inline ::google::protobuf::uint32 SCMessageBattleRewardEnd::catlog() const {
  return catlog_;
}
inline void SCMessageBattleRewardEnd::set_catlog(::google::protobuf::uint32 value) {
  set_has_catlog();
  catlog_ = value;
}

// -------------------------------------------------------------------

// sPlayerSave

// optional .jynetwork.proto.SCUserDetailInfo udi = 1;
inline bool sPlayerSave::has_udi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPlayerSave::set_has_udi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPlayerSave::clear_has_udi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPlayerSave::clear_udi() {
  if (udi_ != NULL) udi_->::jynetwork::proto::SCUserDetailInfo::Clear();
  clear_has_udi();
}
inline const ::jynetwork::proto::SCUserDetailInfo& sPlayerSave::udi() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return udi_ != NULL ? *udi_ : *default_instance().udi_;
#else
  return udi_ != NULL ? *udi_ : *default_instance_->udi_;
#endif
}
inline ::jynetwork::proto::SCUserDetailInfo* sPlayerSave::mutable_udi() {
  set_has_udi();
  if (udi_ == NULL) udi_ = new ::jynetwork::proto::SCUserDetailInfo;
  return udi_;
}
inline ::jynetwork::proto::SCUserDetailInfo* sPlayerSave::release_udi() {
  clear_has_udi();
  ::jynetwork::proto::SCUserDetailInfo* temp = udi_;
  udi_ = NULL;
  return temp;
}
inline void sPlayerSave::set_allocated_udi(::jynetwork::proto::SCUserDetailInfo* udi) {
  delete udi_;
  udi_ = udi;
  if (udi) {
    set_has_udi();
  } else {
    clear_has_udi();
  }
}

// optional .jynetwork.proto.sCastleComplete cc = 2;
inline bool sPlayerSave::has_cc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPlayerSave::set_has_cc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPlayerSave::clear_has_cc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPlayerSave::clear_cc() {
  if (cc_ != NULL) cc_->::jynetwork::proto::sCastleComplete::Clear();
  clear_has_cc();
}
inline const ::jynetwork::proto::sCastleComplete& sPlayerSave::cc() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return cc_ != NULL ? *cc_ : *default_instance().cc_;
#else
  return cc_ != NULL ? *cc_ : *default_instance_->cc_;
#endif
}
inline ::jynetwork::proto::sCastleComplete* sPlayerSave::mutable_cc() {
  set_has_cc();
  if (cc_ == NULL) cc_ = new ::jynetwork::proto::sCastleComplete;
  return cc_;
}
inline ::jynetwork::proto::sCastleComplete* sPlayerSave::release_cc() {
  clear_has_cc();
  ::jynetwork::proto::sCastleComplete* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline void sPlayerSave::set_allocated_cc(::jynetwork::proto::sCastleComplete* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    set_has_cc();
  } else {
    clear_has_cc();
  }
}

// repeated .jynetwork.proto.sPersonEquipStats otherequip = 3;
inline int sPlayerSave::otherequip_size() const {
  return otherequip_.size();
}
inline void sPlayerSave::clear_otherequip() {
  otherequip_.Clear();
}
inline const ::jynetwork::proto::sPersonEquipStats& sPlayerSave::otherequip(int index) const {
  return otherequip_.Get(index);
}
inline ::jynetwork::proto::sPersonEquipStats* sPlayerSave::mutable_otherequip(int index) {
  return otherequip_.Mutable(index);
}
inline ::jynetwork::proto::sPersonEquipStats* sPlayerSave::add_otherequip() {
  return otherequip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
sPlayerSave::otherequip() const {
  return otherequip_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
sPlayerSave::mutable_otherequip() {
  return &otherequip_;
}

// optional uint32 version = 4;
inline bool sPlayerSave::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sPlayerSave::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sPlayerSave::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sPlayerSave::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 sPlayerSave::version() const {
  return version_;
}
inline void sPlayerSave::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// optional uint32 itemdbid = 5;
inline bool sPlayerSave::has_itemdbid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sPlayerSave::set_has_itemdbid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sPlayerSave::clear_has_itemdbid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sPlayerSave::clear_itemdbid() {
  itemdbid_ = 0u;
  clear_has_itemdbid();
}
inline ::google::protobuf::uint32 sPlayerSave::itemdbid() const {
  return itemdbid_;
}
inline void sPlayerSave::set_itemdbid(::google::protobuf::uint32 value) {
  set_has_itemdbid();
  itemdbid_ = value;
}

// optional uint32 equipdbid = 6;
inline bool sPlayerSave::has_equipdbid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sPlayerSave::set_has_equipdbid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sPlayerSave::clear_has_equipdbid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sPlayerSave::clear_equipdbid() {
  equipdbid_ = 0u;
  clear_has_equipdbid();
}
inline ::google::protobuf::uint32 sPlayerSave::equipdbid() const {
  return equipdbid_;
}
inline void sPlayerSave::set_equipdbid(::google::protobuf::uint32 value) {
  set_has_equipdbid();
  equipdbid_ = value;
}

// repeated .jynetwork.proto.sPersonEquipStats dropquip = 7;
inline int sPlayerSave::dropquip_size() const {
  return dropquip_.size();
}
inline void sPlayerSave::clear_dropquip() {
  dropquip_.Clear();
}
inline const ::jynetwork::proto::sPersonEquipStats& sPlayerSave::dropquip(int index) const {
  return dropquip_.Get(index);
}
inline ::jynetwork::proto::sPersonEquipStats* sPlayerSave::mutable_dropquip(int index) {
  return dropquip_.Mutable(index);
}
inline ::jynetwork::proto::sPersonEquipStats* sPlayerSave::add_dropquip() {
  return dropquip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
sPlayerSave::dropquip() const {
  return dropquip_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
sPlayerSave::mutable_dropquip() {
  return &dropquip_;
}

// repeated .jynetwork.proto.sPersonItemStats dropitem = 8;
inline int sPlayerSave::dropitem_size() const {
  return dropitem_.size();
}
inline void sPlayerSave::clear_dropitem() {
  dropitem_.Clear();
}
inline const ::jynetwork::proto::sPersonItemStats& sPlayerSave::dropitem(int index) const {
  return dropitem_.Get(index);
}
inline ::jynetwork::proto::sPersonItemStats* sPlayerSave::mutable_dropitem(int index) {
  return dropitem_.Mutable(index);
}
inline ::jynetwork::proto::sPersonItemStats* sPlayerSave::add_dropitem() {
  return dropitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
sPlayerSave::dropitem() const {
  return dropitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
sPlayerSave::mutable_dropitem() {
  return &dropitem_;
}

// -------------------------------------------------------------------

// SCOpponentDetailInfo

// optional uint32 acc_id = 1;
inline bool SCOpponentDetailInfo::has_acc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCOpponentDetailInfo::set_has_acc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCOpponentDetailInfo::clear_has_acc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCOpponentDetailInfo::clear_acc_id() {
  acc_id_ = 0u;
  clear_has_acc_id();
}
inline ::google::protobuf::uint32 SCOpponentDetailInfo::acc_id() const {
  return acc_id_;
}
inline void SCOpponentDetailInfo::set_acc_id(::google::protobuf::uint32 value) {
  set_has_acc_id();
  acc_id_ = value;
}

// optional bytes sname = 2;
inline bool SCOpponentDetailInfo::has_sname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCOpponentDetailInfo::set_has_sname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCOpponentDetailInfo::clear_has_sname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCOpponentDetailInfo::clear_sname() {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    sname_->clear();
  }
  clear_has_sname();
}
inline const ::std::string& SCOpponentDetailInfo::sname() const {
  return *sname_;
}
inline void SCOpponentDetailInfo::set_sname(const ::std::string& value) {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  sname_->assign(value);
}
inline void SCOpponentDetailInfo::set_sname(const char* value) {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  sname_->assign(value);
}
inline void SCOpponentDetailInfo::set_sname(const void* value, size_t size) {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  sname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCOpponentDetailInfo::mutable_sname() {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  return sname_;
}
inline ::std::string* SCOpponentDetailInfo::release_sname() {
  clear_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sname_;
    sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCOpponentDetailInfo::set_allocated_sname(::std::string* sname) {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    delete sname_;
  }
  if (sname) {
    set_has_sname();
    sname_ = sname;
  } else {
    clear_has_sname();
    sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .jynetwork.proto.eCampBelong campbelong = 3;
inline bool SCOpponentDetailInfo::has_campbelong() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCOpponentDetailInfo::set_has_campbelong() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCOpponentDetailInfo::clear_has_campbelong() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCOpponentDetailInfo::clear_campbelong() {
  campbelong_ = 0;
  clear_has_campbelong();
}
inline ::jynetwork::proto::eCampBelong SCOpponentDetailInfo::campbelong() const {
  return static_cast< ::jynetwork::proto::eCampBelong >(campbelong_);
}
inline void SCOpponentDetailInfo::set_campbelong(::jynetwork::proto::eCampBelong value) {
  assert(::jynetwork::proto::eCampBelong_IsValid(value));
  set_has_campbelong();
  campbelong_ = value;
}

// optional uint32 guildid = 4;
inline bool SCOpponentDetailInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCOpponentDetailInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCOpponentDetailInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCOpponentDetailInfo::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 SCOpponentDetailInfo::guildid() const {
  return guildid_;
}
inline void SCOpponentDetailInfo::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 viplevel = 5;
inline bool SCOpponentDetailInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCOpponentDetailInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCOpponentDetailInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCOpponentDetailInfo::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 SCOpponentDetailInfo::viplevel() const {
  return viplevel_;
}
inline void SCOpponentDetailInfo::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional uint32 charslot = 6;
inline bool SCOpponentDetailInfo::has_charslot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCOpponentDetailInfo::set_has_charslot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCOpponentDetailInfo::clear_has_charslot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCOpponentDetailInfo::clear_charslot() {
  charslot_ = 0u;
  clear_has_charslot();
}
inline ::google::protobuf::uint32 SCOpponentDetailInfo::charslot() const {
  return charslot_;
}
inline void SCOpponentDetailInfo::set_charslot(::google::protobuf::uint32 value) {
  set_has_charslot();
  charslot_ = value;
}

// repeated .jynetwork.proto.sCharactorInit chars = 7;
inline int SCOpponentDetailInfo::chars_size() const {
  return chars_.size();
}
inline void SCOpponentDetailInfo::clear_chars() {
  chars_.Clear();
}
inline const ::jynetwork::proto::sCharactorInit& SCOpponentDetailInfo::chars(int index) const {
  return chars_.Get(index);
}
inline ::jynetwork::proto::sCharactorInit* SCOpponentDetailInfo::mutable_chars(int index) {
  return chars_.Mutable(index);
}
inline ::jynetwork::proto::sCharactorInit* SCOpponentDetailInfo::add_chars() {
  return chars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit >&
SCOpponentDetailInfo::chars() const {
  return chars_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit >*
SCOpponentDetailInfo::mutable_chars() {
  return &chars_;
}

// repeated .jynetwork.proto.sPersonCardStats cards = 8;
inline int SCOpponentDetailInfo::cards_size() const {
  return cards_.size();
}
inline void SCOpponentDetailInfo::clear_cards() {
  cards_.Clear();
}
inline const ::jynetwork::proto::sPersonCardStats& SCOpponentDetailInfo::cards(int index) const {
  return cards_.Get(index);
}
inline ::jynetwork::proto::sPersonCardStats* SCOpponentDetailInfo::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::jynetwork::proto::sPersonCardStats* SCOpponentDetailInfo::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats >&
SCOpponentDetailInfo::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats >*
SCOpponentDetailInfo::mutable_cards() {
  return &cards_;
}

// repeated .jynetwork.proto.sPersonEquipStats equip = 9;
inline int SCOpponentDetailInfo::equip_size() const {
  return equip_.size();
}
inline void SCOpponentDetailInfo::clear_equip() {
  equip_.Clear();
}
inline const ::jynetwork::proto::sPersonEquipStats& SCOpponentDetailInfo::equip(int index) const {
  return equip_.Get(index);
}
inline ::jynetwork::proto::sPersonEquipStats* SCOpponentDetailInfo::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::jynetwork::proto::sPersonEquipStats* SCOpponentDetailInfo::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
SCOpponentDetailInfo::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
SCOpponentDetailInfo::mutable_equip() {
  return &equip_;
}

// repeated .jynetwork.proto.sPersonSkillStats skills = 10;
inline int SCOpponentDetailInfo::skills_size() const {
  return skills_.size();
}
inline void SCOpponentDetailInfo::clear_skills() {
  skills_.Clear();
}
inline const ::jynetwork::proto::sPersonSkillStats& SCOpponentDetailInfo::skills(int index) const {
  return skills_.Get(index);
}
inline ::jynetwork::proto::sPersonSkillStats* SCOpponentDetailInfo::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::jynetwork::proto::sPersonSkillStats* SCOpponentDetailInfo::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats >&
SCOpponentDetailInfo::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats >*
SCOpponentDetailInfo::mutable_skills() {
  return &skills_;
}

// -------------------------------------------------------------------

// SCQueryDetailInfo

// optional uint32 acc_id = 1;
inline bool SCQueryDetailInfo::has_acc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCQueryDetailInfo::set_has_acc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCQueryDetailInfo::clear_has_acc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCQueryDetailInfo::clear_acc_id() {
  acc_id_ = 0u;
  clear_has_acc_id();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::acc_id() const {
  return acc_id_;
}
inline void SCQueryDetailInfo::set_acc_id(::google::protobuf::uint32 value) {
  set_has_acc_id();
  acc_id_ = value;
}

// optional bytes sname = 2;
inline bool SCQueryDetailInfo::has_sname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCQueryDetailInfo::set_has_sname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCQueryDetailInfo::clear_has_sname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCQueryDetailInfo::clear_sname() {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    sname_->clear();
  }
  clear_has_sname();
}
inline const ::std::string& SCQueryDetailInfo::sname() const {
  return *sname_;
}
inline void SCQueryDetailInfo::set_sname(const ::std::string& value) {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  sname_->assign(value);
}
inline void SCQueryDetailInfo::set_sname(const char* value) {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  sname_->assign(value);
}
inline void SCQueryDetailInfo::set_sname(const void* value, size_t size) {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  sname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCQueryDetailInfo::mutable_sname() {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  return sname_;
}
inline ::std::string* SCQueryDetailInfo::release_sname() {
  clear_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sname_;
    sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCQueryDetailInfo::set_allocated_sname(::std::string* sname) {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    delete sname_;
  }
  if (sname) {
    set_has_sname();
    sname_ = sname;
  } else {
    clear_has_sname();
    sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 guildid = 4;
inline bool SCQueryDetailInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCQueryDetailInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCQueryDetailInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCQueryDetailInfo::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::guildid() const {
  return guildid_;
}
inline void SCQueryDetailInfo::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 viplevel = 5;
inline bool SCQueryDetailInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCQueryDetailInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCQueryDetailInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCQueryDetailInfo::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::viplevel() const {
  return viplevel_;
}
inline void SCQueryDetailInfo::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional uint32 char_lv = 14;
inline bool SCQueryDetailInfo::has_char_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCQueryDetailInfo::set_has_char_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCQueryDetailInfo::clear_has_char_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCQueryDetailInfo::clear_char_lv() {
  char_lv_ = 0u;
  clear_has_char_lv();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::char_lv() const {
  return char_lv_;
}
inline void SCQueryDetailInfo::set_char_lv(::google::protobuf::uint32 value) {
  set_has_char_lv();
  char_lv_ = value;
}

// optional uint32 is_ai = 23;
inline bool SCQueryDetailInfo::has_is_ai() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCQueryDetailInfo::set_has_is_ai() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCQueryDetailInfo::clear_has_is_ai() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCQueryDetailInfo::clear_is_ai() {
  is_ai_ = 0u;
  clear_has_is_ai();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::is_ai() const {
  return is_ai_;
}
inline void SCQueryDetailInfo::set_is_ai(::google::protobuf::uint32 value) {
  set_has_is_ai();
  is_ai_ = value;
}

// optional uint32 charslot = 6;
inline bool SCQueryDetailInfo::has_charslot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCQueryDetailInfo::set_has_charslot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCQueryDetailInfo::clear_has_charslot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCQueryDetailInfo::clear_charslot() {
  charslot_ = 0u;
  clear_has_charslot();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::charslot() const {
  return charslot_;
}
inline void SCQueryDetailInfo::set_charslot(::google::protobuf::uint32 value) {
  set_has_charslot();
  charslot_ = value;
}

// repeated .jynetwork.proto.sCharactorInit chars = 7;
inline int SCQueryDetailInfo::chars_size() const {
  return chars_.size();
}
inline void SCQueryDetailInfo::clear_chars() {
  chars_.Clear();
}
inline const ::jynetwork::proto::sCharactorInit& SCQueryDetailInfo::chars(int index) const {
  return chars_.Get(index);
}
inline ::jynetwork::proto::sCharactorInit* SCQueryDetailInfo::mutable_chars(int index) {
  return chars_.Mutable(index);
}
inline ::jynetwork::proto::sCharactorInit* SCQueryDetailInfo::add_chars() {
  return chars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit >&
SCQueryDetailInfo::chars() const {
  return chars_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorInit >*
SCQueryDetailInfo::mutable_chars() {
  return &chars_;
}

// repeated .jynetwork.proto.sPersonCardStats cards = 8;
inline int SCQueryDetailInfo::cards_size() const {
  return cards_.size();
}
inline void SCQueryDetailInfo::clear_cards() {
  cards_.Clear();
}
inline const ::jynetwork::proto::sPersonCardStats& SCQueryDetailInfo::cards(int index) const {
  return cards_.Get(index);
}
inline ::jynetwork::proto::sPersonCardStats* SCQueryDetailInfo::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::jynetwork::proto::sPersonCardStats* SCQueryDetailInfo::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats >&
SCQueryDetailInfo::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonCardStats >*
SCQueryDetailInfo::mutable_cards() {
  return &cards_;
}

// repeated .jynetwork.proto.sPersonEquipStats equip = 9;
inline int SCQueryDetailInfo::equip_size() const {
  return equip_.size();
}
inline void SCQueryDetailInfo::clear_equip() {
  equip_.Clear();
}
inline const ::jynetwork::proto::sPersonEquipStats& SCQueryDetailInfo::equip(int index) const {
  return equip_.Get(index);
}
inline ::jynetwork::proto::sPersonEquipStats* SCQueryDetailInfo::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::jynetwork::proto::sPersonEquipStats* SCQueryDetailInfo::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
SCQueryDetailInfo::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
SCQueryDetailInfo::mutable_equip() {
  return &equip_;
}

// repeated .jynetwork.proto.sPersonSkillStats skills = 10;
inline int SCQueryDetailInfo::skills_size() const {
  return skills_.size();
}
inline void SCQueryDetailInfo::clear_skills() {
  skills_.Clear();
}
inline const ::jynetwork::proto::sPersonSkillStats& SCQueryDetailInfo::skills(int index) const {
  return skills_.Get(index);
}
inline ::jynetwork::proto::sPersonSkillStats* SCQueryDetailInfo::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::jynetwork::proto::sPersonSkillStats* SCQueryDetailInfo::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats >&
SCQueryDetailInfo::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonSkillStats >*
SCQueryDetailInfo::mutable_skills() {
  return &skills_;
}

// optional uint32 query_type = 11;
inline bool SCQueryDetailInfo::has_query_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SCQueryDetailInfo::set_has_query_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SCQueryDetailInfo::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SCQueryDetailInfo::clear_query_type() {
  query_type_ = 0u;
  clear_has_query_type();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::query_type() const {
  return query_type_;
}
inline void SCQueryDetailInfo::set_query_type(::google::protobuf::uint32 value) {
  set_has_query_type();
  query_type_ = value;
}

// optional uint32 query_job = 12;
inline bool SCQueryDetailInfo::has_query_job() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SCQueryDetailInfo::set_has_query_job() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SCQueryDetailInfo::clear_has_query_job() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SCQueryDetailInfo::clear_query_job() {
  query_job_ = 0u;
  clear_has_query_job();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::query_job() const {
  return query_job_;
}
inline void SCQueryDetailInfo::set_query_job(::google::protobuf::uint32 value) {
  set_has_query_job();
  query_job_ = value;
}

// optional uint32 my_acc_id = 13;
inline bool SCQueryDetailInfo::has_my_acc_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SCQueryDetailInfo::set_has_my_acc_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SCQueryDetailInfo::clear_has_my_acc_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SCQueryDetailInfo::clear_my_acc_id() {
  my_acc_id_ = 0u;
  clear_has_my_acc_id();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::my_acc_id() const {
  return my_acc_id_;
}
inline void SCQueryDetailInfo::set_my_acc_id(::google::protobuf::uint32 value) {
  set_has_my_acc_id();
  my_acc_id_ = value;
}

// optional uint32 char_power = 15;
inline bool SCQueryDetailInfo::has_char_power() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SCQueryDetailInfo::set_has_char_power() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SCQueryDetailInfo::clear_has_char_power() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SCQueryDetailInfo::clear_char_power() {
  char_power_ = 0u;
  clear_has_char_power();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::char_power() const {
  return char_power_;
}
inline void SCQueryDetailInfo::set_char_power(::google::protobuf::uint32 value) {
  set_has_char_power();
  char_power_ = value;
}

// optional uint32 position = 16;
inline bool SCQueryDetailInfo::has_position() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SCQueryDetailInfo::set_has_position() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SCQueryDetailInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SCQueryDetailInfo::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::position() const {
  return position_;
}
inline void SCQueryDetailInfo::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
}

// optional uint32 cost_stamina = 17;
inline bool SCQueryDetailInfo::has_cost_stamina() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SCQueryDetailInfo::set_has_cost_stamina() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SCQueryDetailInfo::clear_has_cost_stamina() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SCQueryDetailInfo::clear_cost_stamina() {
  cost_stamina_ = 0u;
  clear_has_cost_stamina();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::cost_stamina() const {
  return cost_stamina_;
}
inline void SCQueryDetailInfo::set_cost_stamina(::google::protobuf::uint32 value) {
  set_has_cost_stamina();
  cost_stamina_ = value;
}

// optional uint32 char_power_1 = 18;
inline bool SCQueryDetailInfo::has_char_power_1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SCQueryDetailInfo::set_has_char_power_1() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SCQueryDetailInfo::clear_has_char_power_1() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SCQueryDetailInfo::clear_char_power_1() {
  char_power_1_ = 0u;
  clear_has_char_power_1();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::char_power_1() const {
  return char_power_1_;
}
inline void SCQueryDetailInfo::set_char_power_1(::google::protobuf::uint32 value) {
  set_has_char_power_1();
  char_power_1_ = value;
}

// optional uint32 char_power_2 = 19;
inline bool SCQueryDetailInfo::has_char_power_2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SCQueryDetailInfo::set_has_char_power_2() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SCQueryDetailInfo::clear_has_char_power_2() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SCQueryDetailInfo::clear_char_power_2() {
  char_power_2_ = 0u;
  clear_has_char_power_2();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::char_power_2() const {
  return char_power_2_;
}
inline void SCQueryDetailInfo::set_char_power_2(::google::protobuf::uint32 value) {
  set_has_char_power_2();
  char_power_2_ = value;
}

// optional uint32 char_power_3 = 20;
inline bool SCQueryDetailInfo::has_char_power_3() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SCQueryDetailInfo::set_has_char_power_3() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SCQueryDetailInfo::clear_has_char_power_3() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SCQueryDetailInfo::clear_char_power_3() {
  char_power_3_ = 0u;
  clear_has_char_power_3();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::char_power_3() const {
  return char_power_3_;
}
inline void SCQueryDetailInfo::set_char_power_3(::google::protobuf::uint32 value) {
  set_has_char_power_3();
  char_power_3_ = value;
}

// optional uint32 local_name = 21;
inline bool SCQueryDetailInfo::has_local_name() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SCQueryDetailInfo::set_has_local_name() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SCQueryDetailInfo::clear_has_local_name() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SCQueryDetailInfo::clear_local_name() {
  local_name_ = 0u;
  clear_has_local_name();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::local_name() const {
  return local_name_;
}
inline void SCQueryDetailInfo::set_local_name(::google::protobuf::uint32 value) {
  set_has_local_name();
  local_name_ = value;
}

// optional uint32 max_hard_stage = 22;
inline bool SCQueryDetailInfo::has_max_hard_stage() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SCQueryDetailInfo::set_has_max_hard_stage() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SCQueryDetailInfo::clear_has_max_hard_stage() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SCQueryDetailInfo::clear_max_hard_stage() {
  max_hard_stage_ = 0u;
  clear_has_max_hard_stage();
}
inline ::google::protobuf::uint32 SCQueryDetailInfo::max_hard_stage() const {
  return max_hard_stage_;
}
inline void SCQueryDetailInfo::set_max_hard_stage(::google::protobuf::uint32 value) {
  set_has_max_hard_stage();
  max_hard_stage_ = value;
}

// -------------------------------------------------------------------

// SCMessagePong

// optional uint32 timestamp = 1;
inline bool SCMessagePong::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessagePong::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessagePong::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessagePong::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 SCMessagePong::timestamp() const {
  return timestamp_;
}
inline void SCMessagePong::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// SCMessageBattlePrepare

// optional uint32 map_id = 1;
inline bool SCMessageBattlePrepare::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageBattlePrepare::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageBattlePrepare::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageBattlePrepare::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 SCMessageBattlePrepare::map_id() const {
  return map_id_;
}
inline void SCMessageBattlePrepare::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional uint32 rand_num = 2;
inline bool SCMessageBattlePrepare::has_rand_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageBattlePrepare::set_has_rand_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageBattlePrepare::clear_has_rand_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageBattlePrepare::clear_rand_num() {
  rand_num_ = 0u;
  clear_has_rand_num();
}
inline ::google::protobuf::uint32 SCMessageBattlePrepare::rand_num() const {
  return rand_num_;
}
inline void SCMessageBattlePrepare::set_rand_num(::google::protobuf::uint32 value) {
  set_has_rand_num();
  rand_num_ = value;
}

// repeated .jynetwork.proto.sPersonEquipStats equip = 3;
inline int SCMessageBattlePrepare::equip_size() const {
  return equip_.size();
}
inline void SCMessageBattlePrepare::clear_equip() {
  equip_.Clear();
}
inline const ::jynetwork::proto::sPersonEquipStats& SCMessageBattlePrepare::equip(int index) const {
  return equip_.Get(index);
}
inline ::jynetwork::proto::sPersonEquipStats* SCMessageBattlePrepare::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::jynetwork::proto::sPersonEquipStats* SCMessageBattlePrepare::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >&
SCMessageBattlePrepare::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonEquipStats >*
SCMessageBattlePrepare::mutable_equip() {
  return &equip_;
}

// repeated .jynetwork.proto.sPersonItemStats item = 4;
inline int SCMessageBattlePrepare::item_size() const {
  return item_.size();
}
inline void SCMessageBattlePrepare::clear_item() {
  item_.Clear();
}
inline const ::jynetwork::proto::sPersonItemStats& SCMessageBattlePrepare::item(int index) const {
  return item_.Get(index);
}
inline ::jynetwork::proto::sPersonItemStats* SCMessageBattlePrepare::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::jynetwork::proto::sPersonItemStats* SCMessageBattlePrepare::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >&
SCMessageBattlePrepare::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPersonItemStats >*
SCMessageBattlePrepare::mutable_item() {
  return &item_;
}

// optional uint32 difficult = 5;
inline bool SCMessageBattlePrepare::has_difficult() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCMessageBattlePrepare::set_has_difficult() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCMessageBattlePrepare::clear_has_difficult() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCMessageBattlePrepare::clear_difficult() {
  difficult_ = 0u;
  clear_has_difficult();
}
inline ::google::protobuf::uint32 SCMessageBattlePrepare::difficult() const {
  return difficult_;
}
inline void SCMessageBattlePrepare::set_difficult(::google::protobuf::uint32 value) {
  set_has_difficult();
  difficult_ = value;
}

// optional .jynetwork.proto.eOpertionResult result = 6;
inline bool SCMessageBattlePrepare::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCMessageBattlePrepare::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCMessageBattlePrepare::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCMessageBattlePrepare::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::jynetwork::proto::eOpertionResult SCMessageBattlePrepare::result() const {
  return static_cast< ::jynetwork::proto::eOpertionResult >(result_);
}
inline void SCMessageBattlePrepare::set_result(::jynetwork::proto::eOpertionResult value) {
  assert(::jynetwork::proto::eOpertionResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 dropmiddle = 7;
inline bool SCMessageBattlePrepare::has_dropmiddle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCMessageBattlePrepare::set_has_dropmiddle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCMessageBattlePrepare::clear_has_dropmiddle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCMessageBattlePrepare::clear_dropmiddle() {
  dropmiddle_ = 0u;
  clear_has_dropmiddle();
}
inline ::google::protobuf::uint32 SCMessageBattlePrepare::dropmiddle() const {
  return dropmiddle_;
}
inline void SCMessageBattlePrepare::set_dropmiddle(::google::protobuf::uint32 value) {
  set_has_dropmiddle();
  dropmiddle_ = value;
}

// optional uint32 dropgoblin = 8;
inline bool SCMessageBattlePrepare::has_dropgoblin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SCMessageBattlePrepare::set_has_dropgoblin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SCMessageBattlePrepare::clear_has_dropgoblin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SCMessageBattlePrepare::clear_dropgoblin() {
  dropgoblin_ = 0u;
  clear_has_dropgoblin();
}
inline ::google::protobuf::uint32 SCMessageBattlePrepare::dropgoblin() const {
  return dropgoblin_;
}
inline void SCMessageBattlePrepare::set_dropgoblin(::google::protobuf::uint32 value) {
  set_has_dropgoblin();
  dropgoblin_ = value;
}

// optional uint32 total_money = 9;
inline bool SCMessageBattlePrepare::has_total_money() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SCMessageBattlePrepare::set_has_total_money() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SCMessageBattlePrepare::clear_has_total_money() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SCMessageBattlePrepare::clear_total_money() {
  total_money_ = 0u;
  clear_has_total_money();
}
inline ::google::protobuf::uint32 SCMessageBattlePrepare::total_money() const {
  return total_money_;
}
inline void SCMessageBattlePrepare::set_total_money(::google::protobuf::uint32 value) {
  set_has_total_money();
  total_money_ = value;
}

// optional uint32 catlog = 10;
inline bool SCMessageBattlePrepare::has_catlog() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SCMessageBattlePrepare::set_has_catlog() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SCMessageBattlePrepare::clear_has_catlog() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SCMessageBattlePrepare::clear_catlog() {
  catlog_ = 0u;
  clear_has_catlog();
}
inline ::google::protobuf::uint32 SCMessageBattlePrepare::catlog() const {
  return catlog_;
}
inline void SCMessageBattlePrepare::set_catlog(::google::protobuf::uint32 value) {
  set_has_catlog();
  catlog_ = value;
}

// optional uint32 start_pos = 11;
inline bool SCMessageBattlePrepare::has_start_pos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SCMessageBattlePrepare::set_has_start_pos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SCMessageBattlePrepare::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SCMessageBattlePrepare::clear_start_pos() {
  start_pos_ = 0u;
  clear_has_start_pos();
}
inline ::google::protobuf::uint32 SCMessageBattlePrepare::start_pos() const {
  return start_pos_;
}
inline void SCMessageBattlePrepare::set_start_pos(::google::protobuf::uint32 value) {
  set_has_start_pos();
  start_pos_ = value;
}

// repeated .jynetwork.proto.SCQueryDetailInfo friend_detail = 12;
inline int SCMessageBattlePrepare::friend_detail_size() const {
  return friend_detail_.size();
}
inline void SCMessageBattlePrepare::clear_friend_detail() {
  friend_detail_.Clear();
}
inline const ::jynetwork::proto::SCQueryDetailInfo& SCMessageBattlePrepare::friend_detail(int index) const {
  return friend_detail_.Get(index);
}
inline ::jynetwork::proto::SCQueryDetailInfo* SCMessageBattlePrepare::mutable_friend_detail(int index) {
  return friend_detail_.Mutable(index);
}
inline ::jynetwork::proto::SCQueryDetailInfo* SCMessageBattlePrepare::add_friend_detail() {
  return friend_detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >&
SCMessageBattlePrepare::friend_detail() const {
  return friend_detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >*
SCMessageBattlePrepare::mutable_friend_detail() {
  return &friend_detail_;
}

// repeated .jynetwork.proto.SCQueryDetailInfo oppo_detail = 13;
inline int SCMessageBattlePrepare::oppo_detail_size() const {
  return oppo_detail_.size();
}
inline void SCMessageBattlePrepare::clear_oppo_detail() {
  oppo_detail_.Clear();
}
inline const ::jynetwork::proto::SCQueryDetailInfo& SCMessageBattlePrepare::oppo_detail(int index) const {
  return oppo_detail_.Get(index);
}
inline ::jynetwork::proto::SCQueryDetailInfo* SCMessageBattlePrepare::mutable_oppo_detail(int index) {
  return oppo_detail_.Mutable(index);
}
inline ::jynetwork::proto::SCQueryDetailInfo* SCMessageBattlePrepare::add_oppo_detail() {
  return oppo_detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >&
SCMessageBattlePrepare::oppo_detail() const {
  return oppo_detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >*
SCMessageBattlePrepare::mutable_oppo_detail() {
  return &oppo_detail_;
}

// optional int32 posx = 14;
inline bool SCMessageBattlePrepare::has_posx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SCMessageBattlePrepare::set_has_posx() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SCMessageBattlePrepare::clear_has_posx() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SCMessageBattlePrepare::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 SCMessageBattlePrepare::posx() const {
  return posx_;
}
inline void SCMessageBattlePrepare::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
}

// optional int32 posy = 15;
inline bool SCMessageBattlePrepare::has_posy() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SCMessageBattlePrepare::set_has_posy() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SCMessageBattlePrepare::clear_has_posy() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SCMessageBattlePrepare::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 SCMessageBattlePrepare::posy() const {
  return posy_;
}
inline void SCMessageBattlePrepare::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
}

// optional uint32 group = 16;
inline bool SCMessageBattlePrepare::has_group() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SCMessageBattlePrepare::set_has_group() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SCMessageBattlePrepare::clear_has_group() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SCMessageBattlePrepare::clear_group() {
  group_ = 0u;
  clear_has_group();
}
inline ::google::protobuf::uint32 SCMessageBattlePrepare::group() const {
  return group_;
}
inline void SCMessageBattlePrepare::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
}

// optional uint32 endless_money = 17;
inline bool SCMessageBattlePrepare::has_endless_money() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SCMessageBattlePrepare::set_has_endless_money() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SCMessageBattlePrepare::clear_has_endless_money() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SCMessageBattlePrepare::clear_endless_money() {
  endless_money_ = 0u;
  clear_has_endless_money();
}
inline ::google::protobuf::uint32 SCMessageBattlePrepare::endless_money() const {
  return endless_money_;
}
inline void SCMessageBattlePrepare::set_endless_money(::google::protobuf::uint32 value) {
  set_has_endless_money();
  endless_money_ = value;
}

// optional .jynetwork.proto.sGameStats arena_stats = 18;
inline bool SCMessageBattlePrepare::has_arena_stats() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SCMessageBattlePrepare::set_has_arena_stats() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SCMessageBattlePrepare::clear_has_arena_stats() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SCMessageBattlePrepare::clear_arena_stats() {
  if (arena_stats_ != NULL) arena_stats_->::jynetwork::proto::sGameStats::Clear();
  clear_has_arena_stats();
}
inline const ::jynetwork::proto::sGameStats& SCMessageBattlePrepare::arena_stats() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return arena_stats_ != NULL ? *arena_stats_ : *default_instance().arena_stats_;
#else
  return arena_stats_ != NULL ? *arena_stats_ : *default_instance_->arena_stats_;
#endif
}
inline ::jynetwork::proto::sGameStats* SCMessageBattlePrepare::mutable_arena_stats() {
  set_has_arena_stats();
  if (arena_stats_ == NULL) arena_stats_ = new ::jynetwork::proto::sGameStats;
  return arena_stats_;
}
inline ::jynetwork::proto::sGameStats* SCMessageBattlePrepare::release_arena_stats() {
  clear_has_arena_stats();
  ::jynetwork::proto::sGameStats* temp = arena_stats_;
  arena_stats_ = NULL;
  return temp;
}
inline void SCMessageBattlePrepare::set_allocated_arena_stats(::jynetwork::proto::sGameStats* arena_stats) {
  delete arena_stats_;
  arena_stats_ = arena_stats;
  if (arena_stats) {
    set_has_arena_stats();
  } else {
    clear_has_arena_stats();
  }
}

// optional uint32 monster_lv = 19;
inline bool SCMessageBattlePrepare::has_monster_lv() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SCMessageBattlePrepare::set_has_monster_lv() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SCMessageBattlePrepare::clear_has_monster_lv() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SCMessageBattlePrepare::clear_monster_lv() {
  monster_lv_ = 0u;
  clear_has_monster_lv();
}
inline ::google::protobuf::uint32 SCMessageBattlePrepare::monster_lv() const {
  return monster_lv_;
}
inline void SCMessageBattlePrepare::set_monster_lv(::google::protobuf::uint32 value) {
  set_has_monster_lv();
  monster_lv_ = value;
}

// -------------------------------------------------------------------

// SysNotice

// optional bytes sname = 1;
inline bool SysNotice::has_sname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysNotice::set_has_sname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SysNotice::clear_has_sname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SysNotice::clear_sname() {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    sname_->clear();
  }
  clear_has_sname();
}
inline const ::std::string& SysNotice::sname() const {
  return *sname_;
}
inline void SysNotice::set_sname(const ::std::string& value) {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  sname_->assign(value);
}
inline void SysNotice::set_sname(const char* value) {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  sname_->assign(value);
}
inline void SysNotice::set_sname(const void* value, size_t size) {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  sname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SysNotice::mutable_sname() {
  set_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    sname_ = new ::std::string;
  }
  return sname_;
}
inline ::std::string* SysNotice::release_sname() {
  clear_has_sname();
  if (sname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sname_;
    sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SysNotice::set_allocated_sname(::std::string* sname) {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    delete sname_;
  }
  if (sname) {
    set_has_sname();
    sname_ = sname;
  } else {
    clear_has_sname();
    sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 lang_id = 2;
inline bool SysNotice::has_lang_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysNotice::set_has_lang_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SysNotice::clear_has_lang_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SysNotice::clear_lang_id() {
  lang_id_ = 0;
  clear_has_lang_id();
}
inline ::google::protobuf::int32 SysNotice::lang_id() const {
  return lang_id_;
}
inline void SysNotice::set_lang_id(::google::protobuf::int32 value) {
  set_has_lang_id();
  lang_id_ = value;
}

// optional int32 value1 = 3;
inline bool SysNotice::has_value1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SysNotice::set_has_value1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SysNotice::clear_has_value1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SysNotice::clear_value1() {
  value1_ = 0;
  clear_has_value1();
}
inline ::google::protobuf::int32 SysNotice::value1() const {
  return value1_;
}
inline void SysNotice::set_value1(::google::protobuf::int32 value) {
  set_has_value1();
  value1_ = value;
}

// optional int32 value2 = 4;
inline bool SysNotice::has_value2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SysNotice::set_has_value2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SysNotice::clear_has_value2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SysNotice::clear_value2() {
  value2_ = 0;
  clear_has_value2();
}
inline ::google::protobuf::int32 SysNotice::value2() const {
  return value2_;
}
inline void SysNotice::set_value2(::google::protobuf::int32 value) {
  set_has_value2();
  value2_ = value;
}

// optional bytes value3 = 5;
inline bool SysNotice::has_value3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SysNotice::set_has_value3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SysNotice::clear_has_value3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SysNotice::clear_value3() {
  if (value3_ != &::google::protobuf::internal::kEmptyString) {
    value3_->clear();
  }
  clear_has_value3();
}
inline const ::std::string& SysNotice::value3() const {
  return *value3_;
}
inline void SysNotice::set_value3(const ::std::string& value) {
  set_has_value3();
  if (value3_ == &::google::protobuf::internal::kEmptyString) {
    value3_ = new ::std::string;
  }
  value3_->assign(value);
}
inline void SysNotice::set_value3(const char* value) {
  set_has_value3();
  if (value3_ == &::google::protobuf::internal::kEmptyString) {
    value3_ = new ::std::string;
  }
  value3_->assign(value);
}
inline void SysNotice::set_value3(const void* value, size_t size) {
  set_has_value3();
  if (value3_ == &::google::protobuf::internal::kEmptyString) {
    value3_ = new ::std::string;
  }
  value3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SysNotice::mutable_value3() {
  set_has_value3();
  if (value3_ == &::google::protobuf::internal::kEmptyString) {
    value3_ = new ::std::string;
  }
  return value3_;
}
inline ::std::string* SysNotice::release_value3() {
  clear_has_value3();
  if (value3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value3_;
    value3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SysNotice::set_allocated_value3(::std::string* value3) {
  if (value3_ != &::google::protobuf::internal::kEmptyString) {
    delete value3_;
  }
  if (value3) {
    set_has_value3();
    value3_ = value3;
  } else {
    clear_has_value3();
    value3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SCMessageSysNotice

// repeated .jynetwork.proto.SysNotice equip = 1;
inline int SCMessageSysNotice::equip_size() const {
  return equip_.size();
}
inline void SCMessageSysNotice::clear_equip() {
  equip_.Clear();
}
inline const ::jynetwork::proto::SysNotice& SCMessageSysNotice::equip(int index) const {
  return equip_.Get(index);
}
inline ::jynetwork::proto::SysNotice* SCMessageSysNotice::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::jynetwork::proto::SysNotice* SCMessageSysNotice::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SysNotice >&
SCMessageSysNotice::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SysNotice >*
SCMessageSysNotice::mutable_equip() {
  return &equip_;
}

// -------------------------------------------------------------------

// SysMail

// optional int64 mail_id = 1;
inline bool SysMail::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysMail::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SysMail::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SysMail::clear_mail_id() {
  mail_id_ = GOOGLE_LONGLONG(0);
  clear_has_mail_id();
}
inline ::google::protobuf::int64 SysMail::mail_id() const {
  return mail_id_;
}
inline void SysMail::set_mail_id(::google::protobuf::int64 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional bytes mail_title = 2;
inline bool SysMail::has_mail_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysMail::set_has_mail_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SysMail::clear_has_mail_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SysMail::clear_mail_title() {
  if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
    mail_title_->clear();
  }
  clear_has_mail_title();
}
inline const ::std::string& SysMail::mail_title() const {
  return *mail_title_;
}
inline void SysMail::set_mail_title(const ::std::string& value) {
  set_has_mail_title();
  if (mail_title_ == &::google::protobuf::internal::kEmptyString) {
    mail_title_ = new ::std::string;
  }
  mail_title_->assign(value);
}
inline void SysMail::set_mail_title(const char* value) {
  set_has_mail_title();
  if (mail_title_ == &::google::protobuf::internal::kEmptyString) {
    mail_title_ = new ::std::string;
  }
  mail_title_->assign(value);
}
inline void SysMail::set_mail_title(const void* value, size_t size) {
  set_has_mail_title();
  if (mail_title_ == &::google::protobuf::internal::kEmptyString) {
    mail_title_ = new ::std::string;
  }
  mail_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SysMail::mutable_mail_title() {
  set_has_mail_title();
  if (mail_title_ == &::google::protobuf::internal::kEmptyString) {
    mail_title_ = new ::std::string;
  }
  return mail_title_;
}
inline ::std::string* SysMail::release_mail_title() {
  clear_has_mail_title();
  if (mail_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mail_title_;
    mail_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SysMail::set_allocated_mail_title(::std::string* mail_title) {
  if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_title_;
  }
  if (mail_title) {
    set_has_mail_title();
    mail_title_ = mail_title;
  } else {
    clear_has_mail_title();
    mail_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes mail_content = 3;
inline bool SysMail::has_mail_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SysMail::set_has_mail_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SysMail::clear_has_mail_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SysMail::clear_mail_content() {
  if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
    mail_content_->clear();
  }
  clear_has_mail_content();
}
inline const ::std::string& SysMail::mail_content() const {
  return *mail_content_;
}
inline void SysMail::set_mail_content(const ::std::string& value) {
  set_has_mail_content();
  if (mail_content_ == &::google::protobuf::internal::kEmptyString) {
    mail_content_ = new ::std::string;
  }
  mail_content_->assign(value);
}
inline void SysMail::set_mail_content(const char* value) {
  set_has_mail_content();
  if (mail_content_ == &::google::protobuf::internal::kEmptyString) {
    mail_content_ = new ::std::string;
  }
  mail_content_->assign(value);
}
inline void SysMail::set_mail_content(const void* value, size_t size) {
  set_has_mail_content();
  if (mail_content_ == &::google::protobuf::internal::kEmptyString) {
    mail_content_ = new ::std::string;
  }
  mail_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SysMail::mutable_mail_content() {
  set_has_mail_content();
  if (mail_content_ == &::google::protobuf::internal::kEmptyString) {
    mail_content_ = new ::std::string;
  }
  return mail_content_;
}
inline ::std::string* SysMail::release_mail_content() {
  clear_has_mail_content();
  if (mail_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mail_content_;
    mail_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SysMail::set_allocated_mail_content(::std::string* mail_content) {
  if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_content_;
  }
  if (mail_content) {
    set_has_mail_content();
    mail_content_ = mail_content;
  } else {
    clear_has_mail_content();
    mail_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 mail_item = 4;
inline bool SysMail::has_mail_item() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SysMail::set_has_mail_item() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SysMail::clear_has_mail_item() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SysMail::clear_mail_item() {
  mail_item_ = 0u;
  clear_has_mail_item();
}
inline ::google::protobuf::uint32 SysMail::mail_item() const {
  return mail_item_;
}
inline void SysMail::set_mail_item(::google::protobuf::uint32 value) {
  set_has_mail_item();
  mail_item_ = value;
}

// optional int32 has_read = 5;
inline bool SysMail::has_has_read() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SysMail::set_has_has_read() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SysMail::clear_has_has_read() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SysMail::clear_has_read() {
  has_read_ = 0;
  clear_has_has_read();
}
inline ::google::protobuf::int32 SysMail::has_read() const {
  return has_read_;
}
inline void SysMail::set_has_read(::google::protobuf::int32 value) {
  set_has_has_read();
  has_read_ = value;
}

// optional int32 mail_type = 6;
inline bool SysMail::has_mail_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SysMail::set_has_mail_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SysMail::clear_has_mail_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SysMail::clear_mail_type() {
  mail_type_ = 0;
  clear_has_mail_type();
}
inline ::google::protobuf::int32 SysMail::mail_type() const {
  return mail_type_;
}
inline void SysMail::set_mail_type(::google::protobuf::int32 value) {
  set_has_mail_type();
  mail_type_ = value;
}

// repeated .jynetwork.proto.sSimpleItem reward_item = 7;
inline int SysMail::reward_item_size() const {
  return reward_item_.size();
}
inline void SysMail::clear_reward_item() {
  reward_item_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& SysMail::reward_item(int index) const {
  return reward_item_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* SysMail::mutable_reward_item(int index) {
  return reward_item_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* SysMail::add_reward_item() {
  return reward_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
SysMail::reward_item() const {
  return reward_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
SysMail::mutable_reward_item() {
  return &reward_item_;
}

// optional .jynetwork.proto.ePersonalOpertionType oper = 8;
inline bool SysMail::has_oper() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SysMail::set_has_oper() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SysMail::clear_has_oper() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SysMail::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::jynetwork::proto::ePersonalOpertionType SysMail::oper() const {
  return static_cast< ::jynetwork::proto::ePersonalOpertionType >(oper_);
}
inline void SysMail::set_oper(::jynetwork::proto::ePersonalOpertionType value) {
  assert(::jynetwork::proto::ePersonalOpertionType_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// optional int32 map_id = 9;
inline bool SysMail::has_map_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SysMail::set_has_map_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SysMail::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SysMail::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 SysMail::map_id() const {
  return map_id_;
}
inline void SysMail::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// -------------------------------------------------------------------

// SCMessageMail

// repeated .jynetwork.proto.SysMail mail = 1;
inline int SCMessageMail::mail_size() const {
  return mail_.size();
}
inline void SCMessageMail::clear_mail() {
  mail_.Clear();
}
inline const ::jynetwork::proto::SysMail& SCMessageMail::mail(int index) const {
  return mail_.Get(index);
}
inline ::jynetwork::proto::SysMail* SCMessageMail::mutable_mail(int index) {
  return mail_.Mutable(index);
}
inline ::jynetwork::proto::SysMail* SCMessageMail::add_mail() {
  return mail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SysMail >&
SCMessageMail::mail() const {
  return mail_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SysMail >*
SCMessageMail::mutable_mail() {
  return &mail_;
}

// optional int32 is_last_one = 2;
inline bool SCMessageMail::has_is_last_one() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageMail::set_has_is_last_one() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageMail::clear_has_is_last_one() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageMail::clear_is_last_one() {
  is_last_one_ = 0;
  clear_has_is_last_one();
}
inline ::google::protobuf::int32 SCMessageMail::is_last_one() const {
  return is_last_one_;
}
inline void SCMessageMail::set_is_last_one(::google::protobuf::int32 value) {
  set_has_is_last_one();
  is_last_one_ = value;
}

// optional int32 has_new_mail = 3;
inline bool SCMessageMail::has_has_new_mail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageMail::set_has_has_new_mail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageMail::clear_has_has_new_mail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageMail::clear_has_new_mail() {
  has_new_mail_ = 0;
  clear_has_has_new_mail();
}
inline ::google::protobuf::int32 SCMessageMail::has_new_mail() const {
  return has_new_mail_;
}
inline void SCMessageMail::set_has_new_mail(::google::protobuf::int32 value) {
  set_has_has_new_mail();
  has_new_mail_ = value;
}

// optional int32 new_mail_type = 4;
inline bool SCMessageMail::has_new_mail_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCMessageMail::set_has_new_mail_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCMessageMail::clear_has_new_mail_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCMessageMail::clear_new_mail_type() {
  new_mail_type_ = 0;
  clear_has_new_mail_type();
}
inline ::google::protobuf::int32 SCMessageMail::new_mail_type() const {
  return new_mail_type_;
}
inline void SCMessageMail::set_new_mail_type(::google::protobuf::int32 value) {
  set_has_new_mail_type();
  new_mail_type_ = value;
}

// -------------------------------------------------------------------

// SCMessageRankList_RankInfo

// optional uint32 char_id = 1;
inline bool SCMessageRankList_RankInfo::has_char_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageRankList_RankInfo::set_has_char_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageRankList_RankInfo::clear_has_char_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageRankList_RankInfo::clear_char_id() {
  char_id_ = 0u;
  clear_has_char_id();
}
inline ::google::protobuf::uint32 SCMessageRankList_RankInfo::char_id() const {
  return char_id_;
}
inline void SCMessageRankList_RankInfo::set_char_id(::google::protobuf::uint32 value) {
  set_has_char_id();
  char_id_ = value;
}

// optional bytes name = 2;
inline bool SCMessageRankList_RankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageRankList_RankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageRankList_RankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageRankList_RankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SCMessageRankList_RankInfo::name() const {
  return *name_;
}
inline void SCMessageRankList_RankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SCMessageRankList_RankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SCMessageRankList_RankInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCMessageRankList_RankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SCMessageRankList_RankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCMessageRankList_RankInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 rank = 3;
inline bool SCMessageRankList_RankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageRankList_RankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageRankList_RankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageRankList_RankInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 SCMessageRankList_RankInfo::rank() const {
  return rank_;
}
inline void SCMessageRankList_RankInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 level = 4;
inline bool SCMessageRankList_RankInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCMessageRankList_RankInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCMessageRankList_RankInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCMessageRankList_RankInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 SCMessageRankList_RankInfo::level() const {
  return level_;
}
inline void SCMessageRankList_RankInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 sex = 5;
inline bool SCMessageRankList_RankInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCMessageRankList_RankInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCMessageRankList_RankInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCMessageRankList_RankInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 SCMessageRankList_RankInfo::sex() const {
  return sex_;
}
inline void SCMessageRankList_RankInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 job = 6;
inline bool SCMessageRankList_RankInfo::has_job() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCMessageRankList_RankInfo::set_has_job() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCMessageRankList_RankInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCMessageRankList_RankInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 SCMessageRankList_RankInfo::job() const {
  return job_;
}
inline void SCMessageRankList_RankInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 rank_value = 7;
inline bool SCMessageRankList_RankInfo::has_rank_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCMessageRankList_RankInfo::set_has_rank_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCMessageRankList_RankInfo::clear_has_rank_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCMessageRankList_RankInfo::clear_rank_value() {
  rank_value_ = 0u;
  clear_has_rank_value();
}
inline ::google::protobuf::uint32 SCMessageRankList_RankInfo::rank_value() const {
  return rank_value_;
}
inline void SCMessageRankList_RankInfo::set_rank_value(::google::protobuf::uint32 value) {
  set_has_rank_value();
  rank_value_ = value;
}

// optional uint32 corps_id = 8;
inline bool SCMessageRankList_RankInfo::has_corps_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SCMessageRankList_RankInfo::set_has_corps_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SCMessageRankList_RankInfo::clear_has_corps_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SCMessageRankList_RankInfo::clear_corps_id() {
  corps_id_ = 0u;
  clear_has_corps_id();
}
inline ::google::protobuf::uint32 SCMessageRankList_RankInfo::corps_id() const {
  return corps_id_;
}
inline void SCMessageRankList_RankInfo::set_corps_id(::google::protobuf::uint32 value) {
  set_has_corps_id();
  corps_id_ = value;
}

// optional uint64 rank_value2 = 9;
inline bool SCMessageRankList_RankInfo::has_rank_value2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SCMessageRankList_RankInfo::set_has_rank_value2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SCMessageRankList_RankInfo::clear_has_rank_value2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SCMessageRankList_RankInfo::clear_rank_value2() {
  rank_value2_ = GOOGLE_ULONGLONG(0);
  clear_has_rank_value2();
}
inline ::google::protobuf::uint64 SCMessageRankList_RankInfo::rank_value2() const {
  return rank_value2_;
}
inline void SCMessageRankList_RankInfo::set_rank_value2(::google::protobuf::uint64 value) {
  set_has_rank_value2();
  rank_value2_ = value;
}

// optional uint64 rank_value3 = 10;
inline bool SCMessageRankList_RankInfo::has_rank_value3() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SCMessageRankList_RankInfo::set_has_rank_value3() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SCMessageRankList_RankInfo::clear_has_rank_value3() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SCMessageRankList_RankInfo::clear_rank_value3() {
  rank_value3_ = GOOGLE_ULONGLONG(0);
  clear_has_rank_value3();
}
inline ::google::protobuf::uint64 SCMessageRankList_RankInfo::rank_value3() const {
  return rank_value3_;
}
inline void SCMessageRankList_RankInfo::set_rank_value3(::google::protobuf::uint64 value) {
  set_has_rank_value3();
  rank_value3_ = value;
}

// optional uint64 rank_value4 = 11;
inline bool SCMessageRankList_RankInfo::has_rank_value4() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SCMessageRankList_RankInfo::set_has_rank_value4() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SCMessageRankList_RankInfo::clear_has_rank_value4() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SCMessageRankList_RankInfo::clear_rank_value4() {
  rank_value4_ = GOOGLE_ULONGLONG(0);
  clear_has_rank_value4();
}
inline ::google::protobuf::uint64 SCMessageRankList_RankInfo::rank_value4() const {
  return rank_value4_;
}
inline void SCMessageRankList_RankInfo::set_rank_value4(::google::protobuf::uint64 value) {
  set_has_rank_value4();
  rank_value4_ = value;
}

// optional bytes rank_value5 = 12;
inline bool SCMessageRankList_RankInfo::has_rank_value5() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SCMessageRankList_RankInfo::set_has_rank_value5() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SCMessageRankList_RankInfo::clear_has_rank_value5() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SCMessageRankList_RankInfo::clear_rank_value5() {
  if (rank_value5_ != &::google::protobuf::internal::kEmptyString) {
    rank_value5_->clear();
  }
  clear_has_rank_value5();
}
inline const ::std::string& SCMessageRankList_RankInfo::rank_value5() const {
  return *rank_value5_;
}
inline void SCMessageRankList_RankInfo::set_rank_value5(const ::std::string& value) {
  set_has_rank_value5();
  if (rank_value5_ == &::google::protobuf::internal::kEmptyString) {
    rank_value5_ = new ::std::string;
  }
  rank_value5_->assign(value);
}
inline void SCMessageRankList_RankInfo::set_rank_value5(const char* value) {
  set_has_rank_value5();
  if (rank_value5_ == &::google::protobuf::internal::kEmptyString) {
    rank_value5_ = new ::std::string;
  }
  rank_value5_->assign(value);
}
inline void SCMessageRankList_RankInfo::set_rank_value5(const void* value, size_t size) {
  set_has_rank_value5();
  if (rank_value5_ == &::google::protobuf::internal::kEmptyString) {
    rank_value5_ = new ::std::string;
  }
  rank_value5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCMessageRankList_RankInfo::mutable_rank_value5() {
  set_has_rank_value5();
  if (rank_value5_ == &::google::protobuf::internal::kEmptyString) {
    rank_value5_ = new ::std::string;
  }
  return rank_value5_;
}
inline ::std::string* SCMessageRankList_RankInfo::release_rank_value5() {
  clear_has_rank_value5();
  if (rank_value5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rank_value5_;
    rank_value5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCMessageRankList_RankInfo::set_allocated_rank_value5(::std::string* rank_value5) {
  if (rank_value5_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_value5_;
  }
  if (rank_value5) {
    set_has_rank_value5();
    rank_value5_ = rank_value5;
  } else {
    clear_has_rank_value5();
    rank_value5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SCMessageRankList

// repeated .jynetwork.proto.SCMessageRankList.RankInfo rank_info = 1;
inline int SCMessageRankList::rank_info_size() const {
  return rank_info_.size();
}
inline void SCMessageRankList::clear_rank_info() {
  rank_info_.Clear();
}
inline const ::jynetwork::proto::SCMessageRankList_RankInfo& SCMessageRankList::rank_info(int index) const {
  return rank_info_.Get(index);
}
inline ::jynetwork::proto::SCMessageRankList_RankInfo* SCMessageRankList::mutable_rank_info(int index) {
  return rank_info_.Mutable(index);
}
inline ::jynetwork::proto::SCMessageRankList_RankInfo* SCMessageRankList::add_rank_info() {
  return rank_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageRankList_RankInfo >&
SCMessageRankList::rank_info() const {
  return rank_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageRankList_RankInfo >*
SCMessageRankList::mutable_rank_info() {
  return &rank_info_;
}

// optional bytes rank_time = 2;
inline bool SCMessageRankList::has_rank_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageRankList::set_has_rank_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageRankList::clear_has_rank_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageRankList::clear_rank_time() {
  if (rank_time_ != &::google::protobuf::internal::kEmptyString) {
    rank_time_->clear();
  }
  clear_has_rank_time();
}
inline const ::std::string& SCMessageRankList::rank_time() const {
  return *rank_time_;
}
inline void SCMessageRankList::set_rank_time(const ::std::string& value) {
  set_has_rank_time();
  if (rank_time_ == &::google::protobuf::internal::kEmptyString) {
    rank_time_ = new ::std::string;
  }
  rank_time_->assign(value);
}
inline void SCMessageRankList::set_rank_time(const char* value) {
  set_has_rank_time();
  if (rank_time_ == &::google::protobuf::internal::kEmptyString) {
    rank_time_ = new ::std::string;
  }
  rank_time_->assign(value);
}
inline void SCMessageRankList::set_rank_time(const void* value, size_t size) {
  set_has_rank_time();
  if (rank_time_ == &::google::protobuf::internal::kEmptyString) {
    rank_time_ = new ::std::string;
  }
  rank_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCMessageRankList::mutable_rank_time() {
  set_has_rank_time();
  if (rank_time_ == &::google::protobuf::internal::kEmptyString) {
    rank_time_ = new ::std::string;
  }
  return rank_time_;
}
inline ::std::string* SCMessageRankList::release_rank_time() {
  clear_has_rank_time();
  if (rank_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rank_time_;
    rank_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCMessageRankList::set_allocated_rank_time(::std::string* rank_time) {
  if (rank_time_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_time_;
  }
  if (rank_time) {
    set_has_rank_time();
    rank_time_ = rank_time;
  } else {
    clear_has_rank_time();
    rank_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 my_rank = 3;
inline bool SCMessageRankList::has_my_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageRankList::set_has_my_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageRankList::clear_has_my_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageRankList::clear_my_rank() {
  my_rank_ = 0u;
  clear_has_my_rank();
}
inline ::google::protobuf::uint32 SCMessageRankList::my_rank() const {
  return my_rank_;
}
inline void SCMessageRankList::set_my_rank(::google::protobuf::uint32 value) {
  set_has_my_rank();
  my_rank_ = value;
}

// optional uint32 page = 4;
inline bool SCMessageRankList::has_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCMessageRankList::set_has_page() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCMessageRankList::clear_has_page() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCMessageRankList::clear_page() {
  page_ = 0u;
  clear_has_page();
}
inline ::google::protobuf::uint32 SCMessageRankList::page() const {
  return page_;
}
inline void SCMessageRankList::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
}

// optional uint32 rank_type = 5;
inline bool SCMessageRankList::has_rank_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCMessageRankList::set_has_rank_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCMessageRankList::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCMessageRankList::clear_rank_type() {
  rank_type_ = 0u;
  clear_has_rank_type();
}
inline ::google::protobuf::uint32 SCMessageRankList::rank_type() const {
  return rank_type_;
}
inline void SCMessageRankList::set_rank_type(::google::protobuf::uint32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// optional float boss_hp = 6;
inline bool SCMessageRankList::has_boss_hp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCMessageRankList::set_has_boss_hp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCMessageRankList::clear_has_boss_hp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCMessageRankList::clear_boss_hp() {
  boss_hp_ = 0;
  clear_has_boss_hp();
}
inline float SCMessageRankList::boss_hp() const {
  return boss_hp_;
}
inline void SCMessageRankList::set_boss_hp(float value) {
  set_has_boss_hp();
  boss_hp_ = value;
}

// optional uint32 remain_boss_time = 7;
inline bool SCMessageRankList::has_remain_boss_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCMessageRankList::set_has_remain_boss_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCMessageRankList::clear_has_remain_boss_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCMessageRankList::clear_remain_boss_time() {
  remain_boss_time_ = 0u;
  clear_has_remain_boss_time();
}
inline ::google::protobuf::uint32 SCMessageRankList::remain_boss_time() const {
  return remain_boss_time_;
}
inline void SCMessageRankList::set_remain_boss_time(::google::protobuf::uint32 value) {
  set_has_remain_boss_time();
  remain_boss_time_ = value;
}

// optional uint64 arena_score = 8;
inline bool SCMessageRankList::has_arena_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SCMessageRankList::set_has_arena_score() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SCMessageRankList::clear_has_arena_score() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SCMessageRankList::clear_arena_score() {
  arena_score_ = GOOGLE_ULONGLONG(0);
  clear_has_arena_score();
}
inline ::google::protobuf::uint64 SCMessageRankList::arena_score() const {
  return arena_score_;
}
inline void SCMessageRankList::set_arena_score(::google::protobuf::uint64 value) {
  set_has_arena_score();
  arena_score_ = value;
}

// optional uint64 arena_rank = 9;
inline bool SCMessageRankList::has_arena_rank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SCMessageRankList::set_has_arena_rank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SCMessageRankList::clear_has_arena_rank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SCMessageRankList::clear_arena_rank() {
  arena_rank_ = GOOGLE_ULONGLONG(0);
  clear_has_arena_rank();
}
inline ::google::protobuf::uint64 SCMessageRankList::arena_rank() const {
  return arena_rank_;
}
inline void SCMessageRankList::set_arena_rank(::google::protobuf::uint64 value) {
  set_has_arena_rank();
  arena_rank_ = value;
}

// optional uint64 arena_rank_old = 10;
inline bool SCMessageRankList::has_arena_rank_old() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SCMessageRankList::set_has_arena_rank_old() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SCMessageRankList::clear_has_arena_rank_old() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SCMessageRankList::clear_arena_rank_old() {
  arena_rank_old_ = GOOGLE_ULONGLONG(0);
  clear_has_arena_rank_old();
}
inline ::google::protobuf::uint64 SCMessageRankList::arena_rank_old() const {
  return arena_rank_old_;
}
inline void SCMessageRankList::set_arena_rank_old(::google::protobuf::uint64 value) {
  set_has_arena_rank_old();
  arena_rank_old_ = value;
}

// optional uint64 arena_cd = 11;
inline bool SCMessageRankList::has_arena_cd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SCMessageRankList::set_has_arena_cd() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SCMessageRankList::clear_has_arena_cd() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SCMessageRankList::clear_arena_cd() {
  arena_cd_ = GOOGLE_ULONGLONG(0);
  clear_has_arena_cd();
}
inline ::google::protobuf::uint64 SCMessageRankList::arena_cd() const {
  return arena_cd_;
}
inline void SCMessageRankList::set_arena_cd(::google::protobuf::uint64 value) {
  set_has_arena_cd();
  arena_cd_ = value;
}

// -------------------------------------------------------------------

// SCMessageBattleCheck

// optional uint32 check_id = 1;
inline bool SCMessageBattleCheck::has_check_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageBattleCheck::set_has_check_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageBattleCheck::clear_has_check_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageBattleCheck::clear_check_id() {
  check_id_ = 0u;
  clear_has_check_id();
}
inline ::google::protobuf::uint32 SCMessageBattleCheck::check_id() const {
  return check_id_;
}
inline void SCMessageBattleCheck::set_check_id(::google::protobuf::uint32 value) {
  set_has_check_id();
  check_id_ = value;
}

// -------------------------------------------------------------------

// SCMessageCorpsOper

// required .jynetwork.proto.eCorpsOpertionType oper = 1;
inline bool SCMessageCorpsOper::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageCorpsOper::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageCorpsOper::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageCorpsOper::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::jynetwork::proto::eCorpsOpertionType SCMessageCorpsOper::oper() const {
  return static_cast< ::jynetwork::proto::eCorpsOpertionType >(oper_);
}
inline void SCMessageCorpsOper::set_oper(::jynetwork::proto::eCorpsOpertionType value) {
  assert(::jynetwork::proto::eCorpsOpertionType_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// optional uint32 corps_id = 2;
inline bool SCMessageCorpsOper::has_corps_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageCorpsOper::set_has_corps_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageCorpsOper::clear_has_corps_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageCorpsOper::clear_corps_id() {
  corps_id_ = 0u;
  clear_has_corps_id();
}
inline ::google::protobuf::uint32 SCMessageCorpsOper::corps_id() const {
  return corps_id_;
}
inline void SCMessageCorpsOper::set_corps_id(::google::protobuf::uint32 value) {
  set_has_corps_id();
  corps_id_ = value;
}

// optional uint32 char_id = 3;
inline bool SCMessageCorpsOper::has_char_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageCorpsOper::set_has_char_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageCorpsOper::clear_has_char_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageCorpsOper::clear_char_id() {
  char_id_ = 0u;
  clear_has_char_id();
}
inline ::google::protobuf::uint32 SCMessageCorpsOper::char_id() const {
  return char_id_;
}
inline void SCMessageCorpsOper::set_char_id(::google::protobuf::uint32 value) {
  set_has_char_id();
  char_id_ = value;
}

// optional bytes name = 4;
inline bool SCMessageCorpsOper::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCMessageCorpsOper::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCMessageCorpsOper::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCMessageCorpsOper::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SCMessageCorpsOper::name() const {
  return *name_;
}
inline void SCMessageCorpsOper::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SCMessageCorpsOper::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SCMessageCorpsOper::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCMessageCorpsOper::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SCMessageCorpsOper::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCMessageCorpsOper::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .jynetwork.proto.eOpertionResult result = 5;
inline bool SCMessageCorpsOper::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCMessageCorpsOper::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCMessageCorpsOper::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCMessageCorpsOper::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::jynetwork::proto::eOpertionResult SCMessageCorpsOper::result() const {
  return static_cast< ::jynetwork::proto::eOpertionResult >(result_);
}
inline void SCMessageCorpsOper::set_result(::jynetwork::proto::eOpertionResult value) {
  assert(::jynetwork::proto::eOpertionResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CorpsInfo

// optional uint32 corps_id = 1;
inline bool CorpsInfo::has_corps_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CorpsInfo::set_has_corps_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CorpsInfo::clear_has_corps_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CorpsInfo::clear_corps_id() {
  corps_id_ = 0u;
  clear_has_corps_id();
}
inline ::google::protobuf::uint32 CorpsInfo::corps_id() const {
  return corps_id_;
}
inline void CorpsInfo::set_corps_id(::google::protobuf::uint32 value) {
  set_has_corps_id();
  corps_id_ = value;
}

// optional bytes corps_name = 2;
inline bool CorpsInfo::has_corps_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CorpsInfo::set_has_corps_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CorpsInfo::clear_has_corps_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CorpsInfo::clear_corps_name() {
  if (corps_name_ != &::google::protobuf::internal::kEmptyString) {
    corps_name_->clear();
  }
  clear_has_corps_name();
}
inline const ::std::string& CorpsInfo::corps_name() const {
  return *corps_name_;
}
inline void CorpsInfo::set_corps_name(const ::std::string& value) {
  set_has_corps_name();
  if (corps_name_ == &::google::protobuf::internal::kEmptyString) {
    corps_name_ = new ::std::string;
  }
  corps_name_->assign(value);
}
inline void CorpsInfo::set_corps_name(const char* value) {
  set_has_corps_name();
  if (corps_name_ == &::google::protobuf::internal::kEmptyString) {
    corps_name_ = new ::std::string;
  }
  corps_name_->assign(value);
}
inline void CorpsInfo::set_corps_name(const void* value, size_t size) {
  set_has_corps_name();
  if (corps_name_ == &::google::protobuf::internal::kEmptyString) {
    corps_name_ = new ::std::string;
  }
  corps_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CorpsInfo::mutable_corps_name() {
  set_has_corps_name();
  if (corps_name_ == &::google::protobuf::internal::kEmptyString) {
    corps_name_ = new ::std::string;
  }
  return corps_name_;
}
inline ::std::string* CorpsInfo::release_corps_name() {
  clear_has_corps_name();
  if (corps_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = corps_name_;
    corps_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CorpsInfo::set_allocated_corps_name(::std::string* corps_name) {
  if (corps_name_ != &::google::protobuf::internal::kEmptyString) {
    delete corps_name_;
  }
  if (corps_name) {
    set_has_corps_name();
    corps_name_ = corps_name;
  } else {
    clear_has_corps_name();
    corps_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 corps_lv = 3;
inline bool CorpsInfo::has_corps_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CorpsInfo::set_has_corps_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CorpsInfo::clear_has_corps_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CorpsInfo::clear_corps_lv() {
  corps_lv_ = 0u;
  clear_has_corps_lv();
}
inline ::google::protobuf::uint32 CorpsInfo::corps_lv() const {
  return corps_lv_;
}
inline void CorpsInfo::set_corps_lv(::google::protobuf::uint32 value) {
  set_has_corps_lv();
  corps_lv_ = value;
}

// optional uint32 corps_exp = 4;
inline bool CorpsInfo::has_corps_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CorpsInfo::set_has_corps_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CorpsInfo::clear_has_corps_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CorpsInfo::clear_corps_exp() {
  corps_exp_ = 0u;
  clear_has_corps_exp();
}
inline ::google::protobuf::uint32 CorpsInfo::corps_exp() const {
  return corps_exp_;
}
inline void CorpsInfo::set_corps_exp(::google::protobuf::uint32 value) {
  set_has_corps_exp();
  corps_exp_ = value;
}

// optional bytes corps_intro = 5;
inline bool CorpsInfo::has_corps_intro() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CorpsInfo::set_has_corps_intro() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CorpsInfo::clear_has_corps_intro() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CorpsInfo::clear_corps_intro() {
  if (corps_intro_ != &::google::protobuf::internal::kEmptyString) {
    corps_intro_->clear();
  }
  clear_has_corps_intro();
}
inline const ::std::string& CorpsInfo::corps_intro() const {
  return *corps_intro_;
}
inline void CorpsInfo::set_corps_intro(const ::std::string& value) {
  set_has_corps_intro();
  if (corps_intro_ == &::google::protobuf::internal::kEmptyString) {
    corps_intro_ = new ::std::string;
  }
  corps_intro_->assign(value);
}
inline void CorpsInfo::set_corps_intro(const char* value) {
  set_has_corps_intro();
  if (corps_intro_ == &::google::protobuf::internal::kEmptyString) {
    corps_intro_ = new ::std::string;
  }
  corps_intro_->assign(value);
}
inline void CorpsInfo::set_corps_intro(const void* value, size_t size) {
  set_has_corps_intro();
  if (corps_intro_ == &::google::protobuf::internal::kEmptyString) {
    corps_intro_ = new ::std::string;
  }
  corps_intro_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CorpsInfo::mutable_corps_intro() {
  set_has_corps_intro();
  if (corps_intro_ == &::google::protobuf::internal::kEmptyString) {
    corps_intro_ = new ::std::string;
  }
  return corps_intro_;
}
inline ::std::string* CorpsInfo::release_corps_intro() {
  clear_has_corps_intro();
  if (corps_intro_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = corps_intro_;
    corps_intro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CorpsInfo::set_allocated_corps_intro(::std::string* corps_intro) {
  if (corps_intro_ != &::google::protobuf::internal::kEmptyString) {
    delete corps_intro_;
  }
  if (corps_intro) {
    set_has_corps_intro();
    corps_intro_ = corps_intro;
  } else {
    clear_has_corps_intro();
    corps_intro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 corps_power = 6;
inline bool CorpsInfo::has_corps_power() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CorpsInfo::set_has_corps_power() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CorpsInfo::clear_has_corps_power() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CorpsInfo::clear_corps_power() {
  corps_power_ = 0u;
  clear_has_corps_power();
}
inline ::google::protobuf::uint32 CorpsInfo::corps_power() const {
  return corps_power_;
}
inline void CorpsInfo::set_corps_power(::google::protobuf::uint32 value) {
  set_has_corps_power();
  corps_power_ = value;
}

// optional uint32 corps_member_count = 7;
inline bool CorpsInfo::has_corps_member_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CorpsInfo::set_has_corps_member_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CorpsInfo::clear_has_corps_member_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CorpsInfo::clear_corps_member_count() {
  corps_member_count_ = 0u;
  clear_has_corps_member_count();
}
inline ::google::protobuf::uint32 CorpsInfo::corps_member_count() const {
  return corps_member_count_;
}
inline void CorpsInfo::set_corps_member_count(::google::protobuf::uint32 value) {
  set_has_corps_member_count();
  corps_member_count_ = value;
}

// optional uint32 corps_member_max = 8;
inline bool CorpsInfo::has_corps_member_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CorpsInfo::set_has_corps_member_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CorpsInfo::clear_has_corps_member_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CorpsInfo::clear_corps_member_max() {
  corps_member_max_ = 0u;
  clear_has_corps_member_max();
}
inline ::google::protobuf::uint32 CorpsInfo::corps_member_max() const {
  return corps_member_max_;
}
inline void CorpsInfo::set_corps_member_max(::google::protobuf::uint32 value) {
  set_has_corps_member_max();
  corps_member_max_ = value;
}

// optional uint32 corps_join = 9;
inline bool CorpsInfo::has_corps_join() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CorpsInfo::set_has_corps_join() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CorpsInfo::clear_has_corps_join() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CorpsInfo::clear_corps_join() {
  corps_join_ = 0u;
  clear_has_corps_join();
}
inline ::google::protobuf::uint32 CorpsInfo::corps_join() const {
  return corps_join_;
}
inline void CorpsInfo::set_corps_join(::google::protobuf::uint32 value) {
  set_has_corps_join();
  corps_join_ = value;
}

// optional uint32 is_apply = 10;
inline bool CorpsInfo::has_is_apply() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CorpsInfo::set_has_is_apply() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CorpsInfo::clear_has_is_apply() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CorpsInfo::clear_is_apply() {
  is_apply_ = 0u;
  clear_has_is_apply();
}
inline ::google::protobuf::uint32 CorpsInfo::is_apply() const {
  return is_apply_;
}
inline void CorpsInfo::set_is_apply(::google::protobuf::uint32 value) {
  set_has_is_apply();
  is_apply_ = value;
}

// optional uint32 corps_rank = 11;
inline bool CorpsInfo::has_corps_rank() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CorpsInfo::set_has_corps_rank() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CorpsInfo::clear_has_corps_rank() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CorpsInfo::clear_corps_rank() {
  corps_rank_ = 0u;
  clear_has_corps_rank();
}
inline ::google::protobuf::uint32 CorpsInfo::corps_rank() const {
  return corps_rank_;
}
inline void CorpsInfo::set_corps_rank(::google::protobuf::uint32 value) {
  set_has_corps_rank();
  corps_rank_ = value;
}

// optional uint32 hunter_point = 12;
inline bool CorpsInfo::has_hunter_point() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CorpsInfo::set_has_hunter_point() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CorpsInfo::clear_has_hunter_point() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CorpsInfo::clear_hunter_point() {
  hunter_point_ = 0u;
  clear_has_hunter_point();
}
inline ::google::protobuf::uint32 CorpsInfo::hunter_point() const {
  return hunter_point_;
}
inline void CorpsInfo::set_hunter_point(::google::protobuf::uint32 value) {
  set_has_hunter_point();
  hunter_point_ = value;
}

// -------------------------------------------------------------------

// SCMessageCorpsInfo

// optional .jynetwork.proto.CorpsInfo info = 1;
inline bool SCMessageCorpsInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageCorpsInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageCorpsInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageCorpsInfo::clear_info() {
  if (info_ != NULL) info_->::jynetwork::proto::CorpsInfo::Clear();
  clear_has_info();
}
inline const ::jynetwork::proto::CorpsInfo& SCMessageCorpsInfo::info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::jynetwork::proto::CorpsInfo* SCMessageCorpsInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::jynetwork::proto::CorpsInfo;
  return info_;
}
inline ::jynetwork::proto::CorpsInfo* SCMessageCorpsInfo::release_info() {
  clear_has_info();
  ::jynetwork::proto::CorpsInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SCMessageCorpsInfo::set_allocated_info(::jynetwork::proto::CorpsInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// repeated .jynetwork.proto.SCQueryDetailInfo char_info = 2;
inline int SCMessageCorpsInfo::char_info_size() const {
  return char_info_.size();
}
inline void SCMessageCorpsInfo::clear_char_info() {
  char_info_.Clear();
}
inline const ::jynetwork::proto::SCQueryDetailInfo& SCMessageCorpsInfo::char_info(int index) const {
  return char_info_.Get(index);
}
inline ::jynetwork::proto::SCQueryDetailInfo* SCMessageCorpsInfo::mutable_char_info(int index) {
  return char_info_.Mutable(index);
}
inline ::jynetwork::proto::SCQueryDetailInfo* SCMessageCorpsInfo::add_char_info() {
  return char_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >&
SCMessageCorpsInfo::char_info() const {
  return char_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCQueryDetailInfo >*
SCMessageCorpsInfo::mutable_char_info() {
  return &char_info_;
}

// optional uint32 my_acc_id = 3;
inline bool SCMessageCorpsInfo::has_my_acc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageCorpsInfo::set_has_my_acc_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageCorpsInfo::clear_has_my_acc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageCorpsInfo::clear_my_acc_id() {
  my_acc_id_ = 0u;
  clear_has_my_acc_id();
}
inline ::google::protobuf::uint32 SCMessageCorpsInfo::my_acc_id() const {
  return my_acc_id_;
}
inline void SCMessageCorpsInfo::set_my_acc_id(::google::protobuf::uint32 value) {
  set_has_my_acc_id();
  my_acc_id_ = value;
}

// -------------------------------------------------------------------

// CorpsBossInfo

// optional uint32 map_id = 1;
inline bool CorpsBossInfo::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CorpsBossInfo::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CorpsBossInfo::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CorpsBossInfo::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 CorpsBossInfo::map_id() const {
  return map_id_;
}
inline void CorpsBossInfo::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional uint32 attack_id = 2;
inline bool CorpsBossInfo::has_attack_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CorpsBossInfo::set_has_attack_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CorpsBossInfo::clear_has_attack_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CorpsBossInfo::clear_attack_id() {
  attack_id_ = 0u;
  clear_has_attack_id();
}
inline ::google::protobuf::uint32 CorpsBossInfo::attack_id() const {
  return attack_id_;
}
inline void CorpsBossInfo::set_attack_id(::google::protobuf::uint32 value) {
  set_has_attack_id();
  attack_id_ = value;
}

// repeated .jynetwork.proto.CorpsBossPlayerInfo player_info = 3;
inline int CorpsBossInfo::player_info_size() const {
  return player_info_.size();
}
inline void CorpsBossInfo::clear_player_info() {
  player_info_.Clear();
}
inline const ::jynetwork::proto::CorpsBossPlayerInfo& CorpsBossInfo::player_info(int index) const {
  return player_info_.Get(index);
}
inline ::jynetwork::proto::CorpsBossPlayerInfo* CorpsBossInfo::mutable_player_info(int index) {
  return player_info_.Mutable(index);
}
inline ::jynetwork::proto::CorpsBossPlayerInfo* CorpsBossInfo::add_player_info() {
  return player_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossPlayerInfo >&
CorpsBossInfo::player_info() const {
  return player_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossPlayerInfo >*
CorpsBossInfo::mutable_player_info() {
  return &player_info_;
}

// optional uint32 is_open = 4;
inline bool CorpsBossInfo::has_is_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CorpsBossInfo::set_has_is_open() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CorpsBossInfo::clear_has_is_open() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CorpsBossInfo::clear_is_open() {
  is_open_ = 0u;
  clear_has_is_open();
}
inline ::google::protobuf::uint32 CorpsBossInfo::is_open() const {
  return is_open_;
}
inline void CorpsBossInfo::set_is_open(::google::protobuf::uint32 value) {
  set_has_is_open();
  is_open_ = value;
}

// optional uint64 hp = 5;
inline bool CorpsBossInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CorpsBossInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CorpsBossInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CorpsBossInfo::clear_hp() {
  hp_ = GOOGLE_ULONGLONG(0);
  clear_has_hp();
}
inline ::google::protobuf::uint64 CorpsBossInfo::hp() const {
  return hp_;
}
inline void CorpsBossInfo::set_hp(::google::protobuf::uint64 value) {
  set_has_hp();
  hp_ = value;
}

// -------------------------------------------------------------------

// CorpsBossPlayerInfo

// optional uint32 player_id = 1;
inline bool CorpsBossPlayerInfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CorpsBossPlayerInfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CorpsBossPlayerInfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CorpsBossPlayerInfo::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CorpsBossPlayerInfo::player_id() const {
  return player_id_;
}
inline void CorpsBossPlayerInfo::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional bytes player_name = 2;
inline bool CorpsBossPlayerInfo::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CorpsBossPlayerInfo::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CorpsBossPlayerInfo::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CorpsBossPlayerInfo::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& CorpsBossPlayerInfo::player_name() const {
  return *player_name_;
}
inline void CorpsBossPlayerInfo::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CorpsBossPlayerInfo::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CorpsBossPlayerInfo::set_player_name(const void* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CorpsBossPlayerInfo::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* CorpsBossPlayerInfo::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CorpsBossPlayerInfo::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 score = 3;
inline bool CorpsBossPlayerInfo::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CorpsBossPlayerInfo::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CorpsBossPlayerInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CorpsBossPlayerInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 CorpsBossPlayerInfo::score() const {
  return score_;
}
inline void CorpsBossPlayerInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 rank = 4;
inline bool CorpsBossPlayerInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CorpsBossPlayerInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CorpsBossPlayerInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CorpsBossPlayerInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CorpsBossPlayerInfo::rank() const {
  return rank_;
}
inline void CorpsBossPlayerInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// SCMessageCorpsBossInfo

// repeated .jynetwork.proto.CorpsBossInfo info = 1;
inline int SCMessageCorpsBossInfo::info_size() const {
  return info_.size();
}
inline void SCMessageCorpsBossInfo::clear_info() {
  info_.Clear();
}
inline const ::jynetwork::proto::CorpsBossInfo& SCMessageCorpsBossInfo::info(int index) const {
  return info_.Get(index);
}
inline ::jynetwork::proto::CorpsBossInfo* SCMessageCorpsBossInfo::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::jynetwork::proto::CorpsBossInfo* SCMessageCorpsBossInfo::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossInfo >&
SCMessageCorpsBossInfo::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossInfo >*
SCMessageCorpsBossInfo::mutable_info() {
  return &info_;
}

// optional uint32 my_acc_id = 3;
inline bool SCMessageCorpsBossInfo::has_my_acc_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageCorpsBossInfo::set_has_my_acc_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageCorpsBossInfo::clear_has_my_acc_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageCorpsBossInfo::clear_my_acc_id() {
  my_acc_id_ = 0u;
  clear_has_my_acc_id();
}
inline ::google::protobuf::uint32 SCMessageCorpsBossInfo::my_acc_id() const {
  return my_acc_id_;
}
inline void SCMessageCorpsBossInfo::set_my_acc_id(::google::protobuf::uint32 value) {
  set_has_my_acc_id();
  my_acc_id_ = value;
}

// -------------------------------------------------------------------

// SCMessageCorpsList

// repeated .jynetwork.proto.CorpsInfo corps_info = 1;
inline int SCMessageCorpsList::corps_info_size() const {
  return corps_info_.size();
}
inline void SCMessageCorpsList::clear_corps_info() {
  corps_info_.Clear();
}
inline const ::jynetwork::proto::CorpsInfo& SCMessageCorpsList::corps_info(int index) const {
  return corps_info_.Get(index);
}
inline ::jynetwork::proto::CorpsInfo* SCMessageCorpsList::mutable_corps_info(int index) {
  return corps_info_.Mutable(index);
}
inline ::jynetwork::proto::CorpsInfo* SCMessageCorpsList::add_corps_info() {
  return corps_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsInfo >&
SCMessageCorpsList::corps_info() const {
  return corps_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsInfo >*
SCMessageCorpsList::mutable_corps_info() {
  return &corps_info_;
}

// optional uint32 rank = 2;
inline bool SCMessageCorpsList::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageCorpsList::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageCorpsList::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageCorpsList::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 SCMessageCorpsList::rank() const {
  return rank_;
}
inline void SCMessageCorpsList::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 my_acc_id = 3;
inline bool SCMessageCorpsList::has_my_acc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageCorpsList::set_has_my_acc_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageCorpsList::clear_has_my_acc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageCorpsList::clear_my_acc_id() {
  my_acc_id_ = 0u;
  clear_has_my_acc_id();
}
inline ::google::protobuf::uint32 SCMessageCorpsList::my_acc_id() const {
  return my_acc_id_;
}
inline void SCMessageCorpsList::set_my_acc_id(::google::protobuf::uint32 value) {
  set_has_my_acc_id();
  my_acc_id_ = value;
}

// repeated uint32 apply_list = 4;
inline int SCMessageCorpsList::apply_list_size() const {
  return apply_list_.size();
}
inline void SCMessageCorpsList::clear_apply_list() {
  apply_list_.Clear();
}
inline ::google::protobuf::uint32 SCMessageCorpsList::apply_list(int index) const {
  return apply_list_.Get(index);
}
inline void SCMessageCorpsList::set_apply_list(int index, ::google::protobuf::uint32 value) {
  apply_list_.Set(index, value);
}
inline void SCMessageCorpsList::add_apply_list(::google::protobuf::uint32 value) {
  apply_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SCMessageCorpsList::apply_list() const {
  return apply_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SCMessageCorpsList::mutable_apply_list() {
  return &apply_list_;
}

// -------------------------------------------------------------------

// MessagePKOper

// optional .jynetwork.proto.ePKOperationOper oper = 1;
inline bool MessagePKOper::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessagePKOper::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessagePKOper::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessagePKOper::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::jynetwork::proto::ePKOperationOper MessagePKOper::oper() const {
  return static_cast< ::jynetwork::proto::ePKOperationOper >(oper_);
}
inline void MessagePKOper::set_oper(::jynetwork::proto::ePKOperationOper value) {
  assert(::jynetwork::proto::ePKOperationOper_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// optional uint32 skill_id = 2;
inline bool MessagePKOper::has_skill_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessagePKOper::set_has_skill_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessagePKOper::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessagePKOper::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 MessagePKOper::skill_id() const {
  return skill_id_;
}
inline void MessagePKOper::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional uint32 hp = 3;
inline bool MessagePKOper::has_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessagePKOper::set_has_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessagePKOper::clear_has_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessagePKOper::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 MessagePKOper::hp() const {
  return hp_;
}
inline void MessagePKOper::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// optional uint32 posx = 4;
inline bool MessagePKOper::has_posx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessagePKOper::set_has_posx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessagePKOper::clear_has_posx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessagePKOper::clear_posx() {
  posx_ = 0u;
  clear_has_posx();
}
inline ::google::protobuf::uint32 MessagePKOper::posx() const {
  return posx_;
}
inline void MessagePKOper::set_posx(::google::protobuf::uint32 value) {
  set_has_posx();
  posx_ = value;
}

// optional uint32 posy = 5;
inline bool MessagePKOper::has_posy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessagePKOper::set_has_posy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessagePKOper::clear_has_posy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessagePKOper::clear_posy() {
  posy_ = 0u;
  clear_has_posy();
}
inline ::google::protobuf::uint32 MessagePKOper::posy() const {
  return posy_;
}
inline void MessagePKOper::set_posy(::google::protobuf::uint32 value) {
  set_has_posy();
  posy_ = value;
}

// -------------------------------------------------------------------

// SCMessagePKOperResult

// optional .jynetwork.proto.ePKOperationOper oper = 1;
inline bool SCMessagePKOperResult::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessagePKOperResult::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessagePKOperResult::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessagePKOperResult::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::jynetwork::proto::ePKOperationOper SCMessagePKOperResult::oper() const {
  return static_cast< ::jynetwork::proto::ePKOperationOper >(oper_);
}
inline void SCMessagePKOperResult::set_oper(::jynetwork::proto::ePKOperationOper value) {
  assert(::jynetwork::proto::ePKOperationOper_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// optional .jynetwork.proto.eOpertionResult result = 2;
inline bool SCMessagePKOperResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessagePKOperResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessagePKOperResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessagePKOperResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::jynetwork::proto::eOpertionResult SCMessagePKOperResult::result() const {
  return static_cast< ::jynetwork::proto::eOpertionResult >(result_);
}
inline void SCMessagePKOperResult::set_result(::jynetwork::proto::eOpertionResult value) {
  assert(::jynetwork::proto::eOpertionResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SCMessageFriendList_FriendInfo

// optional uint32 acc_id = 1;
inline bool SCMessageFriendList_FriendInfo::has_acc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCMessageFriendList_FriendInfo::set_has_acc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCMessageFriendList_FriendInfo::clear_has_acc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCMessageFriendList_FriendInfo::clear_acc_id() {
  acc_id_ = 0u;
  clear_has_acc_id();
}
inline ::google::protobuf::uint32 SCMessageFriendList_FriendInfo::acc_id() const {
  return acc_id_;
}
inline void SCMessageFriendList_FriendInfo::set_acc_id(::google::protobuf::uint32 value) {
  set_has_acc_id();
  acc_id_ = value;
}

// optional bytes name = 2;
inline bool SCMessageFriendList_FriendInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCMessageFriendList_FriendInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCMessageFriendList_FriendInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCMessageFriendList_FriendInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SCMessageFriendList_FriendInfo::name() const {
  return *name_;
}
inline void SCMessageFriendList_FriendInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SCMessageFriendList_FriendInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SCMessageFriendList_FriendInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCMessageFriendList_FriendInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SCMessageFriendList_FriendInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCMessageFriendList_FriendInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool SCMessageFriendList_FriendInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageFriendList_FriendInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageFriendList_FriendInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageFriendList_FriendInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 SCMessageFriendList_FriendInfo::level() const {
  return level_;
}
inline void SCMessageFriendList_FriendInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 4;
inline bool SCMessageFriendList_FriendInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCMessageFriendList_FriendInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCMessageFriendList_FriendInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCMessageFriendList_FriendInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 SCMessageFriendList_FriendInfo::job() const {
  return job_;
}
inline void SCMessageFriendList_FriendInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 last_map = 5;
inline bool SCMessageFriendList_FriendInfo::has_last_map() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCMessageFriendList_FriendInfo::set_has_last_map() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCMessageFriendList_FriendInfo::clear_has_last_map() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCMessageFriendList_FriendInfo::clear_last_map() {
  last_map_ = 0u;
  clear_has_last_map();
}
inline ::google::protobuf::uint32 SCMessageFriendList_FriendInfo::last_map() const {
  return last_map_;
}
inline void SCMessageFriendList_FriendInfo::set_last_map(::google::protobuf::uint32 value) {
  set_has_last_map();
  last_map_ = value;
}

// optional uint32 state = 6;
inline bool SCMessageFriendList_FriendInfo::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCMessageFriendList_FriendInfo::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCMessageFriendList_FriendInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCMessageFriendList_FriendInfo::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 SCMessageFriendList_FriendInfo::state() const {
  return state_;
}
inline void SCMessageFriendList_FriendInfo::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional uint32 friend_type = 7;
inline bool SCMessageFriendList_FriendInfo::has_friend_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCMessageFriendList_FriendInfo::set_has_friend_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCMessageFriendList_FriendInfo::clear_has_friend_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCMessageFriendList_FriendInfo::clear_friend_type() {
  friend_type_ = 0u;
  clear_has_friend_type();
}
inline ::google::protobuf::uint32 SCMessageFriendList_FriendInfo::friend_type() const {
  return friend_type_;
}
inline void SCMessageFriendList_FriendInfo::set_friend_type(::google::protobuf::uint32 value) {
  set_has_friend_type();
  friend_type_ = value;
}

// optional uint32 fight_power = 8;
inline bool SCMessageFriendList_FriendInfo::has_fight_power() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SCMessageFriendList_FriendInfo::set_has_fight_power() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SCMessageFriendList_FriendInfo::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SCMessageFriendList_FriendInfo::clear_fight_power() {
  fight_power_ = 0u;
  clear_has_fight_power();
}
inline ::google::protobuf::uint32 SCMessageFriendList_FriendInfo::fight_power() const {
  return fight_power_;
}
inline void SCMessageFriendList_FriendInfo::set_fight_power(::google::protobuf::uint32 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// optional uint32 last_normal_map = 9;
inline bool SCMessageFriendList_FriendInfo::has_last_normal_map() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SCMessageFriendList_FriendInfo::set_has_last_normal_map() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SCMessageFriendList_FriendInfo::clear_has_last_normal_map() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SCMessageFriendList_FriendInfo::clear_last_normal_map() {
  last_normal_map_ = 0u;
  clear_has_last_normal_map();
}
inline ::google::protobuf::uint32 SCMessageFriendList_FriendInfo::last_normal_map() const {
  return last_normal_map_;
}
inline void SCMessageFriendList_FriendInfo::set_last_normal_map(::google::protobuf::uint32 value) {
  set_has_last_normal_map();
  last_normal_map_ = value;
}

// -------------------------------------------------------------------

// SCMessageFriendList

// repeated .jynetwork.proto.SCMessageFriendList.FriendInfo friend_info = 1;
inline int SCMessageFriendList::friend_info_size() const {
  return friend_info_.size();
}
inline void SCMessageFriendList::clear_friend_info() {
  friend_info_.Clear();
}
inline const ::jynetwork::proto::SCMessageFriendList_FriendInfo& SCMessageFriendList::friend_info(int index) const {
  return friend_info_.Get(index);
}
inline ::jynetwork::proto::SCMessageFriendList_FriendInfo* SCMessageFriendList::mutable_friend_info(int index) {
  return friend_info_.Mutable(index);
}
inline ::jynetwork::proto::SCMessageFriendList_FriendInfo* SCMessageFriendList::add_friend_info() {
  return friend_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageFriendList_FriendInfo >&
SCMessageFriendList::friend_info() const {
  return friend_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageFriendList_FriendInfo >*
SCMessageFriendList::mutable_friend_info() {
  return &friend_info_;
}

// repeated .jynetwork.proto.SCMessageFriendList.FriendInfo corps_info = 2;
inline int SCMessageFriendList::corps_info_size() const {
  return corps_info_.size();
}
inline void SCMessageFriendList::clear_corps_info() {
  corps_info_.Clear();
}
inline const ::jynetwork::proto::SCMessageFriendList_FriendInfo& SCMessageFriendList::corps_info(int index) const {
  return corps_info_.Get(index);
}
inline ::jynetwork::proto::SCMessageFriendList_FriendInfo* SCMessageFriendList::mutable_corps_info(int index) {
  return corps_info_.Mutable(index);
}
inline ::jynetwork::proto::SCMessageFriendList_FriendInfo* SCMessageFriendList::add_corps_info() {
  return corps_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageFriendList_FriendInfo >&
SCMessageFriendList::corps_info() const {
  return corps_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::SCMessageFriendList_FriendInfo >*
SCMessageFriendList::mutable_corps_info() {
  return &corps_info_;
}

// optional uint32 from_acc_id = 3;
inline bool SCMessageFriendList::has_from_acc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCMessageFriendList::set_has_from_acc_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCMessageFriendList::clear_has_from_acc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCMessageFriendList::clear_from_acc_id() {
  from_acc_id_ = 0u;
  clear_has_from_acc_id();
}
inline ::google::protobuf::uint32 SCMessageFriendList::from_acc_id() const {
  return from_acc_id_;
}
inline void SCMessageFriendList::set_from_acc_id(::google::protobuf::uint32 value) {
  set_has_from_acc_id();
  from_acc_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace jynetwork

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SCMessage_2eproto__INCLUDED
