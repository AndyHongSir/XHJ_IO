// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoC.proto

#ifndef PROTOBUF_StoC_2eproto__INCLUDED
#define PROTOBUF_StoC_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "scbase.pb.h"
#include "XML.pb.h"
#include "MessageHeader.pb.h"
// @@protoc_insertion_point(includes)

namespace jynetwork {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_StoC_2eproto();
void protobuf_AssignDesc_StoC_2eproto();
void protobuf_ShutdownFile_StoC_2eproto();

class sCharactorInit;
class sPersonItemStats;
class sPersonEquipStats;
class sPersonSkillStats;
class sMonsterStats;
class sPersonTaskStats;
class sCastleEndlessRelation;
class sCastleInfo;
class sCastleComplete;
class sCastleDrop;
class sMonsterRefreshGroup;
class sMonsterRefresh;
class sCastleBlock;
class sCastleStats;
class sSoundStats;
class sSoundTable;
class sEffectStats;
class sEffect;
class sSubEffects;
class sEffectSound;
class sEffects;
class sEffectMove;
class sEffectTable;
class sModelAction;
class sStageLine;
class sStageProp;
class sDebugSpawnBullet;
class sDebugEraseBullet;
class sAISetting;
class sActionEff3d;
class sActionEffect;
class sPPLConstant;
class sPersistDB;
class sMusicSetting;
class sPlayerSaveExt;
class sLanguageCell;
class sLanguages;
class sBattleGuide;
class sBattleMapGuide;
class sSoundEffectWav;
class sSoundEffectMusic;
class sMusiceEventTable;

// ===================================================================

class sCharactorInit : public ::google::protobuf::MessageLite {
 public:
  sCharactorInit();
  virtual ~sCharactorInit();

  sCharactorInit(const sCharactorInit& from);

  inline sCharactorInit& operator=(const sCharactorInit& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCharactorInit& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCharactorInit* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCharactorInit* other);

  // implements Message ----------------------------------------------

  sCharactorInit* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCharactorInit& from);
  void MergeFrom(const sCharactorInit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional string playername = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional .jynetwork.proto.eRoleType role = 3;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline ::jynetwork::proto::eRoleType role() const;
  inline void set_role(::jynetwork::proto::eRoleType value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint64 exp = 5;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  inline ::google::protobuf::uint64 exp() const;
  inline void set_exp(::google::protobuf::uint64 value);

  // optional uint32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint64 rankexp = 7;
  inline bool has_rankexp() const;
  inline void clear_rankexp();
  static const int kRankexpFieldNumber = 7;
  inline ::google::protobuf::uint64 rankexp() const;
  inline void set_rankexp(::google::protobuf::uint64 value);

  // optional uint32 statsid = 8;
  inline bool has_statsid() const;
  inline void clear_statsid();
  static const int kStatsidFieldNumber = 8;
  inline ::google::protobuf::uint32 statsid() const;
  inline void set_statsid(::google::protobuf::uint32 value);

  // optional uint64 weaponid = 9;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponidFieldNumber = 9;
  inline ::google::protobuf::uint64 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint64 value);

  // optional uint64 headid = 10;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 10;
  inline ::google::protobuf::uint64 headid() const;
  inline void set_headid(::google::protobuf::uint64 value);

  // optional uint64 bodyid = 11;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyidFieldNumber = 11;
  inline ::google::protobuf::uint64 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint64 value);

  // optional uint64 offhandid = 12;
  inline bool has_offhandid() const;
  inline void clear_offhandid();
  static const int kOffhandidFieldNumber = 12;
  inline ::google::protobuf::uint64 offhandid() const;
  inline void set_offhandid(::google::protobuf::uint64 value);

  // optional uint64 ringid = 13;
  inline bool has_ringid() const;
  inline void clear_ringid();
  static const int kRingidFieldNumber = 13;
  inline ::google::protobuf::uint64 ringid() const;
  inline void set_ringid(::google::protobuf::uint64 value);

  // optional uint64 neckid = 14;
  inline bool has_neckid() const;
  inline void clear_neckid();
  static const int kNeckidFieldNumber = 14;
  inline ::google::protobuf::uint64 neckid() const;
  inline void set_neckid(::google::protobuf::uint64 value);

  // optional uint32 skillid = 15;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 15;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 skillsid = 16;
  inline bool has_skillsid() const;
  inline void clear_skillsid();
  static const int kSkillsidFieldNumber = 16;
  inline ::google::protobuf::uint32 skillsid() const;
  inline void set_skillsid(::google::protobuf::uint32 value);

  // optional uint32 skillmid = 17;
  inline bool has_skillmid() const;
  inline void clear_skillmid();
  static const int kSkillmidFieldNumber = 17;
  inline ::google::protobuf::uint32 skillmid() const;
  inline void set_skillmid(::google::protobuf::uint32 value);

  // optional uint32 skilllid = 18;
  inline bool has_skilllid() const;
  inline void clear_skilllid();
  static const int kSkilllidFieldNumber = 18;
  inline ::google::protobuf::uint32 skilllid() const;
  inline void set_skilllid(::google::protobuf::uint32 value);

  // optional uint64 cardwarriorid = 20;
  inline bool has_cardwarriorid() const;
  inline void clear_cardwarriorid();
  static const int kCardwarrioridFieldNumber = 20;
  inline ::google::protobuf::uint64 cardwarriorid() const;
  inline void set_cardwarriorid(::google::protobuf::uint64 value);

  // optional uint64 cardmagicid = 21;
  inline bool has_cardmagicid() const;
  inline void clear_cardmagicid();
  static const int kCardmagicidFieldNumber = 21;
  inline ::google::protobuf::uint64 cardmagicid() const;
  inline void set_cardmagicid(::google::protobuf::uint64 value);

  // optional uint64 cardarcherid = 22;
  inline bool has_cardarcherid() const;
  inline void clear_cardarcherid();
  static const int kCardarcheridFieldNumber = 22;
  inline ::google::protobuf::uint64 cardarcherid() const;
  inline void set_cardarcherid(::google::protobuf::uint64 value);

  // optional uint64 cardpvpid = 27;
  inline bool has_cardpvpid() const;
  inline void clear_cardpvpid();
  static const int kCardpvpidFieldNumber = 27;
  inline ::google::protobuf::uint64 cardpvpid() const;
  inline void set_cardpvpid(::google::protobuf::uint64 value);

  // optional uint64 castleprogress = 23;
  inline bool has_castleprogress() const;
  inline void clear_castleprogress();
  static const int kCastleprogressFieldNumber = 23;
  inline ::google::protobuf::uint64 castleprogress() const;
  inline void set_castleprogress(::google::protobuf::uint64 value);

  // repeated .jynetwork.proto.sBuffStats buffsid = 24;
  inline int buffsid_size() const;
  inline void clear_buffsid();
  static const int kBuffsidFieldNumber = 24;
  inline const ::jynetwork::proto::sBuffStats& buffsid(int index) const;
  inline ::jynetwork::proto::sBuffStats* mutable_buffsid(int index);
  inline ::jynetwork::proto::sBuffStats* add_buffsid();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuffStats >&
      buffsid() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuffStats >*
      mutable_buffsid();

  // optional .jynetwork.proto.sGameStats gamestats = 25;
  inline bool has_gamestats() const;
  inline void clear_gamestats();
  static const int kGamestatsFieldNumber = 25;
  inline const ::jynetwork::proto::sGameStats& gamestats() const;
  inline ::jynetwork::proto::sGameStats* mutable_gamestats();
  inline ::jynetwork::proto::sGameStats* release_gamestats();
  inline void set_allocated_gamestats(::jynetwork::proto::sGameStats* gamestats);

  // optional uint32 local_name = 26;
  inline bool has_local_name() const;
  inline void clear_local_name();
  static const int kLocalNameFieldNumber = 26;
  inline ::google::protobuf::uint32 local_name() const;
  inline void set_local_name(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCharactorInit)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_rankexp();
  inline void clear_has_rankexp();
  inline void set_has_statsid();
  inline void clear_has_statsid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_offhandid();
  inline void clear_has_offhandid();
  inline void set_has_ringid();
  inline void clear_has_ringid();
  inline void set_has_neckid();
  inline void clear_has_neckid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skillsid();
  inline void clear_has_skillsid();
  inline void set_has_skillmid();
  inline void clear_has_skillmid();
  inline void set_has_skilllid();
  inline void clear_has_skilllid();
  inline void set_has_cardwarriorid();
  inline void clear_has_cardwarriorid();
  inline void set_has_cardmagicid();
  inline void clear_has_cardmagicid();
  inline void set_has_cardarcherid();
  inline void clear_has_cardarcherid();
  inline void set_has_cardpvpid();
  inline void clear_has_cardpvpid();
  inline void set_has_castleprogress();
  inline void clear_has_castleprogress();
  inline void set_has_gamestats();
  inline void clear_has_gamestats();
  inline void set_has_local_name();
  inline void clear_has_local_name();

  ::std::string* playername_;
  ::google::protobuf::uint32 uid_;
  int role_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint64 exp_;
  ::google::protobuf::uint64 rankexp_;
  ::google::protobuf::uint64 weaponid_;
  ::google::protobuf::uint64 headid_;
  ::google::protobuf::uint64 bodyid_;
  ::google::protobuf::uint32 statsid_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint64 offhandid_;
  ::google::protobuf::uint64 ringid_;
  ::google::protobuf::uint64 neckid_;
  ::google::protobuf::uint32 skillsid_;
  ::google::protobuf::uint32 skillmid_;
  ::google::protobuf::uint64 cardwarriorid_;
  ::google::protobuf::uint64 cardmagicid_;
  ::google::protobuf::uint64 cardarcherid_;
  ::google::protobuf::uint64 cardpvpid_;
  ::google::protobuf::uint32 skilllid_;
  ::google::protobuf::uint32 local_name_;
  ::google::protobuf::uint64 castleprogress_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuffStats > buffsid_;
  ::jynetwork::proto::sGameStats* gamestats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sCharactorInit* default_instance_;
};
// -------------------------------------------------------------------

class sPersonItemStats : public ::google::protobuf::MessageLite {
 public:
  sPersonItemStats();
  virtual ~sPersonItemStats();

  sPersonItemStats(const sPersonItemStats& from);

  inline sPersonItemStats& operator=(const sPersonItemStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPersonItemStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPersonItemStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPersonItemStats* other);

  // implements Message ----------------------------------------------

  sPersonItemStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPersonItemStats& from);
  void MergeFrom(const sPersonItemStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 amount = 3;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 3;
  inline ::google::protobuf::uint32 amount() const;
  inline void set_amount(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.ePersonalOpertionType oper = 4;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 4;
  inline ::jynetwork::proto::ePersonalOpertionType oper() const;
  inline void set_oper(::jynetwork::proto::ePersonalOpertionType value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPersonItemStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_oper();
  inline void clear_has_oper();

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 amount_;
  int oper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sPersonItemStats* default_instance_;
};
// -------------------------------------------------------------------

class sPersonEquipStats : public ::google::protobuf::MessageLite {
 public:
  sPersonEquipStats();
  virtual ~sPersonEquipStats();

  sPersonEquipStats(const sPersonEquipStats& from);

  inline sPersonEquipStats& operator=(const sPersonEquipStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPersonEquipStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPersonEquipStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPersonEquipStats* other);

  // implements Message ----------------------------------------------

  sPersonEquipStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPersonEquipStats& from);
  void MergeFrom(const sPersonEquipStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 equipid = 2;
  inline bool has_equipid() const;
  inline void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  inline ::google::protobuf::uint32 equipid() const;
  inline void set_equipid(::google::protobuf::uint32 value);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 intensify = 4;
  inline bool has_intensify() const;
  inline void clear_intensify();
  static const int kIntensifyFieldNumber = 4;
  inline ::google::protobuf::uint32 intensify() const;
  inline void set_intensify(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.sGameStats gamestats = 5;
  inline bool has_gamestats() const;
  inline void clear_gamestats();
  static const int kGamestatsFieldNumber = 5;
  inline const ::jynetwork::proto::sGameStats& gamestats() const;
  inline ::jynetwork::proto::sGameStats* mutable_gamestats();
  inline ::jynetwork::proto::sGameStats* release_gamestats();
  inline void set_allocated_gamestats(::jynetwork::proto::sGameStats* gamestats);

  // optional uint32 exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 starlv = 7;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarlvFieldNumber = 7;
  inline ::google::protobuf::uint32 starlv() const;
  inline void set_starlv(::google::protobuf::uint32 value);

  // repeated uint32 attr_type = 8;
  inline int attr_type_size() const;
  inline void clear_attr_type();
  static const int kAttrTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 attr_type(int index) const;
  inline void set_attr_type(int index, ::google::protobuf::uint32 value);
  inline void add_attr_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attr_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attr_type();

  // repeated uint32 attr_value = 9;
  inline int attr_value_size() const;
  inline void clear_attr_value();
  static const int kAttrValueFieldNumber = 9;
  inline ::google::protobuf::uint32 attr_value(int index) const;
  inline void set_attr_value(int index, ::google::protobuf::uint32 value);
  inline void add_attr_value(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attr_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attr_value();

  // optional .jynetwork.proto.ePersonalOpertionType oper = 10;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 10;
  inline ::jynetwork::proto::ePersonalOpertionType oper() const;
  inline void set_oper(::jynetwork::proto::ePersonalOpertionType value);

  // optional uint32 is_new = 11;
  inline bool has_is_new() const;
  inline void clear_is_new();
  static const int kIsNewFieldNumber = 11;
  inline ::google::protobuf::uint32 is_new() const;
  inline void set_is_new(::google::protobuf::uint32 value);

  // optional uint32 is_lock = 12;
  inline bool has_is_lock() const;
  inline void clear_is_lock();
  static const int kIsLockFieldNumber = 12;
  inline ::google::protobuf::uint32 is_lock() const;
  inline void set_is_lock(::google::protobuf::uint32 value);

  // repeated uint32 word_type = 13;
  inline int word_type_size() const;
  inline void clear_word_type();
  static const int kWordTypeFieldNumber = 13;
  inline ::google::protobuf::uint32 word_type(int index) const;
  inline void set_word_type(int index, ::google::protobuf::uint32 value);
  inline void add_word_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      word_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_word_type();

  // repeated float word_value = 14;
  inline int word_value_size() const;
  inline void clear_word_value();
  static const int kWordValueFieldNumber = 14;
  inline float word_value(int index) const;
  inline void set_word_value(int index, float value);
  inline void add_word_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      word_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_word_value();

  // repeated uint32 new_attr_type = 15;
  inline int new_attr_type_size() const;
  inline void clear_new_attr_type();
  static const int kNewAttrTypeFieldNumber = 15;
  inline ::google::protobuf::uint32 new_attr_type(int index) const;
  inline void set_new_attr_type(int index, ::google::protobuf::uint32 value);
  inline void add_new_attr_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      new_attr_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_new_attr_type();

  // repeated uint32 new_attr_value = 16;
  inline int new_attr_value_size() const;
  inline void clear_new_attr_value();
  static const int kNewAttrValueFieldNumber = 16;
  inline ::google::protobuf::uint32 new_attr_value(int index) const;
  inline void set_new_attr_value(int index, ::google::protobuf::uint32 value);
  inline void add_new_attr_value(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      new_attr_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_new_attr_value();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPersonEquipStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_intensify();
  inline void clear_has_intensify();
  inline void set_has_gamestats();
  inline void clear_has_gamestats();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_starlv();
  inline void clear_has_starlv();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_is_new();
  inline void clear_has_is_new();
  inline void set_has_is_lock();
  inline void clear_has_is_lock();

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 equipid_;
  ::google::protobuf::uint32 level_;
  ::jynetwork::proto::sGameStats* gamestats_;
  ::google::protobuf::uint32 intensify_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attr_type_;
  ::google::protobuf::uint32 starlv_;
  int oper_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attr_value_;
  ::google::protobuf::uint32 is_new_;
  ::google::protobuf::uint32 is_lock_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > word_type_;
  ::google::protobuf::RepeatedField< float > word_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > new_attr_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > new_attr_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sPersonEquipStats* default_instance_;
};
// -------------------------------------------------------------------

class sPersonSkillStats : public ::google::protobuf::MessageLite {
 public:
  sPersonSkillStats();
  virtual ~sPersonSkillStats();

  sPersonSkillStats(const sPersonSkillStats& from);

  inline sPersonSkillStats& operator=(const sPersonSkillStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPersonSkillStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPersonSkillStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPersonSkillStats* other);

  // implements Message ----------------------------------------------

  sPersonSkillStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPersonSkillStats& from);
  void MergeFrom(const sPersonSkillStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 skillid = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.sGameStats gamestats = 4;
  inline bool has_gamestats() const;
  inline void clear_gamestats();
  static const int kGamestatsFieldNumber = 4;
  inline const ::jynetwork::proto::sGameStats& gamestats() const;
  inline ::jynetwork::proto::sGameStats* mutable_gamestats();
  inline ::jynetwork::proto::sGameStats* release_gamestats();
  inline void set_allocated_gamestats(::jynetwork::proto::sGameStats* gamestats);

  // optional .jynetwork.proto.ePersonalOpertionType oper = 5;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 5;
  inline ::jynetwork::proto::ePersonalOpertionType oper() const;
  inline void set_oper(::jynetwork::proto::ePersonalOpertionType value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPersonSkillStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_gamestats();
  inline void clear_has_gamestats();
  inline void set_has_oper();
  inline void clear_has_oper();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 skillid_;
  ::jynetwork::proto::sGameStats* gamestats_;
  ::google::protobuf::uint32 level_;
  int oper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sPersonSkillStats* default_instance_;
};
// -------------------------------------------------------------------

class sMonsterStats : public ::google::protobuf::MessageLite {
 public:
  sMonsterStats();
  virtual ~sMonsterStats();

  sMonsterStats(const sMonsterStats& from);

  inline sMonsterStats& operator=(const sMonsterStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sMonsterStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sMonsterStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sMonsterStats* other);

  // implements Message ----------------------------------------------

  sMonsterStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sMonsterStats& from);
  void MergeFrom(const sMonsterStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.sCardStats card = 3;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 3;
  inline const ::jynetwork::proto::sCardStats& card() const;
  inline ::jynetwork::proto::sCardStats* mutable_card();
  inline ::jynetwork::proto::sCardStats* release_card();
  inline void set_allocated_card(::jynetwork::proto::sCardStats* card);

  // optional .jynetwork.proto.eCardQuality quality = 4;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 4;
  inline ::jynetwork::proto::eCardQuality quality() const;
  inline void set_quality(::jynetwork::proto::eCardQuality value);

  // optional uint32 intensify = 5;
  inline bool has_intensify() const;
  inline void clear_intensify();
  static const int kIntensifyFieldNumber = 5;
  inline ::google::protobuf::uint32 intensify() const;
  inline void set_intensify(::google::protobuf::uint32 value);

  // optional uint32 skill_lvl1 = 6;
  inline bool has_skill_lvl1() const;
  inline void clear_skill_lvl1();
  static const int kSkillLvl1FieldNumber = 6;
  inline ::google::protobuf::uint32 skill_lvl1() const;
  inline void set_skill_lvl1(::google::protobuf::uint32 value);

  // optional uint32 skill_lvl2 = 7;
  inline bool has_skill_lvl2() const;
  inline void clear_skill_lvl2();
  static const int kSkillLvl2FieldNumber = 7;
  inline ::google::protobuf::uint32 skill_lvl2() const;
  inline void set_skill_lvl2(::google::protobuf::uint32 value);

  // optional uint32 cardid = 10;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardidFieldNumber = 10;
  inline ::google::protobuf::uint32 cardid() const;
  inline void set_cardid(::google::protobuf::uint32 value);

  // optional uint32 exp = 11;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 11;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // repeated uint32 skillid = 12;
  inline int skillid_size() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 12;
  inline ::google::protobuf::uint32 skillid(int index) const;
  inline void set_skillid(int index, ::google::protobuf::uint32 value);
  inline void add_skillid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skillid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skillid();

  // optional .jynetwork.proto.ePersonalOpertionType oper = 13;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 13;
  inline ::jynetwork::proto::ePersonalOpertionType oper() const;
  inline void set_oper(::jynetwork::proto::ePersonalOpertionType value);

  // optional .jynetwork.proto.sGameStats gamestats = 14;
  inline bool has_gamestats() const;
  inline void clear_gamestats();
  static const int kGamestatsFieldNumber = 14;
  inline const ::jynetwork::proto::sGameStats& gamestats() const;
  inline ::jynetwork::proto::sGameStats* mutable_gamestats();
  inline ::jynetwork::proto::sGameStats* release_gamestats();
  inline void set_allocated_gamestats(::jynetwork::proto::sGameStats* gamestats);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sMonsterStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_intensify();
  inline void clear_has_intensify();
  inline void set_has_skill_lvl1();
  inline void clear_has_skill_lvl1();
  inline void set_has_skill_lvl2();
  inline void clear_has_skill_lvl2();
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_gamestats();
  inline void clear_has_gamestats();

  ::google::protobuf::uint64 uid_;
  ::jynetwork::proto::sCardStats* card_;
  ::google::protobuf::uint32 level_;
  int quality_;
  ::google::protobuf::uint32 intensify_;
  ::google::protobuf::uint32 skill_lvl1_;
  ::google::protobuf::uint32 skill_lvl2_;
  ::google::protobuf::uint32 cardid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skillid_;
  ::google::protobuf::uint32 exp_;
  int oper_;
  ::jynetwork::proto::sGameStats* gamestats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sMonsterStats* default_instance_;
};
// -------------------------------------------------------------------

class sPersonTaskStats : public ::google::protobuf::MessageLite {
 public:
  sPersonTaskStats();
  virtual ~sPersonTaskStats();

  sPersonTaskStats(const sPersonTaskStats& from);

  inline sPersonTaskStats& operator=(const sPersonTaskStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPersonTaskStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPersonTaskStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPersonTaskStats* other);

  // implements Message ----------------------------------------------

  sPersonTaskStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPersonTaskStats& from);
  void MergeFrom(const sPersonTaskStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 var = 2;
  inline bool has_var() const;
  inline void clear_var();
  static const int kVarFieldNumber = 2;
  inline ::google::protobuf::uint32 var() const;
  inline void set_var(::google::protobuf::uint32 value);

  // optional uint32 can_finish = 3;
  inline bool has_can_finish() const;
  inline void clear_can_finish();
  static const int kCanFinishFieldNumber = 3;
  inline ::google::protobuf::uint32 can_finish() const;
  inline void set_can_finish(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.ePersonalOpertionType oper = 4;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 4;
  inline ::jynetwork::proto::ePersonalOpertionType oper() const;
  inline void set_oper(::jynetwork::proto::ePersonalOpertionType value);

  // optional bytes name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 score = 6;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 6;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPersonTaskStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_var();
  inline void clear_has_var();
  inline void set_has_can_finish();
  inline void clear_has_can_finish();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 var_;
  ::google::protobuf::uint32 can_finish_;
  ::std::string* name_;
  int oper_;
  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sPersonTaskStats* default_instance_;
};
// -------------------------------------------------------------------

class sCastleEndlessRelation : public ::google::protobuf::MessageLite {
 public:
  sCastleEndlessRelation();
  virtual ~sCastleEndlessRelation();

  sCastleEndlessRelation(const sCastleEndlessRelation& from);

  inline sCastleEndlessRelation& operator=(const sCastleEndlessRelation& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCastleEndlessRelation& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCastleEndlessRelation* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCastleEndlessRelation* other);

  // implements Message ----------------------------------------------

  sCastleEndlessRelation* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCastleEndlessRelation& from);
  void MergeFrom(const sCastleEndlessRelation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mapid = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional uint32 base_groupid = 3;
  inline bool has_base_groupid() const;
  inline void clear_base_groupid();
  static const int kBaseGroupidFieldNumber = 3;
  inline ::google::protobuf::uint32 base_groupid() const;
  inline void set_base_groupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCastleEndlessRelation)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_base_groupid();
  inline void clear_has_base_groupid();

  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 base_groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sCastleEndlessRelation* default_instance_;
};
// -------------------------------------------------------------------

class sCastleInfo : public ::google::protobuf::MessageLite {
 public:
  sCastleInfo();
  virtual ~sCastleInfo();

  sCastleInfo(const sCastleInfo& from);

  inline sCastleInfo& operator=(const sCastleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCastleInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCastleInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCastleInfo* other);

  // implements Message ----------------------------------------------

  sCastleInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCastleInfo& from);
  void MergeFrom(const sCastleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 difficulty = 2;
  inline bool has_difficulty() const;
  inline void clear_difficulty();
  static const int kDifficultyFieldNumber = 2;
  inline ::google::protobuf::uint32 difficulty() const;
  inline void set_difficulty(::google::protobuf::uint32 value);

  // optional uint32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 faction = 5;
  inline bool has_faction() const;
  inline void clear_faction();
  static const int kFactionFieldNumber = 5;
  inline ::google::protobuf::uint32 faction() const;
  inline void set_faction(::google::protobuf::uint32 value);

  // optional uint32 difficult_change = 6;
  inline bool has_difficult_change() const;
  inline void clear_difficult_change();
  static const int kDifficultChangeFieldNumber = 6;
  inline ::google::protobuf::uint32 difficult_change() const;
  inline void set_difficult_change(::google::protobuf::uint32 value);

  // optional uint32 attack_times = 7;
  inline bool has_attack_times() const;
  inline void clear_attack_times();
  static const int kAttackTimesFieldNumber = 7;
  inline ::google::protobuf::uint32 attack_times() const;
  inline void set_attack_times(::google::protobuf::uint32 value);

  // optional uint32 castle_catlog = 8;
  inline bool has_castle_catlog() const;
  inline void clear_castle_catlog();
  static const int kCastleCatlogFieldNumber = 8;
  inline ::google::protobuf::uint32 castle_catlog() const;
  inline void set_castle_catlog(::google::protobuf::uint32 value);

  // optional uint32 reset_times = 9;
  inline bool has_reset_times() const;
  inline void clear_reset_times();
  static const int kResetTimesFieldNumber = 9;
  inline ::google::protobuf::uint32 reset_times() const;
  inline void set_reset_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCastleInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_difficulty();
  inline void clear_has_difficulty();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_faction();
  inline void clear_has_faction();
  inline void set_has_difficult_change();
  inline void clear_has_difficult_change();
  inline void set_has_attack_times();
  inline void clear_has_attack_times();
  inline void set_has_castle_catlog();
  inline void clear_has_castle_catlog();
  inline void set_has_reset_times();
  inline void clear_has_reset_times();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 difficulty_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 faction_;
  ::google::protobuf::uint32 difficult_change_;
  ::google::protobuf::uint32 attack_times_;
  ::google::protobuf::uint32 castle_catlog_;
  ::google::protobuf::uint32 reset_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sCastleInfo* default_instance_;
};
// -------------------------------------------------------------------

class sCastleComplete : public ::google::protobuf::MessageLite {
 public:
  sCastleComplete();
  virtual ~sCastleComplete();

  sCastleComplete(const sCastleComplete& from);

  inline sCastleComplete& operator=(const sCastleComplete& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCastleComplete& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCastleComplete* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCastleComplete* other);

  // implements Message ----------------------------------------------

  sCastleComplete* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCastleComplete& from);
  void MergeFrom(const sCastleComplete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 last_uid = 1;
  inline bool has_last_uid() const;
  inline void clear_last_uid();
  static const int kLastUidFieldNumber = 1;
  inline ::google::protobuf::uint32 last_uid() const;
  inline void set_last_uid(::google::protobuf::uint32 value);

  // optional uint32 last_difficult = 2;
  inline bool has_last_difficult() const;
  inline void clear_last_difficult();
  static const int kLastDifficultFieldNumber = 2;
  inline ::google::protobuf::uint32 last_difficult() const;
  inline void set_last_difficult(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sCastleInfo ci = 3;
  inline int ci_size() const;
  inline void clear_ci();
  static const int kCiFieldNumber = 3;
  inline const ::jynetwork::proto::sCastleInfo& ci(int index) const;
  inline ::jynetwork::proto::sCastleInfo* mutable_ci(int index);
  inline ::jynetwork::proto::sCastleInfo* add_ci();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo >&
      ci() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo >*
      mutable_ci();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCastleComplete)
 private:
  inline void set_has_last_uid();
  inline void clear_has_last_uid();
  inline void set_has_last_difficult();
  inline void clear_has_last_difficult();

  ::google::protobuf::uint32 last_uid_;
  ::google::protobuf::uint32 last_difficult_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo > ci_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sCastleComplete* default_instance_;
};
// -------------------------------------------------------------------

class sCastleDrop : public ::google::protobuf::MessageLite {
 public:
  sCastleDrop();
  virtual ~sCastleDrop();

  sCastleDrop(const sCastleDrop& from);

  inline sCastleDrop& operator=(const sCastleDrop& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCastleDrop& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCastleDrop* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCastleDrop* other);

  // implements Message ----------------------------------------------

  sCastleDrop* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCastleDrop& from);
  void MergeFrom(const sCastleDrop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 drop_type = 1;
  inline bool has_drop_type() const;
  inline void clear_drop_type();
  static const int kDropTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 drop_type() const;
  inline void set_drop_type(::google::protobuf::uint32 value);

  // optional uint32 drop_id = 2;
  inline bool has_drop_id() const;
  inline void clear_drop_id();
  static const int kDropIdFieldNumber = 2;
  inline ::google::protobuf::uint32 drop_id() const;
  inline void set_drop_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCastleDrop)
 private:
  inline void set_has_drop_type();
  inline void clear_has_drop_type();
  inline void set_has_drop_id();
  inline void clear_has_drop_id();

  ::google::protobuf::uint32 drop_type_;
  ::google::protobuf::uint32 drop_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sCastleDrop* default_instance_;
};
// -------------------------------------------------------------------

class sMonsterRefreshGroup : public ::google::protobuf::MessageLite {
 public:
  sMonsterRefreshGroup();
  virtual ~sMonsterRefreshGroup();

  sMonsterRefreshGroup(const sMonsterRefreshGroup& from);

  inline sMonsterRefreshGroup& operator=(const sMonsterRefreshGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const sMonsterRefreshGroup& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sMonsterRefreshGroup* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sMonsterRefreshGroup* other);

  // implements Message ----------------------------------------------

  sMonsterRefreshGroup* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sMonsterRefreshGroup& from);
  void MergeFrom(const sMonsterRefreshGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jynetwork.proto.sMonsterRefresh monsters = 1;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 1;
  inline const ::jynetwork::proto::sMonsterRefresh& monsters(int index) const;
  inline ::jynetwork::proto::sMonsterRefresh* mutable_monsters(int index);
  inline ::jynetwork::proto::sMonsterRefresh* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefresh >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefresh >*
      mutable_monsters();

  // optional float durtime = 4;
  inline bool has_durtime() const;
  inline void clear_durtime();
  static const int kDurtimeFieldNumber = 4;
  inline float durtime() const;
  inline void set_durtime(float value);

  // optional uint32 show_warning = 2;
  inline bool has_show_warning() const;
  inline void clear_show_warning();
  static const int kShowWarningFieldNumber = 2;
  inline ::google::protobuf::uint32 show_warning() const;
  inline void set_show_warning(::google::protobuf::uint32 value);

  // optional uint32 groupId = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional uint32 die_mask = 5;
  inline bool has_die_mask() const;
  inline void clear_die_mask();
  static const int kDieMaskFieldNumber = 5;
  inline ::google::protobuf::uint32 die_mask() const;
  inline void set_die_mask(::google::protobuf::uint32 value);

  // optional uint32 wave_index = 6;
  inline bool has_wave_index() const;
  inline void clear_wave_index();
  static const int kWaveIndexFieldNumber = 6;
  inline ::google::protobuf::uint32 wave_index() const;
  inline void set_wave_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sMonsterRefreshGroup)
 private:
  inline void set_has_durtime();
  inline void clear_has_durtime();
  inline void set_has_show_warning();
  inline void clear_has_show_warning();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_die_mask();
  inline void clear_has_die_mask();
  inline void set_has_wave_index();
  inline void clear_has_wave_index();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefresh > monsters_;
  float durtime_;
  ::google::protobuf::uint32 show_warning_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 die_mask_;
  ::google::protobuf::uint32 wave_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sMonsterRefreshGroup* default_instance_;
};
// -------------------------------------------------------------------

class sMonsterRefresh : public ::google::protobuf::MessageLite {
 public:
  sMonsterRefresh();
  virtual ~sMonsterRefresh();

  sMonsterRefresh(const sMonsterRefresh& from);

  inline sMonsterRefresh& operator=(const sMonsterRefresh& from) {
    CopyFrom(from);
    return *this;
  }

  static const sMonsterRefresh& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sMonsterRefresh* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sMonsterRefresh* other);

  // implements Message ----------------------------------------------

  sMonsterRefresh* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sMonsterRefresh& from);
  void MergeFrom(const sMonsterRefresh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 monsterid = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsteridFieldNumber = 1;
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // optional uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eActorLvlType atype = 3;
  inline bool has_atype() const;
  inline void clear_atype();
  static const int kAtypeFieldNumber = 3;
  inline ::jynetwork::proto::eActorLvlType atype() const;
  inline void set_atype(::jynetwork::proto::eActorLvlType value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional float modifyhp = 5;
  inline bool has_modifyhp() const;
  inline void clear_modifyhp();
  static const int kModifyhpFieldNumber = 5;
  inline float modifyhp() const;
  inline void set_modifyhp(float value);

  // optional float modifyatk = 6;
  inline bool has_modifyatk() const;
  inline void clear_modifyatk();
  static const int kModifyatkFieldNumber = 6;
  inline float modifyatk() const;
  inline void set_modifyatk(float value);

  // optional int32 stx = 7;
  inline bool has_stx() const;
  inline void clear_stx();
  static const int kStxFieldNumber = 7;
  inline ::google::protobuf::int32 stx() const;
  inline void set_stx(::google::protobuf::int32 value);

  // optional int32 sty = 8;
  inline bool has_sty() const;
  inline void clear_sty();
  static const int kStyFieldNumber = 8;
  inline ::google::protobuf::int32 sty() const;
  inline void set_sty(::google::protobuf::int32 value);

  // optional int32 startx1 = 9;
  inline bool has_startx1() const;
  inline void clear_startx1();
  static const int kStartx1FieldNumber = 9;
  inline ::google::protobuf::int32 startx1() const;
  inline void set_startx1(::google::protobuf::int32 value);

  // optional int32 starty1 = 10;
  inline bool has_starty1() const;
  inline void clear_starty1();
  static const int kStarty1FieldNumber = 10;
  inline ::google::protobuf::int32 starty1() const;
  inline void set_starty1(::google::protobuf::int32 value);

  // optional int32 endx2 = 11;
  inline bool has_endx2() const;
  inline void clear_endx2();
  static const int kEndx2FieldNumber = 11;
  inline ::google::protobuf::int32 endx2() const;
  inline void set_endx2(::google::protobuf::int32 value);

  // optional int32 endy2 = 12;
  inline bool has_endy2() const;
  inline void clear_endy2();
  static const int kEndy2FieldNumber = 12;
  inline ::google::protobuf::int32 endy2() const;
  inline void set_endy2(::google::protobuf::int32 value);

  // optional int32 outx = 13;
  inline bool has_outx() const;
  inline void clear_outx();
  static const int kOutxFieldNumber = 13;
  inline ::google::protobuf::int32 outx() const;
  inline void set_outx(::google::protobuf::int32 value);

  // optional int32 outy = 14;
  inline bool has_outy() const;
  inline void clear_outy();
  static const int kOutyFieldNumber = 14;
  inline ::google::protobuf::int32 outy() const;
  inline void set_outy(::google::protobuf::int32 value);

  // optional .jynetwork.proto.eMovementType mov_type = 15;
  inline bool has_mov_type() const;
  inline void clear_mov_type();
  static const int kMovTypeFieldNumber = 15;
  inline ::jynetwork::proto::eMovementType mov_type() const;
  inline void set_mov_type(::jynetwork::proto::eMovementType value);

  // optional float spawn_time = 16;
  inline bool has_spawn_time() const;
  inline void clear_spawn_time();
  static const int kSpawnTimeFieldNumber = 16;
  inline float spawn_time() const;
  inline void set_spawn_time(float value);

  // optional uint32 dropsid = 17;
  inline bool has_dropsid() const;
  inline void clear_dropsid();
  static const int kDropsidFieldNumber = 17;
  inline ::google::protobuf::uint32 dropsid() const;
  inline void set_dropsid(::google::protobuf::uint32 value);

  // optional uint32 score = 18;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 18;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional float delaytime = 19;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelaytimeFieldNumber = 19;
  inline float delaytime() const;
  inline void set_delaytime(float value);

  // optional uint32 wave_end_action = 20;
  inline bool has_wave_end_action() const;
  inline void clear_wave_end_action();
  static const int kWaveEndActionFieldNumber = 20;
  inline ::google::protobuf::uint32 wave_end_action() const;
  inline void set_wave_end_action(::google::protobuf::uint32 value);

  // optional uint32 body_effect = 21;
  inline bool has_body_effect() const;
  inline void clear_body_effect();
  static const int kBodyEffectFieldNumber = 21;
  inline ::google::protobuf::uint32 body_effect() const;
  inline void set_body_effect(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eMonsterAttackMode attack_type = 22;
  inline bool has_attack_type() const;
  inline void clear_attack_type();
  static const int kAttackTypeFieldNumber = 22;
  inline ::jynetwork::proto::eMonsterAttackMode attack_type() const;
  inline void set_attack_type(::jynetwork::proto::eMonsterAttackMode value);

  // optional int32 drop_gold = 23;
  inline bool has_drop_gold() const;
  inline void clear_drop_gold();
  static const int kDropGoldFieldNumber = 23;
  inline ::google::protobuf::int32 drop_gold() const;
  inline void set_drop_gold(::google::protobuf::int32 value);

  // optional int32 drop_box_amount = 24;
  inline bool has_drop_box_amount() const;
  inline void clear_drop_box_amount();
  static const int kDropBoxAmountFieldNumber = 24;
  inline ::google::protobuf::int32 drop_box_amount() const;
  inline void set_drop_box_amount(::google::protobuf::int32 value);

  // optional int32 drop_box = 25;
  inline bool has_drop_box() const;
  inline void clear_drop_box();
  static const int kDropBoxFieldNumber = 25;
  inline ::google::protobuf::int32 drop_box() const;
  inline void set_drop_box(::google::protobuf::int32 value);

  // optional int32 drop_gold_size = 26;
  inline bool has_drop_gold_size() const;
  inline void clear_drop_gold_size();
  static const int kDropGoldSizeFieldNumber = 26;
  inline ::google::protobuf::int32 drop_gold_size() const;
  inline void set_drop_gold_size(::google::protobuf::int32 value);

  // optional int32 startx2 = 27;
  inline bool has_startx2() const;
  inline void clear_startx2();
  static const int kStartx2FieldNumber = 27;
  inline ::google::protobuf::int32 startx2() const;
  inline void set_startx2(::google::protobuf::int32 value);

  // optional int32 starty2 = 28;
  inline bool has_starty2() const;
  inline void clear_starty2();
  static const int kStarty2FieldNumber = 28;
  inline ::google::protobuf::int32 starty2() const;
  inline void set_starty2(::google::protobuf::int32 value);

  // optional int32 endx1 = 29;
  inline bool has_endx1() const;
  inline void clear_endx1();
  static const int kEndx1FieldNumber = 29;
  inline ::google::protobuf::int32 endx1() const;
  inline void set_endx1(::google::protobuf::int32 value);

  // optional int32 endy1 = 30;
  inline bool has_endy1() const;
  inline void clear_endy1();
  static const int kEndy1FieldNumber = 30;
  inline ::google::protobuf::int32 endy1() const;
  inline void set_endy1(::google::protobuf::int32 value);

  // repeated uint32 move_steps = 31;
  inline int move_steps_size() const;
  inline void clear_move_steps();
  static const int kMoveStepsFieldNumber = 31;
  inline ::google::protobuf::uint32 move_steps(int index) const;
  inline void set_move_steps(int index, ::google::protobuf::uint32 value);
  inline void add_move_steps(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      move_steps() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_move_steps();

  // optional float step_gap_time = 32;
  inline bool has_step_gap_time() const;
  inline void clear_step_gap_time();
  static const int kStepGapTimeFieldNumber = 32;
  inline float step_gap_time() const;
  inline void set_step_gap_time(float value);

  // optional uint32 spawn_type = 33;
  inline bool has_spawn_type() const;
  inline void clear_spawn_type();
  static const int kSpawnTypeFieldNumber = 33;
  inline ::google::protobuf::uint32 spawn_type() const;
  inline void set_spawn_type(::google::protobuf::uint32 value);

  // optional uint32 spawn_group_id = 34;
  inline bool has_spawn_group_id() const;
  inline void clear_spawn_group_id();
  static const int kSpawnGroupIdFieldNumber = 34;
  inline ::google::protobuf::uint32 spawn_group_id() const;
  inline void set_spawn_group_id(::google::protobuf::uint32 value);

  // optional uint32 condition_spawn = 35;
  inline bool has_condition_spawn() const;
  inline void clear_condition_spawn();
  static const int kConditionSpawnFieldNumber = 35;
  inline ::google::protobuf::uint32 condition_spawn() const;
  inline void set_condition_spawn(::google::protobuf::uint32 value);

  // optional uint32 condition_param = 36;
  inline bool has_condition_param() const;
  inline void clear_condition_param();
  static const int kConditionParamFieldNumber = 36;
  inline ::google::protobuf::uint32 condition_param() const;
  inline void set_condition_param(::google::protobuf::uint32 value);

  // optional uint32 condition_time = 37;
  inline bool has_condition_time() const;
  inline void clear_condition_time();
  static const int kConditionTimeFieldNumber = 37;
  inline ::google::protobuf::uint32 condition_time() const;
  inline void set_condition_time(::google::protobuf::uint32 value);

  // optional uint32 resurgence = 38;
  inline bool has_resurgence() const;
  inline void clear_resurgence();
  static const int kResurgenceFieldNumber = 38;
  inline ::google::protobuf::uint32 resurgence() const;
  inline void set_resurgence(::google::protobuf::uint32 value);

  // optional uint32 resurgence_id = 39;
  inline bool has_resurgence_id() const;
  inline void clear_resurgence_id();
  static const int kResurgenceIdFieldNumber = 39;
  inline ::google::protobuf::uint32 resurgence_id() const;
  inline void set_resurgence_id(::google::protobuf::uint32 value);

  // optional uint32 p_showCondition = 40;
  inline bool has_p_showcondition() const;
  inline void clear_p_showcondition();
  static const int kPShowConditionFieldNumber = 40;
  inline ::google::protobuf::uint32 p_showcondition() const;
  inline void set_p_showcondition(::google::protobuf::uint32 value);

  // optional uint32 groupId = 41;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 41;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional uint32 conditionId = 42;
  inline bool has_conditionid() const;
  inline void clear_conditionid();
  static const int kConditionIdFieldNumber = 42;
  inline ::google::protobuf::uint32 conditionid() const;
  inline void set_conditionid(::google::protobuf::uint32 value);

  // optional uint32 p_delayTime = 43;
  inline bool has_p_delaytime() const;
  inline void clear_p_delaytime();
  static const int kPDelayTimeFieldNumber = 43;
  inline ::google::protobuf::uint32 p_delaytime() const;
  inline void set_p_delaytime(::google::protobuf::uint32 value);

  // optional float turnin_invincible_time = 44;
  inline bool has_turnin_invincible_time() const;
  inline void clear_turnin_invincible_time();
  static const int kTurninInvincibleTimeFieldNumber = 44;
  inline float turnin_invincible_time() const;
  inline void set_turnin_invincible_time(float value);

  // optional float durtime = 45;
  inline bool has_durtime() const;
  inline void clear_durtime();
  static const int kDurtimeFieldNumber = 45;
  inline float durtime() const;
  inline void set_durtime(float value);

  // optional int32 keyMonster = 46;
  inline bool has_keymonster() const;
  inline void clear_keymonster();
  static const int kKeyMonsterFieldNumber = 46;
  inline ::google::protobuf::int32 keymonster() const;
  inline void set_keymonster(::google::protobuf::int32 value);

  // optional uint32 boss_key = 47;
  inline bool has_boss_key() const;
  inline void clear_boss_key();
  static const int kBossKeyFieldNumber = 47;
  inline ::google::protobuf::uint32 boss_key() const;
  inline void set_boss_key(::google::protobuf::uint32 value);

  // optional uint32 uid = 48;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 48;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 die_mask = 49;
  inline bool has_die_mask() const;
  inline void clear_die_mask();
  static const int kDieMaskFieldNumber = 49;
  inline ::google::protobuf::uint32 die_mask() const;
  inline void set_die_mask(::google::protobuf::uint32 value);

  // optional uint32 need_synchronize = 50;
  inline bool has_need_synchronize() const;
  inline void clear_need_synchronize();
  static const int kNeedSynchronizeFieldNumber = 50;
  inline ::google::protobuf::uint32 need_synchronize() const;
  inline void set_need_synchronize(::google::protobuf::uint32 value);

  // optional string monster_name = 51;
  inline bool has_monster_name() const;
  inline void clear_monster_name();
  static const int kMonsterNameFieldNumber = 51;
  inline const ::std::string& monster_name() const;
  inline void set_monster_name(const ::std::string& value);
  inline void set_monster_name(const char* value);
  inline void set_monster_name(const char* value, size_t size);
  inline ::std::string* mutable_monster_name();
  inline ::std::string* release_monster_name();
  inline void set_allocated_monster_name(::std::string* monster_name);

  // optional string monster_head = 52;
  inline bool has_monster_head() const;
  inline void clear_monster_head();
  static const int kMonsterHeadFieldNumber = 52;
  inline const ::std::string& monster_head() const;
  inline void set_monster_head(const ::std::string& value);
  inline void set_monster_head(const char* value);
  inline void set_monster_head(const char* value, size_t size);
  inline ::std::string* mutable_monster_head();
  inline ::std::string* release_monster_head();
  inline void set_allocated_monster_head(::std::string* monster_head);

  // optional string monster_vectory = 53;
  inline bool has_monster_vectory() const;
  inline void clear_monster_vectory();
  static const int kMonsterVectoryFieldNumber = 53;
  inline const ::std::string& monster_vectory() const;
  inline void set_monster_vectory(const ::std::string& value);
  inline void set_monster_vectory(const char* value);
  inline void set_monster_vectory(const char* value, size_t size);
  inline ::std::string* mutable_monster_vectory();
  inline ::std::string* release_monster_vectory();
  inline void set_allocated_monster_vectory(::std::string* monster_vectory);

  // optional uint32 drop_gold_amount = 54;
  inline bool has_drop_gold_amount() const;
  inline void clear_drop_gold_amount();
  static const int kDropGoldAmountFieldNumber = 54;
  inline ::google::protobuf::uint32 drop_gold_amount() const;
  inline void set_drop_gold_amount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sMonsterRefresh)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_atype();
  inline void clear_has_atype();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_modifyhp();
  inline void clear_has_modifyhp();
  inline void set_has_modifyatk();
  inline void clear_has_modifyatk();
  inline void set_has_stx();
  inline void clear_has_stx();
  inline void set_has_sty();
  inline void clear_has_sty();
  inline void set_has_startx1();
  inline void clear_has_startx1();
  inline void set_has_starty1();
  inline void clear_has_starty1();
  inline void set_has_endx2();
  inline void clear_has_endx2();
  inline void set_has_endy2();
  inline void clear_has_endy2();
  inline void set_has_outx();
  inline void clear_has_outx();
  inline void set_has_outy();
  inline void clear_has_outy();
  inline void set_has_mov_type();
  inline void clear_has_mov_type();
  inline void set_has_spawn_time();
  inline void clear_has_spawn_time();
  inline void set_has_dropsid();
  inline void clear_has_dropsid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_wave_end_action();
  inline void clear_has_wave_end_action();
  inline void set_has_body_effect();
  inline void clear_has_body_effect();
  inline void set_has_attack_type();
  inline void clear_has_attack_type();
  inline void set_has_drop_gold();
  inline void clear_has_drop_gold();
  inline void set_has_drop_box_amount();
  inline void clear_has_drop_box_amount();
  inline void set_has_drop_box();
  inline void clear_has_drop_box();
  inline void set_has_drop_gold_size();
  inline void clear_has_drop_gold_size();
  inline void set_has_startx2();
  inline void clear_has_startx2();
  inline void set_has_starty2();
  inline void clear_has_starty2();
  inline void set_has_endx1();
  inline void clear_has_endx1();
  inline void set_has_endy1();
  inline void clear_has_endy1();
  inline void set_has_step_gap_time();
  inline void clear_has_step_gap_time();
  inline void set_has_spawn_type();
  inline void clear_has_spawn_type();
  inline void set_has_spawn_group_id();
  inline void clear_has_spawn_group_id();
  inline void set_has_condition_spawn();
  inline void clear_has_condition_spawn();
  inline void set_has_condition_param();
  inline void clear_has_condition_param();
  inline void set_has_condition_time();
  inline void clear_has_condition_time();
  inline void set_has_resurgence();
  inline void clear_has_resurgence();
  inline void set_has_resurgence_id();
  inline void clear_has_resurgence_id();
  inline void set_has_p_showcondition();
  inline void clear_has_p_showcondition();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_conditionid();
  inline void clear_has_conditionid();
  inline void set_has_p_delaytime();
  inline void clear_has_p_delaytime();
  inline void set_has_turnin_invincible_time();
  inline void clear_has_turnin_invincible_time();
  inline void set_has_durtime();
  inline void clear_has_durtime();
  inline void set_has_keymonster();
  inline void clear_has_keymonster();
  inline void set_has_boss_key();
  inline void clear_has_boss_key();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_die_mask();
  inline void clear_has_die_mask();
  inline void set_has_need_synchronize();
  inline void clear_has_need_synchronize();
  inline void set_has_monster_name();
  inline void clear_has_monster_name();
  inline void set_has_monster_head();
  inline void clear_has_monster_head();
  inline void set_has_monster_vectory();
  inline void clear_has_monster_vectory();
  inline void set_has_drop_gold_amount();
  inline void clear_has_drop_gold_amount();

  ::google::protobuf::uint32 monsterid_;
  ::google::protobuf::uint32 playerid_;
  int atype_;
  ::google::protobuf::uint32 level_;
  float modifyhp_;
  float modifyatk_;
  ::google::protobuf::int32 stx_;
  ::google::protobuf::int32 sty_;
  ::google::protobuf::int32 startx1_;
  ::google::protobuf::int32 starty1_;
  ::google::protobuf::int32 endx2_;
  ::google::protobuf::int32 endy2_;
  ::google::protobuf::int32 outx_;
  ::google::protobuf::int32 outy_;
  int mov_type_;
  float spawn_time_;
  ::google::protobuf::uint32 dropsid_;
  ::google::protobuf::uint32 score_;
  float delaytime_;
  ::google::protobuf::uint32 wave_end_action_;
  ::google::protobuf::uint32 body_effect_;
  int attack_type_;
  ::google::protobuf::int32 drop_gold_;
  ::google::protobuf::int32 drop_box_amount_;
  ::google::protobuf::int32 drop_box_;
  ::google::protobuf::int32 drop_gold_size_;
  ::google::protobuf::int32 startx2_;
  ::google::protobuf::int32 starty2_;
  ::google::protobuf::int32 endx1_;
  ::google::protobuf::int32 endy1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > move_steps_;
  float step_gap_time_;
  ::google::protobuf::uint32 spawn_type_;
  ::google::protobuf::uint32 spawn_group_id_;
  ::google::protobuf::uint32 condition_spawn_;
  ::google::protobuf::uint32 condition_param_;
  ::google::protobuf::uint32 condition_time_;
  ::google::protobuf::uint32 resurgence_;
  ::google::protobuf::uint32 resurgence_id_;
  ::google::protobuf::uint32 p_showcondition_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 conditionid_;
  ::google::protobuf::uint32 p_delaytime_;
  float turnin_invincible_time_;
  float durtime_;
  ::google::protobuf::int32 keymonster_;
  ::google::protobuf::uint32 boss_key_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 die_mask_;
  ::std::string* monster_name_;
  ::google::protobuf::uint32 need_synchronize_;
  ::google::protobuf::uint32 drop_gold_amount_;
  ::std::string* monster_head_;
  ::std::string* monster_vectory_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(54 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sMonsterRefresh* default_instance_;
};
// -------------------------------------------------------------------

class sCastleBlock : public ::google::protobuf::MessageLite {
 public:
  sCastleBlock();
  virtual ~sCastleBlock();

  sCastleBlock(const sCastleBlock& from);

  inline sCastleBlock& operator=(const sCastleBlock& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCastleBlock& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCastleBlock* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCastleBlock* other);

  // implements Message ----------------------------------------------

  sCastleBlock* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCastleBlock& from);
  void MergeFrom(const sCastleBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string block_name = 1;
  inline bool has_block_name() const;
  inline void clear_block_name();
  static const int kBlockNameFieldNumber = 1;
  inline const ::std::string& block_name() const;
  inline void set_block_name(const ::std::string& value);
  inline void set_block_name(const char* value);
  inline void set_block_name(const char* value, size_t size);
  inline ::std::string* mutable_block_name();
  inline ::std::string* release_block_name();
  inline void set_allocated_block_name(::std::string* block_name);

  // optional float scroll_scale = 2;
  inline bool has_scroll_scale() const;
  inline void clear_scroll_scale();
  static const int kScrollScaleFieldNumber = 2;
  inline float scroll_scale() const;
  inline void set_scroll_scale(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCastleBlock)
 private:
  inline void set_has_block_name();
  inline void clear_has_block_name();
  inline void set_has_scroll_scale();
  inline void clear_has_scroll_scale();

  ::std::string* block_name_;
  float scroll_scale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sCastleBlock* default_instance_;
};
// -------------------------------------------------------------------

class sCastleStats : public ::google::protobuf::MessageLite {
 public:
  sCastleStats();
  virtual ~sCastleStats();

  sCastleStats(const sCastleStats& from);

  inline sCastleStats& operator=(const sCastleStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCastleStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCastleStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCastleStats* other);

  // implements Message ----------------------------------------------

  sCastleStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCastleStats& from);
  void MergeFrom(const sCastleStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 castlename = 2;
  inline bool has_castlename() const;
  inline void clear_castlename();
  static const int kCastlenameFieldNumber = 2;
  inline ::google::protobuf::uint32 castlename() const;
  inline void set_castlename(::google::protobuf::uint32 value);

  // optional string castlemap = 3;
  inline bool has_castlemap() const;
  inline void clear_castlemap();
  static const int kCastlemapFieldNumber = 3;
  inline const ::std::string& castlemap() const;
  inline void set_castlemap(const ::std::string& value);
  inline void set_castlemap(const char* value);
  inline void set_castlemap(const char* value, size_t size);
  inline ::std::string* mutable_castlemap();
  inline ::std::string* release_castlemap();
  inline void set_allocated_castlemap(::std::string* castlemap);

  // optional string castlebossmap = 4;
  inline bool has_castlebossmap() const;
  inline void clear_castlebossmap();
  static const int kCastlebossmapFieldNumber = 4;
  inline const ::std::string& castlebossmap() const;
  inline void set_castlebossmap(const ::std::string& value);
  inline void set_castlebossmap(const char* value);
  inline void set_castlebossmap(const char* value, size_t size);
  inline ::std::string* mutable_castlebossmap();
  inline ::std::string* release_castlebossmap();
  inline void set_allocated_castlebossmap(::std::string* castlebossmap);

  // optional uint32 numlimit = 5;
  inline bool has_numlimit() const;
  inline void clear_numlimit();
  static const int kNumlimitFieldNumber = 5;
  inline ::google::protobuf::uint32 numlimit() const;
  inline void set_numlimit(::google::protobuf::uint32 value);

  // optional uint32 levellimit = 6;
  inline bool has_levellimit() const;
  inline void clear_levellimit();
  static const int kLevellimitFieldNumber = 6;
  inline ::google::protobuf::uint32 levellimit() const;
  inline void set_levellimit(::google::protobuf::uint32 value);

  // optional uint32 ranklimit = 7;
  inline bool has_ranklimit() const;
  inline void clear_ranklimit();
  static const int kRanklimitFieldNumber = 7;
  inline ::google::protobuf::uint32 ranklimit() const;
  inline void set_ranklimit(::google::protobuf::uint32 value);

  // repeated uint32 weekdaylimit = 8;
  inline int weekdaylimit_size() const;
  inline void clear_weekdaylimit();
  static const int kWeekdaylimitFieldNumber = 8;
  inline ::google::protobuf::uint32 weekdaylimit(int index) const;
  inline void set_weekdaylimit(int index, ::google::protobuf::uint32 value);
  inline void add_weekdaylimit(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      weekdaylimit() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_weekdaylimit();

  // optional fixed32 day_begintime = 9;
  inline bool has_day_begintime() const;
  inline void clear_day_begintime();
  static const int kDayBegintimeFieldNumber = 9;
  inline ::google::protobuf::uint32 day_begintime() const;
  inline void set_day_begintime(::google::protobuf::uint32 value);

  // optional fixed32 day_endtime = 10;
  inline bool has_day_endtime() const;
  inline void clear_day_endtime();
  static const int kDayEndtimeFieldNumber = 10;
  inline ::google::protobuf::uint32 day_endtime() const;
  inline void set_day_endtime(::google::protobuf::uint32 value);

  // optional uint32 frontcastle = 11;
  inline bool has_frontcastle() const;
  inline void clear_frontcastle();
  static const int kFrontcastleFieldNumber = 11;
  inline ::google::protobuf::uint32 frontcastle() const;
  inline void set_frontcastle(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sMonsterRefreshGroup groups = 12;
  inline int groups_size() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 12;
  inline const ::jynetwork::proto::sMonsterRefreshGroup& groups(int index) const;
  inline ::jynetwork::proto::sMonsterRefreshGroup* mutable_groups(int index);
  inline ::jynetwork::proto::sMonsterRefreshGroup* add_groups();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefreshGroup >&
      groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefreshGroup >*
      mutable_groups();

  // optional float bossmap_scroll = 13;
  inline bool has_bossmap_scroll() const;
  inline void clear_bossmap_scroll();
  static const int kBossmapScrollFieldNumber = 13;
  inline float bossmap_scroll() const;
  inline void set_bossmap_scroll(float value);

  // optional uint32 wateref = 14;
  inline bool has_wateref() const;
  inline void clear_wateref();
  static const int kWaterefFieldNumber = 14;
  inline ::google::protobuf::uint32 wateref() const;
  inline void set_wateref(::google::protobuf::uint32 value);

  // optional uint32 map_effect = 15;
  inline bool has_map_effect() const;
  inline void clear_map_effect();
  static const int kMapEffectFieldNumber = 15;
  inline ::google::protobuf::uint32 map_effect() const;
  inline void set_map_effect(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sCastleBlock block_mo = 16;
  inline int block_mo_size() const;
  inline void clear_block_mo();
  static const int kBlockMoFieldNumber = 16;
  inline const ::jynetwork::proto::sCastleBlock& block_mo(int index) const;
  inline ::jynetwork::proto::sCastleBlock* mutable_block_mo(int index);
  inline ::jynetwork::proto::sCastleBlock* add_block_mo();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleBlock >&
      block_mo() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleBlock >*
      mutable_block_mo();

  // repeated uint32 assist_drop = 19;
  inline int assist_drop_size() const;
  inline void clear_assist_drop();
  static const int kAssistDropFieldNumber = 19;
  inline ::google::protobuf::uint32 assist_drop(int index) const;
  inline void set_assist_drop(int index, ::google::protobuf::uint32 value);
  inline void add_assist_drop(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      assist_drop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_assist_drop();

  // optional uint32 enter_effect = 20;
  inline bool has_enter_effect() const;
  inline void clear_enter_effect();
  static const int kEnterEffectFieldNumber = 20;
  inline ::google::protobuf::uint32 enter_effect() const;
  inline void set_enter_effect(::google::protobuf::uint32 value);

  // optional uint32 dive_effect = 21;
  inline bool has_dive_effect() const;
  inline void clear_dive_effect();
  static const int kDiveEffectFieldNumber = 21;
  inline ::google::protobuf::uint32 dive_effect() const;
  inline void set_dive_effect(::google::protobuf::uint32 value);

  // optional uint32 castlemusic = 22;
  inline bool has_castlemusic() const;
  inline void clear_castlemusic();
  static const int kCastlemusicFieldNumber = 22;
  inline ::google::protobuf::uint32 castlemusic() const;
  inline void set_castlemusic(::google::protobuf::uint32 value);

  // optional uint32 bossmusic = 23;
  inline bool has_bossmusic() const;
  inline void clear_bossmusic();
  static const int kBossmusicFieldNumber = 23;
  inline ::google::protobuf::uint32 bossmusic() const;
  inline void set_bossmusic(::google::protobuf::uint32 value);

  // optional float map_scroll_speed = 24;
  inline bool has_map_scroll_speed() const;
  inline void clear_map_scroll_speed();
  static const int kMapScrollSpeedFieldNumber = 24;
  inline float map_scroll_speed() const;
  inline void set_map_scroll_speed(float value);

  // optional uint32 skill_allow = 25;
  inline bool has_skill_allow() const;
  inline void clear_skill_allow();
  static const int kSkillAllowFieldNumber = 25;
  inline ::google::protobuf::uint32 skill_allow() const;
  inline void set_skill_allow(::google::protobuf::uint32 value);

  // optional uint32 partner_allow = 26;
  inline bool has_partner_allow() const;
  inline void clear_partner_allow();
  static const int kPartnerAllowFieldNumber = 26;
  inline ::google::protobuf::uint32 partner_allow() const;
  inline void set_partner_allow(::google::protobuf::uint32 value);

  // optional float assist_drop_rate = 27;
  inline bool has_assist_drop_rate() const;
  inline void clear_assist_drop_rate();
  static const int kAssistDropRateFieldNumber = 27;
  inline float assist_drop_rate() const;
  inline void set_assist_drop_rate(float value);

  // repeated .jynetwork.proto.sCastleDrop item_drop = 28;
  inline int item_drop_size() const;
  inline void clear_item_drop();
  static const int kItemDropFieldNumber = 28;
  inline const ::jynetwork::proto::sCastleDrop& item_drop(int index) const;
  inline ::jynetwork::proto::sCastleDrop* mutable_item_drop(int index);
  inline ::jynetwork::proto::sCastleDrop* add_item_drop();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleDrop >&
      item_drop() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleDrop >*
      mutable_item_drop();

  // optional uint32 difficult = 29;
  inline bool has_difficult() const;
  inline void clear_difficult();
  static const int kDifficultFieldNumber = 29;
  inline ::google::protobuf::uint32 difficult() const;
  inline void set_difficult(::google::protobuf::uint32 value);

  // optional uint32 faction = 30;
  inline bool has_faction() const;
  inline void clear_faction();
  static const int kFactionFieldNumber = 30;
  inline ::google::protobuf::uint32 faction() const;
  inline void set_faction(::google::protobuf::uint32 value);

  // optional uint32 item_drop_id = 31;
  inline bool has_item_drop_id() const;
  inline void clear_item_drop_id();
  static const int kItemDropIdFieldNumber = 31;
  inline ::google::protobuf::uint32 item_drop_id() const;
  inline void set_item_drop_id(::google::protobuf::uint32 value);

  // optional uint32 fatigue = 32;
  inline bool has_fatigue() const;
  inline void clear_fatigue();
  static const int kFatigueFieldNumber = 32;
  inline ::google::protobuf::uint32 fatigue() const;
  inline void set_fatigue(::google::protobuf::uint32 value);

  // optional uint32 castle_type = 33;
  inline bool has_castle_type() const;
  inline void clear_castle_type();
  static const int kCastleTypeFieldNumber = 33;
  inline ::google::protobuf::uint32 castle_type() const;
  inline void set_castle_type(::google::protobuf::uint32 value);

  // optional uint32 castle_catlog = 34;
  inline bool has_castle_catlog() const;
  inline void clear_castle_catlog();
  static const int kCastleCatlogFieldNumber = 34;
  inline ::google::protobuf::uint32 castle_catlog() const;
  inline void set_castle_catlog(::google::protobuf::uint32 value);

  // optional uint32 map_color_r = 35;
  inline bool has_map_color_r() const;
  inline void clear_map_color_r();
  static const int kMapColorRFieldNumber = 35;
  inline ::google::protobuf::uint32 map_color_r() const;
  inline void set_map_color_r(::google::protobuf::uint32 value);

  // optional uint32 map_color_g = 36;
  inline bool has_map_color_g() const;
  inline void clear_map_color_g();
  static const int kMapColorGFieldNumber = 36;
  inline ::google::protobuf::uint32 map_color_g() const;
  inline void set_map_color_g(::google::protobuf::uint32 value);

  // optional uint32 map_color_b = 37;
  inline bool has_map_color_b() const;
  inline void clear_map_color_b();
  static const int kMapColorBFieldNumber = 37;
  inline ::google::protobuf::uint32 map_color_b() const;
  inline void set_map_color_b(::google::protobuf::uint32 value);

  // optional uint32 cloud_color_r = 38;
  inline bool has_cloud_color_r() const;
  inline void clear_cloud_color_r();
  static const int kCloudColorRFieldNumber = 38;
  inline ::google::protobuf::uint32 cloud_color_r() const;
  inline void set_cloud_color_r(::google::protobuf::uint32 value);

  // optional uint32 cloud_color_g = 39;
  inline bool has_cloud_color_g() const;
  inline void clear_cloud_color_g();
  static const int kCloudColorGFieldNumber = 39;
  inline ::google::protobuf::uint32 cloud_color_g() const;
  inline void set_cloud_color_g(::google::protobuf::uint32 value);

  // optional uint32 cloud_color_b = 40;
  inline bool has_cloud_color_b() const;
  inline void clear_cloud_color_b();
  static const int kCloudColorBFieldNumber = 40;
  inline ::google::protobuf::uint32 cloud_color_b() const;
  inline void set_cloud_color_b(::google::protobuf::uint32 value);

  // optional uint32 body_color_r = 41;
  inline bool has_body_color_r() const;
  inline void clear_body_color_r();
  static const int kBodyColorRFieldNumber = 41;
  inline ::google::protobuf::uint32 body_color_r() const;
  inline void set_body_color_r(::google::protobuf::uint32 value);

  // optional uint32 body_color_g = 42;
  inline bool has_body_color_g() const;
  inline void clear_body_color_g();
  static const int kBodyColorGFieldNumber = 42;
  inline ::google::protobuf::uint32 body_color_g() const;
  inline void set_body_color_g(::google::protobuf::uint32 value);

  // optional uint32 body_color_b = 43;
  inline bool has_body_color_b() const;
  inline void clear_body_color_b();
  static const int kBodyColorBFieldNumber = 43;
  inline ::google::protobuf::uint32 body_color_b() const;
  inline void set_body_color_b(::google::protobuf::uint32 value);

  // optional float star_hp = 44;
  inline bool has_star_hp() const;
  inline void clear_star_hp();
  static const int kStarHpFieldNumber = 44;
  inline float star_hp() const;
  inline void set_star_hp(float value);

  // optional float star_time = 45;
  inline bool has_star_time() const;
  inline void clear_star_time();
  static const int kStarTimeFieldNumber = 45;
  inline float star_time() const;
  inline void set_star_time(float value);

  // optional float star_score = 46;
  inline bool has_star_score() const;
  inline void clear_star_score();
  static const int kStarScoreFieldNumber = 46;
  inline float star_score() const;
  inline void set_star_score(float value);

  // optional float recommond_attack = 47;
  inline bool has_recommond_attack() const;
  inline void clear_recommond_attack();
  static const int kRecommondAttackFieldNumber = 47;
  inline float recommond_attack() const;
  inline void set_recommond_attack(float value);

  // optional uint32 win_condition = 48;
  inline bool has_win_condition() const;
  inline void clear_win_condition();
  static const int kWinConditionFieldNumber = 48;
  inline ::google::protobuf::uint32 win_condition() const;
  inline void set_win_condition(::google::protobuf::uint32 value);

  // optional float time_limit = 49;
  inline bool has_time_limit() const;
  inline void clear_time_limit();
  static const int kTimeLimitFieldNumber = 49;
  inline float time_limit() const;
  inline void set_time_limit(float value);

  // optional float enemy_enhance_time = 50;
  inline bool has_enemy_enhance_time() const;
  inline void clear_enemy_enhance_time();
  static const int kEnemyEnhanceTimeFieldNumber = 50;
  inline float enemy_enhance_time() const;
  inline void set_enemy_enhance_time(float value);

  // optional float enemy_enhance = 51;
  inline bool has_enemy_enhance() const;
  inline void clear_enemy_enhance();
  static const int kEnemyEnhanceFieldNumber = 51;
  inline float enemy_enhance() const;
  inline void set_enemy_enhance(float value);

  // optional uint32 description = 52;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 52;
  inline ::google::protobuf::uint32 description() const;
  inline void set_description(::google::protobuf::uint32 value);

  // optional uint32 boss_name = 53;
  inline bool has_boss_name() const;
  inline void clear_boss_name();
  static const int kBossNameFieldNumber = 53;
  inline ::google::protobuf::uint32 boss_name() const;
  inline void set_boss_name(::google::protobuf::uint32 value);

  // optional string boss_model = 54;
  inline bool has_boss_model() const;
  inline void clear_boss_model();
  static const int kBossModelFieldNumber = 54;
  inline const ::std::string& boss_model() const;
  inline void set_boss_model(const ::std::string& value);
  inline void set_boss_model(const char* value);
  inline void set_boss_model(const char* value, size_t size);
  inline ::std::string* mutable_boss_model();
  inline ::std::string* release_boss_model();
  inline void set_allocated_boss_model(::std::string* boss_model);

  // optional float boss_scale = 55;
  inline bool has_boss_scale() const;
  inline void clear_boss_scale();
  static const int kBossScaleFieldNumber = 55;
  inline float boss_scale() const;
  inline void set_boss_scale(float value);

  // optional float boss_x = 56;
  inline bool has_boss_x() const;
  inline void clear_boss_x();
  static const int kBossXFieldNumber = 56;
  inline float boss_x() const;
  inline void set_boss_x(float value);

  // optional float boss_y = 57;
  inline bool has_boss_y() const;
  inline void clear_boss_y();
  static const int kBossYFieldNumber = 57;
  inline float boss_y() const;
  inline void set_boss_y(float value);

  // optional uint32 open_condition_desc = 58;
  inline bool has_open_condition_desc() const;
  inline void clear_open_condition_desc();
  static const int kOpenConditionDescFieldNumber = 58;
  inline ::google::protobuf::uint32 open_condition_desc() const;
  inline void set_open_condition_desc(::google::protobuf::uint32 value);

  // optional uint32 stage_id = 59;
  inline bool has_stage_id() const;
  inline void clear_stage_id();
  static const int kStageIdFieldNumber = 59;
  inline ::google::protobuf::uint32 stage_id() const;
  inline void set_stage_id(::google::protobuf::uint32 value);

  // optional uint32 stage_group_id = 60;
  inline bool has_stage_group_id() const;
  inline void clear_stage_group_id();
  static const int kStageGroupIdFieldNumber = 60;
  inline ::google::protobuf::uint32 stage_group_id() const;
  inline void set_stage_group_id(::google::protobuf::uint32 value);

  // optional uint32 stage_detail_id = 61;
  inline bool has_stage_detail_id() const;
  inline void clear_stage_detail_id();
  static const int kStageDetailIdFieldNumber = 61;
  inline ::google::protobuf::uint32 stage_detail_id() const;
  inline void set_stage_detail_id(::google::protobuf::uint32 value);

  // optional string dive_cloud = 62;
  inline bool has_dive_cloud() const;
  inline void clear_dive_cloud();
  static const int kDiveCloudFieldNumber = 62;
  inline const ::std::string& dive_cloud() const;
  inline void set_dive_cloud(const ::std::string& value);
  inline void set_dive_cloud(const char* value);
  inline void set_dive_cloud(const char* value, size_t size);
  inline ::std::string* mutable_dive_cloud();
  inline ::std::string* release_dive_cloud();
  inline void set_allocated_dive_cloud(::std::string* dive_cloud);

  // optional string dive_bottom = 63;
  inline bool has_dive_bottom() const;
  inline void clear_dive_bottom();
  static const int kDiveBottomFieldNumber = 63;
  inline const ::std::string& dive_bottom() const;
  inline void set_dive_bottom(const ::std::string& value);
  inline void set_dive_bottom(const char* value);
  inline void set_dive_bottom(const char* value, size_t size);
  inline ::std::string* mutable_dive_bottom();
  inline ::std::string* release_dive_bottom();
  inline void set_allocated_dive_bottom(::std::string* dive_bottom);

  // optional string result_bg = 64;
  inline bool has_result_bg() const;
  inline void clear_result_bg();
  static const int kResultBgFieldNumber = 64;
  inline const ::std::string& result_bg() const;
  inline void set_result_bg(const ::std::string& value);
  inline void set_result_bg(const char* value);
  inline void set_result_bg(const char* value, size_t size);
  inline ::std::string* mutable_result_bg();
  inline ::std::string* release_result_bg();
  inline void set_allocated_result_bg(::std::string* result_bg);

  // repeated .jynetwork.proto.sChaosStats chaos = 65;
  inline int chaos_size() const;
  inline void clear_chaos();
  static const int kChaosFieldNumber = 65;
  inline const ::jynetwork::proto::sChaosStats& chaos(int index) const;
  inline ::jynetwork::proto::sChaosStats* mutable_chaos(int index);
  inline ::jynetwork::proto::sChaosStats* add_chaos();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sChaosStats >&
      chaos() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sChaosStats >*
      mutable_chaos();

  // optional uint32 after_drop_id = 66;
  inline bool has_after_drop_id() const;
  inline void clear_after_drop_id();
  static const int kAfterDropIdFieldNumber = 66;
  inline ::google::protobuf::uint32 after_drop_id() const;
  inline void set_after_drop_id(::google::protobuf::uint32 value);

  // optional uint32 percent = 67;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 67;
  inline ::google::protobuf::uint32 percent() const;
  inline void set_percent(::google::protobuf::uint32 value);

  // repeated uint32 chaos_group = 68;
  inline int chaos_group_size() const;
  inline void clear_chaos_group();
  static const int kChaosGroupFieldNumber = 68;
  inline ::google::protobuf::uint32 chaos_group(int index) const;
  inline void set_chaos_group(int index, ::google::protobuf::uint32 value);
  inline void add_chaos_group(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      chaos_group() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_chaos_group();

  // optional .jynetwork.proto.eRoleType role = 69;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 69;
  inline ::jynetwork::proto::eRoleType role() const;
  inline void set_role(::jynetwork::proto::eRoleType value);

  // optional uint32 first_drop = 70;
  inline bool has_first_drop() const;
  inline void clear_first_drop();
  static const int kFirstDropFieldNumber = 70;
  inline ::google::protobuf::uint32 first_drop() const;
  inline void set_first_drop(::google::protobuf::uint32 value);

  // repeated uint32 first_pass_drop = 71;
  inline int first_pass_drop_size() const;
  inline void clear_first_pass_drop();
  static const int kFirstPassDropFieldNumber = 71;
  inline ::google::protobuf::uint32 first_pass_drop(int index) const;
  inline void set_first_pass_drop(int index, ::google::protobuf::uint32 value);
  inline void add_first_pass_drop(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      first_pass_drop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_first_pass_drop();

  // optional uint32 joblimit = 72;
  inline bool has_joblimit() const;
  inline void clear_joblimit();
  static const int kJoblimitFieldNumber = 72;
  inline ::google::protobuf::uint32 joblimit() const;
  inline void set_joblimit(::google::protobuf::uint32 value);

  // repeated uint32 first_drop_show_type = 73;
  inline int first_drop_show_type_size() const;
  inline void clear_first_drop_show_type();
  static const int kFirstDropShowTypeFieldNumber = 73;
  inline ::google::protobuf::uint32 first_drop_show_type(int index) const;
  inline void set_first_drop_show_type(int index, ::google::protobuf::uint32 value);
  inline void add_first_drop_show_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      first_drop_show_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_first_drop_show_type();

  // repeated float difficult_percent = 74;
  inline int difficult_percent_size() const;
  inline void clear_difficult_percent();
  static const int kDifficultPercentFieldNumber = 74;
  inline float difficult_percent(int index) const;
  inline void set_difficult_percent(int index, float value);
  inline void add_difficult_percent(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      difficult_percent() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_difficult_percent();

  // repeated uint32 difficult_tc = 75;
  inline int difficult_tc_size() const;
  inline void clear_difficult_tc();
  static const int kDifficultTcFieldNumber = 75;
  inline ::google::protobuf::uint32 difficult_tc(int index) const;
  inline void set_difficult_tc(int index, ::google::protobuf::uint32 value);
  inline void add_difficult_tc(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      difficult_tc() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_difficult_tc();

  // optional uint32 mvp_drop = 76;
  inline bool has_mvp_drop() const;
  inline void clear_mvp_drop();
  static const int kMvpDropFieldNumber = 76;
  inline ::google::protobuf::uint32 mvp_drop() const;
  inline void set_mvp_drop(::google::protobuf::uint32 value);

  // repeated uint32 drop_show = 77;
  inline int drop_show_size() const;
  inline void clear_drop_show();
  static const int kDropShowFieldNumber = 77;
  inline ::google::protobuf::uint32 drop_show(int index) const;
  inline void set_drop_show(int index, ::google::protobuf::uint32 value);
  inline void add_drop_show(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      drop_show() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_drop_show();

  // repeated uint32 drop_show_type = 78;
  inline int drop_show_type_size() const;
  inline void clear_drop_show_type();
  static const int kDropShowTypeFieldNumber = 78;
  inline ::google::protobuf::uint32 drop_show_type(int index) const;
  inline void set_drop_show_type(int index, ::google::protobuf::uint32 value);
  inline void add_drop_show_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      drop_show_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_drop_show_type();

  // repeated string load_tips = 79;
  inline int load_tips_size() const;
  inline void clear_load_tips();
  static const int kLoadTipsFieldNumber = 79;
  inline const ::std::string& load_tips(int index) const;
  inline ::std::string* mutable_load_tips(int index);
  inline void set_load_tips(int index, const ::std::string& value);
  inline void set_load_tips(int index, const char* value);
  inline void set_load_tips(int index, const char* value, size_t size);
  inline ::std::string* add_load_tips();
  inline void add_load_tips(const ::std::string& value);
  inline void add_load_tips(const char* value);
  inline void add_load_tips(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& load_tips() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_load_tips();

  // optional uint32 can_well_over = 80;
  inline bool has_can_well_over() const;
  inline void clear_can_well_over();
  static const int kCanWellOverFieldNumber = 80;
  inline ::google::protobuf::uint32 can_well_over() const;
  inline void set_can_well_over(::google::protobuf::uint32 value);

  // repeated float pmattack = 81;
  inline int pmattack_size() const;
  inline void clear_pmattack();
  static const int kPmattackFieldNumber = 81;
  inline float pmattack(int index) const;
  inline void set_pmattack(int index, float value);
  inline void add_pmattack(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      pmattack() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_pmattack();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCastleStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_castlename();
  inline void clear_has_castlename();
  inline void set_has_castlemap();
  inline void clear_has_castlemap();
  inline void set_has_castlebossmap();
  inline void clear_has_castlebossmap();
  inline void set_has_numlimit();
  inline void clear_has_numlimit();
  inline void set_has_levellimit();
  inline void clear_has_levellimit();
  inline void set_has_ranklimit();
  inline void clear_has_ranklimit();
  inline void set_has_day_begintime();
  inline void clear_has_day_begintime();
  inline void set_has_day_endtime();
  inline void clear_has_day_endtime();
  inline void set_has_frontcastle();
  inline void clear_has_frontcastle();
  inline void set_has_bossmap_scroll();
  inline void clear_has_bossmap_scroll();
  inline void set_has_wateref();
  inline void clear_has_wateref();
  inline void set_has_map_effect();
  inline void clear_has_map_effect();
  inline void set_has_enter_effect();
  inline void clear_has_enter_effect();
  inline void set_has_dive_effect();
  inline void clear_has_dive_effect();
  inline void set_has_castlemusic();
  inline void clear_has_castlemusic();
  inline void set_has_bossmusic();
  inline void clear_has_bossmusic();
  inline void set_has_map_scroll_speed();
  inline void clear_has_map_scroll_speed();
  inline void set_has_skill_allow();
  inline void clear_has_skill_allow();
  inline void set_has_partner_allow();
  inline void clear_has_partner_allow();
  inline void set_has_assist_drop_rate();
  inline void clear_has_assist_drop_rate();
  inline void set_has_difficult();
  inline void clear_has_difficult();
  inline void set_has_faction();
  inline void clear_has_faction();
  inline void set_has_item_drop_id();
  inline void clear_has_item_drop_id();
  inline void set_has_fatigue();
  inline void clear_has_fatigue();
  inline void set_has_castle_type();
  inline void clear_has_castle_type();
  inline void set_has_castle_catlog();
  inline void clear_has_castle_catlog();
  inline void set_has_map_color_r();
  inline void clear_has_map_color_r();
  inline void set_has_map_color_g();
  inline void clear_has_map_color_g();
  inline void set_has_map_color_b();
  inline void clear_has_map_color_b();
  inline void set_has_cloud_color_r();
  inline void clear_has_cloud_color_r();
  inline void set_has_cloud_color_g();
  inline void clear_has_cloud_color_g();
  inline void set_has_cloud_color_b();
  inline void clear_has_cloud_color_b();
  inline void set_has_body_color_r();
  inline void clear_has_body_color_r();
  inline void set_has_body_color_g();
  inline void clear_has_body_color_g();
  inline void set_has_body_color_b();
  inline void clear_has_body_color_b();
  inline void set_has_star_hp();
  inline void clear_has_star_hp();
  inline void set_has_star_time();
  inline void clear_has_star_time();
  inline void set_has_star_score();
  inline void clear_has_star_score();
  inline void set_has_recommond_attack();
  inline void clear_has_recommond_attack();
  inline void set_has_win_condition();
  inline void clear_has_win_condition();
  inline void set_has_time_limit();
  inline void clear_has_time_limit();
  inline void set_has_enemy_enhance_time();
  inline void clear_has_enemy_enhance_time();
  inline void set_has_enemy_enhance();
  inline void clear_has_enemy_enhance();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_boss_name();
  inline void clear_has_boss_name();
  inline void set_has_boss_model();
  inline void clear_has_boss_model();
  inline void set_has_boss_scale();
  inline void clear_has_boss_scale();
  inline void set_has_boss_x();
  inline void clear_has_boss_x();
  inline void set_has_boss_y();
  inline void clear_has_boss_y();
  inline void set_has_open_condition_desc();
  inline void clear_has_open_condition_desc();
  inline void set_has_stage_id();
  inline void clear_has_stage_id();
  inline void set_has_stage_group_id();
  inline void clear_has_stage_group_id();
  inline void set_has_stage_detail_id();
  inline void clear_has_stage_detail_id();
  inline void set_has_dive_cloud();
  inline void clear_has_dive_cloud();
  inline void set_has_dive_bottom();
  inline void clear_has_dive_bottom();
  inline void set_has_result_bg();
  inline void clear_has_result_bg();
  inline void set_has_after_drop_id();
  inline void clear_has_after_drop_id();
  inline void set_has_percent();
  inline void clear_has_percent();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_first_drop();
  inline void clear_has_first_drop();
  inline void set_has_joblimit();
  inline void clear_has_joblimit();
  inline void set_has_mvp_drop();
  inline void clear_has_mvp_drop();
  inline void set_has_can_well_over();
  inline void clear_has_can_well_over();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 castlename_;
  ::std::string* castlemap_;
  ::std::string* castlebossmap_;
  ::google::protobuf::uint32 numlimit_;
  ::google::protobuf::uint32 levellimit_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > weekdaylimit_;
  ::google::protobuf::uint32 ranklimit_;
  ::google::protobuf::uint32 day_begintime_;
  ::google::protobuf::uint32 day_endtime_;
  ::google::protobuf::uint32 frontcastle_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefreshGroup > groups_;
  float bossmap_scroll_;
  ::google::protobuf::uint32 wateref_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleBlock > block_mo_;
  ::google::protobuf::uint32 map_effect_;
  ::google::protobuf::uint32 enter_effect_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > assist_drop_;
  ::google::protobuf::uint32 dive_effect_;
  ::google::protobuf::uint32 castlemusic_;
  ::google::protobuf::uint32 bossmusic_;
  float map_scroll_speed_;
  ::google::protobuf::uint32 skill_allow_;
  ::google::protobuf::uint32 partner_allow_;
  float assist_drop_rate_;
  ::google::protobuf::uint32 difficult_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleDrop > item_drop_;
  ::google::protobuf::uint32 faction_;
  ::google::protobuf::uint32 item_drop_id_;
  ::google::protobuf::uint32 fatigue_;
  ::google::protobuf::uint32 castle_type_;
  ::google::protobuf::uint32 castle_catlog_;
  ::google::protobuf::uint32 map_color_r_;
  ::google::protobuf::uint32 map_color_g_;
  ::google::protobuf::uint32 map_color_b_;
  ::google::protobuf::uint32 cloud_color_r_;
  ::google::protobuf::uint32 cloud_color_g_;
  ::google::protobuf::uint32 cloud_color_b_;
  ::google::protobuf::uint32 body_color_r_;
  ::google::protobuf::uint32 body_color_g_;
  ::google::protobuf::uint32 body_color_b_;
  float star_hp_;
  float star_time_;
  float star_score_;
  float recommond_attack_;
  ::google::protobuf::uint32 win_condition_;
  float time_limit_;
  float enemy_enhance_time_;
  float enemy_enhance_;
  ::google::protobuf::uint32 description_;
  ::google::protobuf::uint32 boss_name_;
  ::std::string* boss_model_;
  float boss_scale_;
  float boss_x_;
  float boss_y_;
  ::google::protobuf::uint32 open_condition_desc_;
  ::google::protobuf::uint32 stage_id_;
  ::google::protobuf::uint32 stage_group_id_;
  ::std::string* dive_cloud_;
  ::std::string* dive_bottom_;
  ::google::protobuf::uint32 stage_detail_id_;
  ::google::protobuf::uint32 after_drop_id_;
  ::std::string* result_bg_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sChaosStats > chaos_;
  ::google::protobuf::uint32 percent_;
  int role_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > chaos_group_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > first_pass_drop_;
  ::google::protobuf::uint32 first_drop_;
  ::google::protobuf::uint32 joblimit_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > first_drop_show_type_;
  ::google::protobuf::RepeatedField< float > difficult_percent_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > difficult_tc_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > drop_show_;
  ::google::protobuf::uint32 mvp_drop_;
  ::google::protobuf::uint32 can_well_over_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > drop_show_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> load_tips_;
  ::google::protobuf::RepeatedField< float > pmattack_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(79 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sCastleStats* default_instance_;
};
// -------------------------------------------------------------------

class sSoundStats : public ::google::protobuf::MessageLite {
 public:
  sSoundStats();
  virtual ~sSoundStats();

  sSoundStats(const sSoundStats& from);

  inline sSoundStats& operator=(const sSoundStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sSoundStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sSoundStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sSoundStats* other);

  // implements Message ----------------------------------------------

  sSoundStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sSoundStats& from);
  void MergeFrom(const sSoundStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional string sound_name = 2;
  inline bool has_sound_name() const;
  inline void clear_sound_name();
  static const int kSoundNameFieldNumber = 2;
  inline const ::std::string& sound_name() const;
  inline void set_sound_name(const ::std::string& value);
  inline void set_sound_name(const char* value);
  inline void set_sound_name(const char* value, size_t size);
  inline ::std::string* mutable_sound_name();
  inline ::std::string* release_sound_name();
  inline void set_allocated_sound_name(::std::string* sound_name);

  // optional uint32 is_mp3 = 3;
  inline bool has_is_mp3() const;
  inline void clear_is_mp3();
  static const int kIsMp3FieldNumber = 3;
  inline ::google::protobuf::uint32 is_mp3() const;
  inline void set_is_mp3(::google::protobuf::uint32 value);

  // optional string wwise_name = 4;
  inline bool has_wwise_name() const;
  inline void clear_wwise_name();
  static const int kWwiseNameFieldNumber = 4;
  inline const ::std::string& wwise_name() const;
  inline void set_wwise_name(const ::std::string& value);
  inline void set_wwise_name(const char* value);
  inline void set_wwise_name(const char* value, size_t size);
  inline ::std::string* mutable_wwise_name();
  inline ::std::string* release_wwise_name();
  inline void set_allocated_wwise_name(::std::string* wwise_name);

  // optional string wwise_stop_name = 5;
  inline bool has_wwise_stop_name() const;
  inline void clear_wwise_stop_name();
  static const int kWwiseStopNameFieldNumber = 5;
  inline const ::std::string& wwise_stop_name() const;
  inline void set_wwise_stop_name(const ::std::string& value);
  inline void set_wwise_stop_name(const char* value);
  inline void set_wwise_stop_name(const char* value, size_t size);
  inline ::std::string* mutable_wwise_stop_name();
  inline ::std::string* release_wwise_stop_name();
  inline void set_allocated_wwise_stop_name(::std::string* wwise_stop_name);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sSoundStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sound_name();
  inline void clear_has_sound_name();
  inline void set_has_is_mp3();
  inline void clear_has_is_mp3();
  inline void set_has_wwise_name();
  inline void clear_has_wwise_name();
  inline void set_has_wwise_stop_name();
  inline void clear_has_wwise_stop_name();

  ::std::string* sound_name_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 is_mp3_;
  ::std::string* wwise_name_;
  ::std::string* wwise_stop_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sSoundStats* default_instance_;
};
// -------------------------------------------------------------------

class sSoundTable : public ::google::protobuf::MessageLite {
 public:
  sSoundTable();
  virtual ~sSoundTable();

  sSoundTable(const sSoundTable& from);

  inline sSoundTable& operator=(const sSoundTable& from) {
    CopyFrom(from);
    return *this;
  }

  static const sSoundTable& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sSoundTable* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sSoundTable* other);

  // implements Message ----------------------------------------------

  sSoundTable* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sSoundTable& from);
  void MergeFrom(const sSoundTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 soundid = 2;
  inline bool has_soundid() const;
  inline void clear_soundid();
  static const int kSoundidFieldNumber = 2;
  inline ::google::protobuf::uint32 soundid() const;
  inline void set_soundid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sSoundTable)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_soundid();
  inline void clear_has_soundid();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 soundid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sSoundTable* default_instance_;
};
// -------------------------------------------------------------------

class sEffectStats : public ::google::protobuf::MessageLite {
 public:
  sEffectStats();
  virtual ~sEffectStats();

  sEffectStats(const sEffectStats& from);

  inline sEffectStats& operator=(const sEffectStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEffectStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEffectStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEffectStats* other);

  // implements Message ----------------------------------------------

  sEffectStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEffectStats& from);
  void MergeFrom(const sEffectStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional string resources = 2;
  inline bool has_resources() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 2;
  inline const ::std::string& resources() const;
  inline void set_resources(const ::std::string& value);
  inline void set_resources(const char* value);
  inline void set_resources(const char* value, size_t size);
  inline ::std::string* mutable_resources();
  inline ::std::string* release_resources();
  inline void set_allocated_resources(::std::string* resources);

  // optional string particle = 3;
  inline bool has_particle() const;
  inline void clear_particle();
  static const int kParticleFieldNumber = 3;
  inline const ::std::string& particle() const;
  inline void set_particle(const ::std::string& value);
  inline void set_particle(const char* value);
  inline void set_particle(const char* value, size_t size);
  inline ::std::string* mutable_particle();
  inline ::std::string* release_particle();
  inline void set_allocated_particle(::std::string* particle);

  // optional string particle_name = 4;
  inline bool has_particle_name() const;
  inline void clear_particle_name();
  static const int kParticleNameFieldNumber = 4;
  inline const ::std::string& particle_name() const;
  inline void set_particle_name(const ::std::string& value);
  inline void set_particle_name(const char* value);
  inline void set_particle_name(const char* value, size_t size);
  inline ::std::string* mutable_particle_name();
  inline ::std::string* release_particle_name();
  inline void set_allocated_particle_name(::std::string* particle_name);

  // optional uint32 particle_auto_remove = 5;
  inline bool has_particle_auto_remove() const;
  inline void clear_particle_auto_remove();
  static const int kParticleAutoRemoveFieldNumber = 5;
  inline ::google::protobuf::uint32 particle_auto_remove() const;
  inline void set_particle_auto_remove(::google::protobuf::uint32 value);

  // optional uint32 totalframes = 6;
  inline bool has_totalframes() const;
  inline void clear_totalframes();
  static const int kTotalframesFieldNumber = 6;
  inline ::google::protobuf::uint32 totalframes() const;
  inline void set_totalframes(::google::protobuf::uint32 value);

  // optional string animatename = 7;
  inline bool has_animatename() const;
  inline void clear_animatename();
  static const int kAnimatenameFieldNumber = 7;
  inline const ::std::string& animatename() const;
  inline void set_animatename(const ::std::string& value);
  inline void set_animatename(const char* value);
  inline void set_animatename(const char* value, size_t size);
  inline ::std::string* mutable_animatename();
  inline ::std::string* release_animatename();
  inline void set_allocated_animatename(::std::string* animatename);

  // optional uint32 additive = 8;
  inline bool has_additive() const;
  inline void clear_additive();
  static const int kAdditiveFieldNumber = 8;
  inline ::google::protobuf::uint32 additive() const;
  inline void set_additive(::google::protobuf::uint32 value);

  // optional float scale = 9;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 9;
  inline float scale() const;
  inline void set_scale(float value);

  // optional uint32 poolsize = 10;
  inline bool has_poolsize() const;
  inline void clear_poolsize();
  static const int kPoolsizeFieldNumber = 10;
  inline ::google::protobuf::uint32 poolsize() const;
  inline void set_poolsize(::google::protobuf::uint32 value);

  // optional uint32 notframe = 11;
  inline bool has_notframe() const;
  inline void clear_notframe();
  static const int kNotframeFieldNumber = 11;
  inline ::google::protobuf::uint32 notframe() const;
  inline void set_notframe(::google::protobuf::uint32 value);

  // optional string pu_material = 12;
  inline bool has_pu_material() const;
  inline void clear_pu_material();
  static const int kPuMaterialFieldNumber = 12;
  inline const ::std::string& pu_material() const;
  inline void set_pu_material(const ::std::string& value);
  inline void set_pu_material(const char* value);
  inline void set_pu_material(const char* value, size_t size);
  inline ::std::string* mutable_pu_material();
  inline ::std::string* release_pu_material();
  inline void set_allocated_pu_material(::std::string* pu_material);

  // optional float pu_life_time = 13;
  inline bool has_pu_life_time() const;
  inline void clear_pu_life_time();
  static const int kPuLifeTimeFieldNumber = 13;
  inline float pu_life_time() const;
  inline void set_pu_life_time(float value);

  // optional string ccbi = 14;
  inline bool has_ccbi() const;
  inline void clear_ccbi();
  static const int kCcbiFieldNumber = 14;
  inline const ::std::string& ccbi() const;
  inline void set_ccbi(const ::std::string& value);
  inline void set_ccbi(const char* value);
  inline void set_ccbi(const char* value, size_t size);
  inline ::std::string* mutable_ccbi();
  inline ::std::string* release_ccbi();
  inline void set_allocated_ccbi(::std::string* ccbi);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEffectStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_resources();
  inline void clear_has_resources();
  inline void set_has_particle();
  inline void clear_has_particle();
  inline void set_has_particle_name();
  inline void clear_has_particle_name();
  inline void set_has_particle_auto_remove();
  inline void clear_has_particle_auto_remove();
  inline void set_has_totalframes();
  inline void clear_has_totalframes();
  inline void set_has_animatename();
  inline void clear_has_animatename();
  inline void set_has_additive();
  inline void clear_has_additive();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_poolsize();
  inline void clear_has_poolsize();
  inline void set_has_notframe();
  inline void clear_has_notframe();
  inline void set_has_pu_material();
  inline void clear_has_pu_material();
  inline void set_has_pu_life_time();
  inline void clear_has_pu_life_time();
  inline void set_has_ccbi();
  inline void clear_has_ccbi();

  ::std::string* resources_;
  ::std::string* particle_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 particle_auto_remove_;
  ::std::string* particle_name_;
  ::google::protobuf::uint32 totalframes_;
  ::google::protobuf::uint32 additive_;
  ::std::string* animatename_;
  float scale_;
  ::google::protobuf::uint32 poolsize_;
  ::google::protobuf::uint32 notframe_;
  float pu_life_time_;
  ::std::string* pu_material_;
  ::std::string* ccbi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sEffectStats* default_instance_;
};
// -------------------------------------------------------------------

class sEffect : public ::google::protobuf::MessageLite {
 public:
  sEffect();
  virtual ~sEffect();

  sEffect(const sEffect& from);

  inline sEffect& operator=(const sEffect& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEffect& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEffect* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEffect* other);

  // implements Message ----------------------------------------------

  sEffect* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEffect& from);
  void MergeFrom(const sEffect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 4;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  inline float z() const;
  inline void set_z(float value);

  // optional float scale = 5;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 5;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float scaley = 6;
  inline bool has_scaley() const;
  inline void clear_scaley();
  static const int kScaleyFieldNumber = 6;
  inline float scaley() const;
  inline void set_scaley(float value);

  // optional float playspeed = 7;
  inline bool has_playspeed() const;
  inline void clear_playspeed();
  static const int kPlayspeedFieldNumber = 7;
  inline float playspeed() const;
  inline void set_playspeed(float value);

  // optional float playloop = 8;
  inline bool has_playloop() const;
  inline void clear_playloop();
  static const int kPlayloopFieldNumber = 8;
  inline float playloop() const;
  inline void set_playloop(float value);

  // optional float fadeout = 9;
  inline bool has_fadeout() const;
  inline void clear_fadeout();
  static const int kFadeoutFieldNumber = 9;
  inline float fadeout() const;
  inline void set_fadeout(float value);

  // optional float fadein = 10;
  inline bool has_fadein() const;
  inline void clear_fadein();
  static const int kFadeinFieldNumber = 10;
  inline float fadein() const;
  inline void set_fadein(float value);

  // optional uint32 fadeout_blink = 11;
  inline bool has_fadeout_blink() const;
  inline void clear_fadeout_blink();
  static const int kFadeoutBlinkFieldNumber = 11;
  inline ::google::protobuf::uint32 fadeout_blink() const;
  inline void set_fadeout_blink(::google::protobuf::uint32 value);

  // optional uint32 fadein_blink = 12;
  inline bool has_fadein_blink() const;
  inline void clear_fadein_blink();
  static const int kFadeinBlinkFieldNumber = 12;
  inline ::google::protobuf::uint32 fadein_blink() const;
  inline void set_fadein_blink(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEffect)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_scaley();
  inline void clear_has_scaley();
  inline void set_has_playspeed();
  inline void clear_has_playspeed();
  inline void set_has_playloop();
  inline void clear_has_playloop();
  inline void set_has_fadeout();
  inline void clear_has_fadeout();
  inline void set_has_fadein();
  inline void clear_has_fadein();
  inline void set_has_fadeout_blink();
  inline void clear_has_fadeout_blink();
  inline void set_has_fadein_blink();
  inline void clear_has_fadein_blink();

  ::google::protobuf::uint32 uid_;
  float x_;
  float y_;
  float z_;
  float scale_;
  float scaley_;
  float playspeed_;
  float playloop_;
  float fadeout_;
  float fadein_;
  ::google::protobuf::uint32 fadeout_blink_;
  ::google::protobuf::uint32 fadein_blink_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sEffect* default_instance_;
};
// -------------------------------------------------------------------

class sSubEffects : public ::google::protobuf::MessageLite {
 public:
  sSubEffects();
  virtual ~sSubEffects();

  sSubEffects(const sSubEffects& from);

  inline sSubEffects& operator=(const sSubEffects& from) {
    CopyFrom(from);
    return *this;
  }

  static const sSubEffects& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sSubEffects* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sSubEffects* other);

  // implements Message ----------------------------------------------

  sSubEffects* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sSubEffects& from);
  void MergeFrom(const sSubEffects& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 4;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  inline float z() const;
  inline void set_z(float value);

  // optional float dirrotate = 5;
  inline bool has_dirrotate() const;
  inline void clear_dirrotate();
  static const int kDirrotateFieldNumber = 5;
  inline float dirrotate() const;
  inline void set_dirrotate(float value);

  // optional float scale = 6;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 6;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float scaley = 7;
  inline bool has_scaley() const;
  inline void clear_scaley();
  static const int kScaleyFieldNumber = 7;
  inline float scaley() const;
  inline void set_scaley(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sSubEffects)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_dirrotate();
  inline void clear_has_dirrotate();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_scaley();
  inline void clear_has_scaley();

  ::google::protobuf::uint32 uid_;
  float x_;
  float y_;
  float z_;
  float dirrotate_;
  float scale_;
  float scaley_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sSubEffects* default_instance_;
};
// -------------------------------------------------------------------

class sEffectSound : public ::google::protobuf::MessageLite {
 public:
  sEffectSound();
  virtual ~sEffectSound();

  sEffectSound(const sEffectSound& from);

  inline sEffectSound& operator=(const sEffectSound& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEffectSound& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEffectSound* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEffectSound* other);

  // implements Message ----------------------------------------------

  sEffectSound* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEffectSound& from);
  void MergeFrom(const sEffectSound& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float sound_delay = 1;
  inline bool has_sound_delay() const;
  inline void clear_sound_delay();
  static const int kSoundDelayFieldNumber = 1;
  inline float sound_delay() const;
  inline void set_sound_delay(float value);

  // optional string sound_name = 2;
  inline bool has_sound_name() const;
  inline void clear_sound_name();
  static const int kSoundNameFieldNumber = 2;
  inline const ::std::string& sound_name() const;
  inline void set_sound_name(const ::std::string& value);
  inline void set_sound_name(const char* value);
  inline void set_sound_name(const char* value, size_t size);
  inline ::std::string* mutable_sound_name();
  inline ::std::string* release_sound_name();
  inline void set_allocated_sound_name(::std::string* sound_name);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEffectSound)
 private:
  inline void set_has_sound_delay();
  inline void clear_has_sound_delay();
  inline void set_has_sound_name();
  inline void clear_has_sound_name();

  ::std::string* sound_name_;
  float sound_delay_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sEffectSound* default_instance_;
};
// -------------------------------------------------------------------

class sEffects : public ::google::protobuf::MessageLite {
 public:
  sEffects();
  virtual ~sEffects();

  sEffects(const sEffects& from);

  inline sEffects& operator=(const sEffects& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEffects& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEffects* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEffects* other);

  // implements Message ----------------------------------------------

  sEffects* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEffects& from);
  void MergeFrom(const sEffects& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSubEffects subeffects = 2;
  inline int subeffects_size() const;
  inline void clear_subeffects();
  static const int kSubeffectsFieldNumber = 2;
  inline const ::jynetwork::proto::sSubEffects& subeffects(int index) const;
  inline ::jynetwork::proto::sSubEffects* mutable_subeffects(int index);
  inline ::jynetwork::proto::sSubEffects* add_subeffects();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSubEffects >&
      subeffects() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSubEffects >*
      mutable_subeffects();

  // repeated .jynetwork.proto.sEffect effects = 3;
  inline int effects_size() const;
  inline void clear_effects();
  static const int kEffectsFieldNumber = 3;
  inline const ::jynetwork::proto::sEffect& effects(int index) const;
  inline ::jynetwork::proto::sEffect* mutable_effects(int index);
  inline ::jynetwork::proto::sEffect* add_effects();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffect >&
      effects() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffect >*
      mutable_effects();

  // optional float dirrotate = 4;
  inline bool has_dirrotate() const;
  inline void clear_dirrotate();
  static const int kDirrotateFieldNumber = 4;
  inline float dirrotate() const;
  inline void set_dirrotate(float value);

  // optional .jynetwork.proto.eEffectPosType postype = 5;
  inline bool has_postype() const;
  inline void clear_postype();
  static const int kPostypeFieldNumber = 5;
  inline ::jynetwork::proto::eEffectPosType postype() const;
  inline void set_postype(::jynetwork::proto::eEffectPosType value);

  // optional uint32 interruptable = 6;
  inline bool has_interruptable() const;
  inline void clear_interruptable();
  static const int kInterruptableFieldNumber = 6;
  inline ::google::protobuf::uint32 interruptable() const;
  inline void set_interruptable(::google::protobuf::uint32 value);

  // optional uint32 nextid = 7;
  inline bool has_nextid() const;
  inline void clear_nextid();
  static const int kNextidFieldNumber = 7;
  inline ::google::protobuf::uint32 nextid() const;
  inline void set_nextid(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eEffectType efftype = 8;
  inline bool has_efftype() const;
  inline void clear_efftype();
  static const int kEfftypeFieldNumber = 8;
  inline ::jynetwork::proto::eEffectType efftype() const;
  inline void set_efftype(::jynetwork::proto::eEffectType value);

  // optional string phyname = 9;
  inline bool has_phyname() const;
  inline void clear_phyname();
  static const int kPhynameFieldNumber = 9;
  inline const ::std::string& phyname() const;
  inline void set_phyname(const ::std::string& value);
  inline void set_phyname(const char* value);
  inline void set_phyname(const char* value, size_t size);
  inline ::std::string* mutable_phyname();
  inline ::std::string* release_phyname();
  inline void set_allocated_phyname(::std::string* phyname);

  // optional uint32 physequnce = 10;
  inline bool has_physequnce() const;
  inline void clear_physequnce();
  static const int kPhysequnceFieldNumber = 10;
  inline ::google::protobuf::uint32 physequnce() const;
  inline void set_physequnce(::google::protobuf::uint32 value);

  // optional uint32 bindparent = 11;
  inline bool has_bindparent() const;
  inline void clear_bindparent();
  static const int kBindparentFieldNumber = 11;
  inline ::google::protobuf::uint32 bindparent() const;
  inline void set_bindparent(::google::protobuf::uint32 value);

  // optional uint32 gamestats = 12;
  inline bool has_gamestats() const;
  inline void clear_gamestats();
  static const int kGamestatsFieldNumber = 12;
  inline ::google::protobuf::uint32 gamestats() const;
  inline void set_gamestats(::google::protobuf::uint32 value);

  // optional uint32 hiteffect = 13;
  inline bool has_hiteffect() const;
  inline void clear_hiteffect();
  static const int kHiteffectFieldNumber = 13;
  inline ::google::protobuf::uint32 hiteffect() const;
  inline void set_hiteffect(::google::protobuf::uint32 value);

  // optional float bullet_speed = 14;
  inline bool has_bullet_speed() const;
  inline void clear_bullet_speed();
  static const int kBulletSpeedFieldNumber = 14;
  inline float bullet_speed() const;
  inline void set_bullet_speed(float value);

  // optional float accel = 15;
  inline bool has_accel() const;
  inline void clear_accel();
  static const int kAccelFieldNumber = 15;
  inline float accel() const;
  inline void set_accel(float value);

  // optional float turnrate = 16;
  inline bool has_turnrate() const;
  inline void clear_turnrate();
  static const int kTurnrateFieldNumber = 16;
  inline float turnrate() const;
  inline void set_turnrate(float value);

  // optional float yrotspeed = 17;
  inline bool has_yrotspeed() const;
  inline void clear_yrotspeed();
  static const int kYrotspeedFieldNumber = 17;
  inline float yrotspeed() const;
  inline void set_yrotspeed(float value);

  // optional uint32 destructible = 18;
  inline bool has_destructible() const;
  inline void clear_destructible();
  static const int kDestructibleFieldNumber = 18;
  inline ::google::protobuf::uint32 destructible() const;
  inline void set_destructible(::google::protobuf::uint32 value);

  // optional uint32 immunebullet = 19;
  inline bool has_immunebullet() const;
  inline void clear_immunebullet();
  static const int kImmunebulletFieldNumber = 19;
  inline ::google::protobuf::uint32 immunebullet() const;
  inline void set_immunebullet(::google::protobuf::uint32 value);

  // optional float lifetime = 20;
  inline bool has_lifetime() const;
  inline void clear_lifetime();
  static const int kLifetimeFieldNumber = 20;
  inline float lifetime() const;
  inline void set_lifetime(float value);

  // optional float attack_timespan = 21;
  inline bool has_attack_timespan() const;
  inline void clear_attack_timespan();
  static const int kAttackTimespanFieldNumber = 21;
  inline float attack_timespan() const;
  inline void set_attack_timespan(float value);

  // optional uint32 spawn_effect = 22;
  inline bool has_spawn_effect() const;
  inline void clear_spawn_effect();
  static const int kSpawnEffectFieldNumber = 22;
  inline ::google::protobuf::uint32 spawn_effect() const;
  inline void set_spawn_effect(::google::protobuf::uint32 value);

  // optional float zorder = 23;
  inline bool has_zorder() const;
  inline void clear_zorder();
  static const int kZorderFieldNumber = 23;
  inline float zorder() const;
  inline void set_zorder(float value);

  // optional uint32 skip_rotate = 24;
  inline bool has_skip_rotate() const;
  inline void clear_skip_rotate();
  static const int kSkipRotateFieldNumber = 24;
  inline ::google::protobuf::uint32 skip_rotate() const;
  inline void set_skip_rotate(::google::protobuf::uint32 value);

  // optional uint32 destruct_eff = 25;
  inline bool has_destruct_eff() const;
  inline void clear_destruct_eff();
  static const int kDestructEffFieldNumber = 25;
  inline ::google::protobuf::uint32 destruct_eff() const;
  inline void set_destruct_eff(::google::protobuf::uint32 value);

  // repeated float swingtime = 26;
  inline int swingtime_size() const;
  inline void clear_swingtime();
  static const int kSwingtimeFieldNumber = 26;
  inline float swingtime(int index) const;
  inline void set_swingtime(int index, float value);
  inline void add_swingtime(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      swingtime() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_swingtime();

  // optional string sound = 27;
  inline bool has_sound() const;
  inline void clear_sound();
  static const int kSoundFieldNumber = 27;
  inline const ::std::string& sound() const;
  inline void set_sound(const ::std::string& value);
  inline void set_sound(const char* value);
  inline void set_sound(const char* value, size_t size);
  inline ::std::string* mutable_sound();
  inline ::std::string* release_sound();
  inline void set_allocated_sound(::std::string* sound);

  // optional uint32 no_target = 28;
  inline bool has_no_target() const;
  inline void clear_no_target();
  static const int kNoTargetFieldNumber = 28;
  inline ::google::protobuf::uint32 no_target() const;
  inline void set_no_target(::google::protobuf::uint32 value);

  // optional float phy_radius = 29;
  inline bool has_phy_radius() const;
  inline void clear_phy_radius();
  static const int kPhyRadiusFieldNumber = 29;
  inline float phy_radius() const;
  inline void set_phy_radius(float value);

  // optional .jynetwork.proto.eAssitType assist_type = 30;
  inline bool has_assist_type() const;
  inline void clear_assist_type();
  static const int kAssistTypeFieldNumber = 30;
  inline ::jynetwork::proto::eAssitType assist_type() const;
  inline void set_assist_type(::jynetwork::proto::eAssitType value);

  // optional .jynetwork.proto.eEffectScreenType screen_type = 31;
  inline bool has_screen_type() const;
  inline void clear_screen_type();
  static const int kScreenTypeFieldNumber = 31;
  inline ::jynetwork::proto::eEffectScreenType screen_type() const;
  inline void set_screen_type(::jynetwork::proto::eEffectScreenType value);

  // optional float screen_speed = 32;
  inline bool has_screen_speed() const;
  inline void clear_screen_speed();
  static const int kScreenSpeedFieldNumber = 32;
  inline float screen_speed() const;
  inline void set_screen_speed(float value);

  // optional float screen_duration = 33;
  inline bool has_screen_duration() const;
  inline void clear_screen_duration();
  static const int kScreenDurationFieldNumber = 33;
  inline float screen_duration() const;
  inline void set_screen_duration(float value);

  // optional uint32 screen_colorr = 34;
  inline bool has_screen_colorr() const;
  inline void clear_screen_colorr();
  static const int kScreenColorrFieldNumber = 34;
  inline ::google::protobuf::uint32 screen_colorr() const;
  inline void set_screen_colorr(::google::protobuf::uint32 value);

  // optional uint32 screen_colorg = 35;
  inline bool has_screen_colorg() const;
  inline void clear_screen_colorg();
  static const int kScreenColorgFieldNumber = 35;
  inline ::google::protobuf::uint32 screen_colorg() const;
  inline void set_screen_colorg(::google::protobuf::uint32 value);

  // optional uint32 screen_colorb = 36;
  inline bool has_screen_colorb() const;
  inline void clear_screen_colorb();
  static const int kScreenColorbFieldNumber = 36;
  inline ::google::protobuf::uint32 screen_colorb() const;
  inline void set_screen_colorb(::google::protobuf::uint32 value);

  // optional uint32 screen_colora = 37;
  inline bool has_screen_colora() const;
  inline void clear_screen_colora();
  static const int kScreenColoraFieldNumber = 37;
  inline ::google::protobuf::uint32 screen_colora() const;
  inline void set_screen_colora(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eCameraMoveType camera_move_type = 38;
  inline bool has_camera_move_type() const;
  inline void clear_camera_move_type();
  static const int kCameraMoveTypeFieldNumber = 38;
  inline ::jynetwork::proto::eCameraMoveType camera_move_type() const;
  inline void set_camera_move_type(::jynetwork::proto::eCameraMoveType value);

  // optional float camera_move_time = 39;
  inline bool has_camera_move_time() const;
  inline void clear_camera_move_time();
  static const int kCameraMoveTimeFieldNumber = 39;
  inline float camera_move_time() const;
  inline void set_camera_move_time(float value);

  // optional float camera_return_time = 40;
  inline bool has_camera_return_time() const;
  inline void clear_camera_return_time();
  static const int kCameraReturnTimeFieldNumber = 40;
  inline float camera_return_time() const;
  inline void set_camera_return_time(float value);

  // optional float camera_offsetx = 41;
  inline bool has_camera_offsetx() const;
  inline void clear_camera_offsetx();
  static const int kCameraOffsetxFieldNumber = 41;
  inline float camera_offsetx() const;
  inline void set_camera_offsetx(float value);

  // optional float camera_offsety = 42;
  inline bool has_camera_offsety() const;
  inline void clear_camera_offsety();
  static const int kCameraOffsetyFieldNumber = 42;
  inline float camera_offsety() const;
  inline void set_camera_offsety(float value);

  // optional float camera_offsetz = 43;
  inline bool has_camera_offsetz() const;
  inline void clear_camera_offsetz();
  static const int kCameraOffsetzFieldNumber = 43;
  inline float camera_offsetz() const;
  inline void set_camera_offsetz(float value);

  // optional float self_rotate = 44;
  inline bool has_self_rotate() const;
  inline void clear_self_rotate();
  static const int kSelfRotateFieldNumber = 44;
  inline float self_rotate() const;
  inline void set_self_rotate(float value);

  // optional uint32 render3d = 45;
  inline bool has_render3d() const;
  inline void clear_render3d();
  static const int kRender3DFieldNumber = 45;
  inline ::google::protobuf::uint32 render3d() const;
  inline void set_render3d(::google::protobuf::uint32 value);

  // optional uint32 gamestate_lvl = 46;
  inline bool has_gamestate_lvl() const;
  inline void clear_gamestate_lvl();
  static const int kGamestateLvlFieldNumber = 46;
  inline ::google::protobuf::uint32 gamestate_lvl() const;
  inline void set_gamestate_lvl(::google::protobuf::uint32 value);

  // optional uint32 is_fullscreen = 47;
  inline bool has_is_fullscreen() const;
  inline void clear_is_fullscreen();
  static const int kIsFullscreenFieldNumber = 47;
  inline ::google::protobuf::uint32 is_fullscreen() const;
  inline void set_is_fullscreen(::google::protobuf::uint32 value);

  // optional float phy_rectw = 48;
  inline bool has_phy_rectw() const;
  inline void clear_phy_rectw();
  static const int kPhyRectwFieldNumber = 48;
  inline float phy_rectw() const;
  inline void set_phy_rectw(float value);

  // optional float phy_recth = 49;
  inline bool has_phy_recth() const;
  inline void clear_phy_recth();
  static const int kPhyRecthFieldNumber = 49;
  inline float phy_recth() const;
  inline void set_phy_recth(float value);

  // optional float phy_rectax = 50;
  inline bool has_phy_rectax() const;
  inline void clear_phy_rectax();
  static const int kPhyRectaxFieldNumber = 50;
  inline float phy_rectax() const;
  inline void set_phy_rectax(float value);

  // optional float phy_rectay = 51;
  inline bool has_phy_rectay() const;
  inline void clear_phy_rectay();
  static const int kPhyRectayFieldNumber = 51;
  inline float phy_rectay() const;
  inline void set_phy_rectay(float value);

  // optional float start_delay = 52;
  inline bool has_start_delay() const;
  inline void clear_start_delay();
  static const int kStartDelayFieldNumber = 52;
  inline float start_delay() const;
  inline void set_start_delay(float value);

  // optional float aoffsetx = 53;
  inline bool has_aoffsetx() const;
  inline void clear_aoffsetx();
  static const int kAoffsetxFieldNumber = 53;
  inline float aoffsetx() const;
  inline void set_aoffsetx(float value);

  // optional float aoffsety = 54;
  inline bool has_aoffsety() const;
  inline void clear_aoffsety();
  static const int kAoffsetyFieldNumber = 54;
  inline float aoffsety() const;
  inline void set_aoffsety(float value);

  // optional uint32 fantasy_func = 55;
  inline bool has_fantasy_func() const;
  inline void clear_fantasy_func();
  static const int kFantasyFuncFieldNumber = 55;
  inline ::google::protobuf::uint32 fantasy_func() const;
  inline void set_fantasy_func(::google::protobuf::uint32 value);

  // optional uint32 fantasy_bullect = 56;
  inline bool has_fantasy_bullect() const;
  inline void clear_fantasy_bullect();
  static const int kFantasyBullectFieldNumber = 56;
  inline ::google::protobuf::uint32 fantasy_bullect() const;
  inline void set_fantasy_bullect(::google::protobuf::uint32 value);

  // optional uint32 fantasy_per_count = 57;
  inline bool has_fantasy_per_count() const;
  inline void clear_fantasy_per_count();
  static const int kFantasyPerCountFieldNumber = 57;
  inline ::google::protobuf::uint32 fantasy_per_count() const;
  inline void set_fantasy_per_count(::google::protobuf::uint32 value);

  // optional uint32 fantasy_per_addcount = 58;
  inline bool has_fantasy_per_addcount() const;
  inline void clear_fantasy_per_addcount();
  static const int kFantasyPerAddcountFieldNumber = 58;
  inline ::google::protobuf::uint32 fantasy_per_addcount() const;
  inline void set_fantasy_per_addcount(::google::protobuf::uint32 value);

  // optional float fantasy_param1 = 59;
  inline bool has_fantasy_param1() const;
  inline void clear_fantasy_param1();
  static const int kFantasyParam1FieldNumber = 59;
  inline float fantasy_param1() const;
  inline void set_fantasy_param1(float value);

  // optional float fantasy_param2 = 60;
  inline bool has_fantasy_param2() const;
  inline void clear_fantasy_param2();
  static const int kFantasyParam2FieldNumber = 60;
  inline float fantasy_param2() const;
  inline void set_fantasy_param2(float value);

  // optional float fantasy_param3 = 61;
  inline bool has_fantasy_param3() const;
  inline void clear_fantasy_param3();
  static const int kFantasyParam3FieldNumber = 61;
  inline float fantasy_param3() const;
  inline void set_fantasy_param3(float value);

  // optional float fantasy_param4 = 62;
  inline bool has_fantasy_param4() const;
  inline void clear_fantasy_param4();
  static const int kFantasyParam4FieldNumber = 62;
  inline float fantasy_param4() const;
  inline void set_fantasy_param4(float value);

  // optional float fantasy_param5 = 63;
  inline bool has_fantasy_param5() const;
  inline void clear_fantasy_param5();
  static const int kFantasyParam5FieldNumber = 63;
  inline float fantasy_param5() const;
  inline void set_fantasy_param5(float value);

  // optional float fantasy_param6 = 64;
  inline bool has_fantasy_param6() const;
  inline void clear_fantasy_param6();
  static const int kFantasyParam6FieldNumber = 64;
  inline float fantasy_param6() const;
  inline void set_fantasy_param6(float value);

  // optional float fantasy_param7 = 65;
  inline bool has_fantasy_param7() const;
  inline void clear_fantasy_param7();
  static const int kFantasyParam7FieldNumber = 65;
  inline float fantasy_param7() const;
  inline void set_fantasy_param7(float value);

  // optional float fantasy_param8 = 66;
  inline bool has_fantasy_param8() const;
  inline void clear_fantasy_param8();
  static const int kFantasyParam8FieldNumber = 66;
  inline float fantasy_param8() const;
  inline void set_fantasy_param8(float value);

  // optional float fantasy_param9 = 67;
  inline bool has_fantasy_param9() const;
  inline void clear_fantasy_param9();
  static const int kFantasyParam9FieldNumber = 67;
  inline float fantasy_param9() const;
  inline void set_fantasy_param9(float value);

  // optional float fantasy_param10 = 68;
  inline bool has_fantasy_param10() const;
  inline void clear_fantasy_param10();
  static const int kFantasyParam10FieldNumber = 68;
  inline float fantasy_param10() const;
  inline void set_fantasy_param10(float value);

  // optional float fantasy_param11 = 69;
  inline bool has_fantasy_param11() const;
  inline void clear_fantasy_param11();
  static const int kFantasyParam11FieldNumber = 69;
  inline float fantasy_param11() const;
  inline void set_fantasy_param11(float value);

  // optional float fantasy_param12 = 70;
  inline bool has_fantasy_param12() const;
  inline void clear_fantasy_param12();
  static const int kFantasyParam12FieldNumber = 70;
  inline float fantasy_param12() const;
  inline void set_fantasy_param12(float value);

  // optional float streak_fade = 71;
  inline bool has_streak_fade() const;
  inline void clear_streak_fade();
  static const int kStreakFadeFieldNumber = 71;
  inline float streak_fade() const;
  inline void set_streak_fade(float value);

  // optional float streak_minseg = 72;
  inline bool has_streak_minseg() const;
  inline void clear_streak_minseg();
  static const int kStreakMinsegFieldNumber = 72;
  inline float streak_minseg() const;
  inline void set_streak_minseg(float value);

  // optional float streak_stroke = 73;
  inline bool has_streak_stroke() const;
  inline void clear_streak_stroke();
  static const int kStreakStrokeFieldNumber = 73;
  inline float streak_stroke() const;
  inline void set_streak_stroke(float value);

  // optional float streak_dispear = 81;
  inline bool has_streak_dispear() const;
  inline void clear_streak_dispear();
  static const int kStreakDispearFieldNumber = 81;
  inline float streak_dispear() const;
  inline void set_streak_dispear(float value);

  // optional uint32 streak_colorr = 74;
  inline bool has_streak_colorr() const;
  inline void clear_streak_colorr();
  static const int kStreakColorrFieldNumber = 74;
  inline ::google::protobuf::uint32 streak_colorr() const;
  inline void set_streak_colorr(::google::protobuf::uint32 value);

  // optional uint32 streak_colorg = 75;
  inline bool has_streak_colorg() const;
  inline void clear_streak_colorg();
  static const int kStreakColorgFieldNumber = 75;
  inline ::google::protobuf::uint32 streak_colorg() const;
  inline void set_streak_colorg(::google::protobuf::uint32 value);

  // optional uint32 streak_colorb = 76;
  inline bool has_streak_colorb() const;
  inline void clear_streak_colorb();
  static const int kStreakColorbFieldNumber = 76;
  inline ::google::protobuf::uint32 streak_colorb() const;
  inline void set_streak_colorb(::google::protobuf::uint32 value);

  // optional string streak_name = 77;
  inline bool has_streak_name() const;
  inline void clear_streak_name();
  static const int kStreakNameFieldNumber = 77;
  inline const ::std::string& streak_name() const;
  inline void set_streak_name(const ::std::string& value);
  inline void set_streak_name(const char* value);
  inline void set_streak_name(const char* value, size_t size);
  inline ::std::string* mutable_streak_name();
  inline ::std::string* release_streak_name();
  inline void set_allocated_streak_name(::std::string* streak_name);

  // optional uint32 desturct_by_creator = 78;
  inline bool has_desturct_by_creator() const;
  inline void clear_desturct_by_creator();
  static const int kDesturctByCreatorFieldNumber = 78;
  inline ::google::protobuf::uint32 desturct_by_creator() const;
  inline void set_desturct_by_creator(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sEffectSound effect_sound = 79;
  inline int effect_sound_size() const;
  inline void clear_effect_sound();
  static const int kEffectSoundFieldNumber = 79;
  inline const ::jynetwork::proto::sEffectSound& effect_sound(int index) const;
  inline ::jynetwork::proto::sEffectSound* mutable_effect_sound(int index);
  inline ::jynetwork::proto::sEffectSound* add_effect_sound();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectSound >&
      effect_sound() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectSound >*
      mutable_effect_sound();

  // optional uint32 rand_rotate = 80;
  inline bool has_rand_rotate() const;
  inline void clear_rand_rotate();
  static const int kRandRotateFieldNumber = 80;
  inline ::google::protobuf::uint32 rand_rotate() const;
  inline void set_rand_rotate(::google::protobuf::uint32 value);

  // optional uint32 no_out_erase = 82;
  inline bool has_no_out_erase() const;
  inline void clear_no_out_erase();
  static const int kNoOutEraseFieldNumber = 82;
  inline ::google::protobuf::uint32 no_out_erase() const;
  inline void set_no_out_erase(::google::protobuf::uint32 value);

  // optional uint32 retarget = 83;
  inline bool has_retarget() const;
  inline void clear_retarget();
  static const int kRetargetFieldNumber = 83;
  inline ::google::protobuf::uint32 retarget() const;
  inline void set_retarget(::google::protobuf::uint32 value);

  // optional uint32 func_move = 84;
  inline bool has_func_move() const;
  inline void clear_func_move();
  static const int kFuncMoveFieldNumber = 84;
  inline ::google::protobuf::uint32 func_move() const;
  inline void set_func_move(::google::protobuf::uint32 value);

  // optional uint32 laser_turnrate = 85;
  inline bool has_laser_turnrate() const;
  inline void clear_laser_turnrate();
  static const int kLaserTurnrateFieldNumber = 85;
  inline ::google::protobuf::uint32 laser_turnrate() const;
  inline void set_laser_turnrate(::google::protobuf::uint32 value);

  // optional uint32 is_end_remove = 86;
  inline bool has_is_end_remove() const;
  inline void clear_is_end_remove();
  static const int kIsEndRemoveFieldNumber = 86;
  inline ::google::protobuf::uint32 is_end_remove() const;
  inline void set_is_end_remove(::google::protobuf::uint32 value);

  // optional float retarget_start_time = 87;
  inline bool has_retarget_start_time() const;
  inline void clear_retarget_start_time();
  static const int kRetargetStartTimeFieldNumber = 87;
  inline float retarget_start_time() const;
  inline void set_retarget_start_time(float value);

  // optional float retarget_end_time = 88;
  inline bool has_retarget_end_time() const;
  inline void clear_retarget_end_time();
  static const int kRetargetEndTimeFieldNumber = 88;
  inline float retarget_end_time() const;
  inline void set_retarget_end_time(float value);

  // optional uint32 is_not_show_damage = 89;
  inline bool has_is_not_show_damage() const;
  inline void clear_is_not_show_damage();
  static const int kIsNotShowDamageFieldNumber = 89;
  inline ::google::protobuf::uint32 is_not_show_damage() const;
  inline void set_is_not_show_damage(::google::protobuf::uint32 value);

  // optional uint32 hurt_catlog = 90;
  inline bool has_hurt_catlog() const;
  inline void clear_hurt_catlog();
  static const int kHurtCatlogFieldNumber = 90;
  inline ::google::protobuf::uint32 hurt_catlog() const;
  inline void set_hurt_catlog(::google::protobuf::uint32 value);

  // optional float laser_half_width = 91;
  inline bool has_laser_half_width() const;
  inline void clear_laser_half_width();
  static const int kLaserHalfWidthFieldNumber = 91;
  inline float laser_half_width() const;
  inline void set_laser_half_width(float value);

  // optional float alert_radius = 92;
  inline bool has_alert_radius() const;
  inline void clear_alert_radius();
  static const int kAlertRadiusFieldNumber = 92;
  inline float alert_radius() const;
  inline void set_alert_radius(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEffects)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_dirrotate();
  inline void clear_has_dirrotate();
  inline void set_has_postype();
  inline void clear_has_postype();
  inline void set_has_interruptable();
  inline void clear_has_interruptable();
  inline void set_has_nextid();
  inline void clear_has_nextid();
  inline void set_has_efftype();
  inline void clear_has_efftype();
  inline void set_has_phyname();
  inline void clear_has_phyname();
  inline void set_has_physequnce();
  inline void clear_has_physequnce();
  inline void set_has_bindparent();
  inline void clear_has_bindparent();
  inline void set_has_gamestats();
  inline void clear_has_gamestats();
  inline void set_has_hiteffect();
  inline void clear_has_hiteffect();
  inline void set_has_bullet_speed();
  inline void clear_has_bullet_speed();
  inline void set_has_accel();
  inline void clear_has_accel();
  inline void set_has_turnrate();
  inline void clear_has_turnrate();
  inline void set_has_yrotspeed();
  inline void clear_has_yrotspeed();
  inline void set_has_destructible();
  inline void clear_has_destructible();
  inline void set_has_immunebullet();
  inline void clear_has_immunebullet();
  inline void set_has_lifetime();
  inline void clear_has_lifetime();
  inline void set_has_attack_timespan();
  inline void clear_has_attack_timespan();
  inline void set_has_spawn_effect();
  inline void clear_has_spawn_effect();
  inline void set_has_zorder();
  inline void clear_has_zorder();
  inline void set_has_skip_rotate();
  inline void clear_has_skip_rotate();
  inline void set_has_destruct_eff();
  inline void clear_has_destruct_eff();
  inline void set_has_sound();
  inline void clear_has_sound();
  inline void set_has_no_target();
  inline void clear_has_no_target();
  inline void set_has_phy_radius();
  inline void clear_has_phy_radius();
  inline void set_has_assist_type();
  inline void clear_has_assist_type();
  inline void set_has_screen_type();
  inline void clear_has_screen_type();
  inline void set_has_screen_speed();
  inline void clear_has_screen_speed();
  inline void set_has_screen_duration();
  inline void clear_has_screen_duration();
  inline void set_has_screen_colorr();
  inline void clear_has_screen_colorr();
  inline void set_has_screen_colorg();
  inline void clear_has_screen_colorg();
  inline void set_has_screen_colorb();
  inline void clear_has_screen_colorb();
  inline void set_has_screen_colora();
  inline void clear_has_screen_colora();
  inline void set_has_camera_move_type();
  inline void clear_has_camera_move_type();
  inline void set_has_camera_move_time();
  inline void clear_has_camera_move_time();
  inline void set_has_camera_return_time();
  inline void clear_has_camera_return_time();
  inline void set_has_camera_offsetx();
  inline void clear_has_camera_offsetx();
  inline void set_has_camera_offsety();
  inline void clear_has_camera_offsety();
  inline void set_has_camera_offsetz();
  inline void clear_has_camera_offsetz();
  inline void set_has_self_rotate();
  inline void clear_has_self_rotate();
  inline void set_has_render3d();
  inline void clear_has_render3d();
  inline void set_has_gamestate_lvl();
  inline void clear_has_gamestate_lvl();
  inline void set_has_is_fullscreen();
  inline void clear_has_is_fullscreen();
  inline void set_has_phy_rectw();
  inline void clear_has_phy_rectw();
  inline void set_has_phy_recth();
  inline void clear_has_phy_recth();
  inline void set_has_phy_rectax();
  inline void clear_has_phy_rectax();
  inline void set_has_phy_rectay();
  inline void clear_has_phy_rectay();
  inline void set_has_start_delay();
  inline void clear_has_start_delay();
  inline void set_has_aoffsetx();
  inline void clear_has_aoffsetx();
  inline void set_has_aoffsety();
  inline void clear_has_aoffsety();
  inline void set_has_fantasy_func();
  inline void clear_has_fantasy_func();
  inline void set_has_fantasy_bullect();
  inline void clear_has_fantasy_bullect();
  inline void set_has_fantasy_per_count();
  inline void clear_has_fantasy_per_count();
  inline void set_has_fantasy_per_addcount();
  inline void clear_has_fantasy_per_addcount();
  inline void set_has_fantasy_param1();
  inline void clear_has_fantasy_param1();
  inline void set_has_fantasy_param2();
  inline void clear_has_fantasy_param2();
  inline void set_has_fantasy_param3();
  inline void clear_has_fantasy_param3();
  inline void set_has_fantasy_param4();
  inline void clear_has_fantasy_param4();
  inline void set_has_fantasy_param5();
  inline void clear_has_fantasy_param5();
  inline void set_has_fantasy_param6();
  inline void clear_has_fantasy_param6();
  inline void set_has_fantasy_param7();
  inline void clear_has_fantasy_param7();
  inline void set_has_fantasy_param8();
  inline void clear_has_fantasy_param8();
  inline void set_has_fantasy_param9();
  inline void clear_has_fantasy_param9();
  inline void set_has_fantasy_param10();
  inline void clear_has_fantasy_param10();
  inline void set_has_fantasy_param11();
  inline void clear_has_fantasy_param11();
  inline void set_has_fantasy_param12();
  inline void clear_has_fantasy_param12();
  inline void set_has_streak_fade();
  inline void clear_has_streak_fade();
  inline void set_has_streak_minseg();
  inline void clear_has_streak_minseg();
  inline void set_has_streak_stroke();
  inline void clear_has_streak_stroke();
  inline void set_has_streak_dispear();
  inline void clear_has_streak_dispear();
  inline void set_has_streak_colorr();
  inline void clear_has_streak_colorr();
  inline void set_has_streak_colorg();
  inline void clear_has_streak_colorg();
  inline void set_has_streak_colorb();
  inline void clear_has_streak_colorb();
  inline void set_has_streak_name();
  inline void clear_has_streak_name();
  inline void set_has_desturct_by_creator();
  inline void clear_has_desturct_by_creator();
  inline void set_has_rand_rotate();
  inline void clear_has_rand_rotate();
  inline void set_has_no_out_erase();
  inline void clear_has_no_out_erase();
  inline void set_has_retarget();
  inline void clear_has_retarget();
  inline void set_has_func_move();
  inline void clear_has_func_move();
  inline void set_has_laser_turnrate();
  inline void clear_has_laser_turnrate();
  inline void set_has_is_end_remove();
  inline void clear_has_is_end_remove();
  inline void set_has_retarget_start_time();
  inline void clear_has_retarget_start_time();
  inline void set_has_retarget_end_time();
  inline void clear_has_retarget_end_time();
  inline void set_has_is_not_show_damage();
  inline void clear_has_is_not_show_damage();
  inline void set_has_hurt_catlog();
  inline void clear_has_hurt_catlog();
  inline void set_has_laser_half_width();
  inline void clear_has_laser_half_width();
  inline void set_has_alert_radius();
  inline void clear_has_alert_radius();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSubEffects > subeffects_;
  ::google::protobuf::uint32 uid_;
  float dirrotate_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffect > effects_;
  int postype_;
  ::google::protobuf::uint32 interruptable_;
  ::google::protobuf::uint32 nextid_;
  int efftype_;
  ::std::string* phyname_;
  ::google::protobuf::uint32 physequnce_;
  ::google::protobuf::uint32 bindparent_;
  ::google::protobuf::uint32 gamestats_;
  ::google::protobuf::uint32 hiteffect_;
  float bullet_speed_;
  float accel_;
  float turnrate_;
  float yrotspeed_;
  ::google::protobuf::uint32 destructible_;
  ::google::protobuf::uint32 immunebullet_;
  float lifetime_;
  float attack_timespan_;
  ::google::protobuf::uint32 spawn_effect_;
  float zorder_;
  ::google::protobuf::uint32 skip_rotate_;
  ::google::protobuf::uint32 destruct_eff_;
  ::google::protobuf::RepeatedField< float > swingtime_;
  ::std::string* sound_;
  ::google::protobuf::uint32 no_target_;
  float phy_radius_;
  int assist_type_;
  int screen_type_;
  float screen_speed_;
  float screen_duration_;
  ::google::protobuf::uint32 screen_colorr_;
  ::google::protobuf::uint32 screen_colorg_;
  ::google::protobuf::uint32 screen_colorb_;
  ::google::protobuf::uint32 screen_colora_;
  int camera_move_type_;
  float camera_move_time_;
  float camera_return_time_;
  float camera_offsetx_;
  float camera_offsety_;
  float camera_offsetz_;
  float self_rotate_;
  ::google::protobuf::uint32 render3d_;
  ::google::protobuf::uint32 gamestate_lvl_;
  ::google::protobuf::uint32 is_fullscreen_;
  float phy_rectw_;
  float phy_recth_;
  float phy_rectax_;
  float phy_rectay_;
  float start_delay_;
  float aoffsetx_;
  float aoffsety_;
  ::google::protobuf::uint32 fantasy_func_;
  ::google::protobuf::uint32 fantasy_bullect_;
  ::google::protobuf::uint32 fantasy_per_count_;
  ::google::protobuf::uint32 fantasy_per_addcount_;
  float fantasy_param1_;
  float fantasy_param2_;
  float fantasy_param3_;
  float fantasy_param4_;
  float fantasy_param5_;
  float fantasy_param6_;
  float fantasy_param7_;
  float fantasy_param8_;
  float fantasy_param9_;
  float fantasy_param10_;
  float fantasy_param11_;
  float fantasy_param12_;
  float streak_fade_;
  float streak_minseg_;
  float streak_stroke_;
  float streak_dispear_;
  ::google::protobuf::uint32 streak_colorr_;
  ::google::protobuf::uint32 streak_colorg_;
  ::google::protobuf::uint32 streak_colorb_;
  ::std::string* streak_name_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectSound > effect_sound_;
  ::google::protobuf::uint32 desturct_by_creator_;
  ::google::protobuf::uint32 rand_rotate_;
  ::google::protobuf::uint32 no_out_erase_;
  ::google::protobuf::uint32 retarget_;
  ::google::protobuf::uint32 func_move_;
  ::google::protobuf::uint32 laser_turnrate_;
  ::google::protobuf::uint32 is_end_remove_;
  float retarget_start_time_;
  float retarget_end_time_;
  ::google::protobuf::uint32 is_not_show_damage_;
  ::google::protobuf::uint32 hurt_catlog_;
  float laser_half_width_;
  float alert_radius_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(92 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sEffects* default_instance_;
};
// -------------------------------------------------------------------

class sEffectMove : public ::google::protobuf::MessageLite {
 public:
  sEffectMove();
  virtual ~sEffectMove();

  sEffectMove(const sEffectMove& from);

  inline sEffectMove& operator=(const sEffectMove& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEffectMove& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEffectMove* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEffectMove* other);

  // implements Message ----------------------------------------------

  sEffectMove* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEffectMove& from);
  void MergeFrom(const sEffectMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 func_id = 2;
  inline bool has_func_id() const;
  inline void clear_func_id();
  static const int kFuncIdFieldNumber = 2;
  inline ::google::protobuf::uint32 func_id() const;
  inline void set_func_id(::google::protobuf::uint32 value);

  // optional float param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline float param1() const;
  inline void set_param1(float value);

  // optional float param2 = 4;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 4;
  inline float param2() const;
  inline void set_param2(float value);

  // optional float param3 = 5;
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 5;
  inline float param3() const;
  inline void set_param3(float value);

  // optional float param4 = 6;
  inline bool has_param4() const;
  inline void clear_param4();
  static const int kParam4FieldNumber = 6;
  inline float param4() const;
  inline void set_param4(float value);

  // optional float param5 = 7;
  inline bool has_param5() const;
  inline void clear_param5();
  static const int kParam5FieldNumber = 7;
  inline float param5() const;
  inline void set_param5(float value);

  // optional float param6 = 8;
  inline bool has_param6() const;
  inline void clear_param6();
  static const int kParam6FieldNumber = 8;
  inline float param6() const;
  inline void set_param6(float value);

  // optional float param7 = 9;
  inline bool has_param7() const;
  inline void clear_param7();
  static const int kParam7FieldNumber = 9;
  inline float param7() const;
  inline void set_param7(float value);

  // optional float param8 = 10;
  inline bool has_param8() const;
  inline void clear_param8();
  static const int kParam8FieldNumber = 10;
  inline float param8() const;
  inline void set_param8(float value);

  // optional float param9 = 11;
  inline bool has_param9() const;
  inline void clear_param9();
  static const int kParam9FieldNumber = 11;
  inline float param9() const;
  inline void set_param9(float value);

  // optional float param10 = 12;
  inline bool has_param10() const;
  inline void clear_param10();
  static const int kParam10FieldNumber = 12;
  inline float param10() const;
  inline void set_param10(float value);

  // optional float param11 = 13;
  inline bool has_param11() const;
  inline void clear_param11();
  static const int kParam11FieldNumber = 13;
  inline float param11() const;
  inline void set_param11(float value);

  // optional float param12 = 14;
  inline bool has_param12() const;
  inline void clear_param12();
  static const int kParam12FieldNumber = 14;
  inline float param12() const;
  inline void set_param12(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEffectMove)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_func_id();
  inline void clear_has_func_id();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_param3();
  inline void clear_has_param3();
  inline void set_has_param4();
  inline void clear_has_param4();
  inline void set_has_param5();
  inline void clear_has_param5();
  inline void set_has_param6();
  inline void clear_has_param6();
  inline void set_has_param7();
  inline void clear_has_param7();
  inline void set_has_param8();
  inline void clear_has_param8();
  inline void set_has_param9();
  inline void clear_has_param9();
  inline void set_has_param10();
  inline void clear_has_param10();
  inline void set_has_param11();
  inline void clear_has_param11();
  inline void set_has_param12();
  inline void clear_has_param12();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 func_id_;
  float param1_;
  float param2_;
  float param3_;
  float param4_;
  float param5_;
  float param6_;
  float param7_;
  float param8_;
  float param9_;
  float param10_;
  float param11_;
  float param12_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sEffectMove* default_instance_;
};
// -------------------------------------------------------------------

class sEffectTable : public ::google::protobuf::MessageLite {
 public:
  sEffectTable();
  virtual ~sEffectTable();

  sEffectTable(const sEffectTable& from);

  inline sEffectTable& operator=(const sEffectTable& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEffectTable& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEffectTable* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEffectTable* other);

  // implements Message ----------------------------------------------

  sEffectTable* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEffectTable& from);
  void MergeFrom(const sEffectTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 effectsid = 2;
  inline bool has_effectsid() const;
  inline void clear_effectsid();
  static const int kEffectsidFieldNumber = 2;
  inline ::google::protobuf::uint32 effectsid() const;
  inline void set_effectsid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEffectTable)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_effectsid();
  inline void clear_has_effectsid();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 effectsid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sEffectTable* default_instance_;
};
// -------------------------------------------------------------------

class sModelAction : public ::google::protobuf::MessageLite {
 public:
  sModelAction();
  virtual ~sModelAction();

  sModelAction(const sModelAction& from);

  inline sModelAction& operator=(const sModelAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const sModelAction& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sModelAction* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sModelAction* other);

  // implements Message ----------------------------------------------

  sModelAction* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sModelAction& from);
  void MergeFrom(const sModelAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional string resources = 2;
  inline bool has_resources() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 2;
  inline const ::std::string& resources() const;
  inline void set_resources(const ::std::string& value);
  inline void set_resources(const char* value);
  inline void set_resources(const char* value, size_t size);
  inline ::std::string* mutable_resources();
  inline ::std::string* release_resources();
  inline void set_allocated_resources(::std::string* resources);

  // optional uint32 hold_s = 3;
  inline bool has_hold_s() const;
  inline void clear_hold_s();
  static const int kHoldSFieldNumber = 3;
  inline ::google::protobuf::uint32 hold_s() const;
  inline void set_hold_s(::google::protobuf::uint32 value);

  // optional uint32 hold_e = 4;
  inline bool has_hold_e() const;
  inline void clear_hold_e();
  static const int kHoldEFieldNumber = 4;
  inline ::google::protobuf::uint32 hold_e() const;
  inline void set_hold_e(::google::protobuf::uint32 value);

  // optional uint32 hold_eff = 5;
  inline bool has_hold_eff() const;
  inline void clear_hold_eff();
  static const int kHoldEffFieldNumber = 5;
  inline ::google::protobuf::uint32 hold_eff() const;
  inline void set_hold_eff(::google::protobuf::uint32 value);

  // optional uint32 moveleft_s = 6;
  inline bool has_moveleft_s() const;
  inline void clear_moveleft_s();
  static const int kMoveleftSFieldNumber = 6;
  inline ::google::protobuf::uint32 moveleft_s() const;
  inline void set_moveleft_s(::google::protobuf::uint32 value);

  // optional uint32 moveleft_e = 7;
  inline bool has_moveleft_e() const;
  inline void clear_moveleft_e();
  static const int kMoveleftEFieldNumber = 7;
  inline ::google::protobuf::uint32 moveleft_e() const;
  inline void set_moveleft_e(::google::protobuf::uint32 value);

  // optional uint32 moveleft_eff = 8;
  inline bool has_moveleft_eff() const;
  inline void clear_moveleft_eff();
  static const int kMoveleftEffFieldNumber = 8;
  inline ::google::protobuf::uint32 moveleft_eff() const;
  inline void set_moveleft_eff(::google::protobuf::uint32 value);

  // optional uint32 moveleftstop_s = 9;
  inline bool has_moveleftstop_s() const;
  inline void clear_moveleftstop_s();
  static const int kMoveleftstopSFieldNumber = 9;
  inline ::google::protobuf::uint32 moveleftstop_s() const;
  inline void set_moveleftstop_s(::google::protobuf::uint32 value);

  // optional uint32 moveleftstop_e = 10;
  inline bool has_moveleftstop_e() const;
  inline void clear_moveleftstop_e();
  static const int kMoveleftstopEFieldNumber = 10;
  inline ::google::protobuf::uint32 moveleftstop_e() const;
  inline void set_moveleftstop_e(::google::protobuf::uint32 value);

  // optional uint32 moveleftstop_eff = 11;
  inline bool has_moveleftstop_eff() const;
  inline void clear_moveleftstop_eff();
  static const int kMoveleftstopEffFieldNumber = 11;
  inline ::google::protobuf::uint32 moveleftstop_eff() const;
  inline void set_moveleftstop_eff(::google::protobuf::uint32 value);

  // optional uint32 moveleftturn_s = 12;
  inline bool has_moveleftturn_s() const;
  inline void clear_moveleftturn_s();
  static const int kMoveleftturnSFieldNumber = 12;
  inline ::google::protobuf::uint32 moveleftturn_s() const;
  inline void set_moveleftturn_s(::google::protobuf::uint32 value);

  // optional uint32 moveleftturn_e = 13;
  inline bool has_moveleftturn_e() const;
  inline void clear_moveleftturn_e();
  static const int kMoveleftturnEFieldNumber = 13;
  inline ::google::protobuf::uint32 moveleftturn_e() const;
  inline void set_moveleftturn_e(::google::protobuf::uint32 value);

  // optional uint32 moveleftturn_eff = 14;
  inline bool has_moveleftturn_eff() const;
  inline void clear_moveleftturn_eff();
  static const int kMoveleftturnEffFieldNumber = 14;
  inline ::google::protobuf::uint32 moveleftturn_eff() const;
  inline void set_moveleftturn_eff(::google::protobuf::uint32 value);

  // optional uint32 moveright_s = 15;
  inline bool has_moveright_s() const;
  inline void clear_moveright_s();
  static const int kMoverightSFieldNumber = 15;
  inline ::google::protobuf::uint32 moveright_s() const;
  inline void set_moveright_s(::google::protobuf::uint32 value);

  // optional uint32 moveright_e = 16;
  inline bool has_moveright_e() const;
  inline void clear_moveright_e();
  static const int kMoverightEFieldNumber = 16;
  inline ::google::protobuf::uint32 moveright_e() const;
  inline void set_moveright_e(::google::protobuf::uint32 value);

  // optional uint32 moveright_eff = 17;
  inline bool has_moveright_eff() const;
  inline void clear_moveright_eff();
  static const int kMoverightEffFieldNumber = 17;
  inline ::google::protobuf::uint32 moveright_eff() const;
  inline void set_moveright_eff(::google::protobuf::uint32 value);

  // optional uint32 moverightstop_s = 18;
  inline bool has_moverightstop_s() const;
  inline void clear_moverightstop_s();
  static const int kMoverightstopSFieldNumber = 18;
  inline ::google::protobuf::uint32 moverightstop_s() const;
  inline void set_moverightstop_s(::google::protobuf::uint32 value);

  // optional uint32 moverightstop_e = 19;
  inline bool has_moverightstop_e() const;
  inline void clear_moverightstop_e();
  static const int kMoverightstopEFieldNumber = 19;
  inline ::google::protobuf::uint32 moverightstop_e() const;
  inline void set_moverightstop_e(::google::protobuf::uint32 value);

  // optional uint32 moverightstop_eff = 20;
  inline bool has_moverightstop_eff() const;
  inline void clear_moverightstop_eff();
  static const int kMoverightstopEffFieldNumber = 20;
  inline ::google::protobuf::uint32 moverightstop_eff() const;
  inline void set_moverightstop_eff(::google::protobuf::uint32 value);

  // optional uint32 moverightturn_s = 21;
  inline bool has_moverightturn_s() const;
  inline void clear_moverightturn_s();
  static const int kMoverightturnSFieldNumber = 21;
  inline ::google::protobuf::uint32 moverightturn_s() const;
  inline void set_moverightturn_s(::google::protobuf::uint32 value);

  // optional uint32 moverightturn_e = 22;
  inline bool has_moverightturn_e() const;
  inline void clear_moverightturn_e();
  static const int kMoverightturnEFieldNumber = 22;
  inline ::google::protobuf::uint32 moverightturn_e() const;
  inline void set_moverightturn_e(::google::protobuf::uint32 value);

  // optional uint32 moverightturn_eff = 23;
  inline bool has_moverightturn_eff() const;
  inline void clear_moverightturn_eff();
  static const int kMoverightturnEffFieldNumber = 23;
  inline ::google::protobuf::uint32 moverightturn_eff() const;
  inline void set_moverightturn_eff(::google::protobuf::uint32 value);

  // optional uint32 attack_s = 24;
  inline bool has_attack_s() const;
  inline void clear_attack_s();
  static const int kAttackSFieldNumber = 24;
  inline ::google::protobuf::uint32 attack_s() const;
  inline void set_attack_s(::google::protobuf::uint32 value);

  // optional uint32 attack_e = 25;
  inline bool has_attack_e() const;
  inline void clear_attack_e();
  static const int kAttackEFieldNumber = 25;
  inline ::google::protobuf::uint32 attack_e() const;
  inline void set_attack_e(::google::protobuf::uint32 value);

  // optional uint32 attack_eff = 26;
  inline bool has_attack_eff() const;
  inline void clear_attack_eff();
  static const int kAttackEffFieldNumber = 26;
  inline ::google::protobuf::uint32 attack_eff() const;
  inline void set_attack_eff(::google::protobuf::uint32 value);

  // optional uint32 skillnormal_s = 27;
  inline bool has_skillnormal_s() const;
  inline void clear_skillnormal_s();
  static const int kSkillnormalSFieldNumber = 27;
  inline ::google::protobuf::uint32 skillnormal_s() const;
  inline void set_skillnormal_s(::google::protobuf::uint32 value);

  // optional uint32 skillnormal_e = 28;
  inline bool has_skillnormal_e() const;
  inline void clear_skillnormal_e();
  static const int kSkillnormalEFieldNumber = 28;
  inline ::google::protobuf::uint32 skillnormal_e() const;
  inline void set_skillnormal_e(::google::protobuf::uint32 value);

  // optional uint32 skillnormal_eff = 29;
  inline bool has_skillnormal_eff() const;
  inline void clear_skillnormal_eff();
  static const int kSkillnormalEffFieldNumber = 29;
  inline ::google::protobuf::uint32 skillnormal_eff() const;
  inline void set_skillnormal_eff(::google::protobuf::uint32 value);

  // optional uint32 skillsuper_s = 30;
  inline bool has_skillsuper_s() const;
  inline void clear_skillsuper_s();
  static const int kSkillsuperSFieldNumber = 30;
  inline ::google::protobuf::uint32 skillsuper_s() const;
  inline void set_skillsuper_s(::google::protobuf::uint32 value);

  // optional uint32 skillsuper_e = 31;
  inline bool has_skillsuper_e() const;
  inline void clear_skillsuper_e();
  static const int kSkillsuperEFieldNumber = 31;
  inline ::google::protobuf::uint32 skillsuper_e() const;
  inline void set_skillsuper_e(::google::protobuf::uint32 value);

  // optional uint32 skillsuper_eff = 32;
  inline bool has_skillsuper_eff() const;
  inline void clear_skillsuper_eff();
  static const int kSkillsuperEffFieldNumber = 32;
  inline ::google::protobuf::uint32 skillsuper_eff() const;
  inline void set_skillsuper_eff(::google::protobuf::uint32 value);

  // optional uint32 skill25_s = 33;
  inline bool has_skill25_s() const;
  inline void clear_skill25_s();
  static const int kSkill25SFieldNumber = 33;
  inline ::google::protobuf::uint32 skill25_s() const;
  inline void set_skill25_s(::google::protobuf::uint32 value);

  // optional uint32 skill25_e = 34;
  inline bool has_skill25_e() const;
  inline void clear_skill25_e();
  static const int kSkill25EFieldNumber = 34;
  inline ::google::protobuf::uint32 skill25_e() const;
  inline void set_skill25_e(::google::protobuf::uint32 value);

  // optional uint32 skill25_eff = 35;
  inline bool has_skill25_eff() const;
  inline void clear_skill25_eff();
  static const int kSkill25EffFieldNumber = 35;
  inline ::google::protobuf::uint32 skill25_eff() const;
  inline void set_skill25_eff(::google::protobuf::uint32 value);

  // optional uint32 skill50_s = 36;
  inline bool has_skill50_s() const;
  inline void clear_skill50_s();
  static const int kSkill50SFieldNumber = 36;
  inline ::google::protobuf::uint32 skill50_s() const;
  inline void set_skill50_s(::google::protobuf::uint32 value);

  // optional uint32 skill50_e = 37;
  inline bool has_skill50_e() const;
  inline void clear_skill50_e();
  static const int kSkill50EFieldNumber = 37;
  inline ::google::protobuf::uint32 skill50_e() const;
  inline void set_skill50_e(::google::protobuf::uint32 value);

  // optional uint32 skill50_eff = 38;
  inline bool has_skill50_eff() const;
  inline void clear_skill50_eff();
  static const int kSkill50EffFieldNumber = 38;
  inline ::google::protobuf::uint32 skill50_eff() const;
  inline void set_skill50_eff(::google::protobuf::uint32 value);

  // optional uint32 skill75_s = 39;
  inline bool has_skill75_s() const;
  inline void clear_skill75_s();
  static const int kSkill75SFieldNumber = 39;
  inline ::google::protobuf::uint32 skill75_s() const;
  inline void set_skill75_s(::google::protobuf::uint32 value);

  // optional uint32 skill75_e = 40;
  inline bool has_skill75_e() const;
  inline void clear_skill75_e();
  static const int kSkill75EFieldNumber = 40;
  inline ::google::protobuf::uint32 skill75_e() const;
  inline void set_skill75_e(::google::protobuf::uint32 value);

  // optional uint32 skill75_eff = 41;
  inline bool has_skill75_eff() const;
  inline void clear_skill75_eff();
  static const int kSkill75EffFieldNumber = 41;
  inline ::google::protobuf::uint32 skill75_eff() const;
  inline void set_skill75_eff(::google::protobuf::uint32 value);

  // optional uint32 skill100_s = 42;
  inline bool has_skill100_s() const;
  inline void clear_skill100_s();
  static const int kSkill100SFieldNumber = 42;
  inline ::google::protobuf::uint32 skill100_s() const;
  inline void set_skill100_s(::google::protobuf::uint32 value);

  // optional uint32 skill100_e = 43;
  inline bool has_skill100_e() const;
  inline void clear_skill100_e();
  static const int kSkill100EFieldNumber = 43;
  inline ::google::protobuf::uint32 skill100_e() const;
  inline void set_skill100_e(::google::protobuf::uint32 value);

  // optional uint32 skill100_eff = 44;
  inline bool has_skill100_eff() const;
  inline void clear_skill100_eff();
  static const int kSkill100EffFieldNumber = 44;
  inline ::google::protobuf::uint32 skill100_eff() const;
  inline void set_skill100_eff(::google::protobuf::uint32 value);

  // optional uint32 dead_s = 45;
  inline bool has_dead_s() const;
  inline void clear_dead_s();
  static const int kDeadSFieldNumber = 45;
  inline ::google::protobuf::uint32 dead_s() const;
  inline void set_dead_s(::google::protobuf::uint32 value);

  // optional uint32 dead_e = 46;
  inline bool has_dead_e() const;
  inline void clear_dead_e();
  static const int kDeadEFieldNumber = 46;
  inline ::google::protobuf::uint32 dead_e() const;
  inline void set_dead_e(::google::protobuf::uint32 value);

  // optional uint32 dead_eff = 47;
  inline bool has_dead_eff() const;
  inline void clear_dead_eff();
  static const int kDeadEffFieldNumber = 47;
  inline ::google::protobuf::uint32 dead_eff() const;
  inline void set_dead_eff(::google::protobuf::uint32 value);

  // optional uint32 turnin_s = 48;
  inline bool has_turnin_s() const;
  inline void clear_turnin_s();
  static const int kTurninSFieldNumber = 48;
  inline ::google::protobuf::uint32 turnin_s() const;
  inline void set_turnin_s(::google::protobuf::uint32 value);

  // optional uint32 turnin_e = 49;
  inline bool has_turnin_e() const;
  inline void clear_turnin_e();
  static const int kTurninEFieldNumber = 49;
  inline ::google::protobuf::uint32 turnin_e() const;
  inline void set_turnin_e(::google::protobuf::uint32 value);

  // optional uint32 turnin_eff = 50;
  inline bool has_turnin_eff() const;
  inline void clear_turnin_eff();
  static const int kTurninEffFieldNumber = 50;
  inline ::google::protobuf::uint32 turnin_eff() const;
  inline void set_turnin_eff(::google::protobuf::uint32 value);

  // optional float turnin_scale = 51;
  inline bool has_turnin_scale() const;
  inline void clear_turnin_scale();
  static const int kTurninScaleFieldNumber = 51;
  inline float turnin_scale() const;
  inline void set_turnin_scale(float value);

  // optional uint32 main_s = 52;
  inline bool has_main_s() const;
  inline void clear_main_s();
  static const int kMainSFieldNumber = 52;
  inline ::google::protobuf::uint32 main_s() const;
  inline void set_main_s(::google::protobuf::uint32 value);

  // optional uint32 main_e = 53;
  inline bool has_main_e() const;
  inline void clear_main_e();
  static const int kMainEFieldNumber = 53;
  inline ::google::protobuf::uint32 main_e() const;
  inline void set_main_e(::google::protobuf::uint32 value);

  // optional uint32 main_eff = 54;
  inline bool has_main_eff() const;
  inline void clear_main_eff();
  static const int kMainEffFieldNumber = 54;
  inline ::google::protobuf::uint32 main_eff() const;
  inline void set_main_eff(::google::protobuf::uint32 value);

  // optional uint32 main2_s = 55;
  inline bool has_main2_s() const;
  inline void clear_main2_s();
  static const int kMain2SFieldNumber = 55;
  inline ::google::protobuf::uint32 main2_s() const;
  inline void set_main2_s(::google::protobuf::uint32 value);

  // optional uint32 main2_e = 56;
  inline bool has_main2_e() const;
  inline void clear_main2_e();
  static const int kMain2EFieldNumber = 56;
  inline ::google::protobuf::uint32 main2_e() const;
  inline void set_main2_e(::google::protobuf::uint32 value);

  // optional uint32 main2_eff = 57;
  inline bool has_main2_eff() const;
  inline void clear_main2_eff();
  static const int kMain2EffFieldNumber = 57;
  inline ::google::protobuf::uint32 main2_eff() const;
  inline void set_main2_eff(::google::protobuf::uint32 value);

  // optional float model_scale = 58;
  inline bool has_model_scale() const;
  inline void clear_model_scale();
  static const int kModelScaleFieldNumber = 58;
  inline float model_scale() const;
  inline void set_model_scale(float value);

  // optional uint32 monster_left_s = 59;
  inline bool has_monster_left_s() const;
  inline void clear_monster_left_s();
  static const int kMonsterLeftSFieldNumber = 59;
  inline ::google::protobuf::uint32 monster_left_s() const;
  inline void set_monster_left_s(::google::protobuf::uint32 value);

  // optional uint32 monster_left_e = 60;
  inline bool has_monster_left_e() const;
  inline void clear_monster_left_e();
  static const int kMonsterLeftEFieldNumber = 60;
  inline ::google::protobuf::uint32 monster_left_e() const;
  inline void set_monster_left_e(::google::protobuf::uint32 value);

  // optional uint32 monster_right_s = 61;
  inline bool has_monster_right_s() const;
  inline void clear_monster_right_s();
  static const int kMonsterRightSFieldNumber = 61;
  inline ::google::protobuf::uint32 monster_right_s() const;
  inline void set_monster_right_s(::google::protobuf::uint32 value);

  // optional uint32 monster_right_e = 62;
  inline bool has_monster_right_e() const;
  inline void clear_monster_right_e();
  static const int kMonsterRightEFieldNumber = 62;
  inline ::google::protobuf::uint32 monster_right_e() const;
  inline void set_monster_right_e(::google::protobuf::uint32 value);

  // optional uint32 boss_turnin_s = 63;
  inline bool has_boss_turnin_s() const;
  inline void clear_boss_turnin_s();
  static const int kBossTurninSFieldNumber = 63;
  inline ::google::protobuf::uint32 boss_turnin_s() const;
  inline void set_boss_turnin_s(::google::protobuf::uint32 value);

  // optional uint32 boss_turnin_e = 64;
  inline bool has_boss_turnin_e() const;
  inline void clear_boss_turnin_e();
  static const int kBossTurninEFieldNumber = 64;
  inline ::google::protobuf::uint32 boss_turnin_e() const;
  inline void set_boss_turnin_e(::google::protobuf::uint32 value);

  // optional uint32 monster_skill1_s = 65;
  inline bool has_monster_skill1_s() const;
  inline void clear_monster_skill1_s();
  static const int kMonsterSkill1SFieldNumber = 65;
  inline ::google::protobuf::uint32 monster_skill1_s() const;
  inline void set_monster_skill1_s(::google::protobuf::uint32 value);

  // optional uint32 monster_skill1_e = 66;
  inline bool has_monster_skill1_e() const;
  inline void clear_monster_skill1_e();
  static const int kMonsterSkill1EFieldNumber = 66;
  inline ::google::protobuf::uint32 monster_skill1_e() const;
  inline void set_monster_skill1_e(::google::protobuf::uint32 value);

  // optional uint32 monster_skill2_s = 67;
  inline bool has_monster_skill2_s() const;
  inline void clear_monster_skill2_s();
  static const int kMonsterSkill2SFieldNumber = 67;
  inline ::google::protobuf::uint32 monster_skill2_s() const;
  inline void set_monster_skill2_s(::google::protobuf::uint32 value);

  // optional uint32 monster_skill2_e = 68;
  inline bool has_monster_skill2_e() const;
  inline void clear_monster_skill2_e();
  static const int kMonsterSkill2EFieldNumber = 68;
  inline ::google::protobuf::uint32 monster_skill2_e() const;
  inline void set_monster_skill2_e(::google::protobuf::uint32 value);

  // optional uint32 monster_skill3_s = 69;
  inline bool has_monster_skill3_s() const;
  inline void clear_monster_skill3_s();
  static const int kMonsterSkill3SFieldNumber = 69;
  inline ::google::protobuf::uint32 monster_skill3_s() const;
  inline void set_monster_skill3_s(::google::protobuf::uint32 value);

  // optional uint32 monster_skill3_e = 70;
  inline bool has_monster_skill3_e() const;
  inline void clear_monster_skill3_e();
  static const int kMonsterSkill3EFieldNumber = 70;
  inline ::google::protobuf::uint32 monster_skill3_e() const;
  inline void set_monster_skill3_e(::google::protobuf::uint32 value);

  // optional uint32 monster_skill4_s = 96;
  inline bool has_monster_skill4_s() const;
  inline void clear_monster_skill4_s();
  static const int kMonsterSkill4SFieldNumber = 96;
  inline ::google::protobuf::uint32 monster_skill4_s() const;
  inline void set_monster_skill4_s(::google::protobuf::uint32 value);

  // optional uint32 monster_skill4_e = 97;
  inline bool has_monster_skill4_e() const;
  inline void clear_monster_skill4_e();
  static const int kMonsterSkill4EFieldNumber = 97;
  inline ::google::protobuf::uint32 monster_skill4_e() const;
  inline void set_monster_skill4_e(::google::protobuf::uint32 value);

  // optional uint32 actor_eff = 71;
  inline bool has_actor_eff() const;
  inline void clear_actor_eff();
  static const int kActorEffFieldNumber = 71;
  inline ::google::protobuf::uint32 actor_eff() const;
  inline void set_actor_eff(::google::protobuf::uint32 value);

  // optional uint32 levelup_s = 72;
  inline bool has_levelup_s() const;
  inline void clear_levelup_s();
  static const int kLevelupSFieldNumber = 72;
  inline ::google::protobuf::uint32 levelup_s() const;
  inline void set_levelup_s(::google::protobuf::uint32 value);

  // optional uint32 levelup_e = 73;
  inline bool has_levelup_e() const;
  inline void clear_levelup_e();
  static const int kLevelupEFieldNumber = 73;
  inline ::google::protobuf::uint32 levelup_e() const;
  inline void set_levelup_e(::google::protobuf::uint32 value);

  // optional uint32 levelup_eff = 74;
  inline bool has_levelup_eff() const;
  inline void clear_levelup_eff();
  static const int kLevelupEffFieldNumber = 74;
  inline ::google::protobuf::uint32 levelup_eff() const;
  inline void set_levelup_eff(::google::protobuf::uint32 value);

  // optional uint32 ahold_s = 75;
  inline bool has_ahold_s() const;
  inline void clear_ahold_s();
  static const int kAholdSFieldNumber = 75;
  inline ::google::protobuf::uint32 ahold_s() const;
  inline void set_ahold_s(::google::protobuf::uint32 value);

  // optional uint32 ahold_e = 76;
  inline bool has_ahold_e() const;
  inline void clear_ahold_e();
  static const int kAholdEFieldNumber = 76;
  inline ::google::protobuf::uint32 ahold_e() const;
  inline void set_ahold_e(::google::protobuf::uint32 value);

  // optional uint32 ahold_eff = 77;
  inline bool has_ahold_eff() const;
  inline void clear_ahold_eff();
  static const int kAholdEffFieldNumber = 77;
  inline ::google::protobuf::uint32 ahold_eff() const;
  inline void set_ahold_eff(::google::protobuf::uint32 value);

  // optional uint32 amoveleft_s = 78;
  inline bool has_amoveleft_s() const;
  inline void clear_amoveleft_s();
  static const int kAmoveleftSFieldNumber = 78;
  inline ::google::protobuf::uint32 amoveleft_s() const;
  inline void set_amoveleft_s(::google::protobuf::uint32 value);

  // optional uint32 amoveleft_e = 79;
  inline bool has_amoveleft_e() const;
  inline void clear_amoveleft_e();
  static const int kAmoveleftEFieldNumber = 79;
  inline ::google::protobuf::uint32 amoveleft_e() const;
  inline void set_amoveleft_e(::google::protobuf::uint32 value);

  // optional uint32 amoveleft_eff = 80;
  inline bool has_amoveleft_eff() const;
  inline void clear_amoveleft_eff();
  static const int kAmoveleftEffFieldNumber = 80;
  inline ::google::protobuf::uint32 amoveleft_eff() const;
  inline void set_amoveleft_eff(::google::protobuf::uint32 value);

  // optional uint32 amoveleftstop_s = 81;
  inline bool has_amoveleftstop_s() const;
  inline void clear_amoveleftstop_s();
  static const int kAmoveleftstopSFieldNumber = 81;
  inline ::google::protobuf::uint32 amoveleftstop_s() const;
  inline void set_amoveleftstop_s(::google::protobuf::uint32 value);

  // optional uint32 amoveleftstop_e = 82;
  inline bool has_amoveleftstop_e() const;
  inline void clear_amoveleftstop_e();
  static const int kAmoveleftstopEFieldNumber = 82;
  inline ::google::protobuf::uint32 amoveleftstop_e() const;
  inline void set_amoveleftstop_e(::google::protobuf::uint32 value);

  // optional uint32 amoveleftstop_eff = 83;
  inline bool has_amoveleftstop_eff() const;
  inline void clear_amoveleftstop_eff();
  static const int kAmoveleftstopEffFieldNumber = 83;
  inline ::google::protobuf::uint32 amoveleftstop_eff() const;
  inline void set_amoveleftstop_eff(::google::protobuf::uint32 value);

  // optional uint32 amoveleftturn_s = 84;
  inline bool has_amoveleftturn_s() const;
  inline void clear_amoveleftturn_s();
  static const int kAmoveleftturnSFieldNumber = 84;
  inline ::google::protobuf::uint32 amoveleftturn_s() const;
  inline void set_amoveleftturn_s(::google::protobuf::uint32 value);

  // optional uint32 amoveleftturn_e = 85;
  inline bool has_amoveleftturn_e() const;
  inline void clear_amoveleftturn_e();
  static const int kAmoveleftturnEFieldNumber = 85;
  inline ::google::protobuf::uint32 amoveleftturn_e() const;
  inline void set_amoveleftturn_e(::google::protobuf::uint32 value);

  // optional uint32 amoveleftturn_eff = 86;
  inline bool has_amoveleftturn_eff() const;
  inline void clear_amoveleftturn_eff();
  static const int kAmoveleftturnEffFieldNumber = 86;
  inline ::google::protobuf::uint32 amoveleftturn_eff() const;
  inline void set_amoveleftturn_eff(::google::protobuf::uint32 value);

  // optional uint32 amoveright_s = 87;
  inline bool has_amoveright_s() const;
  inline void clear_amoveright_s();
  static const int kAmoverightSFieldNumber = 87;
  inline ::google::protobuf::uint32 amoveright_s() const;
  inline void set_amoveright_s(::google::protobuf::uint32 value);

  // optional uint32 amoveright_e = 88;
  inline bool has_amoveright_e() const;
  inline void clear_amoveright_e();
  static const int kAmoverightEFieldNumber = 88;
  inline ::google::protobuf::uint32 amoveright_e() const;
  inline void set_amoveright_e(::google::protobuf::uint32 value);

  // optional uint32 amoveright_eff = 89;
  inline bool has_amoveright_eff() const;
  inline void clear_amoveright_eff();
  static const int kAmoverightEffFieldNumber = 89;
  inline ::google::protobuf::uint32 amoveright_eff() const;
  inline void set_amoveright_eff(::google::protobuf::uint32 value);

  // optional uint32 amoverightstop_s = 90;
  inline bool has_amoverightstop_s() const;
  inline void clear_amoverightstop_s();
  static const int kAmoverightstopSFieldNumber = 90;
  inline ::google::protobuf::uint32 amoverightstop_s() const;
  inline void set_amoverightstop_s(::google::protobuf::uint32 value);

  // optional uint32 amoverightstop_e = 91;
  inline bool has_amoverightstop_e() const;
  inline void clear_amoverightstop_e();
  static const int kAmoverightstopEFieldNumber = 91;
  inline ::google::protobuf::uint32 amoverightstop_e() const;
  inline void set_amoverightstop_e(::google::protobuf::uint32 value);

  // optional uint32 amoverightstop_eff = 92;
  inline bool has_amoverightstop_eff() const;
  inline void clear_amoverightstop_eff();
  static const int kAmoverightstopEffFieldNumber = 92;
  inline ::google::protobuf::uint32 amoverightstop_eff() const;
  inline void set_amoverightstop_eff(::google::protobuf::uint32 value);

  // optional uint32 amoverightturn_s = 93;
  inline bool has_amoverightturn_s() const;
  inline void clear_amoverightturn_s();
  static const int kAmoverightturnSFieldNumber = 93;
  inline ::google::protobuf::uint32 amoverightturn_s() const;
  inline void set_amoverightturn_s(::google::protobuf::uint32 value);

  // optional uint32 amoverightturn_e = 94;
  inline bool has_amoverightturn_e() const;
  inline void clear_amoverightturn_e();
  static const int kAmoverightturnEFieldNumber = 94;
  inline ::google::protobuf::uint32 amoverightturn_e() const;
  inline void set_amoverightturn_e(::google::protobuf::uint32 value);

  // optional uint32 amoverightturn_eff = 95;
  inline bool has_amoverightturn_eff() const;
  inline void clear_amoverightturn_eff();
  static const int kAmoverightturnEffFieldNumber = 95;
  inline ::google::protobuf::uint32 amoverightturn_eff() const;
  inline void set_amoverightturn_eff(::google::protobuf::uint32 value);

  // optional uint32 turnout_s = 98;
  inline bool has_turnout_s() const;
  inline void clear_turnout_s();
  static const int kTurnoutSFieldNumber = 98;
  inline ::google::protobuf::uint32 turnout_s() const;
  inline void set_turnout_s(::google::protobuf::uint32 value);

  // optional uint32 turnout_e = 99;
  inline bool has_turnout_e() const;
  inline void clear_turnout_e();
  static const int kTurnoutEFieldNumber = 99;
  inline ::google::protobuf::uint32 turnout_e() const;
  inline void set_turnout_e(::google::protobuf::uint32 value);

  // optional uint32 turnout_eff = 100;
  inline bool has_turnout_eff() const;
  inline void clear_turnout_eff();
  static const int kTurnoutEffFieldNumber = 100;
  inline ::google::protobuf::uint32 turnout_eff() const;
  inline void set_turnout_eff(::google::protobuf::uint32 value);

  // optional float turnout_scale = 101;
  inline bool has_turnout_scale() const;
  inline void clear_turnout_scale();
  static const int kTurnoutScaleFieldNumber = 101;
  inline float turnout_scale() const;
  inline void set_turnout_scale(float value);

  // optional float turnout_delay = 102;
  inline bool has_turnout_delay() const;
  inline void clear_turnout_delay();
  static const int kTurnoutDelayFieldNumber = 102;
  inline float turnout_delay() const;
  inline void set_turnout_delay(float value);

  // optional uint32 attack2_s = 103;
  inline bool has_attack2_s() const;
  inline void clear_attack2_s();
  static const int kAttack2SFieldNumber = 103;
  inline ::google::protobuf::uint32 attack2_s() const;
  inline void set_attack2_s(::google::protobuf::uint32 value);

  // optional uint32 attack2_e = 104;
  inline bool has_attack2_e() const;
  inline void clear_attack2_e();
  static const int kAttack2EFieldNumber = 104;
  inline ::google::protobuf::uint32 attack2_e() const;
  inline void set_attack2_e(::google::protobuf::uint32 value);

  // optional uint32 victory_s = 105;
  inline bool has_victory_s() const;
  inline void clear_victory_s();
  static const int kVictorySFieldNumber = 105;
  inline ::google::protobuf::uint32 victory_s() const;
  inline void set_victory_s(::google::protobuf::uint32 value);

  // optional uint32 victory_e = 106;
  inline bool has_victory_e() const;
  inline void clear_victory_e();
  static const int kVictoryEFieldNumber = 106;
  inline ::google::protobuf::uint32 victory_e() const;
  inline void set_victory_e(::google::protobuf::uint32 value);

  // optional uint32 victory2_s = 107;
  inline bool has_victory2_s() const;
  inline void clear_victory2_s();
  static const int kVictory2SFieldNumber = 107;
  inline ::google::protobuf::uint32 victory2_s() const;
  inline void set_victory2_s(::google::protobuf::uint32 value);

  // optional uint32 victory2_e = 108;
  inline bool has_victory2_e() const;
  inline void clear_victory2_e();
  static const int kVictory2EFieldNumber = 108;
  inline ::google::protobuf::uint32 victory2_e() const;
  inline void set_victory2_e(::google::protobuf::uint32 value);

  // optional float victory_scale = 109;
  inline bool has_victory_scale() const;
  inline void clear_victory_scale();
  static const int kVictoryScaleFieldNumber = 109;
  inline float victory_scale() const;
  inline void set_victory_scale(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sModelAction)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_resources();
  inline void clear_has_resources();
  inline void set_has_hold_s();
  inline void clear_has_hold_s();
  inline void set_has_hold_e();
  inline void clear_has_hold_e();
  inline void set_has_hold_eff();
  inline void clear_has_hold_eff();
  inline void set_has_moveleft_s();
  inline void clear_has_moveleft_s();
  inline void set_has_moveleft_e();
  inline void clear_has_moveleft_e();
  inline void set_has_moveleft_eff();
  inline void clear_has_moveleft_eff();
  inline void set_has_moveleftstop_s();
  inline void clear_has_moveleftstop_s();
  inline void set_has_moveleftstop_e();
  inline void clear_has_moveleftstop_e();
  inline void set_has_moveleftstop_eff();
  inline void clear_has_moveleftstop_eff();
  inline void set_has_moveleftturn_s();
  inline void clear_has_moveleftturn_s();
  inline void set_has_moveleftturn_e();
  inline void clear_has_moveleftturn_e();
  inline void set_has_moveleftturn_eff();
  inline void clear_has_moveleftturn_eff();
  inline void set_has_moveright_s();
  inline void clear_has_moveright_s();
  inline void set_has_moveright_e();
  inline void clear_has_moveright_e();
  inline void set_has_moveright_eff();
  inline void clear_has_moveright_eff();
  inline void set_has_moverightstop_s();
  inline void clear_has_moverightstop_s();
  inline void set_has_moverightstop_e();
  inline void clear_has_moverightstop_e();
  inline void set_has_moverightstop_eff();
  inline void clear_has_moverightstop_eff();
  inline void set_has_moverightturn_s();
  inline void clear_has_moverightturn_s();
  inline void set_has_moverightturn_e();
  inline void clear_has_moverightturn_e();
  inline void set_has_moverightturn_eff();
  inline void clear_has_moverightturn_eff();
  inline void set_has_attack_s();
  inline void clear_has_attack_s();
  inline void set_has_attack_e();
  inline void clear_has_attack_e();
  inline void set_has_attack_eff();
  inline void clear_has_attack_eff();
  inline void set_has_skillnormal_s();
  inline void clear_has_skillnormal_s();
  inline void set_has_skillnormal_e();
  inline void clear_has_skillnormal_e();
  inline void set_has_skillnormal_eff();
  inline void clear_has_skillnormal_eff();
  inline void set_has_skillsuper_s();
  inline void clear_has_skillsuper_s();
  inline void set_has_skillsuper_e();
  inline void clear_has_skillsuper_e();
  inline void set_has_skillsuper_eff();
  inline void clear_has_skillsuper_eff();
  inline void set_has_skill25_s();
  inline void clear_has_skill25_s();
  inline void set_has_skill25_e();
  inline void clear_has_skill25_e();
  inline void set_has_skill25_eff();
  inline void clear_has_skill25_eff();
  inline void set_has_skill50_s();
  inline void clear_has_skill50_s();
  inline void set_has_skill50_e();
  inline void clear_has_skill50_e();
  inline void set_has_skill50_eff();
  inline void clear_has_skill50_eff();
  inline void set_has_skill75_s();
  inline void clear_has_skill75_s();
  inline void set_has_skill75_e();
  inline void clear_has_skill75_e();
  inline void set_has_skill75_eff();
  inline void clear_has_skill75_eff();
  inline void set_has_skill100_s();
  inline void clear_has_skill100_s();
  inline void set_has_skill100_e();
  inline void clear_has_skill100_e();
  inline void set_has_skill100_eff();
  inline void clear_has_skill100_eff();
  inline void set_has_dead_s();
  inline void clear_has_dead_s();
  inline void set_has_dead_e();
  inline void clear_has_dead_e();
  inline void set_has_dead_eff();
  inline void clear_has_dead_eff();
  inline void set_has_turnin_s();
  inline void clear_has_turnin_s();
  inline void set_has_turnin_e();
  inline void clear_has_turnin_e();
  inline void set_has_turnin_eff();
  inline void clear_has_turnin_eff();
  inline void set_has_turnin_scale();
  inline void clear_has_turnin_scale();
  inline void set_has_main_s();
  inline void clear_has_main_s();
  inline void set_has_main_e();
  inline void clear_has_main_e();
  inline void set_has_main_eff();
  inline void clear_has_main_eff();
  inline void set_has_main2_s();
  inline void clear_has_main2_s();
  inline void set_has_main2_e();
  inline void clear_has_main2_e();
  inline void set_has_main2_eff();
  inline void clear_has_main2_eff();
  inline void set_has_model_scale();
  inline void clear_has_model_scale();
  inline void set_has_monster_left_s();
  inline void clear_has_monster_left_s();
  inline void set_has_monster_left_e();
  inline void clear_has_monster_left_e();
  inline void set_has_monster_right_s();
  inline void clear_has_monster_right_s();
  inline void set_has_monster_right_e();
  inline void clear_has_monster_right_e();
  inline void set_has_boss_turnin_s();
  inline void clear_has_boss_turnin_s();
  inline void set_has_boss_turnin_e();
  inline void clear_has_boss_turnin_e();
  inline void set_has_monster_skill1_s();
  inline void clear_has_monster_skill1_s();
  inline void set_has_monster_skill1_e();
  inline void clear_has_monster_skill1_e();
  inline void set_has_monster_skill2_s();
  inline void clear_has_monster_skill2_s();
  inline void set_has_monster_skill2_e();
  inline void clear_has_monster_skill2_e();
  inline void set_has_monster_skill3_s();
  inline void clear_has_monster_skill3_s();
  inline void set_has_monster_skill3_e();
  inline void clear_has_monster_skill3_e();
  inline void set_has_monster_skill4_s();
  inline void clear_has_monster_skill4_s();
  inline void set_has_monster_skill4_e();
  inline void clear_has_monster_skill4_e();
  inline void set_has_actor_eff();
  inline void clear_has_actor_eff();
  inline void set_has_levelup_s();
  inline void clear_has_levelup_s();
  inline void set_has_levelup_e();
  inline void clear_has_levelup_e();
  inline void set_has_levelup_eff();
  inline void clear_has_levelup_eff();
  inline void set_has_ahold_s();
  inline void clear_has_ahold_s();
  inline void set_has_ahold_e();
  inline void clear_has_ahold_e();
  inline void set_has_ahold_eff();
  inline void clear_has_ahold_eff();
  inline void set_has_amoveleft_s();
  inline void clear_has_amoveleft_s();
  inline void set_has_amoveleft_e();
  inline void clear_has_amoveleft_e();
  inline void set_has_amoveleft_eff();
  inline void clear_has_amoveleft_eff();
  inline void set_has_amoveleftstop_s();
  inline void clear_has_amoveleftstop_s();
  inline void set_has_amoveleftstop_e();
  inline void clear_has_amoveleftstop_e();
  inline void set_has_amoveleftstop_eff();
  inline void clear_has_amoveleftstop_eff();
  inline void set_has_amoveleftturn_s();
  inline void clear_has_amoveleftturn_s();
  inline void set_has_amoveleftturn_e();
  inline void clear_has_amoveleftturn_e();
  inline void set_has_amoveleftturn_eff();
  inline void clear_has_amoveleftturn_eff();
  inline void set_has_amoveright_s();
  inline void clear_has_amoveright_s();
  inline void set_has_amoveright_e();
  inline void clear_has_amoveright_e();
  inline void set_has_amoveright_eff();
  inline void clear_has_amoveright_eff();
  inline void set_has_amoverightstop_s();
  inline void clear_has_amoverightstop_s();
  inline void set_has_amoverightstop_e();
  inline void clear_has_amoverightstop_e();
  inline void set_has_amoverightstop_eff();
  inline void clear_has_amoverightstop_eff();
  inline void set_has_amoverightturn_s();
  inline void clear_has_amoverightturn_s();
  inline void set_has_amoverightturn_e();
  inline void clear_has_amoverightturn_e();
  inline void set_has_amoverightturn_eff();
  inline void clear_has_amoverightturn_eff();
  inline void set_has_turnout_s();
  inline void clear_has_turnout_s();
  inline void set_has_turnout_e();
  inline void clear_has_turnout_e();
  inline void set_has_turnout_eff();
  inline void clear_has_turnout_eff();
  inline void set_has_turnout_scale();
  inline void clear_has_turnout_scale();
  inline void set_has_turnout_delay();
  inline void clear_has_turnout_delay();
  inline void set_has_attack2_s();
  inline void clear_has_attack2_s();
  inline void set_has_attack2_e();
  inline void clear_has_attack2_e();
  inline void set_has_victory_s();
  inline void clear_has_victory_s();
  inline void set_has_victory_e();
  inline void clear_has_victory_e();
  inline void set_has_victory2_s();
  inline void clear_has_victory2_s();
  inline void set_has_victory2_e();
  inline void clear_has_victory2_e();
  inline void set_has_victory_scale();
  inline void clear_has_victory_scale();

  ::std::string* resources_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 hold_s_;
  ::google::protobuf::uint32 hold_e_;
  ::google::protobuf::uint32 hold_eff_;
  ::google::protobuf::uint32 moveleft_s_;
  ::google::protobuf::uint32 moveleft_e_;
  ::google::protobuf::uint32 moveleft_eff_;
  ::google::protobuf::uint32 moveleftstop_s_;
  ::google::protobuf::uint32 moveleftstop_e_;
  ::google::protobuf::uint32 moveleftstop_eff_;
  ::google::protobuf::uint32 moveleftturn_s_;
  ::google::protobuf::uint32 moveleftturn_e_;
  ::google::protobuf::uint32 moveleftturn_eff_;
  ::google::protobuf::uint32 moveright_s_;
  ::google::protobuf::uint32 moveright_e_;
  ::google::protobuf::uint32 moveright_eff_;
  ::google::protobuf::uint32 moverightstop_s_;
  ::google::protobuf::uint32 moverightstop_e_;
  ::google::protobuf::uint32 moverightstop_eff_;
  ::google::protobuf::uint32 moverightturn_s_;
  ::google::protobuf::uint32 moverightturn_e_;
  ::google::protobuf::uint32 moverightturn_eff_;
  ::google::protobuf::uint32 attack_s_;
  ::google::protobuf::uint32 attack_e_;
  ::google::protobuf::uint32 attack_eff_;
  ::google::protobuf::uint32 skillnormal_s_;
  ::google::protobuf::uint32 skillnormal_e_;
  ::google::protobuf::uint32 skillnormal_eff_;
  ::google::protobuf::uint32 skillsuper_s_;
  ::google::protobuf::uint32 skillsuper_e_;
  ::google::protobuf::uint32 skillsuper_eff_;
  ::google::protobuf::uint32 skill25_s_;
  ::google::protobuf::uint32 skill25_e_;
  ::google::protobuf::uint32 skill25_eff_;
  ::google::protobuf::uint32 skill50_s_;
  ::google::protobuf::uint32 skill50_e_;
  ::google::protobuf::uint32 skill50_eff_;
  ::google::protobuf::uint32 skill75_s_;
  ::google::protobuf::uint32 skill75_e_;
  ::google::protobuf::uint32 skill75_eff_;
  ::google::protobuf::uint32 skill100_s_;
  ::google::protobuf::uint32 skill100_e_;
  ::google::protobuf::uint32 skill100_eff_;
  ::google::protobuf::uint32 dead_s_;
  ::google::protobuf::uint32 dead_e_;
  ::google::protobuf::uint32 dead_eff_;
  ::google::protobuf::uint32 turnin_s_;
  ::google::protobuf::uint32 turnin_e_;
  ::google::protobuf::uint32 turnin_eff_;
  float turnin_scale_;
  ::google::protobuf::uint32 main_s_;
  ::google::protobuf::uint32 main_e_;
  ::google::protobuf::uint32 main_eff_;
  ::google::protobuf::uint32 main2_s_;
  ::google::protobuf::uint32 main2_e_;
  ::google::protobuf::uint32 main2_eff_;
  float model_scale_;
  ::google::protobuf::uint32 monster_left_s_;
  ::google::protobuf::uint32 monster_left_e_;
  ::google::protobuf::uint32 monster_right_s_;
  ::google::protobuf::uint32 monster_right_e_;
  ::google::protobuf::uint32 boss_turnin_s_;
  ::google::protobuf::uint32 boss_turnin_e_;
  ::google::protobuf::uint32 monster_skill1_s_;
  ::google::protobuf::uint32 monster_skill1_e_;
  ::google::protobuf::uint32 monster_skill2_s_;
  ::google::protobuf::uint32 monster_skill2_e_;
  ::google::protobuf::uint32 monster_skill3_s_;
  ::google::protobuf::uint32 monster_skill3_e_;
  ::google::protobuf::uint32 monster_skill4_s_;
  ::google::protobuf::uint32 monster_skill4_e_;
  ::google::protobuf::uint32 actor_eff_;
  ::google::protobuf::uint32 levelup_s_;
  ::google::protobuf::uint32 levelup_e_;
  ::google::protobuf::uint32 levelup_eff_;
  ::google::protobuf::uint32 ahold_s_;
  ::google::protobuf::uint32 ahold_e_;
  ::google::protobuf::uint32 ahold_eff_;
  ::google::protobuf::uint32 amoveleft_s_;
  ::google::protobuf::uint32 amoveleft_e_;
  ::google::protobuf::uint32 amoveleft_eff_;
  ::google::protobuf::uint32 amoveleftstop_s_;
  ::google::protobuf::uint32 amoveleftstop_e_;
  ::google::protobuf::uint32 amoveleftstop_eff_;
  ::google::protobuf::uint32 amoveleftturn_s_;
  ::google::protobuf::uint32 amoveleftturn_e_;
  ::google::protobuf::uint32 amoveleftturn_eff_;
  ::google::protobuf::uint32 amoveright_s_;
  ::google::protobuf::uint32 amoveright_e_;
  ::google::protobuf::uint32 amoveright_eff_;
  ::google::protobuf::uint32 amoverightstop_s_;
  ::google::protobuf::uint32 amoverightstop_e_;
  ::google::protobuf::uint32 amoverightstop_eff_;
  ::google::protobuf::uint32 amoverightturn_s_;
  ::google::protobuf::uint32 amoverightturn_e_;
  ::google::protobuf::uint32 amoverightturn_eff_;
  ::google::protobuf::uint32 turnout_s_;
  ::google::protobuf::uint32 turnout_e_;
  ::google::protobuf::uint32 turnout_eff_;
  float turnout_scale_;
  float turnout_delay_;
  ::google::protobuf::uint32 attack2_s_;
  ::google::protobuf::uint32 attack2_e_;
  ::google::protobuf::uint32 victory_s_;
  ::google::protobuf::uint32 victory_e_;
  ::google::protobuf::uint32 victory2_s_;
  ::google::protobuf::uint32 victory2_e_;
  float victory_scale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(109 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sModelAction* default_instance_;
};
// -------------------------------------------------------------------

class sStageLine : public ::google::protobuf::MessageLite {
 public:
  sStageLine();
  virtual ~sStageLine();

  sStageLine(const sStageLine& from);

  inline sStageLine& operator=(const sStageLine& from) {
    CopyFrom(from);
    return *this;
  }

  static const sStageLine& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sStageLine* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sStageLine* other);

  // implements Message ----------------------------------------------

  sStageLine* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sStageLine& from);
  void MergeFrom(const sStageLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stageid = 1;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageidFieldNumber = 1;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // optional float posx = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 2;
  inline float posx() const;
  inline void set_posx(float value);

  // optional float posy = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 3;
  inline float posy() const;
  inline void set_posy(float value);

  // optional uint32 flipx = 4;
  inline bool has_flipx() const;
  inline void clear_flipx();
  static const int kFlipxFieldNumber = 4;
  inline ::google::protobuf::uint32 flipx() const;
  inline void set_flipx(::google::protobuf::uint32 value);

  // optional uint32 flipy = 5;
  inline bool has_flipy() const;
  inline void clear_flipy();
  static const int kFlipyFieldNumber = 5;
  inline ::google::protobuf::uint32 flipy() const;
  inline void set_flipy(::google::protobuf::uint32 value);

  // optional float rotate = 6;
  inline bool has_rotate() const;
  inline void clear_rotate();
  static const int kRotateFieldNumber = 6;
  inline float rotate() const;
  inline void set_rotate(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sStageLine)
 private:
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_flipx();
  inline void clear_has_flipx();
  inline void set_has_flipy();
  inline void clear_has_flipy();
  inline void set_has_rotate();
  inline void clear_has_rotate();

  ::google::protobuf::uint32 stageid_;
  float posx_;
  float posy_;
  ::google::protobuf::uint32 flipx_;
  ::google::protobuf::uint32 flipy_;
  float rotate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sStageLine* default_instance_;
};
// -------------------------------------------------------------------

class sStageProp : public ::google::protobuf::MessageLite {
 public:
  sStageProp();
  virtual ~sStageProp();

  sStageProp(const sStageProp& from);

  inline sStageProp& operator=(const sStageProp& from) {
    CopyFrom(from);
    return *this;
  }

  static const sStageProp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sStageProp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sStageProp* other);

  // implements Message ----------------------------------------------

  sStageProp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sStageProp& from);
  void MergeFrom(const sStageProp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stageid = 1;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageidFieldNumber = 1;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // optional uint32 nlocalename = 2;
  inline bool has_nlocalename() const;
  inline void clear_nlocalename();
  static const int kNlocalenameFieldNumber = 2;
  inline ::google::protobuf::uint32 nlocalename() const;
  inline void set_nlocalename(::google::protobuf::uint32 value);

  // optional uint32 propflag = 3;
  inline bool has_propflag() const;
  inline void clear_propflag();
  static const int kPropflagFieldNumber = 3;
  inline ::google::protobuf::uint32 propflag() const;
  inline void set_propflag(::google::protobuf::uint32 value);

  // optional string spic = 4;
  inline bool has_spic() const;
  inline void clear_spic();
  static const int kSpicFieldNumber = 4;
  inline const ::std::string& spic() const;
  inline void set_spic(const ::std::string& value);
  inline void set_spic(const char* value);
  inline void set_spic(const char* value, size_t size);
  inline ::std::string* mutable_spic();
  inline ::std::string* release_spic();
  inline void set_allocated_spic(::std::string* spic);

  // optional float posx = 5;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 5;
  inline float posx() const;
  inline void set_posx(float value);

  // optional float posy = 6;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 6;
  inline float posy() const;
  inline void set_posy(float value);

  // optional .jynetwork.proto.sStageLine line = 7;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 7;
  inline const ::jynetwork::proto::sStageLine& line() const;
  inline ::jynetwork::proto::sStageLine* mutable_line();
  inline ::jynetwork::proto::sStageLine* release_line();
  inline void set_allocated_line(::jynetwork::proto::sStageLine* line);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sStageProp)
 private:
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_nlocalename();
  inline void clear_has_nlocalename();
  inline void set_has_propflag();
  inline void clear_has_propflag();
  inline void set_has_spic();
  inline void clear_has_spic();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_line();
  inline void clear_has_line();

  ::google::protobuf::uint32 stageid_;
  ::google::protobuf::uint32 nlocalename_;
  ::std::string* spic_;
  ::google::protobuf::uint32 propflag_;
  float posx_;
  ::jynetwork::proto::sStageLine* line_;
  float posy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sStageProp* default_instance_;
};
// -------------------------------------------------------------------

class sDebugSpawnBullet : public ::google::protobuf::MessageLite {
 public:
  sDebugSpawnBullet();
  virtual ~sDebugSpawnBullet();

  sDebugSpawnBullet(const sDebugSpawnBullet& from);

  inline sDebugSpawnBullet& operator=(const sDebugSpawnBullet& from) {
    CopyFrom(from);
    return *this;
  }

  static const sDebugSpawnBullet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sDebugSpawnBullet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sDebugSpawnBullet* other);

  // implements Message ----------------------------------------------

  sDebugSpawnBullet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sDebugSpawnBullet& from);
  void MergeFrom(const sDebugSpawnBullet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ntype = 1;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 ntype() const;
  inline void set_ntype(::google::protobuf::uint32 value);

  // optional fixed64 bullet = 2;
  inline bool has_bullet() const;
  inline void clear_bullet();
  static const int kBulletFieldNumber = 2;
  inline ::google::protobuf::uint64 bullet() const;
  inline void set_bullet(::google::protobuf::uint64 value);

  // optional string func_name = 3;
  inline bool has_func_name() const;
  inline void clear_func_name();
  static const int kFuncNameFieldNumber = 3;
  inline const ::std::string& func_name() const;
  inline void set_func_name(const ::std::string& value);
  inline void set_func_name(const char* value);
  inline void set_func_name(const char* value, size_t size);
  inline ::std::string* mutable_func_name();
  inline ::std::string* release_func_name();
  inline void set_allocated_func_name(::std::string* func_name);

  // optional float x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sDebugSpawnBullet)
 private:
  inline void set_has_ntype();
  inline void clear_has_ntype();
  inline void set_has_bullet();
  inline void clear_has_bullet();
  inline void set_has_func_name();
  inline void clear_has_func_name();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::uint64 bullet_;
  ::google::protobuf::uint32 ntype_;
  float x_;
  ::std::string* func_name_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sDebugSpawnBullet* default_instance_;
};
// -------------------------------------------------------------------

class sDebugEraseBullet : public ::google::protobuf::MessageLite {
 public:
  sDebugEraseBullet();
  virtual ~sDebugEraseBullet();

  sDebugEraseBullet(const sDebugEraseBullet& from);

  inline sDebugEraseBullet& operator=(const sDebugEraseBullet& from) {
    CopyFrom(from);
    return *this;
  }

  static const sDebugEraseBullet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sDebugEraseBullet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sDebugEraseBullet* other);

  // implements Message ----------------------------------------------

  sDebugEraseBullet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sDebugEraseBullet& from);
  void MergeFrom(const sDebugEraseBullet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 bullet = 2;
  inline bool has_bullet() const;
  inline void clear_bullet();
  static const int kBulletFieldNumber = 2;
  inline ::google::protobuf::uint64 bullet() const;
  inline void set_bullet(::google::protobuf::uint64 value);

  // optional string func_name = 3;
  inline bool has_func_name() const;
  inline void clear_func_name();
  static const int kFuncNameFieldNumber = 3;
  inline const ::std::string& func_name() const;
  inline void set_func_name(const ::std::string& value);
  inline void set_func_name(const char* value);
  inline void set_func_name(const char* value, size_t size);
  inline ::std::string* mutable_func_name();
  inline ::std::string* release_func_name();
  inline void set_allocated_func_name(::std::string* func_name);

  // optional float x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sDebugEraseBullet)
 private:
  inline void set_has_bullet();
  inline void clear_has_bullet();
  inline void set_has_func_name();
  inline void clear_has_func_name();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::uint64 bullet_;
  ::std::string* func_name_;
  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sDebugEraseBullet* default_instance_;
};
// -------------------------------------------------------------------

class sAISetting : public ::google::protobuf::MessageLite {
 public:
  sAISetting();
  virtual ~sAISetting();

  sAISetting(const sAISetting& from);

  inline sAISetting& operator=(const sAISetting& from) {
    CopyFrom(from);
    return *this;
  }

  static const sAISetting& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sAISetting* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sAISetting* other);

  // implements Message ----------------------------------------------

  sAISetting* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sAISetting& from);
  void MergeFrom(const sAISetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 aid = 1;
  inline bool has_aid() const;
  inline void clear_aid();
  static const int kAidFieldNumber = 1;
  inline ::google::protobuf::uint32 aid() const;
  inline void set_aid(::google::protobuf::uint32 value);

  // optional uint32 amove = 2;
  inline bool has_amove() const;
  inline void clear_amove();
  static const int kAmoveFieldNumber = 2;
  inline ::google::protobuf::uint32 amove() const;
  inline void set_amove(::google::protobuf::uint32 value);

  // optional uint32 attack = 3;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 3;
  inline ::google::protobuf::uint32 attack() const;
  inline void set_attack(::google::protobuf::uint32 value);

  // optional uint32 normal = 4;
  inline bool has_normal() const;
  inline void clear_normal();
  static const int kNormalFieldNumber = 4;
  inline ::google::protobuf::uint32 normal() const;
  inline void set_normal(::google::protobuf::uint32 value);

  // optional uint32 super = 5;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 5;
  inline ::google::protobuf::uint32 super() const;
  inline void set_super(::google::protobuf::uint32 value);

  // repeated uint32 extras = 6;
  inline int extras_size() const;
  inline void clear_extras();
  static const int kExtrasFieldNumber = 6;
  inline ::google::protobuf::uint32 extras(int index) const;
  inline void set_extras(int index, ::google::protobuf::uint32 value);
  inline void add_extras(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      extras() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_extras();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sAISetting)
 private:
  inline void set_has_aid();
  inline void clear_has_aid();
  inline void set_has_amove();
  inline void clear_has_amove();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::uint32 aid_;
  ::google::protobuf::uint32 amove_;
  ::google::protobuf::uint32 attack_;
  ::google::protobuf::uint32 normal_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > extras_;
  ::google::protobuf::uint32 super_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sAISetting* default_instance_;
};
// -------------------------------------------------------------------

class sActionEff3d : public ::google::protobuf::MessageLite {
 public:
  sActionEff3d();
  virtual ~sActionEff3d();

  sActionEff3d(const sActionEff3d& from);

  inline sActionEff3d& operator=(const sActionEff3d& from) {
    CopyFrom(from);
    return *this;
  }

  static const sActionEff3d& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sActionEff3d* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sActionEff3d* other);

  // implements Message ----------------------------------------------

  sActionEff3d* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sActionEff3d& from);
  void MergeFrom(const sActionEff3d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 bind_effect_status = 1;
  inline bool has_bind_effect_status() const;
  inline void clear_bind_effect_status();
  static const int kBindEffectStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 bind_effect_status() const;
  inline void set_bind_effect_status(::google::protobuf::uint32 value);

  // optional string bind_skeleton = 2;
  inline bool has_bind_skeleton() const;
  inline void clear_bind_skeleton();
  static const int kBindSkeletonFieldNumber = 2;
  inline const ::std::string& bind_skeleton() const;
  inline void set_bind_skeleton(const ::std::string& value);
  inline void set_bind_skeleton(const char* value);
  inline void set_bind_skeleton(const char* value, size_t size);
  inline ::std::string* mutable_bind_skeleton();
  inline ::std::string* release_bind_skeleton();
  inline void set_allocated_bind_skeleton(::std::string* bind_skeleton);

  // optional float delay_time = 3;
  inline bool has_delay_time() const;
  inline void clear_delay_time();
  static const int kDelayTimeFieldNumber = 3;
  inline float delay_time() const;
  inline void set_delay_time(float value);

  // optional float life_time = 4;
  inline bool has_life_time() const;
  inline void clear_life_time();
  static const int kLifeTimeFieldNumber = 4;
  inline float life_time() const;
  inline void set_life_time(float value);

  // optional float effect_status_scale = 5;
  inline bool has_effect_status_scale() const;
  inline void clear_effect_status_scale();
  static const int kEffectStatusScaleFieldNumber = 5;
  inline float effect_status_scale() const;
  inline void set_effect_status_scale(float value);

  // optional float effect_status_x = 6;
  inline bool has_effect_status_x() const;
  inline void clear_effect_status_x();
  static const int kEffectStatusXFieldNumber = 6;
  inline float effect_status_x() const;
  inline void set_effect_status_x(float value);

  // optional float effect_status_y = 7;
  inline bool has_effect_status_y() const;
  inline void clear_effect_status_y();
  static const int kEffectStatusYFieldNumber = 7;
  inline float effect_status_y() const;
  inline void set_effect_status_y(float value);

  // optional float effect_status_z = 8;
  inline bool has_effect_status_z() const;
  inline void clear_effect_status_z();
  static const int kEffectStatusZFieldNumber = 8;
  inline float effect_status_z() const;
  inline void set_effect_status_z(float value);

  // optional float effect_status_degreex = 9;
  inline bool has_effect_status_degreex() const;
  inline void clear_effect_status_degreex();
  static const int kEffectStatusDegreexFieldNumber = 9;
  inline float effect_status_degreex() const;
  inline void set_effect_status_degreex(float value);

  // optional float effect_status_degreey = 10;
  inline bool has_effect_status_degreey() const;
  inline void clear_effect_status_degreey();
  static const int kEffectStatusDegreeyFieldNumber = 10;
  inline float effect_status_degreey() const;
  inline void set_effect_status_degreey(float value);

  // optional float effect_status_degreez = 11;
  inline bool has_effect_status_degreez() const;
  inline void clear_effect_status_degreez();
  static const int kEffectStatusDegreezFieldNumber = 11;
  inline float effect_status_degreez() const;
  inline void set_effect_status_degreez(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sActionEff3d)
 private:
  inline void set_has_bind_effect_status();
  inline void clear_has_bind_effect_status();
  inline void set_has_bind_skeleton();
  inline void clear_has_bind_skeleton();
  inline void set_has_delay_time();
  inline void clear_has_delay_time();
  inline void set_has_life_time();
  inline void clear_has_life_time();
  inline void set_has_effect_status_scale();
  inline void clear_has_effect_status_scale();
  inline void set_has_effect_status_x();
  inline void clear_has_effect_status_x();
  inline void set_has_effect_status_y();
  inline void clear_has_effect_status_y();
  inline void set_has_effect_status_z();
  inline void clear_has_effect_status_z();
  inline void set_has_effect_status_degreex();
  inline void clear_has_effect_status_degreex();
  inline void set_has_effect_status_degreey();
  inline void clear_has_effect_status_degreey();
  inline void set_has_effect_status_degreez();
  inline void clear_has_effect_status_degreez();

  ::std::string* bind_skeleton_;
  ::google::protobuf::uint32 bind_effect_status_;
  float delay_time_;
  float life_time_;
  float effect_status_scale_;
  float effect_status_x_;
  float effect_status_y_;
  float effect_status_z_;
  float effect_status_degreex_;
  float effect_status_degreey_;
  float effect_status_degreez_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sActionEff3d* default_instance_;
};
// -------------------------------------------------------------------

class sActionEffect : public ::google::protobuf::MessageLite {
 public:
  sActionEffect();
  virtual ~sActionEffect();

  sActionEffect(const sActionEffect& from);

  inline sActionEffect& operator=(const sActionEffect& from) {
    CopyFrom(from);
    return *this;
  }

  static const sActionEffect& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sActionEffect* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sActionEffect* other);

  // implements Message ----------------------------------------------

  sActionEffect* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sActionEffect& from);
  void MergeFrom(const sActionEffect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // repeated uint32 equip_ids = 2;
  inline int equip_ids_size() const;
  inline void clear_equip_ids();
  static const int kEquipIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 equip_ids(int index) const;
  inline void set_equip_ids(int index, ::google::protobuf::uint32 value);
  inline void add_equip_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      equip_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_equip_ids();

  // repeated uint32 actor_ids = 3;
  inline int actor_ids_size() const;
  inline void clear_actor_ids();
  static const int kActorIdsFieldNumber = 3;
  inline ::google::protobuf::uint32 actor_ids(int index) const;
  inline void set_actor_ids(int index, ::google::protobuf::uint32 value);
  inline void add_actor_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      actor_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_actor_ids();

  // optional uint32 action_id = 4;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sActionEff3d effs = 6;
  inline int effs_size() const;
  inline void clear_effs();
  static const int kEffsFieldNumber = 6;
  inline const ::jynetwork::proto::sActionEff3d& effs(int index) const;
  inline ::jynetwork::proto::sActionEff3d* mutable_effs(int index);
  inline ::jynetwork::proto::sActionEff3d* add_effs();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActionEff3d >&
      effs() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActionEff3d >*
      mutable_effs();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sActionEffect)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_action_id();
  inline void clear_has_action_id();

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > equip_ids_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 action_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > actor_ids_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActionEff3d > effs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sActionEffect* default_instance_;
};
// -------------------------------------------------------------------

class sPPLConstant : public ::google::protobuf::MessageLite {
 public:
  sPPLConstant();
  virtual ~sPPLConstant();

  sPPLConstant(const sPPLConstant& from);

  inline sPPLConstant& operator=(const sPPLConstant& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPPLConstant& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPPLConstant* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPPLConstant* other);

  // implements Message ----------------------------------------------

  sPPLConstant* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPPLConstant& from);
  void MergeFrom(const sPPLConstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 elite_energy = 1;
  inline bool has_elite_energy() const;
  inline void clear_elite_energy();
  static const int kEliteEnergyFieldNumber = 1;
  inline ::google::protobuf::uint32 elite_energy() const;
  inline void set_elite_energy(::google::protobuf::uint32 value);

  // optional uint32 ball_energy = 2;
  inline bool has_ball_energy() const;
  inline void clear_ball_energy();
  static const int kBallEnergyFieldNumber = 2;
  inline ::google::protobuf::uint32 ball_energy() const;
  inline void set_ball_energy(::google::protobuf::uint32 value);

  // optional uint32 boss_energy = 3;
  inline bool has_boss_energy() const;
  inline void clear_boss_energy();
  static const int kBossEnergyFieldNumber = 3;
  inline ::google::protobuf::uint32 boss_energy() const;
  inline void set_boss_energy(::google::protobuf::uint32 value);

  // optional uint32 lv1_skill_consume = 4;
  inline bool has_lv1_skill_consume() const;
  inline void clear_lv1_skill_consume();
  static const int kLv1SkillConsumeFieldNumber = 4;
  inline ::google::protobuf::uint32 lv1_skill_consume() const;
  inline void set_lv1_skill_consume(::google::protobuf::uint32 value);

  // optional uint32 lv2_skill_consume = 5;
  inline bool has_lv2_skill_consume() const;
  inline void clear_lv2_skill_consume();
  static const int kLv2SkillConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 lv2_skill_consume() const;
  inline void set_lv2_skill_consume(::google::protobuf::uint32 value);

  // optional uint32 lv3_skill_consume = 6;
  inline bool has_lv3_skill_consume() const;
  inline void clear_lv3_skill_consume();
  static const int kLv3SkillConsumeFieldNumber = 6;
  inline ::google::protobuf::uint32 lv3_skill_consume() const;
  inline void set_lv3_skill_consume(::google::protobuf::uint32 value);

  // optional uint32 lv1_hp_loss = 7;
  inline bool has_lv1_hp_loss() const;
  inline void clear_lv1_hp_loss();
  static const int kLv1HpLossFieldNumber = 7;
  inline ::google::protobuf::uint32 lv1_hp_loss() const;
  inline void set_lv1_hp_loss(::google::protobuf::uint32 value);

  // optional uint32 lv2_hp_loss = 8;
  inline bool has_lv2_hp_loss() const;
  inline void clear_lv2_hp_loss();
  static const int kLv2HpLossFieldNumber = 8;
  inline ::google::protobuf::uint32 lv2_hp_loss() const;
  inline void set_lv2_hp_loss(::google::protobuf::uint32 value);

  // optional uint32 lv3_hp_loss = 9;
  inline bool has_lv3_hp_loss() const;
  inline void clear_lv3_hp_loss();
  static const int kLv3HpLossFieldNumber = 9;
  inline ::google::protobuf::uint32 lv3_hp_loss() const;
  inline void set_lv3_hp_loss(::google::protobuf::uint32 value);

  // optional uint32 lv4_hp_loss = 10;
  inline bool has_lv4_hp_loss() const;
  inline void clear_lv4_hp_loss();
  static const int kLv4HpLossFieldNumber = 10;
  inline ::google::protobuf::uint32 lv4_hp_loss() const;
  inline void set_lv4_hp_loss(::google::protobuf::uint32 value);

  // optional uint32 lv5_hp_loss = 11;
  inline bool has_lv5_hp_loss() const;
  inline void clear_lv5_hp_loss();
  static const int kLv5HpLossFieldNumber = 11;
  inline ::google::protobuf::uint32 lv5_hp_loss() const;
  inline void set_lv5_hp_loss(::google::protobuf::uint32 value);

  // optional uint32 random_cost = 12;
  inline bool has_random_cost() const;
  inline void clear_random_cost();
  static const int kRandomCostFieldNumber = 12;
  inline ::google::protobuf::uint32 random_cost() const;
  inline void set_random_cost(::google::protobuf::uint32 value);

  // optional uint32 random_increment = 13;
  inline bool has_random_increment() const;
  inline void clear_random_increment();
  static const int kRandomIncrementFieldNumber = 13;
  inline ::google::protobuf::uint32 random_increment() const;
  inline void set_random_increment(::google::protobuf::uint32 value);

  // optional uint32 normal_energy = 14;
  inline bool has_normal_energy() const;
  inline void clear_normal_energy();
  static const int kNormalEnergyFieldNumber = 14;
  inline ::google::protobuf::uint32 normal_energy() const;
  inline void set_normal_energy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPPLConstant)
 private:
  inline void set_has_elite_energy();
  inline void clear_has_elite_energy();
  inline void set_has_ball_energy();
  inline void clear_has_ball_energy();
  inline void set_has_boss_energy();
  inline void clear_has_boss_energy();
  inline void set_has_lv1_skill_consume();
  inline void clear_has_lv1_skill_consume();
  inline void set_has_lv2_skill_consume();
  inline void clear_has_lv2_skill_consume();
  inline void set_has_lv3_skill_consume();
  inline void clear_has_lv3_skill_consume();
  inline void set_has_lv1_hp_loss();
  inline void clear_has_lv1_hp_loss();
  inline void set_has_lv2_hp_loss();
  inline void clear_has_lv2_hp_loss();
  inline void set_has_lv3_hp_loss();
  inline void clear_has_lv3_hp_loss();
  inline void set_has_lv4_hp_loss();
  inline void clear_has_lv4_hp_loss();
  inline void set_has_lv5_hp_loss();
  inline void clear_has_lv5_hp_loss();
  inline void set_has_random_cost();
  inline void clear_has_random_cost();
  inline void set_has_random_increment();
  inline void clear_has_random_increment();
  inline void set_has_normal_energy();
  inline void clear_has_normal_energy();

  ::google::protobuf::uint32 elite_energy_;
  ::google::protobuf::uint32 ball_energy_;
  ::google::protobuf::uint32 boss_energy_;
  ::google::protobuf::uint32 lv1_skill_consume_;
  ::google::protobuf::uint32 lv2_skill_consume_;
  ::google::protobuf::uint32 lv3_skill_consume_;
  ::google::protobuf::uint32 lv1_hp_loss_;
  ::google::protobuf::uint32 lv2_hp_loss_;
  ::google::protobuf::uint32 lv3_hp_loss_;
  ::google::protobuf::uint32 lv4_hp_loss_;
  ::google::protobuf::uint32 lv5_hp_loss_;
  ::google::protobuf::uint32 random_cost_;
  ::google::protobuf::uint32 random_increment_;
  ::google::protobuf::uint32 normal_energy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sPPLConstant* default_instance_;
};
// -------------------------------------------------------------------

class sPersistDB : public ::google::protobuf::MessageLite {
 public:
  sPersistDB();
  virtual ~sPersistDB();

  sPersistDB(const sPersistDB& from);

  inline sPersistDB& operator=(const sPersistDB& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPersistDB& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPersistDB* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPersistDB* other);

  // implements Message ----------------------------------------------

  sPersistDB* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPersistDB& from);
  void MergeFrom(const sPersistDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nversion = 1;
  inline bool has_nversion() const;
  inline void clear_nversion();
  static const int kNversionFieldNumber = 1;
  inline ::google::protobuf::uint32 nversion() const;
  inline void set_nversion(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sItemStats itemstats = 2;
  inline int itemstats_size() const;
  inline void clear_itemstats();
  static const int kItemstatsFieldNumber = 2;
  inline const ::jynetwork::proto::sItemStats& itemstats(int index) const;
  inline ::jynetwork::proto::sItemStats* mutable_itemstats(int index);
  inline ::jynetwork::proto::sItemStats* add_itemstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sItemStats >&
      itemstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sItemStats >*
      mutable_itemstats();

  // repeated .jynetwork.proto.sGameStats gamestats = 3;
  inline int gamestats_size() const;
  inline void clear_gamestats();
  static const int kGamestatsFieldNumber = 3;
  inline const ::jynetwork::proto::sGameStats& gamestats(int index) const;
  inline ::jynetwork::proto::sGameStats* mutable_gamestats(int index);
  inline ::jynetwork::proto::sGameStats* add_gamestats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sGameStats >&
      gamestats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sGameStats >*
      mutable_gamestats();

  // repeated .jynetwork.proto.sEquipStats equipstats = 4;
  inline int equipstats_size() const;
  inline void clear_equipstats();
  static const int kEquipstatsFieldNumber = 4;
  inline const ::jynetwork::proto::sEquipStats& equipstats(int index) const;
  inline ::jynetwork::proto::sEquipStats* mutable_equipstats(int index);
  inline ::jynetwork::proto::sEquipStats* add_equipstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipStats >&
      equipstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipStats >*
      mutable_equipstats();

  // repeated .jynetwork.proto.sSkillStats skillstats = 5;
  inline int skillstats_size() const;
  inline void clear_skillstats();
  static const int kSkillstatsFieldNumber = 5;
  inline const ::jynetwork::proto::sSkillStats& skillstats(int index) const;
  inline ::jynetwork::proto::sSkillStats* mutable_skillstats(int index);
  inline ::jynetwork::proto::sSkillStats* add_skillstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSkillStats >&
      skillstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSkillStats >*
      mutable_skillstats();

  // repeated .jynetwork.proto.sCardStats cardstats = 6;
  inline int cardstats_size() const;
  inline void clear_cardstats();
  static const int kCardstatsFieldNumber = 6;
  inline const ::jynetwork::proto::sCardStats& cardstats(int index) const;
  inline ::jynetwork::proto::sCardStats* mutable_cardstats(int index);
  inline ::jynetwork::proto::sCardStats* add_cardstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardStats >&
      cardstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardStats >*
      mutable_cardstats();

  // repeated .jynetwork.proto.sBuffStats buffstats = 7;
  inline int buffstats_size() const;
  inline void clear_buffstats();
  static const int kBuffstatsFieldNumber = 7;
  inline const ::jynetwork::proto::sBuffStats& buffstats(int index) const;
  inline ::jynetwork::proto::sBuffStats* mutable_buffstats(int index);
  inline ::jynetwork::proto::sBuffStats* add_buffstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuffStats >&
      buffstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuffStats >*
      mutable_buffstats();

  // repeated .jynetwork.proto.sCastleStats castlestats = 8;
  inline int castlestats_size() const;
  inline void clear_castlestats();
  static const int kCastlestatsFieldNumber = 8;
  inline const ::jynetwork::proto::sCastleStats& castlestats(int index) const;
  inline ::jynetwork::proto::sCastleStats* mutable_castlestats(int index);
  inline ::jynetwork::proto::sCastleStats* add_castlestats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleStats >&
      castlestats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleStats >*
      mutable_castlestats();

  // repeated .jynetwork.proto.sStageProp stageprops = 9;
  inline int stageprops_size() const;
  inline void clear_stageprops();
  static const int kStagepropsFieldNumber = 9;
  inline const ::jynetwork::proto::sStageProp& stageprops(int index) const;
  inline ::jynetwork::proto::sStageProp* mutable_stageprops(int index);
  inline ::jynetwork::proto::sStageProp* add_stageprops();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sStageProp >&
      stageprops() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sStageProp >*
      mutable_stageprops();

  // repeated .jynetwork.proto.sEffectStats effectstats = 10;
  inline int effectstats_size() const;
  inline void clear_effectstats();
  static const int kEffectstatsFieldNumber = 10;
  inline const ::jynetwork::proto::sEffectStats& effectstats(int index) const;
  inline ::jynetwork::proto::sEffectStats* mutable_effectstats(int index);
  inline ::jynetwork::proto::sEffectStats* add_effectstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectStats >&
      effectstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectStats >*
      mutable_effectstats();

  // repeated .jynetwork.proto.sEffects effects = 11;
  inline int effects_size() const;
  inline void clear_effects();
  static const int kEffectsFieldNumber = 11;
  inline const ::jynetwork::proto::sEffects& effects(int index) const;
  inline ::jynetwork::proto::sEffects* mutable_effects(int index);
  inline ::jynetwork::proto::sEffects* add_effects();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffects >&
      effects() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffects >*
      mutable_effects();

  // repeated .jynetwork.proto.sModelAction modelactions = 12;
  inline int modelactions_size() const;
  inline void clear_modelactions();
  static const int kModelactionsFieldNumber = 12;
  inline const ::jynetwork::proto::sModelAction& modelactions(int index) const;
  inline ::jynetwork::proto::sModelAction* mutable_modelactions(int index);
  inline ::jynetwork::proto::sModelAction* add_modelactions();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sModelAction >&
      modelactions() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sModelAction >*
      mutable_modelactions();

  // repeated .jynetwork.proto.sMonsterRefresh monsterrefresh = 13;
  inline int monsterrefresh_size() const;
  inline void clear_monsterrefresh();
  static const int kMonsterrefreshFieldNumber = 13;
  inline const ::jynetwork::proto::sMonsterRefresh& monsterrefresh(int index) const;
  inline ::jynetwork::proto::sMonsterRefresh* mutable_monsterrefresh(int index);
  inline ::jynetwork::proto::sMonsterRefresh* add_monsterrefresh();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefresh >&
      monsterrefresh() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefresh >*
      mutable_monsterrefresh();

  // repeated .jynetwork.proto.sDropStats dropstats = 14;
  inline int dropstats_size() const;
  inline void clear_dropstats();
  static const int kDropstatsFieldNumber = 14;
  inline const ::jynetwork::proto::sDropStats& dropstats(int index) const;
  inline ::jynetwork::proto::sDropStats* mutable_dropstats(int index);
  inline ::jynetwork::proto::sDropStats* add_dropstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropStats >&
      dropstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropStats >*
      mutable_dropstats();

  // repeated .jynetwork.proto.sCharactorStats charactorstats = 15;
  inline int charactorstats_size() const;
  inline void clear_charactorstats();
  static const int kCharactorstatsFieldNumber = 15;
  inline const ::jynetwork::proto::sCharactorStats& charactorstats(int index) const;
  inline ::jynetwork::proto::sCharactorStats* mutable_charactorstats(int index);
  inline ::jynetwork::proto::sCharactorStats* add_charactorstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorStats >&
      charactorstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorStats >*
      mutable_charactorstats();

  // repeated .jynetwork.proto.sEffectTable effecttable = 16;
  inline int effecttable_size() const;
  inline void clear_effecttable();
  static const int kEffecttableFieldNumber = 16;
  inline const ::jynetwork::proto::sEffectTable& effecttable(int index) const;
  inline ::jynetwork::proto::sEffectTable* mutable_effecttable(int index);
  inline ::jynetwork::proto::sEffectTable* add_effecttable();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectTable >&
      effecttable() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectTable >*
      mutable_effecttable();

  // repeated .jynetwork.proto.sAISetting ais = 17;
  inline int ais_size() const;
  inline void clear_ais();
  static const int kAisFieldNumber = 17;
  inline const ::jynetwork::proto::sAISetting& ais(int index) const;
  inline ::jynetwork::proto::sAISetting* mutable_ais(int index);
  inline ::jynetwork::proto::sAISetting* add_ais();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sAISetting >&
      ais() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sAISetting >*
      mutable_ais();

  // repeated .jynetwork.proto.sSoundStats soundstats = 18;
  inline int soundstats_size() const;
  inline void clear_soundstats();
  static const int kSoundstatsFieldNumber = 18;
  inline const ::jynetwork::proto::sSoundStats& soundstats(int index) const;
  inline ::jynetwork::proto::sSoundStats* mutable_soundstats(int index);
  inline ::jynetwork::proto::sSoundStats* add_soundstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundStats >&
      soundstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundStats >*
      mutable_soundstats();

  // repeated .jynetwork.proto.sSoundTable soundtable = 19;
  inline int soundtable_size() const;
  inline void clear_soundtable();
  static const int kSoundtableFieldNumber = 19;
  inline const ::jynetwork::proto::sSoundTable& soundtable(int index) const;
  inline ::jynetwork::proto::sSoundTable* mutable_soundtable(int index);
  inline ::jynetwork::proto::sSoundTable* add_soundtable();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundTable >&
      soundtable() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundTable >*
      mutable_soundtable();

  // repeated .jynetwork.proto.sShopItem shopstats = 20;
  inline int shopstats_size() const;
  inline void clear_shopstats();
  static const int kShopstatsFieldNumber = 20;
  inline const ::jynetwork::proto::sShopItem& shopstats(int index) const;
  inline ::jynetwork::proto::sShopItem* mutable_shopstats(int index);
  inline ::jynetwork::proto::sShopItem* add_shopstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sShopItem >&
      shopstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sShopItem >*
      mutable_shopstats();

  // repeated .jynetwork.proto.sCharSkillLevelUp char_skill_levelup = 21;
  inline int char_skill_levelup_size() const;
  inline void clear_char_skill_levelup();
  static const int kCharSkillLevelupFieldNumber = 21;
  inline const ::jynetwork::proto::sCharSkillLevelUp& char_skill_levelup(int index) const;
  inline ::jynetwork::proto::sCharSkillLevelUp* mutable_char_skill_levelup(int index);
  inline ::jynetwork::proto::sCharSkillLevelUp* add_char_skill_levelup();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharSkillLevelUp >&
      char_skill_levelup() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharSkillLevelUp >*
      mutable_char_skill_levelup();

  // repeated .jynetwork.proto.sCharExp char_exp = 22;
  inline int char_exp_size() const;
  inline void clear_char_exp();
  static const int kCharExpFieldNumber = 22;
  inline const ::jynetwork::proto::sCharExp& char_exp(int index) const;
  inline ::jynetwork::proto::sCharExp* mutable_char_exp(int index);
  inline ::jynetwork::proto::sCharExp* add_char_exp();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharExp >&
      char_exp() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharExp >*
      mutable_char_exp();

  // repeated .jynetwork.proto.sCharLevelUp char_levelup = 23;
  inline int char_levelup_size() const;
  inline void clear_char_levelup();
  static const int kCharLevelupFieldNumber = 23;
  inline const ::jynetwork::proto::sCharLevelUp& char_levelup(int index) const;
  inline ::jynetwork::proto::sCharLevelUp* mutable_char_levelup(int index);
  inline ::jynetwork::proto::sCharLevelUp* add_char_levelup();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharLevelUp >&
      char_levelup() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharLevelUp >*
      mutable_char_levelup();

  // repeated .jynetwork.proto.sCharChangeJob char_change_job = 24;
  inline int char_change_job_size() const;
  inline void clear_char_change_job();
  static const int kCharChangeJobFieldNumber = 24;
  inline const ::jynetwork::proto::sCharChangeJob& char_change_job(int index) const;
  inline ::jynetwork::proto::sCharChangeJob* mutable_char_change_job(int index);
  inline ::jynetwork::proto::sCharChangeJob* add_char_change_job();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharChangeJob >&
      char_change_job() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharChangeJob >*
      mutable_char_change_job();

  // repeated .jynetwork.proto.sCardIntensify card_intensify = 25;
  inline int card_intensify_size() const;
  inline void clear_card_intensify();
  static const int kCardIntensifyFieldNumber = 25;
  inline const ::jynetwork::proto::sCardIntensify& card_intensify(int index) const;
  inline ::jynetwork::proto::sCardIntensify* mutable_card_intensify(int index);
  inline ::jynetwork::proto::sCardIntensify* add_card_intensify();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardIntensify >&
      card_intensify() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardIntensify >*
      mutable_card_intensify();

  // repeated .jynetwork.proto.sCardLevelUp card_levelup = 26;
  inline int card_levelup_size() const;
  inline void clear_card_levelup();
  static const int kCardLevelupFieldNumber = 26;
  inline const ::jynetwork::proto::sCardLevelUp& card_levelup(int index) const;
  inline ::jynetwork::proto::sCardLevelUp* mutable_card_levelup(int index);
  inline ::jynetwork::proto::sCardLevelUp* add_card_levelup();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardLevelUp >&
      card_levelup() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardLevelUp >*
      mutable_card_levelup();

  // repeated .jynetwork.proto.sCardStarUp card_starup = 27;
  inline int card_starup_size() const;
  inline void clear_card_starup();
  static const int kCardStarupFieldNumber = 27;
  inline const ::jynetwork::proto::sCardStarUp& card_starup(int index) const;
  inline ::jynetwork::proto::sCardStarUp* mutable_card_starup(int index);
  inline ::jynetwork::proto::sCardStarUp* add_card_starup();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardStarUp >&
      card_starup() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardStarUp >*
      mutable_card_starup();

  // repeated .jynetwork.proto.sDropStats drop_stats = 28;
  inline int drop_stats_size() const;
  inline void clear_drop_stats();
  static const int kDropStatsFieldNumber = 28;
  inline const ::jynetwork::proto::sDropStats& drop_stats(int index) const;
  inline ::jynetwork::proto::sDropStats* mutable_drop_stats(int index);
  inline ::jynetwork::proto::sDropStats* add_drop_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropStats >&
      drop_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropStats >*
      mutable_drop_stats();

  // repeated .jynetwork.proto.sEquipIntensify equip_intensify = 29;
  inline int equip_intensify_size() const;
  inline void clear_equip_intensify();
  static const int kEquipIntensifyFieldNumber = 29;
  inline const ::jynetwork::proto::sEquipIntensify& equip_intensify(int index) const;
  inline ::jynetwork::proto::sEquipIntensify* mutable_equip_intensify(int index);
  inline ::jynetwork::proto::sEquipIntensify* add_equip_intensify();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipIntensify >&
      equip_intensify() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipIntensify >*
      mutable_equip_intensify();

  // repeated .jynetwork.proto.sEquipLevelUp equip_levelup = 30;
  inline int equip_levelup_size() const;
  inline void clear_equip_levelup();
  static const int kEquipLevelupFieldNumber = 30;
  inline const ::jynetwork::proto::sEquipLevelUp& equip_levelup(int index) const;
  inline ::jynetwork::proto::sEquipLevelUp* mutable_equip_levelup(int index);
  inline ::jynetwork::proto::sEquipLevelUp* add_equip_levelup();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipLevelUp >&
      equip_levelup() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipLevelUp >*
      mutable_equip_levelup();

  // repeated .jynetwork.proto.sEquipStarUp equip_starup = 31;
  inline int equip_starup_size() const;
  inline void clear_equip_starup();
  static const int kEquipStarupFieldNumber = 31;
  inline const ::jynetwork::proto::sEquipStarUp& equip_starup(int index) const;
  inline ::jynetwork::proto::sEquipStarUp* mutable_equip_starup(int index);
  inline ::jynetwork::proto::sEquipStarUp* add_equip_starup();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipStarUp >&
      equip_starup() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipStarUp >*
      mutable_equip_starup();

  // repeated .jynetwork.proto.sTaskStats taskstats = 32;
  inline int taskstats_size() const;
  inline void clear_taskstats();
  static const int kTaskstatsFieldNumber = 32;
  inline const ::jynetwork::proto::sTaskStats& taskstats(int index) const;
  inline ::jynetwork::proto::sTaskStats* mutable_taskstats(int index);
  inline ::jynetwork::proto::sTaskStats* add_taskstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sTaskStats >&
      taskstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sTaskStats >*
      mutable_taskstats();

  // repeated .jynetwork.proto.sBuyStaminaStats buy_stamina = 33;
  inline int buy_stamina_size() const;
  inline void clear_buy_stamina();
  static const int kBuyStaminaFieldNumber = 33;
  inline const ::jynetwork::proto::sBuyStaminaStats& buy_stamina(int index) const;
  inline ::jynetwork::proto::sBuyStaminaStats* mutable_buy_stamina(int index);
  inline ::jynetwork::proto::sBuyStaminaStats* add_buy_stamina();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuyStaminaStats >&
      buy_stamina() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuyStaminaStats >*
      mutable_buy_stamina();

  // repeated .jynetwork.proto.sBuyGoldStats buy_gold = 34;
  inline int buy_gold_size() const;
  inline void clear_buy_gold();
  static const int kBuyGoldFieldNumber = 34;
  inline const ::jynetwork::proto::sBuyGoldStats& buy_gold(int index) const;
  inline ::jynetwork::proto::sBuyGoldStats* mutable_buy_gold(int index);
  inline ::jynetwork::proto::sBuyGoldStats* add_buy_gold();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuyGoldStats >&
      buy_gold() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuyGoldStats >*
      mutable_buy_gold();

  // repeated string bnks = 35;
  inline int bnks_size() const;
  inline void clear_bnks();
  static const int kBnksFieldNumber = 35;
  inline const ::std::string& bnks(int index) const;
  inline ::std::string* mutable_bnks(int index);
  inline void set_bnks(int index, const ::std::string& value);
  inline void set_bnks(int index, const char* value);
  inline void set_bnks(int index, const char* value, size_t size);
  inline ::std::string* add_bnks();
  inline void add_bnks(const ::std::string& value);
  inline void add_bnks(const char* value);
  inline void add_bnks(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bnks() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bnks();

  // repeated .jynetwork.proto.sPrefixStats prefix_stats = 36;
  inline int prefix_stats_size() const;
  inline void clear_prefix_stats();
  static const int kPrefixStatsFieldNumber = 36;
  inline const ::jynetwork::proto::sPrefixStats& prefix_stats(int index) const;
  inline ::jynetwork::proto::sPrefixStats* mutable_prefix_stats(int index);
  inline ::jynetwork::proto::sPrefixStats* add_prefix_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPrefixStats >&
      prefix_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPrefixStats >*
      mutable_prefix_stats();

  // repeated .jynetwork.proto.sActionEffect action_effect = 37;
  inline int action_effect_size() const;
  inline void clear_action_effect();
  static const int kActionEffectFieldNumber = 37;
  inline const ::jynetwork::proto::sActionEffect& action_effect(int index) const;
  inline ::jynetwork::proto::sActionEffect* mutable_action_effect(int index);
  inline ::jynetwork::proto::sActionEffect* add_action_effect();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActionEffect >&
      action_effect() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActionEffect >*
      mutable_action_effect();

  // repeated .jynetwork.proto.sDecomStats decom_stats = 38;
  inline int decom_stats_size() const;
  inline void clear_decom_stats();
  static const int kDecomStatsFieldNumber = 38;
  inline const ::jynetwork::proto::sDecomStats& decom_stats(int index) const;
  inline ::jynetwork::proto::sDecomStats* mutable_decom_stats(int index);
  inline ::jynetwork::proto::sDecomStats* add_decom_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDecomStats >&
      decom_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDecomStats >*
      mutable_decom_stats();

  // optional .jynetwork.proto.sPPLConstant ppl_constant = 39;
  inline bool has_ppl_constant() const;
  inline void clear_ppl_constant();
  static const int kPplConstantFieldNumber = 39;
  inline const ::jynetwork::proto::sPPLConstant& ppl_constant() const;
  inline ::jynetwork::proto::sPPLConstant* mutable_ppl_constant();
  inline ::jynetwork::proto::sPPLConstant* release_ppl_constant();
  inline void set_allocated_ppl_constant(::jynetwork::proto::sPPLConstant* ppl_constant);

  // repeated .jynetwork.proto.sWeekStats week_stats = 40;
  inline int week_stats_size() const;
  inline void clear_week_stats();
  static const int kWeekStatsFieldNumber = 40;
  inline const ::jynetwork::proto::sWeekStats& week_stats(int index) const;
  inline ::jynetwork::proto::sWeekStats* mutable_week_stats(int index);
  inline ::jynetwork::proto::sWeekStats* add_week_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sWeekStats >&
      week_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sWeekStats >*
      mutable_week_stats();

  // repeated .jynetwork.proto.sPartnerStats partnerstats = 41;
  inline int partnerstats_size() const;
  inline void clear_partnerstats();
  static const int kPartnerstatsFieldNumber = 41;
  inline const ::jynetwork::proto::sPartnerStats& partnerstats(int index) const;
  inline ::jynetwork::proto::sPartnerStats* mutable_partnerstats(int index);
  inline ::jynetwork::proto::sPartnerStats* add_partnerstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerStats >&
      partnerstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerStats >*
      mutable_partnerstats();

  // repeated .jynetwork.proto.sPartnerLvUpStats partner_lv_up_stats = 42;
  inline int partner_lv_up_stats_size() const;
  inline void clear_partner_lv_up_stats();
  static const int kPartnerLvUpStatsFieldNumber = 42;
  inline const ::jynetwork::proto::sPartnerLvUpStats& partner_lv_up_stats(int index) const;
  inline ::jynetwork::proto::sPartnerLvUpStats* mutable_partner_lv_up_stats(int index);
  inline ::jynetwork::proto::sPartnerLvUpStats* add_partner_lv_up_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerLvUpStats >&
      partner_lv_up_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerLvUpStats >*
      mutable_partner_lv_up_stats();

  // repeated .jynetwork.proto.sPartnerIntensifyStats partner_intensify_stats = 43;
  inline int partner_intensify_stats_size() const;
  inline void clear_partner_intensify_stats();
  static const int kPartnerIntensifyStatsFieldNumber = 43;
  inline const ::jynetwork::proto::sPartnerIntensifyStats& partner_intensify_stats(int index) const;
  inline ::jynetwork::proto::sPartnerIntensifyStats* mutable_partner_intensify_stats(int index);
  inline ::jynetwork::proto::sPartnerIntensifyStats* add_partner_intensify_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerIntensifyStats >&
      partner_intensify_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerIntensifyStats >*
      mutable_partner_intensify_stats();

  // repeated .jynetwork.proto.sPartnerStarStats partner_star_stats = 44;
  inline int partner_star_stats_size() const;
  inline void clear_partner_star_stats();
  static const int kPartnerStarStatsFieldNumber = 44;
  inline const ::jynetwork::proto::sPartnerStarStats& partner_star_stats(int index) const;
  inline ::jynetwork::proto::sPartnerStarStats* mutable_partner_star_stats(int index);
  inline ::jynetwork::proto::sPartnerStarStats* add_partner_star_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerStarStats >&
      partner_star_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerStarStats >*
      mutable_partner_star_stats();

  // repeated .jynetwork.proto.sActivityStats activity_stats = 45;
  inline int activity_stats_size() const;
  inline void clear_activity_stats();
  static const int kActivityStatsFieldNumber = 45;
  inline const ::jynetwork::proto::sActivityStats& activity_stats(int index) const;
  inline ::jynetwork::proto::sActivityStats* mutable_activity_stats(int index);
  inline ::jynetwork::proto::sActivityStats* add_activity_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActivityStats >&
      activity_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActivityStats >*
      mutable_activity_stats();

  // repeated .jynetwork.proto.sResourseStats resourse_stats = 46;
  inline int resourse_stats_size() const;
  inline void clear_resourse_stats();
  static const int kResourseStatsFieldNumber = 46;
  inline const ::jynetwork::proto::sResourseStats& resourse_stats(int index) const;
  inline ::jynetwork::proto::sResourseStats* mutable_resourse_stats(int index);
  inline ::jynetwork::proto::sResourseStats* add_resourse_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sResourseStats >&
      resourse_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sResourseStats >*
      mutable_resourse_stats();

  // repeated .jynetwork.proto.sHomeBackground home_bg_stats = 47;
  inline int home_bg_stats_size() const;
  inline void clear_home_bg_stats();
  static const int kHomeBgStatsFieldNumber = 47;
  inline const ::jynetwork::proto::sHomeBackground& home_bg_stats(int index) const;
  inline ::jynetwork::proto::sHomeBackground* mutable_home_bg_stats(int index);
  inline ::jynetwork::proto::sHomeBackground* add_home_bg_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sHomeBackground >&
      home_bg_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sHomeBackground >*
      mutable_home_bg_stats();

  // repeated .jynetwork.proto.sBattleMapGuide battle_map_guide = 48;
  inline int battle_map_guide_size() const;
  inline void clear_battle_map_guide();
  static const int kBattleMapGuideFieldNumber = 48;
  inline const ::jynetwork::proto::sBattleMapGuide& battle_map_guide(int index) const;
  inline ::jynetwork::proto::sBattleMapGuide* mutable_battle_map_guide(int index);
  inline ::jynetwork::proto::sBattleMapGuide* add_battle_map_guide();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBattleMapGuide >&
      battle_map_guide() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBattleMapGuide >*
      mutable_battle_map_guide();

  // repeated .jynetwork.proto.sEquipRecommend equip_recommend_stats = 49;
  inline int equip_recommend_stats_size() const;
  inline void clear_equip_recommend_stats();
  static const int kEquipRecommendStatsFieldNumber = 49;
  inline const ::jynetwork::proto::sEquipRecommend& equip_recommend_stats(int index) const;
  inline ::jynetwork::proto::sEquipRecommend* mutable_equip_recommend_stats(int index);
  inline ::jynetwork::proto::sEquipRecommend* add_equip_recommend_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipRecommend >&
      equip_recommend_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipRecommend >*
      mutable_equip_recommend_stats();

  // repeated .jynetwork.proto.sSoundEffectWav sound_effect = 50;
  inline int sound_effect_size() const;
  inline void clear_sound_effect();
  static const int kSoundEffectFieldNumber = 50;
  inline const ::jynetwork::proto::sSoundEffectWav& sound_effect(int index) const;
  inline ::jynetwork::proto::sSoundEffectWav* mutable_sound_effect(int index);
  inline ::jynetwork::proto::sSoundEffectWav* add_sound_effect();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundEffectWav >&
      sound_effect() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundEffectWav >*
      mutable_sound_effect();

  // repeated .jynetwork.proto.sSoundEffectMusic music_effect = 51;
  inline int music_effect_size() const;
  inline void clear_music_effect();
  static const int kMusicEffectFieldNumber = 51;
  inline const ::jynetwork::proto::sSoundEffectMusic& music_effect(int index) const;
  inline ::jynetwork::proto::sSoundEffectMusic* mutable_music_effect(int index);
  inline ::jynetwork::proto::sSoundEffectMusic* add_music_effect();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundEffectMusic >&
      music_effect() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundEffectMusic >*
      mutable_music_effect();

  // repeated .jynetwork.proto.sEquipIdentify equip_identify = 52;
  inline int equip_identify_size() const;
  inline void clear_equip_identify();
  static const int kEquipIdentifyFieldNumber = 52;
  inline const ::jynetwork::proto::sEquipIdentify& equip_identify(int index) const;
  inline ::jynetwork::proto::sEquipIdentify* mutable_equip_identify(int index);
  inline ::jynetwork::proto::sEquipIdentify* add_equip_identify();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipIdentify >&
      equip_identify() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipIdentify >*
      mutable_equip_identify();

  // repeated .jynetwork.proto.sAttributeBase attribute_base = 53;
  inline int attribute_base_size() const;
  inline void clear_attribute_base();
  static const int kAttributeBaseFieldNumber = 53;
  inline const ::jynetwork::proto::sAttributeBase& attribute_base(int index) const;
  inline ::jynetwork::proto::sAttributeBase* mutable_attribute_base(int index);
  inline ::jynetwork::proto::sAttributeBase* add_attribute_base();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sAttributeBase >&
      attribute_base() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sAttributeBase >*
      mutable_attribute_base();

  // repeated .jynetwork.proto.sCorpsLevel crops_level = 54;
  inline int crops_level_size() const;
  inline void clear_crops_level();
  static const int kCropsLevelFieldNumber = 54;
  inline const ::jynetwork::proto::sCorpsLevel& crops_level(int index) const;
  inline ::jynetwork::proto::sCorpsLevel* mutable_crops_level(int index);
  inline ::jynetwork::proto::sCorpsLevel* add_crops_level();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCorpsLevel >&
      crops_level() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCorpsLevel >*
      mutable_crops_level();

  // repeated .jynetwork.proto.sEffectMove effect_move = 55;
  inline int effect_move_size() const;
  inline void clear_effect_move();
  static const int kEffectMoveFieldNumber = 55;
  inline const ::jynetwork::proto::sEffectMove& effect_move(int index) const;
  inline ::jynetwork::proto::sEffectMove* mutable_effect_move(int index);
  inline ::jynetwork::proto::sEffectMove* add_effect_move();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectMove >&
      effect_move() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectMove >*
      mutable_effect_move();

  // repeated .jynetwork.proto.sVipStats vip_stats = 56;
  inline int vip_stats_size() const;
  inline void clear_vip_stats();
  static const int kVipStatsFieldNumber = 56;
  inline const ::jynetwork::proto::sVipStats& vip_stats(int index) const;
  inline ::jynetwork::proto::sVipStats* mutable_vip_stats(int index);
  inline ::jynetwork::proto::sVipStats* add_vip_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipStats >&
      vip_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipStats >*
      mutable_vip_stats();

  // repeated .jynetwork.proto.sVipCostStats elite_reset = 57;
  inline int elite_reset_size() const;
  inline void clear_elite_reset();
  static const int kEliteResetFieldNumber = 57;
  inline const ::jynetwork::proto::sVipCostStats& elite_reset(int index) const;
  inline ::jynetwork::proto::sVipCostStats* mutable_elite_reset(int index);
  inline ::jynetwork::proto::sVipCostStats* add_elite_reset();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >&
      elite_reset() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >*
      mutable_elite_reset();

  // repeated .jynetwork.proto.sVipCostStats shop_reset = 58;
  inline int shop_reset_size() const;
  inline void clear_shop_reset();
  static const int kShopResetFieldNumber = 58;
  inline const ::jynetwork::proto::sVipCostStats& shop_reset(int index) const;
  inline ::jynetwork::proto::sVipCostStats* mutable_shop_reset(int index);
  inline ::jynetwork::proto::sVipCostStats* add_shop_reset();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >&
      shop_reset() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >*
      mutable_shop_reset();

  // repeated .jynetwork.proto.sVipCostStats worldboss_reset = 59;
  inline int worldboss_reset_size() const;
  inline void clear_worldboss_reset();
  static const int kWorldbossResetFieldNumber = 59;
  inline const ::jynetwork::proto::sVipCostStats& worldboss_reset(int index) const;
  inline ::jynetwork::proto::sVipCostStats* mutable_worldboss_reset(int index);
  inline ::jynetwork::proto::sVipCostStats* add_worldboss_reset();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >&
      worldboss_reset() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >*
      mutable_worldboss_reset();

  // repeated .jynetwork.proto.sEquipGroupStats equip_group_stats = 60;
  inline int equip_group_stats_size() const;
  inline void clear_equip_group_stats();
  static const int kEquipGroupStatsFieldNumber = 60;
  inline const ::jynetwork::proto::sEquipGroupStats& equip_group_stats(int index) const;
  inline ::jynetwork::proto::sEquipGroupStats* mutable_equip_group_stats(int index);
  inline ::jynetwork::proto::sEquipGroupStats* add_equip_group_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipGroupStats >&
      equip_group_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipGroupStats >*
      mutable_equip_group_stats();

  // repeated .jynetwork.proto.sConstantsStats constant_group_stats = 61;
  inline int constant_group_stats_size() const;
  inline void clear_constant_group_stats();
  static const int kConstantGroupStatsFieldNumber = 61;
  inline const ::jynetwork::proto::sConstantsStats& constant_group_stats(int index) const;
  inline ::jynetwork::proto::sConstantsStats* mutable_constant_group_stats(int index);
  inline ::jynetwork::proto::sConstantsStats* add_constant_group_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sConstantsStats >&
      constant_group_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sConstantsStats >*
      mutable_constant_group_stats();

  // repeated .jynetwork.proto.sMusiceEventTable music_event = 62;
  inline int music_event_size() const;
  inline void clear_music_event();
  static const int kMusicEventFieldNumber = 62;
  inline const ::jynetwork::proto::sMusiceEventTable& music_event(int index) const;
  inline ::jynetwork::proto::sMusiceEventTable* mutable_music_event(int index);
  inline ::jynetwork::proto::sMusiceEventTable* add_music_event();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMusiceEventTable >&
      music_event() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMusiceEventTable >*
      mutable_music_event();

  // repeated .jynetwork.proto.sCastleEndlessRelation castle_er = 63;
  inline int castle_er_size() const;
  inline void clear_castle_er();
  static const int kCastleErFieldNumber = 63;
  inline const ::jynetwork::proto::sCastleEndlessRelation& castle_er(int index) const;
  inline ::jynetwork::proto::sCastleEndlessRelation* mutable_castle_er(int index);
  inline ::jynetwork::proto::sCastleEndlessRelation* add_castle_er();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleEndlessRelation >&
      castle_er() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleEndlessRelation >*
      mutable_castle_er();

  // repeated .jynetwork.proto.CorpsBossMapStats bossMapStats = 64;
  inline int bossmapstats_size() const;
  inline void clear_bossmapstats();
  static const int kBossMapStatsFieldNumber = 64;
  inline const ::jynetwork::proto::CorpsBossMapStats& bossmapstats(int index) const;
  inline ::jynetwork::proto::CorpsBossMapStats* mutable_bossmapstats(int index);
  inline ::jynetwork::proto::CorpsBossMapStats* add_bossmapstats();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossMapStats >&
      bossmapstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossMapStats >*
      mutable_bossmapstats();

  // repeated .jynetwork.proto.sVipCostStats cold_reset = 65;
  inline int cold_reset_size() const;
  inline void clear_cold_reset();
  static const int kColdResetFieldNumber = 65;
  inline const ::jynetwork::proto::sVipCostStats& cold_reset(int index) const;
  inline ::jynetwork::proto::sVipCostStats* mutable_cold_reset(int index);
  inline ::jynetwork::proto::sVipCostStats* add_cold_reset();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >&
      cold_reset() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >*
      mutable_cold_reset();

  // repeated string battle_loadings = 66;
  inline int battle_loadings_size() const;
  inline void clear_battle_loadings();
  static const int kBattleLoadingsFieldNumber = 66;
  inline const ::std::string& battle_loadings(int index) const;
  inline ::std::string* mutable_battle_loadings(int index);
  inline void set_battle_loadings(int index, const ::std::string& value);
  inline void set_battle_loadings(int index, const char* value);
  inline void set_battle_loadings(int index, const char* value, size_t size);
  inline ::std::string* add_battle_loadings();
  inline void add_battle_loadings(const ::std::string& value);
  inline void add_battle_loadings(const char* value);
  inline void add_battle_loadings(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& battle_loadings() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_battle_loadings();

  // repeated .jynetwork.proto.sVipCostStats double_fight_reset = 67;
  inline int double_fight_reset_size() const;
  inline void clear_double_fight_reset();
  static const int kDoubleFightResetFieldNumber = 67;
  inline const ::jynetwork::proto::sVipCostStats& double_fight_reset(int index) const;
  inline ::jynetwork::proto::sVipCostStats* mutable_double_fight_reset(int index);
  inline ::jynetwork::proto::sVipCostStats* add_double_fight_reset();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >&
      double_fight_reset() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >*
      mutable_double_fight_reset();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPersistDB)
 private:
  inline void set_has_nversion();
  inline void clear_has_nversion();
  inline void set_has_ppl_constant();
  inline void clear_has_ppl_constant();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sItemStats > itemstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sGameStats > gamestats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipStats > equipstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSkillStats > skillstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardStats > cardstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuffStats > buffstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleStats > castlestats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sStageProp > stageprops_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectStats > effectstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffects > effects_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sModelAction > modelactions_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefresh > monsterrefresh_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropStats > dropstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorStats > charactorstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectTable > effecttable_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sAISetting > ais_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundStats > soundstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundTable > soundtable_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sShopItem > shopstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharSkillLevelUp > char_skill_levelup_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharExp > char_exp_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharLevelUp > char_levelup_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharChangeJob > char_change_job_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardIntensify > card_intensify_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardLevelUp > card_levelup_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardStarUp > card_starup_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropStats > drop_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipIntensify > equip_intensify_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipLevelUp > equip_levelup_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipStarUp > equip_starup_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sTaskStats > taskstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuyStaminaStats > buy_stamina_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuyGoldStats > buy_gold_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bnks_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPrefixStats > prefix_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActionEffect > action_effect_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDecomStats > decom_stats_;
  ::jynetwork::proto::sPPLConstant* ppl_constant_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sWeekStats > week_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerStats > partnerstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerLvUpStats > partner_lv_up_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerIntensifyStats > partner_intensify_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerStarStats > partner_star_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActivityStats > activity_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sResourseStats > resourse_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sHomeBackground > home_bg_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBattleMapGuide > battle_map_guide_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipRecommend > equip_recommend_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundEffectWav > sound_effect_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundEffectMusic > music_effect_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipIdentify > equip_identify_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sAttributeBase > attribute_base_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCorpsLevel > crops_level_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectMove > effect_move_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipStats > vip_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats > elite_reset_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats > shop_reset_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats > worldboss_reset_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipGroupStats > equip_group_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sConstantsStats > constant_group_stats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMusiceEventTable > music_event_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleEndlessRelation > castle_er_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossMapStats > bossmapstats_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats > cold_reset_;
  ::google::protobuf::RepeatedPtrField< ::std::string> battle_loadings_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats > double_fight_reset_;
  ::google::protobuf::uint32 nversion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(67 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sPersistDB* default_instance_;
};
// -------------------------------------------------------------------

class sMusicSetting : public ::google::protobuf::MessageLite {
 public:
  sMusicSetting();
  virtual ~sMusicSetting();

  sMusicSetting(const sMusicSetting& from);

  inline sMusicSetting& operator=(const sMusicSetting& from) {
    CopyFrom(from);
    return *this;
  }

  static const sMusicSetting& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sMusicSetting* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sMusicSetting* other);

  // implements Message ----------------------------------------------

  sMusicSetting* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sMusicSetting& from);
  void MergeFrom(const sMusicSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 bgm_open = 1;
  inline bool has_bgm_open() const;
  inline void clear_bgm_open();
  static const int kBgmOpenFieldNumber = 1;
  inline ::google::protobuf::uint32 bgm_open() const;
  inline void set_bgm_open(::google::protobuf::uint32 value);

  // optional uint32 se_open = 2;
  inline bool has_se_open() const;
  inline void clear_se_open();
  static const int kSeOpenFieldNumber = 2;
  inline ::google::protobuf::uint32 se_open() const;
  inline void set_se_open(::google::protobuf::uint32 value);

  // optional float bgm_vol = 3;
  inline bool has_bgm_vol() const;
  inline void clear_bgm_vol();
  static const int kBgmVolFieldNumber = 3;
  inline float bgm_vol() const;
  inline void set_bgm_vol(float value);

  // optional float se_vol = 4;
  inline bool has_se_vol() const;
  inline void clear_se_vol();
  static const int kSeVolFieldNumber = 4;
  inline float se_vol() const;
  inline void set_se_vol(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sMusicSetting)
 private:
  inline void set_has_bgm_open();
  inline void clear_has_bgm_open();
  inline void set_has_se_open();
  inline void clear_has_se_open();
  inline void set_has_bgm_vol();
  inline void clear_has_bgm_vol();
  inline void set_has_se_vol();
  inline void clear_has_se_vol();

  ::google::protobuf::uint32 bgm_open_;
  ::google::protobuf::uint32 se_open_;
  float bgm_vol_;
  float se_vol_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sMusicSetting* default_instance_;
};
// -------------------------------------------------------------------

class sPlayerSaveExt : public ::google::protobuf::MessageLite {
 public:
  sPlayerSaveExt();
  virtual ~sPlayerSaveExt();

  sPlayerSaveExt(const sPlayerSaveExt& from);

  inline sPlayerSaveExt& operator=(const sPlayerSaveExt& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPlayerSaveExt& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPlayerSaveExt* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPlayerSaveExt* other);

  // implements Message ----------------------------------------------

  sPlayerSaveExt* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPlayerSaveExt& from);
  void MergeFrom(const sPlayerSaveExt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jynetwork.proto.sMusicSetting music = 1;
  inline bool has_music() const;
  inline void clear_music();
  static const int kMusicFieldNumber = 1;
  inline const ::jynetwork::proto::sMusicSetting& music() const;
  inline ::jynetwork::proto::sMusicSetting* mutable_music();
  inline ::jynetwork::proto::sMusicSetting* release_music();
  inline void set_allocated_music(::jynetwork::proto::sMusicSetting* music);

  // optional uint32 skillauto = 2;
  inline bool has_skillauto() const;
  inline void clear_skillauto();
  static const int kSkillautoFieldNumber = 2;
  inline ::google::protobuf::uint32 skillauto() const;
  inline void set_skillauto(::google::protobuf::uint32 value);

  // repeated uint32 guides = 3;
  inline int guides_size() const;
  inline void clear_guides();
  static const int kGuidesFieldNumber = 3;
  inline ::google::protobuf::uint32 guides(int index) const;
  inline void set_guides(int index, ::google::protobuf::uint32 value);
  inline void add_guides(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      guides() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_guides();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPlayerSaveExt)
 private:
  inline void set_has_music();
  inline void clear_has_music();
  inline void set_has_skillauto();
  inline void clear_has_skillauto();

  ::jynetwork::proto::sMusicSetting* music_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > guides_;
  ::google::protobuf::uint32 skillauto_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sPlayerSaveExt* default_instance_;
};
// -------------------------------------------------------------------

class sLanguageCell : public ::google::protobuf::MessageLite {
 public:
  sLanguageCell();
  virtual ~sLanguageCell();

  sLanguageCell(const sLanguageCell& from);

  inline sLanguageCell& operator=(const sLanguageCell& from) {
    CopyFrom(from);
    return *this;
  }

  static const sLanguageCell& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sLanguageCell* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sLanguageCell* other);

  // implements Message ----------------------------------------------

  sLanguageCell* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sLanguageCell& from);
  void MergeFrom(const sLanguageCell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional string language = 2;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 2;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sLanguageCell)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_language();
  inline void clear_has_language();

  ::std::string* language_;
  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sLanguageCell* default_instance_;
};
// -------------------------------------------------------------------

class sLanguages : public ::google::protobuf::MessageLite {
 public:
  sLanguages();
  virtual ~sLanguages();

  sLanguages(const sLanguages& from);

  inline sLanguages& operator=(const sLanguages& from) {
    CopyFrom(from);
    return *this;
  }

  static const sLanguages& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sLanguages* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sLanguages* other);

  // implements Message ----------------------------------------------

  sLanguages* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sLanguages& from);
  void MergeFrom(const sLanguages& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sLanguageCell cells = 2;
  inline int cells_size() const;
  inline void clear_cells();
  static const int kCellsFieldNumber = 2;
  inline const ::jynetwork::proto::sLanguageCell& cells(int index) const;
  inline ::jynetwork::proto::sLanguageCell* mutable_cells(int index);
  inline ::jynetwork::proto::sLanguageCell* add_cells();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sLanguageCell >&
      cells() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sLanguageCell >*
      mutable_cells();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sLanguages)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sLanguageCell > cells_;
  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sLanguages* default_instance_;
};
// -------------------------------------------------------------------

class sBattleGuide : public ::google::protobuf::MessageLite {
 public:
  sBattleGuide();
  virtual ~sBattleGuide();

  sBattleGuide(const sBattleGuide& from);

  inline sBattleGuide& operator=(const sBattleGuide& from) {
    CopyFrom(from);
    return *this;
  }

  static const sBattleGuide& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sBattleGuide* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sBattleGuide* other);

  // implements Message ----------------------------------------------

  sBattleGuide* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sBattleGuide& from);
  void MergeFrom(const sBattleGuide& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 wave = 1;
  inline bool has_wave() const;
  inline void clear_wave();
  static const int kWaveFieldNumber = 1;
  inline ::google::protobuf::int32 wave() const;
  inline void set_wave(::google::protobuf::int32 value);

  // optional uint32 is_init = 2;
  inline bool has_is_init() const;
  inline void clear_is_init();
  static const int kIsInitFieldNumber = 2;
  inline ::google::protobuf::uint32 is_init() const;
  inline void set_is_init(::google::protobuf::uint32 value);

  // optional float delay = 3;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 3;
  inline float delay() const;
  inline void set_delay(float value);

  // optional uint32 is_pause = 4;
  inline bool has_is_pause() const;
  inline void clear_is_pause();
  static const int kIsPauseFieldNumber = 4;
  inline ::google::protobuf::uint32 is_pause() const;
  inline void set_is_pause(::google::protobuf::uint32 value);

  // optional uint32 is_continue = 5;
  inline bool has_is_continue() const;
  inline void clear_is_continue();
  static const int kIsContinueFieldNumber = 5;
  inline ::google::protobuf::uint32 is_continue() const;
  inline void set_is_continue(::google::protobuf::uint32 value);

  // optional uint32 end_to_continue = 6;
  inline bool has_end_to_continue() const;
  inline void clear_end_to_continue();
  static const int kEndToContinueFieldNumber = 6;
  inline ::google::protobuf::uint32 end_to_continue() const;
  inline void set_end_to_continue(::google::protobuf::uint32 value);

  // optional uint32 end_condition = 7;
  inline bool has_end_condition() const;
  inline void clear_end_condition();
  static const int kEndConditionFieldNumber = 7;
  inline ::google::protobuf::uint32 end_condition() const;
  inline void set_end_condition(::google::protobuf::uint32 value);

  // optional float ec_param1 = 8;
  inline bool has_ec_param1() const;
  inline void clear_ec_param1();
  static const int kEcParam1FieldNumber = 8;
  inline float ec_param1() const;
  inline void set_ec_param1(float value);

  // optional uint32 ec_param2 = 9;
  inline bool has_ec_param2() const;
  inline void clear_ec_param2();
  static const int kEcParam2FieldNumber = 9;
  inline ::google::protobuf::uint32 ec_param2() const;
  inline void set_ec_param2(::google::protobuf::uint32 value);

  // optional uint32 show_ccb = 10;
  inline bool has_show_ccb() const;
  inline void clear_show_ccb();
  static const int kShowCcbFieldNumber = 10;
  inline ::google::protobuf::uint32 show_ccb() const;
  inline void set_show_ccb(::google::protobuf::uint32 value);

  // optional string ccb_param = 11;
  inline bool has_ccb_param() const;
  inline void clear_ccb_param();
  static const int kCcbParamFieldNumber = 11;
  inline const ::std::string& ccb_param() const;
  inline void set_ccb_param(const ::std::string& value);
  inline void set_ccb_param(const char* value);
  inline void set_ccb_param(const char* value, size_t size);
  inline ::std::string* mutable_ccb_param();
  inline ::std::string* release_ccb_param();
  inline void set_allocated_ccb_param(::std::string* ccb_param);

  // optional uint32 ccb_right_in = 12;
  inline bool has_ccb_right_in() const;
  inline void clear_ccb_right_in();
  static const int kCcbRightInFieldNumber = 12;
  inline ::google::protobuf::uint32 ccb_right_in() const;
  inline void set_ccb_right_in(::google::protobuf::uint32 value);

  // optional string ccb_char_name = 13;
  inline bool has_ccb_char_name() const;
  inline void clear_ccb_char_name();
  static const int kCcbCharNameFieldNumber = 13;
  inline const ::std::string& ccb_char_name() const;
  inline void set_ccb_char_name(const ::std::string& value);
  inline void set_ccb_char_name(const char* value);
  inline void set_ccb_char_name(const char* value, size_t size);
  inline ::std::string* mutable_ccb_char_name();
  inline ::std::string* release_ccb_char_name();
  inline void set_allocated_ccb_char_name(::std::string* ccb_char_name);

  // optional uint32 ccb_end = 14;
  inline bool has_ccb_end() const;
  inline void clear_ccb_end();
  static const int kCcbEndFieldNumber = 14;
  inline ::google::protobuf::uint32 ccb_end() const;
  inline void set_ccb_end(::google::protobuf::uint32 value);

  // optional uint32 show_speech = 15;
  inline bool has_show_speech() const;
  inline void clear_show_speech();
  static const int kShowSpeechFieldNumber = 15;
  inline ::google::protobuf::uint32 show_speech() const;
  inline void set_show_speech(::google::protobuf::uint32 value);

  // optional uint32 triger_before = 16;
  inline bool has_triger_before() const;
  inline void clear_triger_before();
  static const int kTrigerBeforeFieldNumber = 16;
  inline ::google::protobuf::uint32 triger_before() const;
  inline void set_triger_before(::google::protobuf::uint32 value);

  // optional uint32 triger = 17;
  inline bool has_triger() const;
  inline void clear_triger();
  static const int kTrigerFieldNumber = 17;
  inline ::google::protobuf::uint32 triger() const;
  inline void set_triger(::google::protobuf::uint32 value);

  // optional float in_x = 18;
  inline bool has_in_x() const;
  inline void clear_in_x();
  static const int kInXFieldNumber = 18;
  inline float in_x() const;
  inline void set_in_x(float value);

  // optional float in_y = 19;
  inline bool has_in_y() const;
  inline void clear_in_y();
  static const int kInYFieldNumber = 19;
  inline float in_y() const;
  inline void set_in_y(float value);

  // optional uint32 lost_play = 20;
  inline bool has_lost_play() const;
  inline void clear_lost_play();
  static const int kLostPlayFieldNumber = 20;
  inline ::google::protobuf::uint32 lost_play() const;
  inline void set_lost_play(::google::protobuf::uint32 value);

  // optional string ccb_anim_name = 21;
  inline bool has_ccb_anim_name() const;
  inline void clear_ccb_anim_name();
  static const int kCcbAnimNameFieldNumber = 21;
  inline const ::std::string& ccb_anim_name() const;
  inline void set_ccb_anim_name(const ::std::string& value);
  inline void set_ccb_anim_name(const char* value);
  inline void set_ccb_anim_name(const char* value, size_t size);
  inline ::std::string* mutable_ccb_anim_name();
  inline ::std::string* release_ccb_anim_name();
  inline void set_allocated_ccb_anim_name(::std::string* ccb_anim_name);

  // optional uint32 anim3d_name = 22;
  inline bool has_anim3d_name() const;
  inline void clear_anim3d_name();
  static const int kAnim3DNameFieldNumber = 22;
  inline ::google::protobuf::uint32 anim3d_name() const;
  inline void set_anim3d_name(::google::protobuf::uint32 value);

  // optional uint32 anim3d_name_loop = 23;
  inline bool has_anim3d_name_loop() const;
  inline void clear_anim3d_name_loop();
  static const int kAnim3DNameLoopFieldNumber = 23;
  inline ::google::protobuf::uint32 anim3d_name_loop() const;
  inline void set_anim3d_name_loop(::google::protobuf::uint32 value);

  // optional string speech = 24;
  inline bool has_speech() const;
  inline void clear_speech();
  static const int kSpeechFieldNumber = 24;
  inline const ::std::string& speech() const;
  inline void set_speech(const ::std::string& value);
  inline void set_speech(const char* value);
  inline void set_speech(const char* value, size_t size);
  inline ::std::string* mutable_speech();
  inline ::std::string* release_speech();
  inline void set_allocated_speech(::std::string* speech);

  // optional float speech_time = 25;
  inline bool has_speech_time() const;
  inline void clear_speech_time();
  static const int kSpeechTimeFieldNumber = 25;
  inline float speech_time() const;
  inline void set_speech_time(float value);

  // optional float pause_delay = 26;
  inline bool has_pause_delay() const;
  inline void clear_pause_delay();
  static const int kPauseDelayFieldNumber = 26;
  inline float pause_delay() const;
  inline void set_pause_delay(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sBattleGuide)
 private:
  inline void set_has_wave();
  inline void clear_has_wave();
  inline void set_has_is_init();
  inline void clear_has_is_init();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_is_pause();
  inline void clear_has_is_pause();
  inline void set_has_is_continue();
  inline void clear_has_is_continue();
  inline void set_has_end_to_continue();
  inline void clear_has_end_to_continue();
  inline void set_has_end_condition();
  inline void clear_has_end_condition();
  inline void set_has_ec_param1();
  inline void clear_has_ec_param1();
  inline void set_has_ec_param2();
  inline void clear_has_ec_param2();
  inline void set_has_show_ccb();
  inline void clear_has_show_ccb();
  inline void set_has_ccb_param();
  inline void clear_has_ccb_param();
  inline void set_has_ccb_right_in();
  inline void clear_has_ccb_right_in();
  inline void set_has_ccb_char_name();
  inline void clear_has_ccb_char_name();
  inline void set_has_ccb_end();
  inline void clear_has_ccb_end();
  inline void set_has_show_speech();
  inline void clear_has_show_speech();
  inline void set_has_triger_before();
  inline void clear_has_triger_before();
  inline void set_has_triger();
  inline void clear_has_triger();
  inline void set_has_in_x();
  inline void clear_has_in_x();
  inline void set_has_in_y();
  inline void clear_has_in_y();
  inline void set_has_lost_play();
  inline void clear_has_lost_play();
  inline void set_has_ccb_anim_name();
  inline void clear_has_ccb_anim_name();
  inline void set_has_anim3d_name();
  inline void clear_has_anim3d_name();
  inline void set_has_anim3d_name_loop();
  inline void clear_has_anim3d_name_loop();
  inline void set_has_speech();
  inline void clear_has_speech();
  inline void set_has_speech_time();
  inline void clear_has_speech_time();
  inline void set_has_pause_delay();
  inline void clear_has_pause_delay();

  ::google::protobuf::int32 wave_;
  ::google::protobuf::uint32 is_init_;
  float delay_;
  ::google::protobuf::uint32 is_pause_;
  ::google::protobuf::uint32 is_continue_;
  ::google::protobuf::uint32 end_to_continue_;
  ::google::protobuf::uint32 end_condition_;
  float ec_param1_;
  ::google::protobuf::uint32 ec_param2_;
  ::google::protobuf::uint32 show_ccb_;
  ::std::string* ccb_param_;
  ::std::string* ccb_char_name_;
  ::google::protobuf::uint32 ccb_right_in_;
  ::google::protobuf::uint32 ccb_end_;
  ::google::protobuf::uint32 show_speech_;
  ::google::protobuf::uint32 triger_before_;
  ::google::protobuf::uint32 triger_;
  float in_x_;
  float in_y_;
  ::google::protobuf::uint32 lost_play_;
  ::std::string* ccb_anim_name_;
  ::google::protobuf::uint32 anim3d_name_;
  ::google::protobuf::uint32 anim3d_name_loop_;
  ::std::string* speech_;
  float speech_time_;
  float pause_delay_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sBattleGuide* default_instance_;
};
// -------------------------------------------------------------------

class sBattleMapGuide : public ::google::protobuf::MessageLite {
 public:
  sBattleMapGuide();
  virtual ~sBattleMapGuide();

  sBattleMapGuide(const sBattleMapGuide& from);

  inline sBattleMapGuide& operator=(const sBattleMapGuide& from) {
    CopyFrom(from);
    return *this;
  }

  static const sBattleMapGuide& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sBattleMapGuide* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sBattleMapGuide* other);

  // implements Message ----------------------------------------------

  sBattleMapGuide* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sBattleMapGuide& from);
  void MergeFrom(const sBattleMapGuide& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mapid = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sBattleGuide guides = 2;
  inline int guides_size() const;
  inline void clear_guides();
  static const int kGuidesFieldNumber = 2;
  inline const ::jynetwork::proto::sBattleGuide& guides(int index) const;
  inline ::jynetwork::proto::sBattleGuide* mutable_guides(int index);
  inline ::jynetwork::proto::sBattleGuide* add_guides();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBattleGuide >&
      guides() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBattleGuide >*
      mutable_guides();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sBattleMapGuide)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBattleGuide > guides_;
  ::google::protobuf::uint32 mapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sBattleMapGuide* default_instance_;
};
// -------------------------------------------------------------------

class sSoundEffectWav : public ::google::protobuf::MessageLite {
 public:
  sSoundEffectWav();
  virtual ~sSoundEffectWav();

  sSoundEffectWav(const sSoundEffectWav& from);

  inline sSoundEffectWav& operator=(const sSoundEffectWav& from) {
    CopyFrom(from);
    return *this;
  }

  static const sSoundEffectWav& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sSoundEffectWav* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sSoundEffectWav* other);

  // implements Message ----------------------------------------------

  sSoundEffectWav* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sSoundEffectWav& from);
  void MergeFrom(const sSoundEffectWav& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string snd_name = 1;
  inline bool has_snd_name() const;
  inline void clear_snd_name();
  static const int kSndNameFieldNumber = 1;
  inline const ::std::string& snd_name() const;
  inline void set_snd_name(const ::std::string& value);
  inline void set_snd_name(const char* value);
  inline void set_snd_name(const char* value, size_t size);
  inline ::std::string* mutable_snd_name();
  inline ::std::string* release_snd_name();
  inline void set_allocated_snd_name(::std::string* snd_name);

  // repeated string snd_files = 2;
  inline int snd_files_size() const;
  inline void clear_snd_files();
  static const int kSndFilesFieldNumber = 2;
  inline const ::std::string& snd_files(int index) const;
  inline ::std::string* mutable_snd_files(int index);
  inline void set_snd_files(int index, const ::std::string& value);
  inline void set_snd_files(int index, const char* value);
  inline void set_snd_files(int index, const char* value, size_t size);
  inline ::std::string* add_snd_files();
  inline void add_snd_files(const ::std::string& value);
  inline void add_snd_files(const char* value);
  inline void add_snd_files(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& snd_files() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_snd_files();

  // optional uint32 is_mp3 = 3;
  inline bool has_is_mp3() const;
  inline void clear_is_mp3();
  static const int kIsMp3FieldNumber = 3;
  inline ::google::protobuf::uint32 is_mp3() const;
  inline void set_is_mp3(::google::protobuf::uint32 value);

  // optional float duration = 4;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 4;
  inline float duration() const;
  inline void set_duration(float value);

  // optional uint32 max_count = 5;
  inline bool has_max_count() const;
  inline void clear_max_count();
  static const int kMaxCountFieldNumber = 5;
  inline ::google::protobuf::uint32 max_count() const;
  inline void set_max_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sSoundEffectWav)
 private:
  inline void set_has_snd_name();
  inline void clear_has_snd_name();
  inline void set_has_is_mp3();
  inline void clear_has_is_mp3();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_max_count();
  inline void clear_has_max_count();

  ::std::string* snd_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> snd_files_;
  ::google::protobuf::uint32 is_mp3_;
  float duration_;
  ::google::protobuf::uint32 max_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sSoundEffectWav* default_instance_;
};
// -------------------------------------------------------------------

class sSoundEffectMusic : public ::google::protobuf::MessageLite {
 public:
  sSoundEffectMusic();
  virtual ~sSoundEffectMusic();

  sSoundEffectMusic(const sSoundEffectMusic& from);

  inline sSoundEffectMusic& operator=(const sSoundEffectMusic& from) {
    CopyFrom(from);
    return *this;
  }

  static const sSoundEffectMusic& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sSoundEffectMusic* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sSoundEffectMusic* other);

  // implements Message ----------------------------------------------

  sSoundEffectMusic* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sSoundEffectMusic& from);
  void MergeFrom(const sSoundEffectMusic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional string snd_file = 2;
  inline bool has_snd_file() const;
  inline void clear_snd_file();
  static const int kSndFileFieldNumber = 2;
  inline const ::std::string& snd_file() const;
  inline void set_snd_file(const ::std::string& value);
  inline void set_snd_file(const char* value);
  inline void set_snd_file(const char* value, size_t size);
  inline ::std::string* mutable_snd_file();
  inline ::std::string* release_snd_file();
  inline void set_allocated_snd_file(::std::string* snd_file);

  // optional float duration = 3;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 3;
  inline float duration() const;
  inline void set_duration(float value);

  // optional uint32 next_id = 4;
  inline bool has_next_id() const;
  inline void clear_next_id();
  static const int kNextIdFieldNumber = 4;
  inline ::google::protobuf::uint32 next_id() const;
  inline void set_next_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sSoundEffectMusic)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_snd_file();
  inline void clear_has_snd_file();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_next_id();
  inline void clear_has_next_id();

  ::std::string* snd_file_;
  ::google::protobuf::uint32 uid_;
  float duration_;
  ::google::protobuf::uint32 next_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sSoundEffectMusic* default_instance_;
};
// -------------------------------------------------------------------

class sMusiceEventTable : public ::google::protobuf::MessageLite {
 public:
  sMusiceEventTable();
  virtual ~sMusiceEventTable();

  sMusiceEventTable(const sMusiceEventTable& from);

  inline sMusiceEventTable& operator=(const sMusiceEventTable& from) {
    CopyFrom(from);
    return *this;
  }

  static const sMusiceEventTable& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sMusiceEventTable* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sMusiceEventTable* other);

  // implements Message ----------------------------------------------

  sMusiceEventTable* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sMusiceEventTable& from);
  void MergeFrom(const sMusiceEventTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // repeated uint32 musicid = 2;
  inline int musicid_size() const;
  inline void clear_musicid();
  static const int kMusicidFieldNumber = 2;
  inline ::google::protobuf::uint32 musicid(int index) const;
  inline void set_musicid(int index, ::google::protobuf::uint32 value);
  inline void add_musicid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      musicid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_musicid();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sMusiceEventTable)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > musicid_;
  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_StoC_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_StoC_2eproto();
  #endif
  friend void protobuf_AssignDesc_StoC_2eproto();
  friend void protobuf_ShutdownFile_StoC_2eproto();

  void InitAsDefaultInstance();
  static sMusiceEventTable* default_instance_;
};
// ===================================================================


// ===================================================================

// sCharactorInit

// optional uint32 uid = 1;
inline bool sCharactorInit::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCharactorInit::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCharactorInit::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCharactorInit::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sCharactorInit::uid() const {
  return uid_;
}
inline void sCharactorInit::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string playername = 2;
inline bool sCharactorInit::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCharactorInit::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCharactorInit::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCharactorInit::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& sCharactorInit::playername() const {
  return *playername_;
}
inline void sCharactorInit::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void sCharactorInit::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void sCharactorInit::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCharactorInit::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* sCharactorInit::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCharactorInit::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .jynetwork.proto.eRoleType role = 3;
inline bool sCharactorInit::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCharactorInit::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCharactorInit::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCharactorInit::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::jynetwork::proto::eRoleType sCharactorInit::role() const {
  return static_cast< ::jynetwork::proto::eRoleType >(role_);
}
inline void sCharactorInit::set_role(::jynetwork::proto::eRoleType value) {
  assert(::jynetwork::proto::eRoleType_IsValid(value));
  set_has_role();
  role_ = value;
}

// optional uint32 level = 4;
inline bool sCharactorInit::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCharactorInit::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCharactorInit::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCharactorInit::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 sCharactorInit::level() const {
  return level_;
}
inline void sCharactorInit::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 exp = 5;
inline bool sCharactorInit::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sCharactorInit::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sCharactorInit::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sCharactorInit::clear_exp() {
  exp_ = GOOGLE_ULONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::uint64 sCharactorInit::exp() const {
  return exp_;
}
inline void sCharactorInit::set_exp(::google::protobuf::uint64 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 rank = 6;
inline bool sCharactorInit::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sCharactorInit::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sCharactorInit::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sCharactorInit::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 sCharactorInit::rank() const {
  return rank_;
}
inline void sCharactorInit::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 rankexp = 7;
inline bool sCharactorInit::has_rankexp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sCharactorInit::set_has_rankexp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sCharactorInit::clear_has_rankexp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sCharactorInit::clear_rankexp() {
  rankexp_ = GOOGLE_ULONGLONG(0);
  clear_has_rankexp();
}
inline ::google::protobuf::uint64 sCharactorInit::rankexp() const {
  return rankexp_;
}
inline void sCharactorInit::set_rankexp(::google::protobuf::uint64 value) {
  set_has_rankexp();
  rankexp_ = value;
}

// optional uint32 statsid = 8;
inline bool sCharactorInit::has_statsid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sCharactorInit::set_has_statsid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sCharactorInit::clear_has_statsid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sCharactorInit::clear_statsid() {
  statsid_ = 0u;
  clear_has_statsid();
}
inline ::google::protobuf::uint32 sCharactorInit::statsid() const {
  return statsid_;
}
inline void sCharactorInit::set_statsid(::google::protobuf::uint32 value) {
  set_has_statsid();
  statsid_ = value;
}

// optional uint64 weaponid = 9;
inline bool sCharactorInit::has_weaponid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sCharactorInit::set_has_weaponid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sCharactorInit::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sCharactorInit::clear_weaponid() {
  weaponid_ = GOOGLE_ULONGLONG(0);
  clear_has_weaponid();
}
inline ::google::protobuf::uint64 sCharactorInit::weaponid() const {
  return weaponid_;
}
inline void sCharactorInit::set_weaponid(::google::protobuf::uint64 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint64 headid = 10;
inline bool sCharactorInit::has_headid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sCharactorInit::set_has_headid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sCharactorInit::clear_has_headid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sCharactorInit::clear_headid() {
  headid_ = GOOGLE_ULONGLONG(0);
  clear_has_headid();
}
inline ::google::protobuf::uint64 sCharactorInit::headid() const {
  return headid_;
}
inline void sCharactorInit::set_headid(::google::protobuf::uint64 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint64 bodyid = 11;
inline bool sCharactorInit::has_bodyid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sCharactorInit::set_has_bodyid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sCharactorInit::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sCharactorInit::clear_bodyid() {
  bodyid_ = GOOGLE_ULONGLONG(0);
  clear_has_bodyid();
}
inline ::google::protobuf::uint64 sCharactorInit::bodyid() const {
  return bodyid_;
}
inline void sCharactorInit::set_bodyid(::google::protobuf::uint64 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint64 offhandid = 12;
inline bool sCharactorInit::has_offhandid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sCharactorInit::set_has_offhandid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sCharactorInit::clear_has_offhandid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sCharactorInit::clear_offhandid() {
  offhandid_ = GOOGLE_ULONGLONG(0);
  clear_has_offhandid();
}
inline ::google::protobuf::uint64 sCharactorInit::offhandid() const {
  return offhandid_;
}
inline void sCharactorInit::set_offhandid(::google::protobuf::uint64 value) {
  set_has_offhandid();
  offhandid_ = value;
}

// optional uint64 ringid = 13;
inline bool sCharactorInit::has_ringid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sCharactorInit::set_has_ringid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sCharactorInit::clear_has_ringid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sCharactorInit::clear_ringid() {
  ringid_ = GOOGLE_ULONGLONG(0);
  clear_has_ringid();
}
inline ::google::protobuf::uint64 sCharactorInit::ringid() const {
  return ringid_;
}
inline void sCharactorInit::set_ringid(::google::protobuf::uint64 value) {
  set_has_ringid();
  ringid_ = value;
}

// optional uint64 neckid = 14;
inline bool sCharactorInit::has_neckid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sCharactorInit::set_has_neckid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sCharactorInit::clear_has_neckid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sCharactorInit::clear_neckid() {
  neckid_ = GOOGLE_ULONGLONG(0);
  clear_has_neckid();
}
inline ::google::protobuf::uint64 sCharactorInit::neckid() const {
  return neckid_;
}
inline void sCharactorInit::set_neckid(::google::protobuf::uint64 value) {
  set_has_neckid();
  neckid_ = value;
}

// optional uint32 skillid = 15;
inline bool sCharactorInit::has_skillid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sCharactorInit::set_has_skillid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sCharactorInit::clear_has_skillid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sCharactorInit::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 sCharactorInit::skillid() const {
  return skillid_;
}
inline void sCharactorInit::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 skillsid = 16;
inline bool sCharactorInit::has_skillsid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sCharactorInit::set_has_skillsid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sCharactorInit::clear_has_skillsid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sCharactorInit::clear_skillsid() {
  skillsid_ = 0u;
  clear_has_skillsid();
}
inline ::google::protobuf::uint32 sCharactorInit::skillsid() const {
  return skillsid_;
}
inline void sCharactorInit::set_skillsid(::google::protobuf::uint32 value) {
  set_has_skillsid();
  skillsid_ = value;
}

// optional uint32 skillmid = 17;
inline bool sCharactorInit::has_skillmid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sCharactorInit::set_has_skillmid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sCharactorInit::clear_has_skillmid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sCharactorInit::clear_skillmid() {
  skillmid_ = 0u;
  clear_has_skillmid();
}
inline ::google::protobuf::uint32 sCharactorInit::skillmid() const {
  return skillmid_;
}
inline void sCharactorInit::set_skillmid(::google::protobuf::uint32 value) {
  set_has_skillmid();
  skillmid_ = value;
}

// optional uint32 skilllid = 18;
inline bool sCharactorInit::has_skilllid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sCharactorInit::set_has_skilllid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sCharactorInit::clear_has_skilllid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sCharactorInit::clear_skilllid() {
  skilllid_ = 0u;
  clear_has_skilllid();
}
inline ::google::protobuf::uint32 sCharactorInit::skilllid() const {
  return skilllid_;
}
inline void sCharactorInit::set_skilllid(::google::protobuf::uint32 value) {
  set_has_skilllid();
  skilllid_ = value;
}

// optional uint64 cardwarriorid = 20;
inline bool sCharactorInit::has_cardwarriorid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sCharactorInit::set_has_cardwarriorid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sCharactorInit::clear_has_cardwarriorid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sCharactorInit::clear_cardwarriorid() {
  cardwarriorid_ = GOOGLE_ULONGLONG(0);
  clear_has_cardwarriorid();
}
inline ::google::protobuf::uint64 sCharactorInit::cardwarriorid() const {
  return cardwarriorid_;
}
inline void sCharactorInit::set_cardwarriorid(::google::protobuf::uint64 value) {
  set_has_cardwarriorid();
  cardwarriorid_ = value;
}

// optional uint64 cardmagicid = 21;
inline bool sCharactorInit::has_cardmagicid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sCharactorInit::set_has_cardmagicid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sCharactorInit::clear_has_cardmagicid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sCharactorInit::clear_cardmagicid() {
  cardmagicid_ = GOOGLE_ULONGLONG(0);
  clear_has_cardmagicid();
}
inline ::google::protobuf::uint64 sCharactorInit::cardmagicid() const {
  return cardmagicid_;
}
inline void sCharactorInit::set_cardmagicid(::google::protobuf::uint64 value) {
  set_has_cardmagicid();
  cardmagicid_ = value;
}

// optional uint64 cardarcherid = 22;
inline bool sCharactorInit::has_cardarcherid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sCharactorInit::set_has_cardarcherid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sCharactorInit::clear_has_cardarcherid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sCharactorInit::clear_cardarcherid() {
  cardarcherid_ = GOOGLE_ULONGLONG(0);
  clear_has_cardarcherid();
}
inline ::google::protobuf::uint64 sCharactorInit::cardarcherid() const {
  return cardarcherid_;
}
inline void sCharactorInit::set_cardarcherid(::google::protobuf::uint64 value) {
  set_has_cardarcherid();
  cardarcherid_ = value;
}

// optional uint64 cardpvpid = 27;
inline bool sCharactorInit::has_cardpvpid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sCharactorInit::set_has_cardpvpid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sCharactorInit::clear_has_cardpvpid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sCharactorInit::clear_cardpvpid() {
  cardpvpid_ = GOOGLE_ULONGLONG(0);
  clear_has_cardpvpid();
}
inline ::google::protobuf::uint64 sCharactorInit::cardpvpid() const {
  return cardpvpid_;
}
inline void sCharactorInit::set_cardpvpid(::google::protobuf::uint64 value) {
  set_has_cardpvpid();
  cardpvpid_ = value;
}

// optional uint64 castleprogress = 23;
inline bool sCharactorInit::has_castleprogress() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sCharactorInit::set_has_castleprogress() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sCharactorInit::clear_has_castleprogress() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sCharactorInit::clear_castleprogress() {
  castleprogress_ = GOOGLE_ULONGLONG(0);
  clear_has_castleprogress();
}
inline ::google::protobuf::uint64 sCharactorInit::castleprogress() const {
  return castleprogress_;
}
inline void sCharactorInit::set_castleprogress(::google::protobuf::uint64 value) {
  set_has_castleprogress();
  castleprogress_ = value;
}

// repeated .jynetwork.proto.sBuffStats buffsid = 24;
inline int sCharactorInit::buffsid_size() const {
  return buffsid_.size();
}
inline void sCharactorInit::clear_buffsid() {
  buffsid_.Clear();
}
inline const ::jynetwork::proto::sBuffStats& sCharactorInit::buffsid(int index) const {
  return buffsid_.Get(index);
}
inline ::jynetwork::proto::sBuffStats* sCharactorInit::mutable_buffsid(int index) {
  return buffsid_.Mutable(index);
}
inline ::jynetwork::proto::sBuffStats* sCharactorInit::add_buffsid() {
  return buffsid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuffStats >&
sCharactorInit::buffsid() const {
  return buffsid_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuffStats >*
sCharactorInit::mutable_buffsid() {
  return &buffsid_;
}

// optional .jynetwork.proto.sGameStats gamestats = 25;
inline bool sCharactorInit::has_gamestats() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sCharactorInit::set_has_gamestats() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sCharactorInit::clear_has_gamestats() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sCharactorInit::clear_gamestats() {
  if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
  clear_has_gamestats();
}
inline const ::jynetwork::proto::sGameStats& sCharactorInit::gamestats() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamestats_ != NULL ? *gamestats_ : *default_instance().gamestats_;
#else
  return gamestats_ != NULL ? *gamestats_ : *default_instance_->gamestats_;
#endif
}
inline ::jynetwork::proto::sGameStats* sCharactorInit::mutable_gamestats() {
  set_has_gamestats();
  if (gamestats_ == NULL) gamestats_ = new ::jynetwork::proto::sGameStats;
  return gamestats_;
}
inline ::jynetwork::proto::sGameStats* sCharactorInit::release_gamestats() {
  clear_has_gamestats();
  ::jynetwork::proto::sGameStats* temp = gamestats_;
  gamestats_ = NULL;
  return temp;
}
inline void sCharactorInit::set_allocated_gamestats(::jynetwork::proto::sGameStats* gamestats) {
  delete gamestats_;
  gamestats_ = gamestats;
  if (gamestats) {
    set_has_gamestats();
  } else {
    clear_has_gamestats();
  }
}

// optional uint32 local_name = 26;
inline bool sCharactorInit::has_local_name() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sCharactorInit::set_has_local_name() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sCharactorInit::clear_has_local_name() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sCharactorInit::clear_local_name() {
  local_name_ = 0u;
  clear_has_local_name();
}
inline ::google::protobuf::uint32 sCharactorInit::local_name() const {
  return local_name_;
}
inline void sCharactorInit::set_local_name(::google::protobuf::uint32 value) {
  set_has_local_name();
  local_name_ = value;
}

// -------------------------------------------------------------------

// sPersonItemStats

// optional uint64 uid = 1;
inline bool sPersonItemStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPersonItemStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPersonItemStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPersonItemStats::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 sPersonItemStats::uid() const {
  return uid_;
}
inline void sPersonItemStats::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 itemid = 2;
inline bool sPersonItemStats::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPersonItemStats::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPersonItemStats::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPersonItemStats::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 sPersonItemStats::itemid() const {
  return itemid_;
}
inline void sPersonItemStats::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 amount = 3;
inline bool sPersonItemStats::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPersonItemStats::set_has_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPersonItemStats::clear_has_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPersonItemStats::clear_amount() {
  amount_ = 0u;
  clear_has_amount();
}
inline ::google::protobuf::uint32 sPersonItemStats::amount() const {
  return amount_;
}
inline void sPersonItemStats::set_amount(::google::protobuf::uint32 value) {
  set_has_amount();
  amount_ = value;
}

// optional .jynetwork.proto.ePersonalOpertionType oper = 4;
inline bool sPersonItemStats::has_oper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sPersonItemStats::set_has_oper() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sPersonItemStats::clear_has_oper() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sPersonItemStats::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::jynetwork::proto::ePersonalOpertionType sPersonItemStats::oper() const {
  return static_cast< ::jynetwork::proto::ePersonalOpertionType >(oper_);
}
inline void sPersonItemStats::set_oper(::jynetwork::proto::ePersonalOpertionType value) {
  assert(::jynetwork::proto::ePersonalOpertionType_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// -------------------------------------------------------------------

// sPersonEquipStats

// optional uint64 uid = 1;
inline bool sPersonEquipStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPersonEquipStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPersonEquipStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPersonEquipStats::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 sPersonEquipStats::uid() const {
  return uid_;
}
inline void sPersonEquipStats::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 equipid = 2;
inline bool sPersonEquipStats::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPersonEquipStats::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPersonEquipStats::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPersonEquipStats::clear_equipid() {
  equipid_ = 0u;
  clear_has_equipid();
}
inline ::google::protobuf::uint32 sPersonEquipStats::equipid() const {
  return equipid_;
}
inline void sPersonEquipStats::set_equipid(::google::protobuf::uint32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional uint32 level = 3;
inline bool sPersonEquipStats::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPersonEquipStats::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPersonEquipStats::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPersonEquipStats::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 sPersonEquipStats::level() const {
  return level_;
}
inline void sPersonEquipStats::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 intensify = 4;
inline bool sPersonEquipStats::has_intensify() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sPersonEquipStats::set_has_intensify() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sPersonEquipStats::clear_has_intensify() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sPersonEquipStats::clear_intensify() {
  intensify_ = 0u;
  clear_has_intensify();
}
inline ::google::protobuf::uint32 sPersonEquipStats::intensify() const {
  return intensify_;
}
inline void sPersonEquipStats::set_intensify(::google::protobuf::uint32 value) {
  set_has_intensify();
  intensify_ = value;
}

// optional .jynetwork.proto.sGameStats gamestats = 5;
inline bool sPersonEquipStats::has_gamestats() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sPersonEquipStats::set_has_gamestats() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sPersonEquipStats::clear_has_gamestats() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sPersonEquipStats::clear_gamestats() {
  if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
  clear_has_gamestats();
}
inline const ::jynetwork::proto::sGameStats& sPersonEquipStats::gamestats() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamestats_ != NULL ? *gamestats_ : *default_instance().gamestats_;
#else
  return gamestats_ != NULL ? *gamestats_ : *default_instance_->gamestats_;
#endif
}
inline ::jynetwork::proto::sGameStats* sPersonEquipStats::mutable_gamestats() {
  set_has_gamestats();
  if (gamestats_ == NULL) gamestats_ = new ::jynetwork::proto::sGameStats;
  return gamestats_;
}
inline ::jynetwork::proto::sGameStats* sPersonEquipStats::release_gamestats() {
  clear_has_gamestats();
  ::jynetwork::proto::sGameStats* temp = gamestats_;
  gamestats_ = NULL;
  return temp;
}
inline void sPersonEquipStats::set_allocated_gamestats(::jynetwork::proto::sGameStats* gamestats) {
  delete gamestats_;
  gamestats_ = gamestats;
  if (gamestats) {
    set_has_gamestats();
  } else {
    clear_has_gamestats();
  }
}

// optional uint32 exp = 6;
inline bool sPersonEquipStats::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sPersonEquipStats::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sPersonEquipStats::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sPersonEquipStats::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 sPersonEquipStats::exp() const {
  return exp_;
}
inline void sPersonEquipStats::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 starlv = 7;
inline bool sPersonEquipStats::has_starlv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sPersonEquipStats::set_has_starlv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sPersonEquipStats::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sPersonEquipStats::clear_starlv() {
  starlv_ = 0u;
  clear_has_starlv();
}
inline ::google::protobuf::uint32 sPersonEquipStats::starlv() const {
  return starlv_;
}
inline void sPersonEquipStats::set_starlv(::google::protobuf::uint32 value) {
  set_has_starlv();
  starlv_ = value;
}

// repeated uint32 attr_type = 8;
inline int sPersonEquipStats::attr_type_size() const {
  return attr_type_.size();
}
inline void sPersonEquipStats::clear_attr_type() {
  attr_type_.Clear();
}
inline ::google::protobuf::uint32 sPersonEquipStats::attr_type(int index) const {
  return attr_type_.Get(index);
}
inline void sPersonEquipStats::set_attr_type(int index, ::google::protobuf::uint32 value) {
  attr_type_.Set(index, value);
}
inline void sPersonEquipStats::add_attr_type(::google::protobuf::uint32 value) {
  attr_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sPersonEquipStats::attr_type() const {
  return attr_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sPersonEquipStats::mutable_attr_type() {
  return &attr_type_;
}

// repeated uint32 attr_value = 9;
inline int sPersonEquipStats::attr_value_size() const {
  return attr_value_.size();
}
inline void sPersonEquipStats::clear_attr_value() {
  attr_value_.Clear();
}
inline ::google::protobuf::uint32 sPersonEquipStats::attr_value(int index) const {
  return attr_value_.Get(index);
}
inline void sPersonEquipStats::set_attr_value(int index, ::google::protobuf::uint32 value) {
  attr_value_.Set(index, value);
}
inline void sPersonEquipStats::add_attr_value(::google::protobuf::uint32 value) {
  attr_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sPersonEquipStats::attr_value() const {
  return attr_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sPersonEquipStats::mutable_attr_value() {
  return &attr_value_;
}

// optional .jynetwork.proto.ePersonalOpertionType oper = 10;
inline bool sPersonEquipStats::has_oper() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sPersonEquipStats::set_has_oper() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sPersonEquipStats::clear_has_oper() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sPersonEquipStats::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::jynetwork::proto::ePersonalOpertionType sPersonEquipStats::oper() const {
  return static_cast< ::jynetwork::proto::ePersonalOpertionType >(oper_);
}
inline void sPersonEquipStats::set_oper(::jynetwork::proto::ePersonalOpertionType value) {
  assert(::jynetwork::proto::ePersonalOpertionType_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// optional uint32 is_new = 11;
inline bool sPersonEquipStats::has_is_new() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sPersonEquipStats::set_has_is_new() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sPersonEquipStats::clear_has_is_new() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sPersonEquipStats::clear_is_new() {
  is_new_ = 0u;
  clear_has_is_new();
}
inline ::google::protobuf::uint32 sPersonEquipStats::is_new() const {
  return is_new_;
}
inline void sPersonEquipStats::set_is_new(::google::protobuf::uint32 value) {
  set_has_is_new();
  is_new_ = value;
}

// optional uint32 is_lock = 12;
inline bool sPersonEquipStats::has_is_lock() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sPersonEquipStats::set_has_is_lock() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sPersonEquipStats::clear_has_is_lock() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sPersonEquipStats::clear_is_lock() {
  is_lock_ = 0u;
  clear_has_is_lock();
}
inline ::google::protobuf::uint32 sPersonEquipStats::is_lock() const {
  return is_lock_;
}
inline void sPersonEquipStats::set_is_lock(::google::protobuf::uint32 value) {
  set_has_is_lock();
  is_lock_ = value;
}

// repeated uint32 word_type = 13;
inline int sPersonEquipStats::word_type_size() const {
  return word_type_.size();
}
inline void sPersonEquipStats::clear_word_type() {
  word_type_.Clear();
}
inline ::google::protobuf::uint32 sPersonEquipStats::word_type(int index) const {
  return word_type_.Get(index);
}
inline void sPersonEquipStats::set_word_type(int index, ::google::protobuf::uint32 value) {
  word_type_.Set(index, value);
}
inline void sPersonEquipStats::add_word_type(::google::protobuf::uint32 value) {
  word_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sPersonEquipStats::word_type() const {
  return word_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sPersonEquipStats::mutable_word_type() {
  return &word_type_;
}

// repeated float word_value = 14;
inline int sPersonEquipStats::word_value_size() const {
  return word_value_.size();
}
inline void sPersonEquipStats::clear_word_value() {
  word_value_.Clear();
}
inline float sPersonEquipStats::word_value(int index) const {
  return word_value_.Get(index);
}
inline void sPersonEquipStats::set_word_value(int index, float value) {
  word_value_.Set(index, value);
}
inline void sPersonEquipStats::add_word_value(float value) {
  word_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
sPersonEquipStats::word_value() const {
  return word_value_;
}
inline ::google::protobuf::RepeatedField< float >*
sPersonEquipStats::mutable_word_value() {
  return &word_value_;
}

// repeated uint32 new_attr_type = 15;
inline int sPersonEquipStats::new_attr_type_size() const {
  return new_attr_type_.size();
}
inline void sPersonEquipStats::clear_new_attr_type() {
  new_attr_type_.Clear();
}
inline ::google::protobuf::uint32 sPersonEquipStats::new_attr_type(int index) const {
  return new_attr_type_.Get(index);
}
inline void sPersonEquipStats::set_new_attr_type(int index, ::google::protobuf::uint32 value) {
  new_attr_type_.Set(index, value);
}
inline void sPersonEquipStats::add_new_attr_type(::google::protobuf::uint32 value) {
  new_attr_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sPersonEquipStats::new_attr_type() const {
  return new_attr_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sPersonEquipStats::mutable_new_attr_type() {
  return &new_attr_type_;
}

// repeated uint32 new_attr_value = 16;
inline int sPersonEquipStats::new_attr_value_size() const {
  return new_attr_value_.size();
}
inline void sPersonEquipStats::clear_new_attr_value() {
  new_attr_value_.Clear();
}
inline ::google::protobuf::uint32 sPersonEquipStats::new_attr_value(int index) const {
  return new_attr_value_.Get(index);
}
inline void sPersonEquipStats::set_new_attr_value(int index, ::google::protobuf::uint32 value) {
  new_attr_value_.Set(index, value);
}
inline void sPersonEquipStats::add_new_attr_value(::google::protobuf::uint32 value) {
  new_attr_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sPersonEquipStats::new_attr_value() const {
  return new_attr_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sPersonEquipStats::mutable_new_attr_value() {
  return &new_attr_value_;
}

// -------------------------------------------------------------------

// sPersonSkillStats

// optional uint32 uid = 1;
inline bool sPersonSkillStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPersonSkillStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPersonSkillStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPersonSkillStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sPersonSkillStats::uid() const {
  return uid_;
}
inline void sPersonSkillStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 skillid = 2;
inline bool sPersonSkillStats::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPersonSkillStats::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPersonSkillStats::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPersonSkillStats::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 sPersonSkillStats::skillid() const {
  return skillid_;
}
inline void sPersonSkillStats::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 level = 3;
inline bool sPersonSkillStats::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPersonSkillStats::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPersonSkillStats::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPersonSkillStats::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 sPersonSkillStats::level() const {
  return level_;
}
inline void sPersonSkillStats::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional .jynetwork.proto.sGameStats gamestats = 4;
inline bool sPersonSkillStats::has_gamestats() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sPersonSkillStats::set_has_gamestats() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sPersonSkillStats::clear_has_gamestats() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sPersonSkillStats::clear_gamestats() {
  if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
  clear_has_gamestats();
}
inline const ::jynetwork::proto::sGameStats& sPersonSkillStats::gamestats() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamestats_ != NULL ? *gamestats_ : *default_instance().gamestats_;
#else
  return gamestats_ != NULL ? *gamestats_ : *default_instance_->gamestats_;
#endif
}
inline ::jynetwork::proto::sGameStats* sPersonSkillStats::mutable_gamestats() {
  set_has_gamestats();
  if (gamestats_ == NULL) gamestats_ = new ::jynetwork::proto::sGameStats;
  return gamestats_;
}
inline ::jynetwork::proto::sGameStats* sPersonSkillStats::release_gamestats() {
  clear_has_gamestats();
  ::jynetwork::proto::sGameStats* temp = gamestats_;
  gamestats_ = NULL;
  return temp;
}
inline void sPersonSkillStats::set_allocated_gamestats(::jynetwork::proto::sGameStats* gamestats) {
  delete gamestats_;
  gamestats_ = gamestats;
  if (gamestats) {
    set_has_gamestats();
  } else {
    clear_has_gamestats();
  }
}

// optional .jynetwork.proto.ePersonalOpertionType oper = 5;
inline bool sPersonSkillStats::has_oper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sPersonSkillStats::set_has_oper() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sPersonSkillStats::clear_has_oper() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sPersonSkillStats::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::jynetwork::proto::ePersonalOpertionType sPersonSkillStats::oper() const {
  return static_cast< ::jynetwork::proto::ePersonalOpertionType >(oper_);
}
inline void sPersonSkillStats::set_oper(::jynetwork::proto::ePersonalOpertionType value) {
  assert(::jynetwork::proto::ePersonalOpertionType_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// -------------------------------------------------------------------

// sMonsterStats

// optional uint64 uid = 1;
inline bool sMonsterStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sMonsterStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sMonsterStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sMonsterStats::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 sMonsterStats::uid() const {
  return uid_;
}
inline void sMonsterStats::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 level = 2;
inline bool sMonsterStats::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sMonsterStats::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sMonsterStats::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sMonsterStats::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 sMonsterStats::level() const {
  return level_;
}
inline void sMonsterStats::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional .jynetwork.proto.sCardStats card = 3;
inline bool sMonsterStats::has_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sMonsterStats::set_has_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sMonsterStats::clear_has_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sMonsterStats::clear_card() {
  if (card_ != NULL) card_->::jynetwork::proto::sCardStats::Clear();
  clear_has_card();
}
inline const ::jynetwork::proto::sCardStats& sMonsterStats::card() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return card_ != NULL ? *card_ : *default_instance().card_;
#else
  return card_ != NULL ? *card_ : *default_instance_->card_;
#endif
}
inline ::jynetwork::proto::sCardStats* sMonsterStats::mutable_card() {
  set_has_card();
  if (card_ == NULL) card_ = new ::jynetwork::proto::sCardStats;
  return card_;
}
inline ::jynetwork::proto::sCardStats* sMonsterStats::release_card() {
  clear_has_card();
  ::jynetwork::proto::sCardStats* temp = card_;
  card_ = NULL;
  return temp;
}
inline void sMonsterStats::set_allocated_card(::jynetwork::proto::sCardStats* card) {
  delete card_;
  card_ = card;
  if (card) {
    set_has_card();
  } else {
    clear_has_card();
  }
}

// optional .jynetwork.proto.eCardQuality quality = 4;
inline bool sMonsterStats::has_quality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sMonsterStats::set_has_quality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sMonsterStats::clear_has_quality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sMonsterStats::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::jynetwork::proto::eCardQuality sMonsterStats::quality() const {
  return static_cast< ::jynetwork::proto::eCardQuality >(quality_);
}
inline void sMonsterStats::set_quality(::jynetwork::proto::eCardQuality value) {
  assert(::jynetwork::proto::eCardQuality_IsValid(value));
  set_has_quality();
  quality_ = value;
}

// optional uint32 intensify = 5;
inline bool sMonsterStats::has_intensify() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sMonsterStats::set_has_intensify() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sMonsterStats::clear_has_intensify() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sMonsterStats::clear_intensify() {
  intensify_ = 0u;
  clear_has_intensify();
}
inline ::google::protobuf::uint32 sMonsterStats::intensify() const {
  return intensify_;
}
inline void sMonsterStats::set_intensify(::google::protobuf::uint32 value) {
  set_has_intensify();
  intensify_ = value;
}

// optional uint32 skill_lvl1 = 6;
inline bool sMonsterStats::has_skill_lvl1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sMonsterStats::set_has_skill_lvl1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sMonsterStats::clear_has_skill_lvl1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sMonsterStats::clear_skill_lvl1() {
  skill_lvl1_ = 0u;
  clear_has_skill_lvl1();
}
inline ::google::protobuf::uint32 sMonsterStats::skill_lvl1() const {
  return skill_lvl1_;
}
inline void sMonsterStats::set_skill_lvl1(::google::protobuf::uint32 value) {
  set_has_skill_lvl1();
  skill_lvl1_ = value;
}

// optional uint32 skill_lvl2 = 7;
inline bool sMonsterStats::has_skill_lvl2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sMonsterStats::set_has_skill_lvl2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sMonsterStats::clear_has_skill_lvl2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sMonsterStats::clear_skill_lvl2() {
  skill_lvl2_ = 0u;
  clear_has_skill_lvl2();
}
inline ::google::protobuf::uint32 sMonsterStats::skill_lvl2() const {
  return skill_lvl2_;
}
inline void sMonsterStats::set_skill_lvl2(::google::protobuf::uint32 value) {
  set_has_skill_lvl2();
  skill_lvl2_ = value;
}

// optional uint32 cardid = 10;
inline bool sMonsterStats::has_cardid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sMonsterStats::set_has_cardid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sMonsterStats::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sMonsterStats::clear_cardid() {
  cardid_ = 0u;
  clear_has_cardid();
}
inline ::google::protobuf::uint32 sMonsterStats::cardid() const {
  return cardid_;
}
inline void sMonsterStats::set_cardid(::google::protobuf::uint32 value) {
  set_has_cardid();
  cardid_ = value;
}

// optional uint32 exp = 11;
inline bool sMonsterStats::has_exp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sMonsterStats::set_has_exp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sMonsterStats::clear_has_exp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sMonsterStats::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 sMonsterStats::exp() const {
  return exp_;
}
inline void sMonsterStats::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// repeated uint32 skillid = 12;
inline int sMonsterStats::skillid_size() const {
  return skillid_.size();
}
inline void sMonsterStats::clear_skillid() {
  skillid_.Clear();
}
inline ::google::protobuf::uint32 sMonsterStats::skillid(int index) const {
  return skillid_.Get(index);
}
inline void sMonsterStats::set_skillid(int index, ::google::protobuf::uint32 value) {
  skillid_.Set(index, value);
}
inline void sMonsterStats::add_skillid(::google::protobuf::uint32 value) {
  skillid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sMonsterStats::skillid() const {
  return skillid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sMonsterStats::mutable_skillid() {
  return &skillid_;
}

// optional .jynetwork.proto.ePersonalOpertionType oper = 13;
inline bool sMonsterStats::has_oper() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sMonsterStats::set_has_oper() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sMonsterStats::clear_has_oper() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sMonsterStats::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::jynetwork::proto::ePersonalOpertionType sMonsterStats::oper() const {
  return static_cast< ::jynetwork::proto::ePersonalOpertionType >(oper_);
}
inline void sMonsterStats::set_oper(::jynetwork::proto::ePersonalOpertionType value) {
  assert(::jynetwork::proto::ePersonalOpertionType_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// optional .jynetwork.proto.sGameStats gamestats = 14;
inline bool sMonsterStats::has_gamestats() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sMonsterStats::set_has_gamestats() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sMonsterStats::clear_has_gamestats() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sMonsterStats::clear_gamestats() {
  if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
  clear_has_gamestats();
}
inline const ::jynetwork::proto::sGameStats& sMonsterStats::gamestats() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamestats_ != NULL ? *gamestats_ : *default_instance().gamestats_;
#else
  return gamestats_ != NULL ? *gamestats_ : *default_instance_->gamestats_;
#endif
}
inline ::jynetwork::proto::sGameStats* sMonsterStats::mutable_gamestats() {
  set_has_gamestats();
  if (gamestats_ == NULL) gamestats_ = new ::jynetwork::proto::sGameStats;
  return gamestats_;
}
inline ::jynetwork::proto::sGameStats* sMonsterStats::release_gamestats() {
  clear_has_gamestats();
  ::jynetwork::proto::sGameStats* temp = gamestats_;
  gamestats_ = NULL;
  return temp;
}
inline void sMonsterStats::set_allocated_gamestats(::jynetwork::proto::sGameStats* gamestats) {
  delete gamestats_;
  gamestats_ = gamestats;
  if (gamestats) {
    set_has_gamestats();
  } else {
    clear_has_gamestats();
  }
}

// -------------------------------------------------------------------

// sPersonTaskStats

// optional uint64 uid = 1;
inline bool sPersonTaskStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPersonTaskStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPersonTaskStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPersonTaskStats::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 sPersonTaskStats::uid() const {
  return uid_;
}
inline void sPersonTaskStats::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 var = 2;
inline bool sPersonTaskStats::has_var() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPersonTaskStats::set_has_var() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPersonTaskStats::clear_has_var() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPersonTaskStats::clear_var() {
  var_ = 0u;
  clear_has_var();
}
inline ::google::protobuf::uint32 sPersonTaskStats::var() const {
  return var_;
}
inline void sPersonTaskStats::set_var(::google::protobuf::uint32 value) {
  set_has_var();
  var_ = value;
}

// optional uint32 can_finish = 3;
inline bool sPersonTaskStats::has_can_finish() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPersonTaskStats::set_has_can_finish() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPersonTaskStats::clear_has_can_finish() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPersonTaskStats::clear_can_finish() {
  can_finish_ = 0u;
  clear_has_can_finish();
}
inline ::google::protobuf::uint32 sPersonTaskStats::can_finish() const {
  return can_finish_;
}
inline void sPersonTaskStats::set_can_finish(::google::protobuf::uint32 value) {
  set_has_can_finish();
  can_finish_ = value;
}

// optional .jynetwork.proto.ePersonalOpertionType oper = 4;
inline bool sPersonTaskStats::has_oper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sPersonTaskStats::set_has_oper() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sPersonTaskStats::clear_has_oper() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sPersonTaskStats::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::jynetwork::proto::ePersonalOpertionType sPersonTaskStats::oper() const {
  return static_cast< ::jynetwork::proto::ePersonalOpertionType >(oper_);
}
inline void sPersonTaskStats::set_oper(::jynetwork::proto::ePersonalOpertionType value) {
  assert(::jynetwork::proto::ePersonalOpertionType_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// optional bytes name = 5;
inline bool sPersonTaskStats::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sPersonTaskStats::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sPersonTaskStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sPersonTaskStats::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sPersonTaskStats::name() const {
  return *name_;
}
inline void sPersonTaskStats::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sPersonTaskStats::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sPersonTaskStats::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPersonTaskStats::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sPersonTaskStats::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sPersonTaskStats::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 score = 6;
inline bool sPersonTaskStats::has_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sPersonTaskStats::set_has_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sPersonTaskStats::clear_has_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sPersonTaskStats::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 sPersonTaskStats::score() const {
  return score_;
}
inline void sPersonTaskStats::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// sCastleEndlessRelation

// optional uint32 mapid = 1;
inline bool sCastleEndlessRelation::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCastleEndlessRelation::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCastleEndlessRelation::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCastleEndlessRelation::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 sCastleEndlessRelation::mapid() const {
  return mapid_;
}
inline void sCastleEndlessRelation::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional uint32 groupid = 2;
inline bool sCastleEndlessRelation::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCastleEndlessRelation::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCastleEndlessRelation::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCastleEndlessRelation::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 sCastleEndlessRelation::groupid() const {
  return groupid_;
}
inline void sCastleEndlessRelation::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional uint32 base_groupid = 3;
inline bool sCastleEndlessRelation::has_base_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCastleEndlessRelation::set_has_base_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCastleEndlessRelation::clear_has_base_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCastleEndlessRelation::clear_base_groupid() {
  base_groupid_ = 0u;
  clear_has_base_groupid();
}
inline ::google::protobuf::uint32 sCastleEndlessRelation::base_groupid() const {
  return base_groupid_;
}
inline void sCastleEndlessRelation::set_base_groupid(::google::protobuf::uint32 value) {
  set_has_base_groupid();
  base_groupid_ = value;
}

// -------------------------------------------------------------------

// sCastleInfo

// optional uint32 uid = 1;
inline bool sCastleInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCastleInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCastleInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCastleInfo::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sCastleInfo::uid() const {
  return uid_;
}
inline void sCastleInfo::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 difficulty = 2;
inline bool sCastleInfo::has_difficulty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCastleInfo::set_has_difficulty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCastleInfo::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCastleInfo::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
inline ::google::protobuf::uint32 sCastleInfo::difficulty() const {
  return difficulty_;
}
inline void sCastleInfo::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
}

// optional uint32 star = 3;
inline bool sCastleInfo::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCastleInfo::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCastleInfo::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCastleInfo::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 sCastleInfo::star() const {
  return star_;
}
inline void sCastleInfo::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional uint32 score = 4;
inline bool sCastleInfo::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCastleInfo::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCastleInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCastleInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 sCastleInfo::score() const {
  return score_;
}
inline void sCastleInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 faction = 5;
inline bool sCastleInfo::has_faction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sCastleInfo::set_has_faction() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sCastleInfo::clear_has_faction() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sCastleInfo::clear_faction() {
  faction_ = 0u;
  clear_has_faction();
}
inline ::google::protobuf::uint32 sCastleInfo::faction() const {
  return faction_;
}
inline void sCastleInfo::set_faction(::google::protobuf::uint32 value) {
  set_has_faction();
  faction_ = value;
}

// optional uint32 difficult_change = 6;
inline bool sCastleInfo::has_difficult_change() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sCastleInfo::set_has_difficult_change() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sCastleInfo::clear_has_difficult_change() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sCastleInfo::clear_difficult_change() {
  difficult_change_ = 0u;
  clear_has_difficult_change();
}
inline ::google::protobuf::uint32 sCastleInfo::difficult_change() const {
  return difficult_change_;
}
inline void sCastleInfo::set_difficult_change(::google::protobuf::uint32 value) {
  set_has_difficult_change();
  difficult_change_ = value;
}

// optional uint32 attack_times = 7;
inline bool sCastleInfo::has_attack_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sCastleInfo::set_has_attack_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sCastleInfo::clear_has_attack_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sCastleInfo::clear_attack_times() {
  attack_times_ = 0u;
  clear_has_attack_times();
}
inline ::google::protobuf::uint32 sCastleInfo::attack_times() const {
  return attack_times_;
}
inline void sCastleInfo::set_attack_times(::google::protobuf::uint32 value) {
  set_has_attack_times();
  attack_times_ = value;
}

// optional uint32 castle_catlog = 8;
inline bool sCastleInfo::has_castle_catlog() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sCastleInfo::set_has_castle_catlog() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sCastleInfo::clear_has_castle_catlog() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sCastleInfo::clear_castle_catlog() {
  castle_catlog_ = 0u;
  clear_has_castle_catlog();
}
inline ::google::protobuf::uint32 sCastleInfo::castle_catlog() const {
  return castle_catlog_;
}
inline void sCastleInfo::set_castle_catlog(::google::protobuf::uint32 value) {
  set_has_castle_catlog();
  castle_catlog_ = value;
}

// optional uint32 reset_times = 9;
inline bool sCastleInfo::has_reset_times() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sCastleInfo::set_has_reset_times() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sCastleInfo::clear_has_reset_times() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sCastleInfo::clear_reset_times() {
  reset_times_ = 0u;
  clear_has_reset_times();
}
inline ::google::protobuf::uint32 sCastleInfo::reset_times() const {
  return reset_times_;
}
inline void sCastleInfo::set_reset_times(::google::protobuf::uint32 value) {
  set_has_reset_times();
  reset_times_ = value;
}

// -------------------------------------------------------------------

// sCastleComplete

// optional uint32 last_uid = 1;
inline bool sCastleComplete::has_last_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCastleComplete::set_has_last_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCastleComplete::clear_has_last_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCastleComplete::clear_last_uid() {
  last_uid_ = 0u;
  clear_has_last_uid();
}
inline ::google::protobuf::uint32 sCastleComplete::last_uid() const {
  return last_uid_;
}
inline void sCastleComplete::set_last_uid(::google::protobuf::uint32 value) {
  set_has_last_uid();
  last_uid_ = value;
}

// optional uint32 last_difficult = 2;
inline bool sCastleComplete::has_last_difficult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCastleComplete::set_has_last_difficult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCastleComplete::clear_has_last_difficult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCastleComplete::clear_last_difficult() {
  last_difficult_ = 0u;
  clear_has_last_difficult();
}
inline ::google::protobuf::uint32 sCastleComplete::last_difficult() const {
  return last_difficult_;
}
inline void sCastleComplete::set_last_difficult(::google::protobuf::uint32 value) {
  set_has_last_difficult();
  last_difficult_ = value;
}

// repeated .jynetwork.proto.sCastleInfo ci = 3;
inline int sCastleComplete::ci_size() const {
  return ci_.size();
}
inline void sCastleComplete::clear_ci() {
  ci_.Clear();
}
inline const ::jynetwork::proto::sCastleInfo& sCastleComplete::ci(int index) const {
  return ci_.Get(index);
}
inline ::jynetwork::proto::sCastleInfo* sCastleComplete::mutable_ci(int index) {
  return ci_.Mutable(index);
}
inline ::jynetwork::proto::sCastleInfo* sCastleComplete::add_ci() {
  return ci_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo >&
sCastleComplete::ci() const {
  return ci_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleInfo >*
sCastleComplete::mutable_ci() {
  return &ci_;
}

// -------------------------------------------------------------------

// sCastleDrop

// optional uint32 drop_type = 1;
inline bool sCastleDrop::has_drop_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCastleDrop::set_has_drop_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCastleDrop::clear_has_drop_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCastleDrop::clear_drop_type() {
  drop_type_ = 0u;
  clear_has_drop_type();
}
inline ::google::protobuf::uint32 sCastleDrop::drop_type() const {
  return drop_type_;
}
inline void sCastleDrop::set_drop_type(::google::protobuf::uint32 value) {
  set_has_drop_type();
  drop_type_ = value;
}

// optional uint32 drop_id = 2;
inline bool sCastleDrop::has_drop_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCastleDrop::set_has_drop_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCastleDrop::clear_has_drop_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCastleDrop::clear_drop_id() {
  drop_id_ = 0u;
  clear_has_drop_id();
}
inline ::google::protobuf::uint32 sCastleDrop::drop_id() const {
  return drop_id_;
}
inline void sCastleDrop::set_drop_id(::google::protobuf::uint32 value) {
  set_has_drop_id();
  drop_id_ = value;
}

// -------------------------------------------------------------------

// sMonsterRefreshGroup

// repeated .jynetwork.proto.sMonsterRefresh monsters = 1;
inline int sMonsterRefreshGroup::monsters_size() const {
  return monsters_.size();
}
inline void sMonsterRefreshGroup::clear_monsters() {
  monsters_.Clear();
}
inline const ::jynetwork::proto::sMonsterRefresh& sMonsterRefreshGroup::monsters(int index) const {
  return monsters_.Get(index);
}
inline ::jynetwork::proto::sMonsterRefresh* sMonsterRefreshGroup::mutable_monsters(int index) {
  return monsters_.Mutable(index);
}
inline ::jynetwork::proto::sMonsterRefresh* sMonsterRefreshGroup::add_monsters() {
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefresh >&
sMonsterRefreshGroup::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefresh >*
sMonsterRefreshGroup::mutable_monsters() {
  return &monsters_;
}

// optional float durtime = 4;
inline bool sMonsterRefreshGroup::has_durtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sMonsterRefreshGroup::set_has_durtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sMonsterRefreshGroup::clear_has_durtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sMonsterRefreshGroup::clear_durtime() {
  durtime_ = 0;
  clear_has_durtime();
}
inline float sMonsterRefreshGroup::durtime() const {
  return durtime_;
}
inline void sMonsterRefreshGroup::set_durtime(float value) {
  set_has_durtime();
  durtime_ = value;
}

// optional uint32 show_warning = 2;
inline bool sMonsterRefreshGroup::has_show_warning() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sMonsterRefreshGroup::set_has_show_warning() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sMonsterRefreshGroup::clear_has_show_warning() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sMonsterRefreshGroup::clear_show_warning() {
  show_warning_ = 0u;
  clear_has_show_warning();
}
inline ::google::protobuf::uint32 sMonsterRefreshGroup::show_warning() const {
  return show_warning_;
}
inline void sMonsterRefreshGroup::set_show_warning(::google::protobuf::uint32 value) {
  set_has_show_warning();
  show_warning_ = value;
}

// optional uint32 groupId = 3;
inline bool sMonsterRefreshGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sMonsterRefreshGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sMonsterRefreshGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sMonsterRefreshGroup::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 sMonsterRefreshGroup::groupid() const {
  return groupid_;
}
inline void sMonsterRefreshGroup::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional uint32 die_mask = 5;
inline bool sMonsterRefreshGroup::has_die_mask() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sMonsterRefreshGroup::set_has_die_mask() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sMonsterRefreshGroup::clear_has_die_mask() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sMonsterRefreshGroup::clear_die_mask() {
  die_mask_ = 0u;
  clear_has_die_mask();
}
inline ::google::protobuf::uint32 sMonsterRefreshGroup::die_mask() const {
  return die_mask_;
}
inline void sMonsterRefreshGroup::set_die_mask(::google::protobuf::uint32 value) {
  set_has_die_mask();
  die_mask_ = value;
}

// optional uint32 wave_index = 6;
inline bool sMonsterRefreshGroup::has_wave_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sMonsterRefreshGroup::set_has_wave_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sMonsterRefreshGroup::clear_has_wave_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sMonsterRefreshGroup::clear_wave_index() {
  wave_index_ = 0u;
  clear_has_wave_index();
}
inline ::google::protobuf::uint32 sMonsterRefreshGroup::wave_index() const {
  return wave_index_;
}
inline void sMonsterRefreshGroup::set_wave_index(::google::protobuf::uint32 value) {
  set_has_wave_index();
  wave_index_ = value;
}

// -------------------------------------------------------------------

// sMonsterRefresh

// optional uint32 monsterid = 1;
inline bool sMonsterRefresh::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sMonsterRefresh::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sMonsterRefresh::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sMonsterRefresh::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 sMonsterRefresh::monsterid() const {
  return monsterid_;
}
inline void sMonsterRefresh::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional uint32 playerid = 2;
inline bool sMonsterRefresh::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sMonsterRefresh::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sMonsterRefresh::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sMonsterRefresh::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 sMonsterRefresh::playerid() const {
  return playerid_;
}
inline void sMonsterRefresh::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional .jynetwork.proto.eActorLvlType atype = 3;
inline bool sMonsterRefresh::has_atype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sMonsterRefresh::set_has_atype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sMonsterRefresh::clear_has_atype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sMonsterRefresh::clear_atype() {
  atype_ = 0;
  clear_has_atype();
}
inline ::jynetwork::proto::eActorLvlType sMonsterRefresh::atype() const {
  return static_cast< ::jynetwork::proto::eActorLvlType >(atype_);
}
inline void sMonsterRefresh::set_atype(::jynetwork::proto::eActorLvlType value) {
  assert(::jynetwork::proto::eActorLvlType_IsValid(value));
  set_has_atype();
  atype_ = value;
}

// optional uint32 level = 4;
inline bool sMonsterRefresh::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sMonsterRefresh::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sMonsterRefresh::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sMonsterRefresh::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 sMonsterRefresh::level() const {
  return level_;
}
inline void sMonsterRefresh::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional float modifyhp = 5;
inline bool sMonsterRefresh::has_modifyhp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sMonsterRefresh::set_has_modifyhp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sMonsterRefresh::clear_has_modifyhp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sMonsterRefresh::clear_modifyhp() {
  modifyhp_ = 0;
  clear_has_modifyhp();
}
inline float sMonsterRefresh::modifyhp() const {
  return modifyhp_;
}
inline void sMonsterRefresh::set_modifyhp(float value) {
  set_has_modifyhp();
  modifyhp_ = value;
}

// optional float modifyatk = 6;
inline bool sMonsterRefresh::has_modifyatk() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sMonsterRefresh::set_has_modifyatk() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sMonsterRefresh::clear_has_modifyatk() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sMonsterRefresh::clear_modifyatk() {
  modifyatk_ = 0;
  clear_has_modifyatk();
}
inline float sMonsterRefresh::modifyatk() const {
  return modifyatk_;
}
inline void sMonsterRefresh::set_modifyatk(float value) {
  set_has_modifyatk();
  modifyatk_ = value;
}

// optional int32 stx = 7;
inline bool sMonsterRefresh::has_stx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sMonsterRefresh::set_has_stx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sMonsterRefresh::clear_has_stx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sMonsterRefresh::clear_stx() {
  stx_ = 0;
  clear_has_stx();
}
inline ::google::protobuf::int32 sMonsterRefresh::stx() const {
  return stx_;
}
inline void sMonsterRefresh::set_stx(::google::protobuf::int32 value) {
  set_has_stx();
  stx_ = value;
}

// optional int32 sty = 8;
inline bool sMonsterRefresh::has_sty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sMonsterRefresh::set_has_sty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sMonsterRefresh::clear_has_sty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sMonsterRefresh::clear_sty() {
  sty_ = 0;
  clear_has_sty();
}
inline ::google::protobuf::int32 sMonsterRefresh::sty() const {
  return sty_;
}
inline void sMonsterRefresh::set_sty(::google::protobuf::int32 value) {
  set_has_sty();
  sty_ = value;
}

// optional int32 startx1 = 9;
inline bool sMonsterRefresh::has_startx1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sMonsterRefresh::set_has_startx1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sMonsterRefresh::clear_has_startx1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sMonsterRefresh::clear_startx1() {
  startx1_ = 0;
  clear_has_startx1();
}
inline ::google::protobuf::int32 sMonsterRefresh::startx1() const {
  return startx1_;
}
inline void sMonsterRefresh::set_startx1(::google::protobuf::int32 value) {
  set_has_startx1();
  startx1_ = value;
}

// optional int32 starty1 = 10;
inline bool sMonsterRefresh::has_starty1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sMonsterRefresh::set_has_starty1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sMonsterRefresh::clear_has_starty1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sMonsterRefresh::clear_starty1() {
  starty1_ = 0;
  clear_has_starty1();
}
inline ::google::protobuf::int32 sMonsterRefresh::starty1() const {
  return starty1_;
}
inline void sMonsterRefresh::set_starty1(::google::protobuf::int32 value) {
  set_has_starty1();
  starty1_ = value;
}

// optional int32 endx2 = 11;
inline bool sMonsterRefresh::has_endx2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sMonsterRefresh::set_has_endx2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sMonsterRefresh::clear_has_endx2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sMonsterRefresh::clear_endx2() {
  endx2_ = 0;
  clear_has_endx2();
}
inline ::google::protobuf::int32 sMonsterRefresh::endx2() const {
  return endx2_;
}
inline void sMonsterRefresh::set_endx2(::google::protobuf::int32 value) {
  set_has_endx2();
  endx2_ = value;
}

// optional int32 endy2 = 12;
inline bool sMonsterRefresh::has_endy2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sMonsterRefresh::set_has_endy2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sMonsterRefresh::clear_has_endy2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sMonsterRefresh::clear_endy2() {
  endy2_ = 0;
  clear_has_endy2();
}
inline ::google::protobuf::int32 sMonsterRefresh::endy2() const {
  return endy2_;
}
inline void sMonsterRefresh::set_endy2(::google::protobuf::int32 value) {
  set_has_endy2();
  endy2_ = value;
}

// optional int32 outx = 13;
inline bool sMonsterRefresh::has_outx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sMonsterRefresh::set_has_outx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sMonsterRefresh::clear_has_outx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sMonsterRefresh::clear_outx() {
  outx_ = 0;
  clear_has_outx();
}
inline ::google::protobuf::int32 sMonsterRefresh::outx() const {
  return outx_;
}
inline void sMonsterRefresh::set_outx(::google::protobuf::int32 value) {
  set_has_outx();
  outx_ = value;
}

// optional int32 outy = 14;
inline bool sMonsterRefresh::has_outy() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sMonsterRefresh::set_has_outy() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sMonsterRefresh::clear_has_outy() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sMonsterRefresh::clear_outy() {
  outy_ = 0;
  clear_has_outy();
}
inline ::google::protobuf::int32 sMonsterRefresh::outy() const {
  return outy_;
}
inline void sMonsterRefresh::set_outy(::google::protobuf::int32 value) {
  set_has_outy();
  outy_ = value;
}

// optional .jynetwork.proto.eMovementType mov_type = 15;
inline bool sMonsterRefresh::has_mov_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sMonsterRefresh::set_has_mov_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sMonsterRefresh::clear_has_mov_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sMonsterRefresh::clear_mov_type() {
  mov_type_ = 0;
  clear_has_mov_type();
}
inline ::jynetwork::proto::eMovementType sMonsterRefresh::mov_type() const {
  return static_cast< ::jynetwork::proto::eMovementType >(mov_type_);
}
inline void sMonsterRefresh::set_mov_type(::jynetwork::proto::eMovementType value) {
  assert(::jynetwork::proto::eMovementType_IsValid(value));
  set_has_mov_type();
  mov_type_ = value;
}

// optional float spawn_time = 16;
inline bool sMonsterRefresh::has_spawn_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sMonsterRefresh::set_has_spawn_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sMonsterRefresh::clear_has_spawn_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sMonsterRefresh::clear_spawn_time() {
  spawn_time_ = 0;
  clear_has_spawn_time();
}
inline float sMonsterRefresh::spawn_time() const {
  return spawn_time_;
}
inline void sMonsterRefresh::set_spawn_time(float value) {
  set_has_spawn_time();
  spawn_time_ = value;
}

// optional uint32 dropsid = 17;
inline bool sMonsterRefresh::has_dropsid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sMonsterRefresh::set_has_dropsid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sMonsterRefresh::clear_has_dropsid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sMonsterRefresh::clear_dropsid() {
  dropsid_ = 0u;
  clear_has_dropsid();
}
inline ::google::protobuf::uint32 sMonsterRefresh::dropsid() const {
  return dropsid_;
}
inline void sMonsterRefresh::set_dropsid(::google::protobuf::uint32 value) {
  set_has_dropsid();
  dropsid_ = value;
}

// optional uint32 score = 18;
inline bool sMonsterRefresh::has_score() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sMonsterRefresh::set_has_score() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sMonsterRefresh::clear_has_score() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sMonsterRefresh::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 sMonsterRefresh::score() const {
  return score_;
}
inline void sMonsterRefresh::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional float delaytime = 19;
inline bool sMonsterRefresh::has_delaytime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sMonsterRefresh::set_has_delaytime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sMonsterRefresh::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sMonsterRefresh::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline float sMonsterRefresh::delaytime() const {
  return delaytime_;
}
inline void sMonsterRefresh::set_delaytime(float value) {
  set_has_delaytime();
  delaytime_ = value;
}

// optional uint32 wave_end_action = 20;
inline bool sMonsterRefresh::has_wave_end_action() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sMonsterRefresh::set_has_wave_end_action() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sMonsterRefresh::clear_has_wave_end_action() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sMonsterRefresh::clear_wave_end_action() {
  wave_end_action_ = 0u;
  clear_has_wave_end_action();
}
inline ::google::protobuf::uint32 sMonsterRefresh::wave_end_action() const {
  return wave_end_action_;
}
inline void sMonsterRefresh::set_wave_end_action(::google::protobuf::uint32 value) {
  set_has_wave_end_action();
  wave_end_action_ = value;
}

// optional uint32 body_effect = 21;
inline bool sMonsterRefresh::has_body_effect() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sMonsterRefresh::set_has_body_effect() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sMonsterRefresh::clear_has_body_effect() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sMonsterRefresh::clear_body_effect() {
  body_effect_ = 0u;
  clear_has_body_effect();
}
inline ::google::protobuf::uint32 sMonsterRefresh::body_effect() const {
  return body_effect_;
}
inline void sMonsterRefresh::set_body_effect(::google::protobuf::uint32 value) {
  set_has_body_effect();
  body_effect_ = value;
}

// optional .jynetwork.proto.eMonsterAttackMode attack_type = 22;
inline bool sMonsterRefresh::has_attack_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sMonsterRefresh::set_has_attack_type() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sMonsterRefresh::clear_has_attack_type() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sMonsterRefresh::clear_attack_type() {
  attack_type_ = 1;
  clear_has_attack_type();
}
inline ::jynetwork::proto::eMonsterAttackMode sMonsterRefresh::attack_type() const {
  return static_cast< ::jynetwork::proto::eMonsterAttackMode >(attack_type_);
}
inline void sMonsterRefresh::set_attack_type(::jynetwork::proto::eMonsterAttackMode value) {
  assert(::jynetwork::proto::eMonsterAttackMode_IsValid(value));
  set_has_attack_type();
  attack_type_ = value;
}

// optional int32 drop_gold = 23;
inline bool sMonsterRefresh::has_drop_gold() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sMonsterRefresh::set_has_drop_gold() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sMonsterRefresh::clear_has_drop_gold() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sMonsterRefresh::clear_drop_gold() {
  drop_gold_ = 0;
  clear_has_drop_gold();
}
inline ::google::protobuf::int32 sMonsterRefresh::drop_gold() const {
  return drop_gold_;
}
inline void sMonsterRefresh::set_drop_gold(::google::protobuf::int32 value) {
  set_has_drop_gold();
  drop_gold_ = value;
}

// optional int32 drop_box_amount = 24;
inline bool sMonsterRefresh::has_drop_box_amount() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sMonsterRefresh::set_has_drop_box_amount() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sMonsterRefresh::clear_has_drop_box_amount() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sMonsterRefresh::clear_drop_box_amount() {
  drop_box_amount_ = 0;
  clear_has_drop_box_amount();
}
inline ::google::protobuf::int32 sMonsterRefresh::drop_box_amount() const {
  return drop_box_amount_;
}
inline void sMonsterRefresh::set_drop_box_amount(::google::protobuf::int32 value) {
  set_has_drop_box_amount();
  drop_box_amount_ = value;
}

// optional int32 drop_box = 25;
inline bool sMonsterRefresh::has_drop_box() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sMonsterRefresh::set_has_drop_box() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sMonsterRefresh::clear_has_drop_box() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sMonsterRefresh::clear_drop_box() {
  drop_box_ = 0;
  clear_has_drop_box();
}
inline ::google::protobuf::int32 sMonsterRefresh::drop_box() const {
  return drop_box_;
}
inline void sMonsterRefresh::set_drop_box(::google::protobuf::int32 value) {
  set_has_drop_box();
  drop_box_ = value;
}

// optional int32 drop_gold_size = 26;
inline bool sMonsterRefresh::has_drop_gold_size() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sMonsterRefresh::set_has_drop_gold_size() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sMonsterRefresh::clear_has_drop_gold_size() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sMonsterRefresh::clear_drop_gold_size() {
  drop_gold_size_ = 0;
  clear_has_drop_gold_size();
}
inline ::google::protobuf::int32 sMonsterRefresh::drop_gold_size() const {
  return drop_gold_size_;
}
inline void sMonsterRefresh::set_drop_gold_size(::google::protobuf::int32 value) {
  set_has_drop_gold_size();
  drop_gold_size_ = value;
}

// optional int32 startx2 = 27;
inline bool sMonsterRefresh::has_startx2() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void sMonsterRefresh::set_has_startx2() {
  _has_bits_[0] |= 0x04000000u;
}
inline void sMonsterRefresh::clear_has_startx2() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void sMonsterRefresh::clear_startx2() {
  startx2_ = 0;
  clear_has_startx2();
}
inline ::google::protobuf::int32 sMonsterRefresh::startx2() const {
  return startx2_;
}
inline void sMonsterRefresh::set_startx2(::google::protobuf::int32 value) {
  set_has_startx2();
  startx2_ = value;
}

// optional int32 starty2 = 28;
inline bool sMonsterRefresh::has_starty2() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void sMonsterRefresh::set_has_starty2() {
  _has_bits_[0] |= 0x08000000u;
}
inline void sMonsterRefresh::clear_has_starty2() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void sMonsterRefresh::clear_starty2() {
  starty2_ = 0;
  clear_has_starty2();
}
inline ::google::protobuf::int32 sMonsterRefresh::starty2() const {
  return starty2_;
}
inline void sMonsterRefresh::set_starty2(::google::protobuf::int32 value) {
  set_has_starty2();
  starty2_ = value;
}

// optional int32 endx1 = 29;
inline bool sMonsterRefresh::has_endx1() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void sMonsterRefresh::set_has_endx1() {
  _has_bits_[0] |= 0x10000000u;
}
inline void sMonsterRefresh::clear_has_endx1() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void sMonsterRefresh::clear_endx1() {
  endx1_ = 0;
  clear_has_endx1();
}
inline ::google::protobuf::int32 sMonsterRefresh::endx1() const {
  return endx1_;
}
inline void sMonsterRefresh::set_endx1(::google::protobuf::int32 value) {
  set_has_endx1();
  endx1_ = value;
}

// optional int32 endy1 = 30;
inline bool sMonsterRefresh::has_endy1() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void sMonsterRefresh::set_has_endy1() {
  _has_bits_[0] |= 0x20000000u;
}
inline void sMonsterRefresh::clear_has_endy1() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void sMonsterRefresh::clear_endy1() {
  endy1_ = 0;
  clear_has_endy1();
}
inline ::google::protobuf::int32 sMonsterRefresh::endy1() const {
  return endy1_;
}
inline void sMonsterRefresh::set_endy1(::google::protobuf::int32 value) {
  set_has_endy1();
  endy1_ = value;
}

// repeated uint32 move_steps = 31;
inline int sMonsterRefresh::move_steps_size() const {
  return move_steps_.size();
}
inline void sMonsterRefresh::clear_move_steps() {
  move_steps_.Clear();
}
inline ::google::protobuf::uint32 sMonsterRefresh::move_steps(int index) const {
  return move_steps_.Get(index);
}
inline void sMonsterRefresh::set_move_steps(int index, ::google::protobuf::uint32 value) {
  move_steps_.Set(index, value);
}
inline void sMonsterRefresh::add_move_steps(::google::protobuf::uint32 value) {
  move_steps_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sMonsterRefresh::move_steps() const {
  return move_steps_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sMonsterRefresh::mutable_move_steps() {
  return &move_steps_;
}

// optional float step_gap_time = 32;
inline bool sMonsterRefresh::has_step_gap_time() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void sMonsterRefresh::set_has_step_gap_time() {
  _has_bits_[0] |= 0x80000000u;
}
inline void sMonsterRefresh::clear_has_step_gap_time() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void sMonsterRefresh::clear_step_gap_time() {
  step_gap_time_ = 0;
  clear_has_step_gap_time();
}
inline float sMonsterRefresh::step_gap_time() const {
  return step_gap_time_;
}
inline void sMonsterRefresh::set_step_gap_time(float value) {
  set_has_step_gap_time();
  step_gap_time_ = value;
}

// optional uint32 spawn_type = 33;
inline bool sMonsterRefresh::has_spawn_type() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void sMonsterRefresh::set_has_spawn_type() {
  _has_bits_[1] |= 0x00000001u;
}
inline void sMonsterRefresh::clear_has_spawn_type() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void sMonsterRefresh::clear_spawn_type() {
  spawn_type_ = 0u;
  clear_has_spawn_type();
}
inline ::google::protobuf::uint32 sMonsterRefresh::spawn_type() const {
  return spawn_type_;
}
inline void sMonsterRefresh::set_spawn_type(::google::protobuf::uint32 value) {
  set_has_spawn_type();
  spawn_type_ = value;
}

// optional uint32 spawn_group_id = 34;
inline bool sMonsterRefresh::has_spawn_group_id() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void sMonsterRefresh::set_has_spawn_group_id() {
  _has_bits_[1] |= 0x00000002u;
}
inline void sMonsterRefresh::clear_has_spawn_group_id() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void sMonsterRefresh::clear_spawn_group_id() {
  spawn_group_id_ = 0u;
  clear_has_spawn_group_id();
}
inline ::google::protobuf::uint32 sMonsterRefresh::spawn_group_id() const {
  return spawn_group_id_;
}
inline void sMonsterRefresh::set_spawn_group_id(::google::protobuf::uint32 value) {
  set_has_spawn_group_id();
  spawn_group_id_ = value;
}

// optional uint32 condition_spawn = 35;
inline bool sMonsterRefresh::has_condition_spawn() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void sMonsterRefresh::set_has_condition_spawn() {
  _has_bits_[1] |= 0x00000004u;
}
inline void sMonsterRefresh::clear_has_condition_spawn() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void sMonsterRefresh::clear_condition_spawn() {
  condition_spawn_ = 0u;
  clear_has_condition_spawn();
}
inline ::google::protobuf::uint32 sMonsterRefresh::condition_spawn() const {
  return condition_spawn_;
}
inline void sMonsterRefresh::set_condition_spawn(::google::protobuf::uint32 value) {
  set_has_condition_spawn();
  condition_spawn_ = value;
}

// optional uint32 condition_param = 36;
inline bool sMonsterRefresh::has_condition_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void sMonsterRefresh::set_has_condition_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void sMonsterRefresh::clear_has_condition_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void sMonsterRefresh::clear_condition_param() {
  condition_param_ = 0u;
  clear_has_condition_param();
}
inline ::google::protobuf::uint32 sMonsterRefresh::condition_param() const {
  return condition_param_;
}
inline void sMonsterRefresh::set_condition_param(::google::protobuf::uint32 value) {
  set_has_condition_param();
  condition_param_ = value;
}

// optional uint32 condition_time = 37;
inline bool sMonsterRefresh::has_condition_time() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void sMonsterRefresh::set_has_condition_time() {
  _has_bits_[1] |= 0x00000010u;
}
inline void sMonsterRefresh::clear_has_condition_time() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void sMonsterRefresh::clear_condition_time() {
  condition_time_ = 0u;
  clear_has_condition_time();
}
inline ::google::protobuf::uint32 sMonsterRefresh::condition_time() const {
  return condition_time_;
}
inline void sMonsterRefresh::set_condition_time(::google::protobuf::uint32 value) {
  set_has_condition_time();
  condition_time_ = value;
}

// optional uint32 resurgence = 38;
inline bool sMonsterRefresh::has_resurgence() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void sMonsterRefresh::set_has_resurgence() {
  _has_bits_[1] |= 0x00000020u;
}
inline void sMonsterRefresh::clear_has_resurgence() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void sMonsterRefresh::clear_resurgence() {
  resurgence_ = 0u;
  clear_has_resurgence();
}
inline ::google::protobuf::uint32 sMonsterRefresh::resurgence() const {
  return resurgence_;
}
inline void sMonsterRefresh::set_resurgence(::google::protobuf::uint32 value) {
  set_has_resurgence();
  resurgence_ = value;
}

// optional uint32 resurgence_id = 39;
inline bool sMonsterRefresh::has_resurgence_id() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void sMonsterRefresh::set_has_resurgence_id() {
  _has_bits_[1] |= 0x00000040u;
}
inline void sMonsterRefresh::clear_has_resurgence_id() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void sMonsterRefresh::clear_resurgence_id() {
  resurgence_id_ = 0u;
  clear_has_resurgence_id();
}
inline ::google::protobuf::uint32 sMonsterRefresh::resurgence_id() const {
  return resurgence_id_;
}
inline void sMonsterRefresh::set_resurgence_id(::google::protobuf::uint32 value) {
  set_has_resurgence_id();
  resurgence_id_ = value;
}

// optional uint32 p_showCondition = 40;
inline bool sMonsterRefresh::has_p_showcondition() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void sMonsterRefresh::set_has_p_showcondition() {
  _has_bits_[1] |= 0x00000080u;
}
inline void sMonsterRefresh::clear_has_p_showcondition() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void sMonsterRefresh::clear_p_showcondition() {
  p_showcondition_ = 0u;
  clear_has_p_showcondition();
}
inline ::google::protobuf::uint32 sMonsterRefresh::p_showcondition() const {
  return p_showcondition_;
}
inline void sMonsterRefresh::set_p_showcondition(::google::protobuf::uint32 value) {
  set_has_p_showcondition();
  p_showcondition_ = value;
}

// optional uint32 groupId = 41;
inline bool sMonsterRefresh::has_groupid() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void sMonsterRefresh::set_has_groupid() {
  _has_bits_[1] |= 0x00000100u;
}
inline void sMonsterRefresh::clear_has_groupid() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void sMonsterRefresh::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 sMonsterRefresh::groupid() const {
  return groupid_;
}
inline void sMonsterRefresh::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional uint32 conditionId = 42;
inline bool sMonsterRefresh::has_conditionid() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void sMonsterRefresh::set_has_conditionid() {
  _has_bits_[1] |= 0x00000200u;
}
inline void sMonsterRefresh::clear_has_conditionid() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void sMonsterRefresh::clear_conditionid() {
  conditionid_ = 0u;
  clear_has_conditionid();
}
inline ::google::protobuf::uint32 sMonsterRefresh::conditionid() const {
  return conditionid_;
}
inline void sMonsterRefresh::set_conditionid(::google::protobuf::uint32 value) {
  set_has_conditionid();
  conditionid_ = value;
}

// optional uint32 p_delayTime = 43;
inline bool sMonsterRefresh::has_p_delaytime() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void sMonsterRefresh::set_has_p_delaytime() {
  _has_bits_[1] |= 0x00000400u;
}
inline void sMonsterRefresh::clear_has_p_delaytime() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void sMonsterRefresh::clear_p_delaytime() {
  p_delaytime_ = 0u;
  clear_has_p_delaytime();
}
inline ::google::protobuf::uint32 sMonsterRefresh::p_delaytime() const {
  return p_delaytime_;
}
inline void sMonsterRefresh::set_p_delaytime(::google::protobuf::uint32 value) {
  set_has_p_delaytime();
  p_delaytime_ = value;
}

// optional float turnin_invincible_time = 44;
inline bool sMonsterRefresh::has_turnin_invincible_time() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void sMonsterRefresh::set_has_turnin_invincible_time() {
  _has_bits_[1] |= 0x00000800u;
}
inline void sMonsterRefresh::clear_has_turnin_invincible_time() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void sMonsterRefresh::clear_turnin_invincible_time() {
  turnin_invincible_time_ = 0;
  clear_has_turnin_invincible_time();
}
inline float sMonsterRefresh::turnin_invincible_time() const {
  return turnin_invincible_time_;
}
inline void sMonsterRefresh::set_turnin_invincible_time(float value) {
  set_has_turnin_invincible_time();
  turnin_invincible_time_ = value;
}

// optional float durtime = 45;
inline bool sMonsterRefresh::has_durtime() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void sMonsterRefresh::set_has_durtime() {
  _has_bits_[1] |= 0x00001000u;
}
inline void sMonsterRefresh::clear_has_durtime() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void sMonsterRefresh::clear_durtime() {
  durtime_ = 0;
  clear_has_durtime();
}
inline float sMonsterRefresh::durtime() const {
  return durtime_;
}
inline void sMonsterRefresh::set_durtime(float value) {
  set_has_durtime();
  durtime_ = value;
}

// optional int32 keyMonster = 46;
inline bool sMonsterRefresh::has_keymonster() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void sMonsterRefresh::set_has_keymonster() {
  _has_bits_[1] |= 0x00002000u;
}
inline void sMonsterRefresh::clear_has_keymonster() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void sMonsterRefresh::clear_keymonster() {
  keymonster_ = 0;
  clear_has_keymonster();
}
inline ::google::protobuf::int32 sMonsterRefresh::keymonster() const {
  return keymonster_;
}
inline void sMonsterRefresh::set_keymonster(::google::protobuf::int32 value) {
  set_has_keymonster();
  keymonster_ = value;
}

// optional uint32 boss_key = 47;
inline bool sMonsterRefresh::has_boss_key() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void sMonsterRefresh::set_has_boss_key() {
  _has_bits_[1] |= 0x00004000u;
}
inline void sMonsterRefresh::clear_has_boss_key() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void sMonsterRefresh::clear_boss_key() {
  boss_key_ = 0u;
  clear_has_boss_key();
}
inline ::google::protobuf::uint32 sMonsterRefresh::boss_key() const {
  return boss_key_;
}
inline void sMonsterRefresh::set_boss_key(::google::protobuf::uint32 value) {
  set_has_boss_key();
  boss_key_ = value;
}

// optional uint32 uid = 48;
inline bool sMonsterRefresh::has_uid() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void sMonsterRefresh::set_has_uid() {
  _has_bits_[1] |= 0x00008000u;
}
inline void sMonsterRefresh::clear_has_uid() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void sMonsterRefresh::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sMonsterRefresh::uid() const {
  return uid_;
}
inline void sMonsterRefresh::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 die_mask = 49;
inline bool sMonsterRefresh::has_die_mask() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void sMonsterRefresh::set_has_die_mask() {
  _has_bits_[1] |= 0x00010000u;
}
inline void sMonsterRefresh::clear_has_die_mask() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void sMonsterRefresh::clear_die_mask() {
  die_mask_ = 0u;
  clear_has_die_mask();
}
inline ::google::protobuf::uint32 sMonsterRefresh::die_mask() const {
  return die_mask_;
}
inline void sMonsterRefresh::set_die_mask(::google::protobuf::uint32 value) {
  set_has_die_mask();
  die_mask_ = value;
}

// optional uint32 need_synchronize = 50;
inline bool sMonsterRefresh::has_need_synchronize() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void sMonsterRefresh::set_has_need_synchronize() {
  _has_bits_[1] |= 0x00020000u;
}
inline void sMonsterRefresh::clear_has_need_synchronize() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void sMonsterRefresh::clear_need_synchronize() {
  need_synchronize_ = 0u;
  clear_has_need_synchronize();
}
inline ::google::protobuf::uint32 sMonsterRefresh::need_synchronize() const {
  return need_synchronize_;
}
inline void sMonsterRefresh::set_need_synchronize(::google::protobuf::uint32 value) {
  set_has_need_synchronize();
  need_synchronize_ = value;
}

// optional string monster_name = 51;
inline bool sMonsterRefresh::has_monster_name() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void sMonsterRefresh::set_has_monster_name() {
  _has_bits_[1] |= 0x00040000u;
}
inline void sMonsterRefresh::clear_has_monster_name() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void sMonsterRefresh::clear_monster_name() {
  if (monster_name_ != &::google::protobuf::internal::kEmptyString) {
    monster_name_->clear();
  }
  clear_has_monster_name();
}
inline const ::std::string& sMonsterRefresh::monster_name() const {
  return *monster_name_;
}
inline void sMonsterRefresh::set_monster_name(const ::std::string& value) {
  set_has_monster_name();
  if (monster_name_ == &::google::protobuf::internal::kEmptyString) {
    monster_name_ = new ::std::string;
  }
  monster_name_->assign(value);
}
inline void sMonsterRefresh::set_monster_name(const char* value) {
  set_has_monster_name();
  if (monster_name_ == &::google::protobuf::internal::kEmptyString) {
    monster_name_ = new ::std::string;
  }
  monster_name_->assign(value);
}
inline void sMonsterRefresh::set_monster_name(const char* value, size_t size) {
  set_has_monster_name();
  if (monster_name_ == &::google::protobuf::internal::kEmptyString) {
    monster_name_ = new ::std::string;
  }
  monster_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sMonsterRefresh::mutable_monster_name() {
  set_has_monster_name();
  if (monster_name_ == &::google::protobuf::internal::kEmptyString) {
    monster_name_ = new ::std::string;
  }
  return monster_name_;
}
inline ::std::string* sMonsterRefresh::release_monster_name() {
  clear_has_monster_name();
  if (monster_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = monster_name_;
    monster_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sMonsterRefresh::set_allocated_monster_name(::std::string* monster_name) {
  if (monster_name_ != &::google::protobuf::internal::kEmptyString) {
    delete monster_name_;
  }
  if (monster_name) {
    set_has_monster_name();
    monster_name_ = monster_name;
  } else {
    clear_has_monster_name();
    monster_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string monster_head = 52;
inline bool sMonsterRefresh::has_monster_head() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void sMonsterRefresh::set_has_monster_head() {
  _has_bits_[1] |= 0x00080000u;
}
inline void sMonsterRefresh::clear_has_monster_head() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void sMonsterRefresh::clear_monster_head() {
  if (monster_head_ != &::google::protobuf::internal::kEmptyString) {
    monster_head_->clear();
  }
  clear_has_monster_head();
}
inline const ::std::string& sMonsterRefresh::monster_head() const {
  return *monster_head_;
}
inline void sMonsterRefresh::set_monster_head(const ::std::string& value) {
  set_has_monster_head();
  if (monster_head_ == &::google::protobuf::internal::kEmptyString) {
    monster_head_ = new ::std::string;
  }
  monster_head_->assign(value);
}
inline void sMonsterRefresh::set_monster_head(const char* value) {
  set_has_monster_head();
  if (monster_head_ == &::google::protobuf::internal::kEmptyString) {
    monster_head_ = new ::std::string;
  }
  monster_head_->assign(value);
}
inline void sMonsterRefresh::set_monster_head(const char* value, size_t size) {
  set_has_monster_head();
  if (monster_head_ == &::google::protobuf::internal::kEmptyString) {
    monster_head_ = new ::std::string;
  }
  monster_head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sMonsterRefresh::mutable_monster_head() {
  set_has_monster_head();
  if (monster_head_ == &::google::protobuf::internal::kEmptyString) {
    monster_head_ = new ::std::string;
  }
  return monster_head_;
}
inline ::std::string* sMonsterRefresh::release_monster_head() {
  clear_has_monster_head();
  if (monster_head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = monster_head_;
    monster_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sMonsterRefresh::set_allocated_monster_head(::std::string* monster_head) {
  if (monster_head_ != &::google::protobuf::internal::kEmptyString) {
    delete monster_head_;
  }
  if (monster_head) {
    set_has_monster_head();
    monster_head_ = monster_head;
  } else {
    clear_has_monster_head();
    monster_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string monster_vectory = 53;
inline bool sMonsterRefresh::has_monster_vectory() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void sMonsterRefresh::set_has_monster_vectory() {
  _has_bits_[1] |= 0x00100000u;
}
inline void sMonsterRefresh::clear_has_monster_vectory() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void sMonsterRefresh::clear_monster_vectory() {
  if (monster_vectory_ != &::google::protobuf::internal::kEmptyString) {
    monster_vectory_->clear();
  }
  clear_has_monster_vectory();
}
inline const ::std::string& sMonsterRefresh::monster_vectory() const {
  return *monster_vectory_;
}
inline void sMonsterRefresh::set_monster_vectory(const ::std::string& value) {
  set_has_monster_vectory();
  if (monster_vectory_ == &::google::protobuf::internal::kEmptyString) {
    monster_vectory_ = new ::std::string;
  }
  monster_vectory_->assign(value);
}
inline void sMonsterRefresh::set_monster_vectory(const char* value) {
  set_has_monster_vectory();
  if (monster_vectory_ == &::google::protobuf::internal::kEmptyString) {
    monster_vectory_ = new ::std::string;
  }
  monster_vectory_->assign(value);
}
inline void sMonsterRefresh::set_monster_vectory(const char* value, size_t size) {
  set_has_monster_vectory();
  if (monster_vectory_ == &::google::protobuf::internal::kEmptyString) {
    monster_vectory_ = new ::std::string;
  }
  monster_vectory_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sMonsterRefresh::mutable_monster_vectory() {
  set_has_monster_vectory();
  if (monster_vectory_ == &::google::protobuf::internal::kEmptyString) {
    monster_vectory_ = new ::std::string;
  }
  return monster_vectory_;
}
inline ::std::string* sMonsterRefresh::release_monster_vectory() {
  clear_has_monster_vectory();
  if (monster_vectory_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = monster_vectory_;
    monster_vectory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sMonsterRefresh::set_allocated_monster_vectory(::std::string* monster_vectory) {
  if (monster_vectory_ != &::google::protobuf::internal::kEmptyString) {
    delete monster_vectory_;
  }
  if (monster_vectory) {
    set_has_monster_vectory();
    monster_vectory_ = monster_vectory;
  } else {
    clear_has_monster_vectory();
    monster_vectory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 drop_gold_amount = 54;
inline bool sMonsterRefresh::has_drop_gold_amount() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void sMonsterRefresh::set_has_drop_gold_amount() {
  _has_bits_[1] |= 0x00200000u;
}
inline void sMonsterRefresh::clear_has_drop_gold_amount() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void sMonsterRefresh::clear_drop_gold_amount() {
  drop_gold_amount_ = 0u;
  clear_has_drop_gold_amount();
}
inline ::google::protobuf::uint32 sMonsterRefresh::drop_gold_amount() const {
  return drop_gold_amount_;
}
inline void sMonsterRefresh::set_drop_gold_amount(::google::protobuf::uint32 value) {
  set_has_drop_gold_amount();
  drop_gold_amount_ = value;
}

// -------------------------------------------------------------------

// sCastleBlock

// optional string block_name = 1;
inline bool sCastleBlock::has_block_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCastleBlock::set_has_block_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCastleBlock::clear_has_block_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCastleBlock::clear_block_name() {
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    block_name_->clear();
  }
  clear_has_block_name();
}
inline const ::std::string& sCastleBlock::block_name() const {
  return *block_name_;
}
inline void sCastleBlock::set_block_name(const ::std::string& value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void sCastleBlock::set_block_name(const char* value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void sCastleBlock::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCastleBlock::mutable_block_name() {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  return block_name_;
}
inline ::std::string* sCastleBlock::release_block_name() {
  clear_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_name_;
    block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCastleBlock::set_allocated_block_name(::std::string* block_name) {
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    delete block_name_;
  }
  if (block_name) {
    set_has_block_name();
    block_name_ = block_name;
  } else {
    clear_has_block_name();
    block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float scroll_scale = 2;
inline bool sCastleBlock::has_scroll_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCastleBlock::set_has_scroll_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCastleBlock::clear_has_scroll_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCastleBlock::clear_scroll_scale() {
  scroll_scale_ = 0;
  clear_has_scroll_scale();
}
inline float sCastleBlock::scroll_scale() const {
  return scroll_scale_;
}
inline void sCastleBlock::set_scroll_scale(float value) {
  set_has_scroll_scale();
  scroll_scale_ = value;
}

// -------------------------------------------------------------------

// sCastleStats

// optional uint32 uid = 1;
inline bool sCastleStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCastleStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCastleStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCastleStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sCastleStats::uid() const {
  return uid_;
}
inline void sCastleStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 castlename = 2;
inline bool sCastleStats::has_castlename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCastleStats::set_has_castlename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCastleStats::clear_has_castlename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCastleStats::clear_castlename() {
  castlename_ = 0u;
  clear_has_castlename();
}
inline ::google::protobuf::uint32 sCastleStats::castlename() const {
  return castlename_;
}
inline void sCastleStats::set_castlename(::google::protobuf::uint32 value) {
  set_has_castlename();
  castlename_ = value;
}

// optional string castlemap = 3;
inline bool sCastleStats::has_castlemap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCastleStats::set_has_castlemap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCastleStats::clear_has_castlemap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCastleStats::clear_castlemap() {
  if (castlemap_ != &::google::protobuf::internal::kEmptyString) {
    castlemap_->clear();
  }
  clear_has_castlemap();
}
inline const ::std::string& sCastleStats::castlemap() const {
  return *castlemap_;
}
inline void sCastleStats::set_castlemap(const ::std::string& value) {
  set_has_castlemap();
  if (castlemap_ == &::google::protobuf::internal::kEmptyString) {
    castlemap_ = new ::std::string;
  }
  castlemap_->assign(value);
}
inline void sCastleStats::set_castlemap(const char* value) {
  set_has_castlemap();
  if (castlemap_ == &::google::protobuf::internal::kEmptyString) {
    castlemap_ = new ::std::string;
  }
  castlemap_->assign(value);
}
inline void sCastleStats::set_castlemap(const char* value, size_t size) {
  set_has_castlemap();
  if (castlemap_ == &::google::protobuf::internal::kEmptyString) {
    castlemap_ = new ::std::string;
  }
  castlemap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCastleStats::mutable_castlemap() {
  set_has_castlemap();
  if (castlemap_ == &::google::protobuf::internal::kEmptyString) {
    castlemap_ = new ::std::string;
  }
  return castlemap_;
}
inline ::std::string* sCastleStats::release_castlemap() {
  clear_has_castlemap();
  if (castlemap_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = castlemap_;
    castlemap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCastleStats::set_allocated_castlemap(::std::string* castlemap) {
  if (castlemap_ != &::google::protobuf::internal::kEmptyString) {
    delete castlemap_;
  }
  if (castlemap) {
    set_has_castlemap();
    castlemap_ = castlemap;
  } else {
    clear_has_castlemap();
    castlemap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string castlebossmap = 4;
inline bool sCastleStats::has_castlebossmap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCastleStats::set_has_castlebossmap() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCastleStats::clear_has_castlebossmap() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCastleStats::clear_castlebossmap() {
  if (castlebossmap_ != &::google::protobuf::internal::kEmptyString) {
    castlebossmap_->clear();
  }
  clear_has_castlebossmap();
}
inline const ::std::string& sCastleStats::castlebossmap() const {
  return *castlebossmap_;
}
inline void sCastleStats::set_castlebossmap(const ::std::string& value) {
  set_has_castlebossmap();
  if (castlebossmap_ == &::google::protobuf::internal::kEmptyString) {
    castlebossmap_ = new ::std::string;
  }
  castlebossmap_->assign(value);
}
inline void sCastleStats::set_castlebossmap(const char* value) {
  set_has_castlebossmap();
  if (castlebossmap_ == &::google::protobuf::internal::kEmptyString) {
    castlebossmap_ = new ::std::string;
  }
  castlebossmap_->assign(value);
}
inline void sCastleStats::set_castlebossmap(const char* value, size_t size) {
  set_has_castlebossmap();
  if (castlebossmap_ == &::google::protobuf::internal::kEmptyString) {
    castlebossmap_ = new ::std::string;
  }
  castlebossmap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCastleStats::mutable_castlebossmap() {
  set_has_castlebossmap();
  if (castlebossmap_ == &::google::protobuf::internal::kEmptyString) {
    castlebossmap_ = new ::std::string;
  }
  return castlebossmap_;
}
inline ::std::string* sCastleStats::release_castlebossmap() {
  clear_has_castlebossmap();
  if (castlebossmap_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = castlebossmap_;
    castlebossmap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCastleStats::set_allocated_castlebossmap(::std::string* castlebossmap) {
  if (castlebossmap_ != &::google::protobuf::internal::kEmptyString) {
    delete castlebossmap_;
  }
  if (castlebossmap) {
    set_has_castlebossmap();
    castlebossmap_ = castlebossmap;
  } else {
    clear_has_castlebossmap();
    castlebossmap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 numlimit = 5;
inline bool sCastleStats::has_numlimit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sCastleStats::set_has_numlimit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sCastleStats::clear_has_numlimit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sCastleStats::clear_numlimit() {
  numlimit_ = 0u;
  clear_has_numlimit();
}
inline ::google::protobuf::uint32 sCastleStats::numlimit() const {
  return numlimit_;
}
inline void sCastleStats::set_numlimit(::google::protobuf::uint32 value) {
  set_has_numlimit();
  numlimit_ = value;
}

// optional uint32 levellimit = 6;
inline bool sCastleStats::has_levellimit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sCastleStats::set_has_levellimit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sCastleStats::clear_has_levellimit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sCastleStats::clear_levellimit() {
  levellimit_ = 0u;
  clear_has_levellimit();
}
inline ::google::protobuf::uint32 sCastleStats::levellimit() const {
  return levellimit_;
}
inline void sCastleStats::set_levellimit(::google::protobuf::uint32 value) {
  set_has_levellimit();
  levellimit_ = value;
}

// optional uint32 ranklimit = 7;
inline bool sCastleStats::has_ranklimit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sCastleStats::set_has_ranklimit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sCastleStats::clear_has_ranklimit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sCastleStats::clear_ranklimit() {
  ranklimit_ = 0u;
  clear_has_ranklimit();
}
inline ::google::protobuf::uint32 sCastleStats::ranklimit() const {
  return ranklimit_;
}
inline void sCastleStats::set_ranklimit(::google::protobuf::uint32 value) {
  set_has_ranklimit();
  ranklimit_ = value;
}

// repeated uint32 weekdaylimit = 8;
inline int sCastleStats::weekdaylimit_size() const {
  return weekdaylimit_.size();
}
inline void sCastleStats::clear_weekdaylimit() {
  weekdaylimit_.Clear();
}
inline ::google::protobuf::uint32 sCastleStats::weekdaylimit(int index) const {
  return weekdaylimit_.Get(index);
}
inline void sCastleStats::set_weekdaylimit(int index, ::google::protobuf::uint32 value) {
  weekdaylimit_.Set(index, value);
}
inline void sCastleStats::add_weekdaylimit(::google::protobuf::uint32 value) {
  weekdaylimit_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sCastleStats::weekdaylimit() const {
  return weekdaylimit_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sCastleStats::mutable_weekdaylimit() {
  return &weekdaylimit_;
}

// optional fixed32 day_begintime = 9;
inline bool sCastleStats::has_day_begintime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sCastleStats::set_has_day_begintime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sCastleStats::clear_has_day_begintime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sCastleStats::clear_day_begintime() {
  day_begintime_ = 0u;
  clear_has_day_begintime();
}
inline ::google::protobuf::uint32 sCastleStats::day_begintime() const {
  return day_begintime_;
}
inline void sCastleStats::set_day_begintime(::google::protobuf::uint32 value) {
  set_has_day_begintime();
  day_begintime_ = value;
}

// optional fixed32 day_endtime = 10;
inline bool sCastleStats::has_day_endtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sCastleStats::set_has_day_endtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sCastleStats::clear_has_day_endtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sCastleStats::clear_day_endtime() {
  day_endtime_ = 0u;
  clear_has_day_endtime();
}
inline ::google::protobuf::uint32 sCastleStats::day_endtime() const {
  return day_endtime_;
}
inline void sCastleStats::set_day_endtime(::google::protobuf::uint32 value) {
  set_has_day_endtime();
  day_endtime_ = value;
}

// optional uint32 frontcastle = 11;
inline bool sCastleStats::has_frontcastle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sCastleStats::set_has_frontcastle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sCastleStats::clear_has_frontcastle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sCastleStats::clear_frontcastle() {
  frontcastle_ = 0u;
  clear_has_frontcastle();
}
inline ::google::protobuf::uint32 sCastleStats::frontcastle() const {
  return frontcastle_;
}
inline void sCastleStats::set_frontcastle(::google::protobuf::uint32 value) {
  set_has_frontcastle();
  frontcastle_ = value;
}

// repeated .jynetwork.proto.sMonsterRefreshGroup groups = 12;
inline int sCastleStats::groups_size() const {
  return groups_.size();
}
inline void sCastleStats::clear_groups() {
  groups_.Clear();
}
inline const ::jynetwork::proto::sMonsterRefreshGroup& sCastleStats::groups(int index) const {
  return groups_.Get(index);
}
inline ::jynetwork::proto::sMonsterRefreshGroup* sCastleStats::mutable_groups(int index) {
  return groups_.Mutable(index);
}
inline ::jynetwork::proto::sMonsterRefreshGroup* sCastleStats::add_groups() {
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefreshGroup >&
sCastleStats::groups() const {
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefreshGroup >*
sCastleStats::mutable_groups() {
  return &groups_;
}

// optional float bossmap_scroll = 13;
inline bool sCastleStats::has_bossmap_scroll() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sCastleStats::set_has_bossmap_scroll() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sCastleStats::clear_has_bossmap_scroll() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sCastleStats::clear_bossmap_scroll() {
  bossmap_scroll_ = 0;
  clear_has_bossmap_scroll();
}
inline float sCastleStats::bossmap_scroll() const {
  return bossmap_scroll_;
}
inline void sCastleStats::set_bossmap_scroll(float value) {
  set_has_bossmap_scroll();
  bossmap_scroll_ = value;
}

// optional uint32 wateref = 14;
inline bool sCastleStats::has_wateref() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sCastleStats::set_has_wateref() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sCastleStats::clear_has_wateref() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sCastleStats::clear_wateref() {
  wateref_ = 0u;
  clear_has_wateref();
}
inline ::google::protobuf::uint32 sCastleStats::wateref() const {
  return wateref_;
}
inline void sCastleStats::set_wateref(::google::protobuf::uint32 value) {
  set_has_wateref();
  wateref_ = value;
}

// optional uint32 map_effect = 15;
inline bool sCastleStats::has_map_effect() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sCastleStats::set_has_map_effect() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sCastleStats::clear_has_map_effect() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sCastleStats::clear_map_effect() {
  map_effect_ = 0u;
  clear_has_map_effect();
}
inline ::google::protobuf::uint32 sCastleStats::map_effect() const {
  return map_effect_;
}
inline void sCastleStats::set_map_effect(::google::protobuf::uint32 value) {
  set_has_map_effect();
  map_effect_ = value;
}

// repeated .jynetwork.proto.sCastleBlock block_mo = 16;
inline int sCastleStats::block_mo_size() const {
  return block_mo_.size();
}
inline void sCastleStats::clear_block_mo() {
  block_mo_.Clear();
}
inline const ::jynetwork::proto::sCastleBlock& sCastleStats::block_mo(int index) const {
  return block_mo_.Get(index);
}
inline ::jynetwork::proto::sCastleBlock* sCastleStats::mutable_block_mo(int index) {
  return block_mo_.Mutable(index);
}
inline ::jynetwork::proto::sCastleBlock* sCastleStats::add_block_mo() {
  return block_mo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleBlock >&
sCastleStats::block_mo() const {
  return block_mo_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleBlock >*
sCastleStats::mutable_block_mo() {
  return &block_mo_;
}

// repeated uint32 assist_drop = 19;
inline int sCastleStats::assist_drop_size() const {
  return assist_drop_.size();
}
inline void sCastleStats::clear_assist_drop() {
  assist_drop_.Clear();
}
inline ::google::protobuf::uint32 sCastleStats::assist_drop(int index) const {
  return assist_drop_.Get(index);
}
inline void sCastleStats::set_assist_drop(int index, ::google::protobuf::uint32 value) {
  assist_drop_.Set(index, value);
}
inline void sCastleStats::add_assist_drop(::google::protobuf::uint32 value) {
  assist_drop_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sCastleStats::assist_drop() const {
  return assist_drop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sCastleStats::mutable_assist_drop() {
  return &assist_drop_;
}

// optional uint32 enter_effect = 20;
inline bool sCastleStats::has_enter_effect() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sCastleStats::set_has_enter_effect() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sCastleStats::clear_has_enter_effect() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sCastleStats::clear_enter_effect() {
  enter_effect_ = 0u;
  clear_has_enter_effect();
}
inline ::google::protobuf::uint32 sCastleStats::enter_effect() const {
  return enter_effect_;
}
inline void sCastleStats::set_enter_effect(::google::protobuf::uint32 value) {
  set_has_enter_effect();
  enter_effect_ = value;
}

// optional uint32 dive_effect = 21;
inline bool sCastleStats::has_dive_effect() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sCastleStats::set_has_dive_effect() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sCastleStats::clear_has_dive_effect() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sCastleStats::clear_dive_effect() {
  dive_effect_ = 0u;
  clear_has_dive_effect();
}
inline ::google::protobuf::uint32 sCastleStats::dive_effect() const {
  return dive_effect_;
}
inline void sCastleStats::set_dive_effect(::google::protobuf::uint32 value) {
  set_has_dive_effect();
  dive_effect_ = value;
}

// optional uint32 castlemusic = 22;
inline bool sCastleStats::has_castlemusic() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sCastleStats::set_has_castlemusic() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sCastleStats::clear_has_castlemusic() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sCastleStats::clear_castlemusic() {
  castlemusic_ = 0u;
  clear_has_castlemusic();
}
inline ::google::protobuf::uint32 sCastleStats::castlemusic() const {
  return castlemusic_;
}
inline void sCastleStats::set_castlemusic(::google::protobuf::uint32 value) {
  set_has_castlemusic();
  castlemusic_ = value;
}

// optional uint32 bossmusic = 23;
inline bool sCastleStats::has_bossmusic() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sCastleStats::set_has_bossmusic() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sCastleStats::clear_has_bossmusic() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sCastleStats::clear_bossmusic() {
  bossmusic_ = 0u;
  clear_has_bossmusic();
}
inline ::google::protobuf::uint32 sCastleStats::bossmusic() const {
  return bossmusic_;
}
inline void sCastleStats::set_bossmusic(::google::protobuf::uint32 value) {
  set_has_bossmusic();
  bossmusic_ = value;
}

// optional float map_scroll_speed = 24;
inline bool sCastleStats::has_map_scroll_speed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sCastleStats::set_has_map_scroll_speed() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sCastleStats::clear_has_map_scroll_speed() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sCastleStats::clear_map_scroll_speed() {
  map_scroll_speed_ = 0;
  clear_has_map_scroll_speed();
}
inline float sCastleStats::map_scroll_speed() const {
  return map_scroll_speed_;
}
inline void sCastleStats::set_map_scroll_speed(float value) {
  set_has_map_scroll_speed();
  map_scroll_speed_ = value;
}

// optional uint32 skill_allow = 25;
inline bool sCastleStats::has_skill_allow() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sCastleStats::set_has_skill_allow() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sCastleStats::clear_has_skill_allow() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sCastleStats::clear_skill_allow() {
  skill_allow_ = 0u;
  clear_has_skill_allow();
}
inline ::google::protobuf::uint32 sCastleStats::skill_allow() const {
  return skill_allow_;
}
inline void sCastleStats::set_skill_allow(::google::protobuf::uint32 value) {
  set_has_skill_allow();
  skill_allow_ = value;
}

// optional uint32 partner_allow = 26;
inline bool sCastleStats::has_partner_allow() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sCastleStats::set_has_partner_allow() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sCastleStats::clear_has_partner_allow() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sCastleStats::clear_partner_allow() {
  partner_allow_ = 0u;
  clear_has_partner_allow();
}
inline ::google::protobuf::uint32 sCastleStats::partner_allow() const {
  return partner_allow_;
}
inline void sCastleStats::set_partner_allow(::google::protobuf::uint32 value) {
  set_has_partner_allow();
  partner_allow_ = value;
}

// optional float assist_drop_rate = 27;
inline bool sCastleStats::has_assist_drop_rate() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sCastleStats::set_has_assist_drop_rate() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sCastleStats::clear_has_assist_drop_rate() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sCastleStats::clear_assist_drop_rate() {
  assist_drop_rate_ = 0;
  clear_has_assist_drop_rate();
}
inline float sCastleStats::assist_drop_rate() const {
  return assist_drop_rate_;
}
inline void sCastleStats::set_assist_drop_rate(float value) {
  set_has_assist_drop_rate();
  assist_drop_rate_ = value;
}

// repeated .jynetwork.proto.sCastleDrop item_drop = 28;
inline int sCastleStats::item_drop_size() const {
  return item_drop_.size();
}
inline void sCastleStats::clear_item_drop() {
  item_drop_.Clear();
}
inline const ::jynetwork::proto::sCastleDrop& sCastleStats::item_drop(int index) const {
  return item_drop_.Get(index);
}
inline ::jynetwork::proto::sCastleDrop* sCastleStats::mutable_item_drop(int index) {
  return item_drop_.Mutable(index);
}
inline ::jynetwork::proto::sCastleDrop* sCastleStats::add_item_drop() {
  return item_drop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleDrop >&
sCastleStats::item_drop() const {
  return item_drop_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleDrop >*
sCastleStats::mutable_item_drop() {
  return &item_drop_;
}

// optional uint32 difficult = 29;
inline bool sCastleStats::has_difficult() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void sCastleStats::set_has_difficult() {
  _has_bits_[0] |= 0x04000000u;
}
inline void sCastleStats::clear_has_difficult() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void sCastleStats::clear_difficult() {
  difficult_ = 0u;
  clear_has_difficult();
}
inline ::google::protobuf::uint32 sCastleStats::difficult() const {
  return difficult_;
}
inline void sCastleStats::set_difficult(::google::protobuf::uint32 value) {
  set_has_difficult();
  difficult_ = value;
}

// optional uint32 faction = 30;
inline bool sCastleStats::has_faction() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void sCastleStats::set_has_faction() {
  _has_bits_[0] |= 0x08000000u;
}
inline void sCastleStats::clear_has_faction() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void sCastleStats::clear_faction() {
  faction_ = 0u;
  clear_has_faction();
}
inline ::google::protobuf::uint32 sCastleStats::faction() const {
  return faction_;
}
inline void sCastleStats::set_faction(::google::protobuf::uint32 value) {
  set_has_faction();
  faction_ = value;
}

// optional uint32 item_drop_id = 31;
inline bool sCastleStats::has_item_drop_id() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void sCastleStats::set_has_item_drop_id() {
  _has_bits_[0] |= 0x10000000u;
}
inline void sCastleStats::clear_has_item_drop_id() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void sCastleStats::clear_item_drop_id() {
  item_drop_id_ = 0u;
  clear_has_item_drop_id();
}
inline ::google::protobuf::uint32 sCastleStats::item_drop_id() const {
  return item_drop_id_;
}
inline void sCastleStats::set_item_drop_id(::google::protobuf::uint32 value) {
  set_has_item_drop_id();
  item_drop_id_ = value;
}

// optional uint32 fatigue = 32;
inline bool sCastleStats::has_fatigue() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void sCastleStats::set_has_fatigue() {
  _has_bits_[0] |= 0x20000000u;
}
inline void sCastleStats::clear_has_fatigue() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void sCastleStats::clear_fatigue() {
  fatigue_ = 0u;
  clear_has_fatigue();
}
inline ::google::protobuf::uint32 sCastleStats::fatigue() const {
  return fatigue_;
}
inline void sCastleStats::set_fatigue(::google::protobuf::uint32 value) {
  set_has_fatigue();
  fatigue_ = value;
}

// optional uint32 castle_type = 33;
inline bool sCastleStats::has_castle_type() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void sCastleStats::set_has_castle_type() {
  _has_bits_[0] |= 0x40000000u;
}
inline void sCastleStats::clear_has_castle_type() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void sCastleStats::clear_castle_type() {
  castle_type_ = 0u;
  clear_has_castle_type();
}
inline ::google::protobuf::uint32 sCastleStats::castle_type() const {
  return castle_type_;
}
inline void sCastleStats::set_castle_type(::google::protobuf::uint32 value) {
  set_has_castle_type();
  castle_type_ = value;
}

// optional uint32 castle_catlog = 34;
inline bool sCastleStats::has_castle_catlog() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void sCastleStats::set_has_castle_catlog() {
  _has_bits_[0] |= 0x80000000u;
}
inline void sCastleStats::clear_has_castle_catlog() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void sCastleStats::clear_castle_catlog() {
  castle_catlog_ = 0u;
  clear_has_castle_catlog();
}
inline ::google::protobuf::uint32 sCastleStats::castle_catlog() const {
  return castle_catlog_;
}
inline void sCastleStats::set_castle_catlog(::google::protobuf::uint32 value) {
  set_has_castle_catlog();
  castle_catlog_ = value;
}

// optional uint32 map_color_r = 35;
inline bool sCastleStats::has_map_color_r() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void sCastleStats::set_has_map_color_r() {
  _has_bits_[1] |= 0x00000001u;
}
inline void sCastleStats::clear_has_map_color_r() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void sCastleStats::clear_map_color_r() {
  map_color_r_ = 0u;
  clear_has_map_color_r();
}
inline ::google::protobuf::uint32 sCastleStats::map_color_r() const {
  return map_color_r_;
}
inline void sCastleStats::set_map_color_r(::google::protobuf::uint32 value) {
  set_has_map_color_r();
  map_color_r_ = value;
}

// optional uint32 map_color_g = 36;
inline bool sCastleStats::has_map_color_g() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void sCastleStats::set_has_map_color_g() {
  _has_bits_[1] |= 0x00000002u;
}
inline void sCastleStats::clear_has_map_color_g() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void sCastleStats::clear_map_color_g() {
  map_color_g_ = 0u;
  clear_has_map_color_g();
}
inline ::google::protobuf::uint32 sCastleStats::map_color_g() const {
  return map_color_g_;
}
inline void sCastleStats::set_map_color_g(::google::protobuf::uint32 value) {
  set_has_map_color_g();
  map_color_g_ = value;
}

// optional uint32 map_color_b = 37;
inline bool sCastleStats::has_map_color_b() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void sCastleStats::set_has_map_color_b() {
  _has_bits_[1] |= 0x00000004u;
}
inline void sCastleStats::clear_has_map_color_b() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void sCastleStats::clear_map_color_b() {
  map_color_b_ = 0u;
  clear_has_map_color_b();
}
inline ::google::protobuf::uint32 sCastleStats::map_color_b() const {
  return map_color_b_;
}
inline void sCastleStats::set_map_color_b(::google::protobuf::uint32 value) {
  set_has_map_color_b();
  map_color_b_ = value;
}

// optional uint32 cloud_color_r = 38;
inline bool sCastleStats::has_cloud_color_r() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void sCastleStats::set_has_cloud_color_r() {
  _has_bits_[1] |= 0x00000008u;
}
inline void sCastleStats::clear_has_cloud_color_r() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void sCastleStats::clear_cloud_color_r() {
  cloud_color_r_ = 0u;
  clear_has_cloud_color_r();
}
inline ::google::protobuf::uint32 sCastleStats::cloud_color_r() const {
  return cloud_color_r_;
}
inline void sCastleStats::set_cloud_color_r(::google::protobuf::uint32 value) {
  set_has_cloud_color_r();
  cloud_color_r_ = value;
}

// optional uint32 cloud_color_g = 39;
inline bool sCastleStats::has_cloud_color_g() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void sCastleStats::set_has_cloud_color_g() {
  _has_bits_[1] |= 0x00000010u;
}
inline void sCastleStats::clear_has_cloud_color_g() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void sCastleStats::clear_cloud_color_g() {
  cloud_color_g_ = 0u;
  clear_has_cloud_color_g();
}
inline ::google::protobuf::uint32 sCastleStats::cloud_color_g() const {
  return cloud_color_g_;
}
inline void sCastleStats::set_cloud_color_g(::google::protobuf::uint32 value) {
  set_has_cloud_color_g();
  cloud_color_g_ = value;
}

// optional uint32 cloud_color_b = 40;
inline bool sCastleStats::has_cloud_color_b() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void sCastleStats::set_has_cloud_color_b() {
  _has_bits_[1] |= 0x00000020u;
}
inline void sCastleStats::clear_has_cloud_color_b() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void sCastleStats::clear_cloud_color_b() {
  cloud_color_b_ = 0u;
  clear_has_cloud_color_b();
}
inline ::google::protobuf::uint32 sCastleStats::cloud_color_b() const {
  return cloud_color_b_;
}
inline void sCastleStats::set_cloud_color_b(::google::protobuf::uint32 value) {
  set_has_cloud_color_b();
  cloud_color_b_ = value;
}

// optional uint32 body_color_r = 41;
inline bool sCastleStats::has_body_color_r() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void sCastleStats::set_has_body_color_r() {
  _has_bits_[1] |= 0x00000040u;
}
inline void sCastleStats::clear_has_body_color_r() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void sCastleStats::clear_body_color_r() {
  body_color_r_ = 0u;
  clear_has_body_color_r();
}
inline ::google::protobuf::uint32 sCastleStats::body_color_r() const {
  return body_color_r_;
}
inline void sCastleStats::set_body_color_r(::google::protobuf::uint32 value) {
  set_has_body_color_r();
  body_color_r_ = value;
}

// optional uint32 body_color_g = 42;
inline bool sCastleStats::has_body_color_g() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void sCastleStats::set_has_body_color_g() {
  _has_bits_[1] |= 0x00000080u;
}
inline void sCastleStats::clear_has_body_color_g() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void sCastleStats::clear_body_color_g() {
  body_color_g_ = 0u;
  clear_has_body_color_g();
}
inline ::google::protobuf::uint32 sCastleStats::body_color_g() const {
  return body_color_g_;
}
inline void sCastleStats::set_body_color_g(::google::protobuf::uint32 value) {
  set_has_body_color_g();
  body_color_g_ = value;
}

// optional uint32 body_color_b = 43;
inline bool sCastleStats::has_body_color_b() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void sCastleStats::set_has_body_color_b() {
  _has_bits_[1] |= 0x00000100u;
}
inline void sCastleStats::clear_has_body_color_b() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void sCastleStats::clear_body_color_b() {
  body_color_b_ = 0u;
  clear_has_body_color_b();
}
inline ::google::protobuf::uint32 sCastleStats::body_color_b() const {
  return body_color_b_;
}
inline void sCastleStats::set_body_color_b(::google::protobuf::uint32 value) {
  set_has_body_color_b();
  body_color_b_ = value;
}

// optional float star_hp = 44;
inline bool sCastleStats::has_star_hp() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void sCastleStats::set_has_star_hp() {
  _has_bits_[1] |= 0x00000200u;
}
inline void sCastleStats::clear_has_star_hp() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void sCastleStats::clear_star_hp() {
  star_hp_ = 0;
  clear_has_star_hp();
}
inline float sCastleStats::star_hp() const {
  return star_hp_;
}
inline void sCastleStats::set_star_hp(float value) {
  set_has_star_hp();
  star_hp_ = value;
}

// optional float star_time = 45;
inline bool sCastleStats::has_star_time() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void sCastleStats::set_has_star_time() {
  _has_bits_[1] |= 0x00000400u;
}
inline void sCastleStats::clear_has_star_time() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void sCastleStats::clear_star_time() {
  star_time_ = 0;
  clear_has_star_time();
}
inline float sCastleStats::star_time() const {
  return star_time_;
}
inline void sCastleStats::set_star_time(float value) {
  set_has_star_time();
  star_time_ = value;
}

// optional float star_score = 46;
inline bool sCastleStats::has_star_score() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void sCastleStats::set_has_star_score() {
  _has_bits_[1] |= 0x00000800u;
}
inline void sCastleStats::clear_has_star_score() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void sCastleStats::clear_star_score() {
  star_score_ = 0;
  clear_has_star_score();
}
inline float sCastleStats::star_score() const {
  return star_score_;
}
inline void sCastleStats::set_star_score(float value) {
  set_has_star_score();
  star_score_ = value;
}

// optional float recommond_attack = 47;
inline bool sCastleStats::has_recommond_attack() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void sCastleStats::set_has_recommond_attack() {
  _has_bits_[1] |= 0x00001000u;
}
inline void sCastleStats::clear_has_recommond_attack() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void sCastleStats::clear_recommond_attack() {
  recommond_attack_ = 0;
  clear_has_recommond_attack();
}
inline float sCastleStats::recommond_attack() const {
  return recommond_attack_;
}
inline void sCastleStats::set_recommond_attack(float value) {
  set_has_recommond_attack();
  recommond_attack_ = value;
}

// optional uint32 win_condition = 48;
inline bool sCastleStats::has_win_condition() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void sCastleStats::set_has_win_condition() {
  _has_bits_[1] |= 0x00002000u;
}
inline void sCastleStats::clear_has_win_condition() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void sCastleStats::clear_win_condition() {
  win_condition_ = 0u;
  clear_has_win_condition();
}
inline ::google::protobuf::uint32 sCastleStats::win_condition() const {
  return win_condition_;
}
inline void sCastleStats::set_win_condition(::google::protobuf::uint32 value) {
  set_has_win_condition();
  win_condition_ = value;
}

// optional float time_limit = 49;
inline bool sCastleStats::has_time_limit() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void sCastleStats::set_has_time_limit() {
  _has_bits_[1] |= 0x00004000u;
}
inline void sCastleStats::clear_has_time_limit() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void sCastleStats::clear_time_limit() {
  time_limit_ = 0;
  clear_has_time_limit();
}
inline float sCastleStats::time_limit() const {
  return time_limit_;
}
inline void sCastleStats::set_time_limit(float value) {
  set_has_time_limit();
  time_limit_ = value;
}

// optional float enemy_enhance_time = 50;
inline bool sCastleStats::has_enemy_enhance_time() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void sCastleStats::set_has_enemy_enhance_time() {
  _has_bits_[1] |= 0x00008000u;
}
inline void sCastleStats::clear_has_enemy_enhance_time() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void sCastleStats::clear_enemy_enhance_time() {
  enemy_enhance_time_ = 0;
  clear_has_enemy_enhance_time();
}
inline float sCastleStats::enemy_enhance_time() const {
  return enemy_enhance_time_;
}
inline void sCastleStats::set_enemy_enhance_time(float value) {
  set_has_enemy_enhance_time();
  enemy_enhance_time_ = value;
}

// optional float enemy_enhance = 51;
inline bool sCastleStats::has_enemy_enhance() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void sCastleStats::set_has_enemy_enhance() {
  _has_bits_[1] |= 0x00010000u;
}
inline void sCastleStats::clear_has_enemy_enhance() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void sCastleStats::clear_enemy_enhance() {
  enemy_enhance_ = 0;
  clear_has_enemy_enhance();
}
inline float sCastleStats::enemy_enhance() const {
  return enemy_enhance_;
}
inline void sCastleStats::set_enemy_enhance(float value) {
  set_has_enemy_enhance();
  enemy_enhance_ = value;
}

// optional uint32 description = 52;
inline bool sCastleStats::has_description() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void sCastleStats::set_has_description() {
  _has_bits_[1] |= 0x00020000u;
}
inline void sCastleStats::clear_has_description() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void sCastleStats::clear_description() {
  description_ = 0u;
  clear_has_description();
}
inline ::google::protobuf::uint32 sCastleStats::description() const {
  return description_;
}
inline void sCastleStats::set_description(::google::protobuf::uint32 value) {
  set_has_description();
  description_ = value;
}

// optional uint32 boss_name = 53;
inline bool sCastleStats::has_boss_name() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void sCastleStats::set_has_boss_name() {
  _has_bits_[1] |= 0x00040000u;
}
inline void sCastleStats::clear_has_boss_name() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void sCastleStats::clear_boss_name() {
  boss_name_ = 0u;
  clear_has_boss_name();
}
inline ::google::protobuf::uint32 sCastleStats::boss_name() const {
  return boss_name_;
}
inline void sCastleStats::set_boss_name(::google::protobuf::uint32 value) {
  set_has_boss_name();
  boss_name_ = value;
}

// optional string boss_model = 54;
inline bool sCastleStats::has_boss_model() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void sCastleStats::set_has_boss_model() {
  _has_bits_[1] |= 0x00080000u;
}
inline void sCastleStats::clear_has_boss_model() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void sCastleStats::clear_boss_model() {
  if (boss_model_ != &::google::protobuf::internal::kEmptyString) {
    boss_model_->clear();
  }
  clear_has_boss_model();
}
inline const ::std::string& sCastleStats::boss_model() const {
  return *boss_model_;
}
inline void sCastleStats::set_boss_model(const ::std::string& value) {
  set_has_boss_model();
  if (boss_model_ == &::google::protobuf::internal::kEmptyString) {
    boss_model_ = new ::std::string;
  }
  boss_model_->assign(value);
}
inline void sCastleStats::set_boss_model(const char* value) {
  set_has_boss_model();
  if (boss_model_ == &::google::protobuf::internal::kEmptyString) {
    boss_model_ = new ::std::string;
  }
  boss_model_->assign(value);
}
inline void sCastleStats::set_boss_model(const char* value, size_t size) {
  set_has_boss_model();
  if (boss_model_ == &::google::protobuf::internal::kEmptyString) {
    boss_model_ = new ::std::string;
  }
  boss_model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCastleStats::mutable_boss_model() {
  set_has_boss_model();
  if (boss_model_ == &::google::protobuf::internal::kEmptyString) {
    boss_model_ = new ::std::string;
  }
  return boss_model_;
}
inline ::std::string* sCastleStats::release_boss_model() {
  clear_has_boss_model();
  if (boss_model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = boss_model_;
    boss_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCastleStats::set_allocated_boss_model(::std::string* boss_model) {
  if (boss_model_ != &::google::protobuf::internal::kEmptyString) {
    delete boss_model_;
  }
  if (boss_model) {
    set_has_boss_model();
    boss_model_ = boss_model;
  } else {
    clear_has_boss_model();
    boss_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float boss_scale = 55;
inline bool sCastleStats::has_boss_scale() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void sCastleStats::set_has_boss_scale() {
  _has_bits_[1] |= 0x00100000u;
}
inline void sCastleStats::clear_has_boss_scale() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void sCastleStats::clear_boss_scale() {
  boss_scale_ = 0;
  clear_has_boss_scale();
}
inline float sCastleStats::boss_scale() const {
  return boss_scale_;
}
inline void sCastleStats::set_boss_scale(float value) {
  set_has_boss_scale();
  boss_scale_ = value;
}

// optional float boss_x = 56;
inline bool sCastleStats::has_boss_x() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void sCastleStats::set_has_boss_x() {
  _has_bits_[1] |= 0x00200000u;
}
inline void sCastleStats::clear_has_boss_x() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void sCastleStats::clear_boss_x() {
  boss_x_ = 0;
  clear_has_boss_x();
}
inline float sCastleStats::boss_x() const {
  return boss_x_;
}
inline void sCastleStats::set_boss_x(float value) {
  set_has_boss_x();
  boss_x_ = value;
}

// optional float boss_y = 57;
inline bool sCastleStats::has_boss_y() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void sCastleStats::set_has_boss_y() {
  _has_bits_[1] |= 0x00400000u;
}
inline void sCastleStats::clear_has_boss_y() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void sCastleStats::clear_boss_y() {
  boss_y_ = 0;
  clear_has_boss_y();
}
inline float sCastleStats::boss_y() const {
  return boss_y_;
}
inline void sCastleStats::set_boss_y(float value) {
  set_has_boss_y();
  boss_y_ = value;
}

// optional uint32 open_condition_desc = 58;
inline bool sCastleStats::has_open_condition_desc() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void sCastleStats::set_has_open_condition_desc() {
  _has_bits_[1] |= 0x00800000u;
}
inline void sCastleStats::clear_has_open_condition_desc() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void sCastleStats::clear_open_condition_desc() {
  open_condition_desc_ = 0u;
  clear_has_open_condition_desc();
}
inline ::google::protobuf::uint32 sCastleStats::open_condition_desc() const {
  return open_condition_desc_;
}
inline void sCastleStats::set_open_condition_desc(::google::protobuf::uint32 value) {
  set_has_open_condition_desc();
  open_condition_desc_ = value;
}

// optional uint32 stage_id = 59;
inline bool sCastleStats::has_stage_id() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void sCastleStats::set_has_stage_id() {
  _has_bits_[1] |= 0x01000000u;
}
inline void sCastleStats::clear_has_stage_id() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void sCastleStats::clear_stage_id() {
  stage_id_ = 0u;
  clear_has_stage_id();
}
inline ::google::protobuf::uint32 sCastleStats::stage_id() const {
  return stage_id_;
}
inline void sCastleStats::set_stage_id(::google::protobuf::uint32 value) {
  set_has_stage_id();
  stage_id_ = value;
}

// optional uint32 stage_group_id = 60;
inline bool sCastleStats::has_stage_group_id() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void sCastleStats::set_has_stage_group_id() {
  _has_bits_[1] |= 0x02000000u;
}
inline void sCastleStats::clear_has_stage_group_id() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void sCastleStats::clear_stage_group_id() {
  stage_group_id_ = 0u;
  clear_has_stage_group_id();
}
inline ::google::protobuf::uint32 sCastleStats::stage_group_id() const {
  return stage_group_id_;
}
inline void sCastleStats::set_stage_group_id(::google::protobuf::uint32 value) {
  set_has_stage_group_id();
  stage_group_id_ = value;
}

// optional uint32 stage_detail_id = 61;
inline bool sCastleStats::has_stage_detail_id() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void sCastleStats::set_has_stage_detail_id() {
  _has_bits_[1] |= 0x04000000u;
}
inline void sCastleStats::clear_has_stage_detail_id() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void sCastleStats::clear_stage_detail_id() {
  stage_detail_id_ = 0u;
  clear_has_stage_detail_id();
}
inline ::google::protobuf::uint32 sCastleStats::stage_detail_id() const {
  return stage_detail_id_;
}
inline void sCastleStats::set_stage_detail_id(::google::protobuf::uint32 value) {
  set_has_stage_detail_id();
  stage_detail_id_ = value;
}

// optional string dive_cloud = 62;
inline bool sCastleStats::has_dive_cloud() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void sCastleStats::set_has_dive_cloud() {
  _has_bits_[1] |= 0x08000000u;
}
inline void sCastleStats::clear_has_dive_cloud() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void sCastleStats::clear_dive_cloud() {
  if (dive_cloud_ != &::google::protobuf::internal::kEmptyString) {
    dive_cloud_->clear();
  }
  clear_has_dive_cloud();
}
inline const ::std::string& sCastleStats::dive_cloud() const {
  return *dive_cloud_;
}
inline void sCastleStats::set_dive_cloud(const ::std::string& value) {
  set_has_dive_cloud();
  if (dive_cloud_ == &::google::protobuf::internal::kEmptyString) {
    dive_cloud_ = new ::std::string;
  }
  dive_cloud_->assign(value);
}
inline void sCastleStats::set_dive_cloud(const char* value) {
  set_has_dive_cloud();
  if (dive_cloud_ == &::google::protobuf::internal::kEmptyString) {
    dive_cloud_ = new ::std::string;
  }
  dive_cloud_->assign(value);
}
inline void sCastleStats::set_dive_cloud(const char* value, size_t size) {
  set_has_dive_cloud();
  if (dive_cloud_ == &::google::protobuf::internal::kEmptyString) {
    dive_cloud_ = new ::std::string;
  }
  dive_cloud_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCastleStats::mutable_dive_cloud() {
  set_has_dive_cloud();
  if (dive_cloud_ == &::google::protobuf::internal::kEmptyString) {
    dive_cloud_ = new ::std::string;
  }
  return dive_cloud_;
}
inline ::std::string* sCastleStats::release_dive_cloud() {
  clear_has_dive_cloud();
  if (dive_cloud_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dive_cloud_;
    dive_cloud_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCastleStats::set_allocated_dive_cloud(::std::string* dive_cloud) {
  if (dive_cloud_ != &::google::protobuf::internal::kEmptyString) {
    delete dive_cloud_;
  }
  if (dive_cloud) {
    set_has_dive_cloud();
    dive_cloud_ = dive_cloud;
  } else {
    clear_has_dive_cloud();
    dive_cloud_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dive_bottom = 63;
inline bool sCastleStats::has_dive_bottom() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void sCastleStats::set_has_dive_bottom() {
  _has_bits_[1] |= 0x10000000u;
}
inline void sCastleStats::clear_has_dive_bottom() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void sCastleStats::clear_dive_bottom() {
  if (dive_bottom_ != &::google::protobuf::internal::kEmptyString) {
    dive_bottom_->clear();
  }
  clear_has_dive_bottom();
}
inline const ::std::string& sCastleStats::dive_bottom() const {
  return *dive_bottom_;
}
inline void sCastleStats::set_dive_bottom(const ::std::string& value) {
  set_has_dive_bottom();
  if (dive_bottom_ == &::google::protobuf::internal::kEmptyString) {
    dive_bottom_ = new ::std::string;
  }
  dive_bottom_->assign(value);
}
inline void sCastleStats::set_dive_bottom(const char* value) {
  set_has_dive_bottom();
  if (dive_bottom_ == &::google::protobuf::internal::kEmptyString) {
    dive_bottom_ = new ::std::string;
  }
  dive_bottom_->assign(value);
}
inline void sCastleStats::set_dive_bottom(const char* value, size_t size) {
  set_has_dive_bottom();
  if (dive_bottom_ == &::google::protobuf::internal::kEmptyString) {
    dive_bottom_ = new ::std::string;
  }
  dive_bottom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCastleStats::mutable_dive_bottom() {
  set_has_dive_bottom();
  if (dive_bottom_ == &::google::protobuf::internal::kEmptyString) {
    dive_bottom_ = new ::std::string;
  }
  return dive_bottom_;
}
inline ::std::string* sCastleStats::release_dive_bottom() {
  clear_has_dive_bottom();
  if (dive_bottom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dive_bottom_;
    dive_bottom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCastleStats::set_allocated_dive_bottom(::std::string* dive_bottom) {
  if (dive_bottom_ != &::google::protobuf::internal::kEmptyString) {
    delete dive_bottom_;
  }
  if (dive_bottom) {
    set_has_dive_bottom();
    dive_bottom_ = dive_bottom;
  } else {
    clear_has_dive_bottom();
    dive_bottom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string result_bg = 64;
inline bool sCastleStats::has_result_bg() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void sCastleStats::set_has_result_bg() {
  _has_bits_[1] |= 0x20000000u;
}
inline void sCastleStats::clear_has_result_bg() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void sCastleStats::clear_result_bg() {
  if (result_bg_ != &::google::protobuf::internal::kEmptyString) {
    result_bg_->clear();
  }
  clear_has_result_bg();
}
inline const ::std::string& sCastleStats::result_bg() const {
  return *result_bg_;
}
inline void sCastleStats::set_result_bg(const ::std::string& value) {
  set_has_result_bg();
  if (result_bg_ == &::google::protobuf::internal::kEmptyString) {
    result_bg_ = new ::std::string;
  }
  result_bg_->assign(value);
}
inline void sCastleStats::set_result_bg(const char* value) {
  set_has_result_bg();
  if (result_bg_ == &::google::protobuf::internal::kEmptyString) {
    result_bg_ = new ::std::string;
  }
  result_bg_->assign(value);
}
inline void sCastleStats::set_result_bg(const char* value, size_t size) {
  set_has_result_bg();
  if (result_bg_ == &::google::protobuf::internal::kEmptyString) {
    result_bg_ = new ::std::string;
  }
  result_bg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCastleStats::mutable_result_bg() {
  set_has_result_bg();
  if (result_bg_ == &::google::protobuf::internal::kEmptyString) {
    result_bg_ = new ::std::string;
  }
  return result_bg_;
}
inline ::std::string* sCastleStats::release_result_bg() {
  clear_has_result_bg();
  if (result_bg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_bg_;
    result_bg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCastleStats::set_allocated_result_bg(::std::string* result_bg) {
  if (result_bg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_bg_;
  }
  if (result_bg) {
    set_has_result_bg();
    result_bg_ = result_bg;
  } else {
    clear_has_result_bg();
    result_bg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .jynetwork.proto.sChaosStats chaos = 65;
inline int sCastleStats::chaos_size() const {
  return chaos_.size();
}
inline void sCastleStats::clear_chaos() {
  chaos_.Clear();
}
inline const ::jynetwork::proto::sChaosStats& sCastleStats::chaos(int index) const {
  return chaos_.Get(index);
}
inline ::jynetwork::proto::sChaosStats* sCastleStats::mutable_chaos(int index) {
  return chaos_.Mutable(index);
}
inline ::jynetwork::proto::sChaosStats* sCastleStats::add_chaos() {
  return chaos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sChaosStats >&
sCastleStats::chaos() const {
  return chaos_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sChaosStats >*
sCastleStats::mutable_chaos() {
  return &chaos_;
}

// optional uint32 after_drop_id = 66;
inline bool sCastleStats::has_after_drop_id() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void sCastleStats::set_has_after_drop_id() {
  _has_bits_[1] |= 0x80000000u;
}
inline void sCastleStats::clear_has_after_drop_id() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void sCastleStats::clear_after_drop_id() {
  after_drop_id_ = 0u;
  clear_has_after_drop_id();
}
inline ::google::protobuf::uint32 sCastleStats::after_drop_id() const {
  return after_drop_id_;
}
inline void sCastleStats::set_after_drop_id(::google::protobuf::uint32 value) {
  set_has_after_drop_id();
  after_drop_id_ = value;
}

// optional uint32 percent = 67;
inline bool sCastleStats::has_percent() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void sCastleStats::set_has_percent() {
  _has_bits_[2] |= 0x00000001u;
}
inline void sCastleStats::clear_has_percent() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void sCastleStats::clear_percent() {
  percent_ = 0u;
  clear_has_percent();
}
inline ::google::protobuf::uint32 sCastleStats::percent() const {
  return percent_;
}
inline void sCastleStats::set_percent(::google::protobuf::uint32 value) {
  set_has_percent();
  percent_ = value;
}

// repeated uint32 chaos_group = 68;
inline int sCastleStats::chaos_group_size() const {
  return chaos_group_.size();
}
inline void sCastleStats::clear_chaos_group() {
  chaos_group_.Clear();
}
inline ::google::protobuf::uint32 sCastleStats::chaos_group(int index) const {
  return chaos_group_.Get(index);
}
inline void sCastleStats::set_chaos_group(int index, ::google::protobuf::uint32 value) {
  chaos_group_.Set(index, value);
}
inline void sCastleStats::add_chaos_group(::google::protobuf::uint32 value) {
  chaos_group_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sCastleStats::chaos_group() const {
  return chaos_group_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sCastleStats::mutable_chaos_group() {
  return &chaos_group_;
}

// optional .jynetwork.proto.eRoleType role = 69;
inline bool sCastleStats::has_role() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void sCastleStats::set_has_role() {
  _has_bits_[2] |= 0x00000004u;
}
inline void sCastleStats::clear_has_role() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void sCastleStats::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::jynetwork::proto::eRoleType sCastleStats::role() const {
  return static_cast< ::jynetwork::proto::eRoleType >(role_);
}
inline void sCastleStats::set_role(::jynetwork::proto::eRoleType value) {
  assert(::jynetwork::proto::eRoleType_IsValid(value));
  set_has_role();
  role_ = value;
}

// optional uint32 first_drop = 70;
inline bool sCastleStats::has_first_drop() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void sCastleStats::set_has_first_drop() {
  _has_bits_[2] |= 0x00000008u;
}
inline void sCastleStats::clear_has_first_drop() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void sCastleStats::clear_first_drop() {
  first_drop_ = 0u;
  clear_has_first_drop();
}
inline ::google::protobuf::uint32 sCastleStats::first_drop() const {
  return first_drop_;
}
inline void sCastleStats::set_first_drop(::google::protobuf::uint32 value) {
  set_has_first_drop();
  first_drop_ = value;
}

// repeated uint32 first_pass_drop = 71;
inline int sCastleStats::first_pass_drop_size() const {
  return first_pass_drop_.size();
}
inline void sCastleStats::clear_first_pass_drop() {
  first_pass_drop_.Clear();
}
inline ::google::protobuf::uint32 sCastleStats::first_pass_drop(int index) const {
  return first_pass_drop_.Get(index);
}
inline void sCastleStats::set_first_pass_drop(int index, ::google::protobuf::uint32 value) {
  first_pass_drop_.Set(index, value);
}
inline void sCastleStats::add_first_pass_drop(::google::protobuf::uint32 value) {
  first_pass_drop_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sCastleStats::first_pass_drop() const {
  return first_pass_drop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sCastleStats::mutable_first_pass_drop() {
  return &first_pass_drop_;
}

// optional uint32 joblimit = 72;
inline bool sCastleStats::has_joblimit() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void sCastleStats::set_has_joblimit() {
  _has_bits_[2] |= 0x00000020u;
}
inline void sCastleStats::clear_has_joblimit() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void sCastleStats::clear_joblimit() {
  joblimit_ = 0u;
  clear_has_joblimit();
}
inline ::google::protobuf::uint32 sCastleStats::joblimit() const {
  return joblimit_;
}
inline void sCastleStats::set_joblimit(::google::protobuf::uint32 value) {
  set_has_joblimit();
  joblimit_ = value;
}

// repeated uint32 first_drop_show_type = 73;
inline int sCastleStats::first_drop_show_type_size() const {
  return first_drop_show_type_.size();
}
inline void sCastleStats::clear_first_drop_show_type() {
  first_drop_show_type_.Clear();
}
inline ::google::protobuf::uint32 sCastleStats::first_drop_show_type(int index) const {
  return first_drop_show_type_.Get(index);
}
inline void sCastleStats::set_first_drop_show_type(int index, ::google::protobuf::uint32 value) {
  first_drop_show_type_.Set(index, value);
}
inline void sCastleStats::add_first_drop_show_type(::google::protobuf::uint32 value) {
  first_drop_show_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sCastleStats::first_drop_show_type() const {
  return first_drop_show_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sCastleStats::mutable_first_drop_show_type() {
  return &first_drop_show_type_;
}

// repeated float difficult_percent = 74;
inline int sCastleStats::difficult_percent_size() const {
  return difficult_percent_.size();
}
inline void sCastleStats::clear_difficult_percent() {
  difficult_percent_.Clear();
}
inline float sCastleStats::difficult_percent(int index) const {
  return difficult_percent_.Get(index);
}
inline void sCastleStats::set_difficult_percent(int index, float value) {
  difficult_percent_.Set(index, value);
}
inline void sCastleStats::add_difficult_percent(float value) {
  difficult_percent_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
sCastleStats::difficult_percent() const {
  return difficult_percent_;
}
inline ::google::protobuf::RepeatedField< float >*
sCastleStats::mutable_difficult_percent() {
  return &difficult_percent_;
}

// repeated uint32 difficult_tc = 75;
inline int sCastleStats::difficult_tc_size() const {
  return difficult_tc_.size();
}
inline void sCastleStats::clear_difficult_tc() {
  difficult_tc_.Clear();
}
inline ::google::protobuf::uint32 sCastleStats::difficult_tc(int index) const {
  return difficult_tc_.Get(index);
}
inline void sCastleStats::set_difficult_tc(int index, ::google::protobuf::uint32 value) {
  difficult_tc_.Set(index, value);
}
inline void sCastleStats::add_difficult_tc(::google::protobuf::uint32 value) {
  difficult_tc_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sCastleStats::difficult_tc() const {
  return difficult_tc_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sCastleStats::mutable_difficult_tc() {
  return &difficult_tc_;
}

// optional uint32 mvp_drop = 76;
inline bool sCastleStats::has_mvp_drop() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void sCastleStats::set_has_mvp_drop() {
  _has_bits_[2] |= 0x00000200u;
}
inline void sCastleStats::clear_has_mvp_drop() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void sCastleStats::clear_mvp_drop() {
  mvp_drop_ = 0u;
  clear_has_mvp_drop();
}
inline ::google::protobuf::uint32 sCastleStats::mvp_drop() const {
  return mvp_drop_;
}
inline void sCastleStats::set_mvp_drop(::google::protobuf::uint32 value) {
  set_has_mvp_drop();
  mvp_drop_ = value;
}

// repeated uint32 drop_show = 77;
inline int sCastleStats::drop_show_size() const {
  return drop_show_.size();
}
inline void sCastleStats::clear_drop_show() {
  drop_show_.Clear();
}
inline ::google::protobuf::uint32 sCastleStats::drop_show(int index) const {
  return drop_show_.Get(index);
}
inline void sCastleStats::set_drop_show(int index, ::google::protobuf::uint32 value) {
  drop_show_.Set(index, value);
}
inline void sCastleStats::add_drop_show(::google::protobuf::uint32 value) {
  drop_show_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sCastleStats::drop_show() const {
  return drop_show_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sCastleStats::mutable_drop_show() {
  return &drop_show_;
}

// repeated uint32 drop_show_type = 78;
inline int sCastleStats::drop_show_type_size() const {
  return drop_show_type_.size();
}
inline void sCastleStats::clear_drop_show_type() {
  drop_show_type_.Clear();
}
inline ::google::protobuf::uint32 sCastleStats::drop_show_type(int index) const {
  return drop_show_type_.Get(index);
}
inline void sCastleStats::set_drop_show_type(int index, ::google::protobuf::uint32 value) {
  drop_show_type_.Set(index, value);
}
inline void sCastleStats::add_drop_show_type(::google::protobuf::uint32 value) {
  drop_show_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sCastleStats::drop_show_type() const {
  return drop_show_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sCastleStats::mutable_drop_show_type() {
  return &drop_show_type_;
}

// repeated string load_tips = 79;
inline int sCastleStats::load_tips_size() const {
  return load_tips_.size();
}
inline void sCastleStats::clear_load_tips() {
  load_tips_.Clear();
}
inline const ::std::string& sCastleStats::load_tips(int index) const {
  return load_tips_.Get(index);
}
inline ::std::string* sCastleStats::mutable_load_tips(int index) {
  return load_tips_.Mutable(index);
}
inline void sCastleStats::set_load_tips(int index, const ::std::string& value) {
  load_tips_.Mutable(index)->assign(value);
}
inline void sCastleStats::set_load_tips(int index, const char* value) {
  load_tips_.Mutable(index)->assign(value);
}
inline void sCastleStats::set_load_tips(int index, const char* value, size_t size) {
  load_tips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCastleStats::add_load_tips() {
  return load_tips_.Add();
}
inline void sCastleStats::add_load_tips(const ::std::string& value) {
  load_tips_.Add()->assign(value);
}
inline void sCastleStats::add_load_tips(const char* value) {
  load_tips_.Add()->assign(value);
}
inline void sCastleStats::add_load_tips(const char* value, size_t size) {
  load_tips_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
sCastleStats::load_tips() const {
  return load_tips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
sCastleStats::mutable_load_tips() {
  return &load_tips_;
}

// optional uint32 can_well_over = 80;
inline bool sCastleStats::has_can_well_over() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void sCastleStats::set_has_can_well_over() {
  _has_bits_[2] |= 0x00002000u;
}
inline void sCastleStats::clear_has_can_well_over() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void sCastleStats::clear_can_well_over() {
  can_well_over_ = 0u;
  clear_has_can_well_over();
}
inline ::google::protobuf::uint32 sCastleStats::can_well_over() const {
  return can_well_over_;
}
inline void sCastleStats::set_can_well_over(::google::protobuf::uint32 value) {
  set_has_can_well_over();
  can_well_over_ = value;
}

// repeated float pmattack = 81;
inline int sCastleStats::pmattack_size() const {
  return pmattack_.size();
}
inline void sCastleStats::clear_pmattack() {
  pmattack_.Clear();
}
inline float sCastleStats::pmattack(int index) const {
  return pmattack_.Get(index);
}
inline void sCastleStats::set_pmattack(int index, float value) {
  pmattack_.Set(index, value);
}
inline void sCastleStats::add_pmattack(float value) {
  pmattack_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
sCastleStats::pmattack() const {
  return pmattack_;
}
inline ::google::protobuf::RepeatedField< float >*
sCastleStats::mutable_pmattack() {
  return &pmattack_;
}

// -------------------------------------------------------------------

// sSoundStats

// optional uint32 uid = 1;
inline bool sSoundStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSoundStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSoundStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSoundStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sSoundStats::uid() const {
  return uid_;
}
inline void sSoundStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string sound_name = 2;
inline bool sSoundStats::has_sound_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sSoundStats::set_has_sound_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sSoundStats::clear_has_sound_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sSoundStats::clear_sound_name() {
  if (sound_name_ != &::google::protobuf::internal::kEmptyString) {
    sound_name_->clear();
  }
  clear_has_sound_name();
}
inline const ::std::string& sSoundStats::sound_name() const {
  return *sound_name_;
}
inline void sSoundStats::set_sound_name(const ::std::string& value) {
  set_has_sound_name();
  if (sound_name_ == &::google::protobuf::internal::kEmptyString) {
    sound_name_ = new ::std::string;
  }
  sound_name_->assign(value);
}
inline void sSoundStats::set_sound_name(const char* value) {
  set_has_sound_name();
  if (sound_name_ == &::google::protobuf::internal::kEmptyString) {
    sound_name_ = new ::std::string;
  }
  sound_name_->assign(value);
}
inline void sSoundStats::set_sound_name(const char* value, size_t size) {
  set_has_sound_name();
  if (sound_name_ == &::google::protobuf::internal::kEmptyString) {
    sound_name_ = new ::std::string;
  }
  sound_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSoundStats::mutable_sound_name() {
  set_has_sound_name();
  if (sound_name_ == &::google::protobuf::internal::kEmptyString) {
    sound_name_ = new ::std::string;
  }
  return sound_name_;
}
inline ::std::string* sSoundStats::release_sound_name() {
  clear_has_sound_name();
  if (sound_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sound_name_;
    sound_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSoundStats::set_allocated_sound_name(::std::string* sound_name) {
  if (sound_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sound_name_;
  }
  if (sound_name) {
    set_has_sound_name();
    sound_name_ = sound_name;
  } else {
    clear_has_sound_name();
    sound_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_mp3 = 3;
inline bool sSoundStats::has_is_mp3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sSoundStats::set_has_is_mp3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sSoundStats::clear_has_is_mp3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sSoundStats::clear_is_mp3() {
  is_mp3_ = 0u;
  clear_has_is_mp3();
}
inline ::google::protobuf::uint32 sSoundStats::is_mp3() const {
  return is_mp3_;
}
inline void sSoundStats::set_is_mp3(::google::protobuf::uint32 value) {
  set_has_is_mp3();
  is_mp3_ = value;
}

// optional string wwise_name = 4;
inline bool sSoundStats::has_wwise_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sSoundStats::set_has_wwise_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sSoundStats::clear_has_wwise_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sSoundStats::clear_wwise_name() {
  if (wwise_name_ != &::google::protobuf::internal::kEmptyString) {
    wwise_name_->clear();
  }
  clear_has_wwise_name();
}
inline const ::std::string& sSoundStats::wwise_name() const {
  return *wwise_name_;
}
inline void sSoundStats::set_wwise_name(const ::std::string& value) {
  set_has_wwise_name();
  if (wwise_name_ == &::google::protobuf::internal::kEmptyString) {
    wwise_name_ = new ::std::string;
  }
  wwise_name_->assign(value);
}
inline void sSoundStats::set_wwise_name(const char* value) {
  set_has_wwise_name();
  if (wwise_name_ == &::google::protobuf::internal::kEmptyString) {
    wwise_name_ = new ::std::string;
  }
  wwise_name_->assign(value);
}
inline void sSoundStats::set_wwise_name(const char* value, size_t size) {
  set_has_wwise_name();
  if (wwise_name_ == &::google::protobuf::internal::kEmptyString) {
    wwise_name_ = new ::std::string;
  }
  wwise_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSoundStats::mutable_wwise_name() {
  set_has_wwise_name();
  if (wwise_name_ == &::google::protobuf::internal::kEmptyString) {
    wwise_name_ = new ::std::string;
  }
  return wwise_name_;
}
inline ::std::string* sSoundStats::release_wwise_name() {
  clear_has_wwise_name();
  if (wwise_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wwise_name_;
    wwise_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSoundStats::set_allocated_wwise_name(::std::string* wwise_name) {
  if (wwise_name_ != &::google::protobuf::internal::kEmptyString) {
    delete wwise_name_;
  }
  if (wwise_name) {
    set_has_wwise_name();
    wwise_name_ = wwise_name;
  } else {
    clear_has_wwise_name();
    wwise_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string wwise_stop_name = 5;
inline bool sSoundStats::has_wwise_stop_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sSoundStats::set_has_wwise_stop_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sSoundStats::clear_has_wwise_stop_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sSoundStats::clear_wwise_stop_name() {
  if (wwise_stop_name_ != &::google::protobuf::internal::kEmptyString) {
    wwise_stop_name_->clear();
  }
  clear_has_wwise_stop_name();
}
inline const ::std::string& sSoundStats::wwise_stop_name() const {
  return *wwise_stop_name_;
}
inline void sSoundStats::set_wwise_stop_name(const ::std::string& value) {
  set_has_wwise_stop_name();
  if (wwise_stop_name_ == &::google::protobuf::internal::kEmptyString) {
    wwise_stop_name_ = new ::std::string;
  }
  wwise_stop_name_->assign(value);
}
inline void sSoundStats::set_wwise_stop_name(const char* value) {
  set_has_wwise_stop_name();
  if (wwise_stop_name_ == &::google::protobuf::internal::kEmptyString) {
    wwise_stop_name_ = new ::std::string;
  }
  wwise_stop_name_->assign(value);
}
inline void sSoundStats::set_wwise_stop_name(const char* value, size_t size) {
  set_has_wwise_stop_name();
  if (wwise_stop_name_ == &::google::protobuf::internal::kEmptyString) {
    wwise_stop_name_ = new ::std::string;
  }
  wwise_stop_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSoundStats::mutable_wwise_stop_name() {
  set_has_wwise_stop_name();
  if (wwise_stop_name_ == &::google::protobuf::internal::kEmptyString) {
    wwise_stop_name_ = new ::std::string;
  }
  return wwise_stop_name_;
}
inline ::std::string* sSoundStats::release_wwise_stop_name() {
  clear_has_wwise_stop_name();
  if (wwise_stop_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wwise_stop_name_;
    wwise_stop_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSoundStats::set_allocated_wwise_stop_name(::std::string* wwise_stop_name) {
  if (wwise_stop_name_ != &::google::protobuf::internal::kEmptyString) {
    delete wwise_stop_name_;
  }
  if (wwise_stop_name) {
    set_has_wwise_stop_name();
    wwise_stop_name_ = wwise_stop_name;
  } else {
    clear_has_wwise_stop_name();
    wwise_stop_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sSoundTable

// optional uint32 uid = 1;
inline bool sSoundTable::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSoundTable::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSoundTable::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSoundTable::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sSoundTable::uid() const {
  return uid_;
}
inline void sSoundTable::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 soundid = 2;
inline bool sSoundTable::has_soundid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sSoundTable::set_has_soundid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sSoundTable::clear_has_soundid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sSoundTable::clear_soundid() {
  soundid_ = 0u;
  clear_has_soundid();
}
inline ::google::protobuf::uint32 sSoundTable::soundid() const {
  return soundid_;
}
inline void sSoundTable::set_soundid(::google::protobuf::uint32 value) {
  set_has_soundid();
  soundid_ = value;
}

// -------------------------------------------------------------------

// sEffectStats

// optional uint32 uid = 1;
inline bool sEffectStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEffectStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEffectStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEffectStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEffectStats::uid() const {
  return uid_;
}
inline void sEffectStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string resources = 2;
inline bool sEffectStats::has_resources() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEffectStats::set_has_resources() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEffectStats::clear_has_resources() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEffectStats::clear_resources() {
  if (resources_ != &::google::protobuf::internal::kEmptyString) {
    resources_->clear();
  }
  clear_has_resources();
}
inline const ::std::string& sEffectStats::resources() const {
  return *resources_;
}
inline void sEffectStats::set_resources(const ::std::string& value) {
  set_has_resources();
  if (resources_ == &::google::protobuf::internal::kEmptyString) {
    resources_ = new ::std::string;
  }
  resources_->assign(value);
}
inline void sEffectStats::set_resources(const char* value) {
  set_has_resources();
  if (resources_ == &::google::protobuf::internal::kEmptyString) {
    resources_ = new ::std::string;
  }
  resources_->assign(value);
}
inline void sEffectStats::set_resources(const char* value, size_t size) {
  set_has_resources();
  if (resources_ == &::google::protobuf::internal::kEmptyString) {
    resources_ = new ::std::string;
  }
  resources_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEffectStats::mutable_resources() {
  set_has_resources();
  if (resources_ == &::google::protobuf::internal::kEmptyString) {
    resources_ = new ::std::string;
  }
  return resources_;
}
inline ::std::string* sEffectStats::release_resources() {
  clear_has_resources();
  if (resources_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resources_;
    resources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEffectStats::set_allocated_resources(::std::string* resources) {
  if (resources_ != &::google::protobuf::internal::kEmptyString) {
    delete resources_;
  }
  if (resources) {
    set_has_resources();
    resources_ = resources;
  } else {
    clear_has_resources();
    resources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string particle = 3;
inline bool sEffectStats::has_particle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sEffectStats::set_has_particle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sEffectStats::clear_has_particle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sEffectStats::clear_particle() {
  if (particle_ != &::google::protobuf::internal::kEmptyString) {
    particle_->clear();
  }
  clear_has_particle();
}
inline const ::std::string& sEffectStats::particle() const {
  return *particle_;
}
inline void sEffectStats::set_particle(const ::std::string& value) {
  set_has_particle();
  if (particle_ == &::google::protobuf::internal::kEmptyString) {
    particle_ = new ::std::string;
  }
  particle_->assign(value);
}
inline void sEffectStats::set_particle(const char* value) {
  set_has_particle();
  if (particle_ == &::google::protobuf::internal::kEmptyString) {
    particle_ = new ::std::string;
  }
  particle_->assign(value);
}
inline void sEffectStats::set_particle(const char* value, size_t size) {
  set_has_particle();
  if (particle_ == &::google::protobuf::internal::kEmptyString) {
    particle_ = new ::std::string;
  }
  particle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEffectStats::mutable_particle() {
  set_has_particle();
  if (particle_ == &::google::protobuf::internal::kEmptyString) {
    particle_ = new ::std::string;
  }
  return particle_;
}
inline ::std::string* sEffectStats::release_particle() {
  clear_has_particle();
  if (particle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = particle_;
    particle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEffectStats::set_allocated_particle(::std::string* particle) {
  if (particle_ != &::google::protobuf::internal::kEmptyString) {
    delete particle_;
  }
  if (particle) {
    set_has_particle();
    particle_ = particle;
  } else {
    clear_has_particle();
    particle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string particle_name = 4;
inline bool sEffectStats::has_particle_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sEffectStats::set_has_particle_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sEffectStats::clear_has_particle_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sEffectStats::clear_particle_name() {
  if (particle_name_ != &::google::protobuf::internal::kEmptyString) {
    particle_name_->clear();
  }
  clear_has_particle_name();
}
inline const ::std::string& sEffectStats::particle_name() const {
  return *particle_name_;
}
inline void sEffectStats::set_particle_name(const ::std::string& value) {
  set_has_particle_name();
  if (particle_name_ == &::google::protobuf::internal::kEmptyString) {
    particle_name_ = new ::std::string;
  }
  particle_name_->assign(value);
}
inline void sEffectStats::set_particle_name(const char* value) {
  set_has_particle_name();
  if (particle_name_ == &::google::protobuf::internal::kEmptyString) {
    particle_name_ = new ::std::string;
  }
  particle_name_->assign(value);
}
inline void sEffectStats::set_particle_name(const char* value, size_t size) {
  set_has_particle_name();
  if (particle_name_ == &::google::protobuf::internal::kEmptyString) {
    particle_name_ = new ::std::string;
  }
  particle_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEffectStats::mutable_particle_name() {
  set_has_particle_name();
  if (particle_name_ == &::google::protobuf::internal::kEmptyString) {
    particle_name_ = new ::std::string;
  }
  return particle_name_;
}
inline ::std::string* sEffectStats::release_particle_name() {
  clear_has_particle_name();
  if (particle_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = particle_name_;
    particle_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEffectStats::set_allocated_particle_name(::std::string* particle_name) {
  if (particle_name_ != &::google::protobuf::internal::kEmptyString) {
    delete particle_name_;
  }
  if (particle_name) {
    set_has_particle_name();
    particle_name_ = particle_name;
  } else {
    clear_has_particle_name();
    particle_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 particle_auto_remove = 5;
inline bool sEffectStats::has_particle_auto_remove() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sEffectStats::set_has_particle_auto_remove() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sEffectStats::clear_has_particle_auto_remove() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sEffectStats::clear_particle_auto_remove() {
  particle_auto_remove_ = 0u;
  clear_has_particle_auto_remove();
}
inline ::google::protobuf::uint32 sEffectStats::particle_auto_remove() const {
  return particle_auto_remove_;
}
inline void sEffectStats::set_particle_auto_remove(::google::protobuf::uint32 value) {
  set_has_particle_auto_remove();
  particle_auto_remove_ = value;
}

// optional uint32 totalframes = 6;
inline bool sEffectStats::has_totalframes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sEffectStats::set_has_totalframes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sEffectStats::clear_has_totalframes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sEffectStats::clear_totalframes() {
  totalframes_ = 0u;
  clear_has_totalframes();
}
inline ::google::protobuf::uint32 sEffectStats::totalframes() const {
  return totalframes_;
}
inline void sEffectStats::set_totalframes(::google::protobuf::uint32 value) {
  set_has_totalframes();
  totalframes_ = value;
}

// optional string animatename = 7;
inline bool sEffectStats::has_animatename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sEffectStats::set_has_animatename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sEffectStats::clear_has_animatename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sEffectStats::clear_animatename() {
  if (animatename_ != &::google::protobuf::internal::kEmptyString) {
    animatename_->clear();
  }
  clear_has_animatename();
}
inline const ::std::string& sEffectStats::animatename() const {
  return *animatename_;
}
inline void sEffectStats::set_animatename(const ::std::string& value) {
  set_has_animatename();
  if (animatename_ == &::google::protobuf::internal::kEmptyString) {
    animatename_ = new ::std::string;
  }
  animatename_->assign(value);
}
inline void sEffectStats::set_animatename(const char* value) {
  set_has_animatename();
  if (animatename_ == &::google::protobuf::internal::kEmptyString) {
    animatename_ = new ::std::string;
  }
  animatename_->assign(value);
}
inline void sEffectStats::set_animatename(const char* value, size_t size) {
  set_has_animatename();
  if (animatename_ == &::google::protobuf::internal::kEmptyString) {
    animatename_ = new ::std::string;
  }
  animatename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEffectStats::mutable_animatename() {
  set_has_animatename();
  if (animatename_ == &::google::protobuf::internal::kEmptyString) {
    animatename_ = new ::std::string;
  }
  return animatename_;
}
inline ::std::string* sEffectStats::release_animatename() {
  clear_has_animatename();
  if (animatename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = animatename_;
    animatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEffectStats::set_allocated_animatename(::std::string* animatename) {
  if (animatename_ != &::google::protobuf::internal::kEmptyString) {
    delete animatename_;
  }
  if (animatename) {
    set_has_animatename();
    animatename_ = animatename;
  } else {
    clear_has_animatename();
    animatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 additive = 8;
inline bool sEffectStats::has_additive() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sEffectStats::set_has_additive() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sEffectStats::clear_has_additive() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sEffectStats::clear_additive() {
  additive_ = 0u;
  clear_has_additive();
}
inline ::google::protobuf::uint32 sEffectStats::additive() const {
  return additive_;
}
inline void sEffectStats::set_additive(::google::protobuf::uint32 value) {
  set_has_additive();
  additive_ = value;
}

// optional float scale = 9;
inline bool sEffectStats::has_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sEffectStats::set_has_scale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sEffectStats::clear_has_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sEffectStats::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float sEffectStats::scale() const {
  return scale_;
}
inline void sEffectStats::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional uint32 poolsize = 10;
inline bool sEffectStats::has_poolsize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sEffectStats::set_has_poolsize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sEffectStats::clear_has_poolsize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sEffectStats::clear_poolsize() {
  poolsize_ = 0u;
  clear_has_poolsize();
}
inline ::google::protobuf::uint32 sEffectStats::poolsize() const {
  return poolsize_;
}
inline void sEffectStats::set_poolsize(::google::protobuf::uint32 value) {
  set_has_poolsize();
  poolsize_ = value;
}

// optional uint32 notframe = 11;
inline bool sEffectStats::has_notframe() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sEffectStats::set_has_notframe() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sEffectStats::clear_has_notframe() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sEffectStats::clear_notframe() {
  notframe_ = 0u;
  clear_has_notframe();
}
inline ::google::protobuf::uint32 sEffectStats::notframe() const {
  return notframe_;
}
inline void sEffectStats::set_notframe(::google::protobuf::uint32 value) {
  set_has_notframe();
  notframe_ = value;
}

// optional string pu_material = 12;
inline bool sEffectStats::has_pu_material() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sEffectStats::set_has_pu_material() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sEffectStats::clear_has_pu_material() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sEffectStats::clear_pu_material() {
  if (pu_material_ != &::google::protobuf::internal::kEmptyString) {
    pu_material_->clear();
  }
  clear_has_pu_material();
}
inline const ::std::string& sEffectStats::pu_material() const {
  return *pu_material_;
}
inline void sEffectStats::set_pu_material(const ::std::string& value) {
  set_has_pu_material();
  if (pu_material_ == &::google::protobuf::internal::kEmptyString) {
    pu_material_ = new ::std::string;
  }
  pu_material_->assign(value);
}
inline void sEffectStats::set_pu_material(const char* value) {
  set_has_pu_material();
  if (pu_material_ == &::google::protobuf::internal::kEmptyString) {
    pu_material_ = new ::std::string;
  }
  pu_material_->assign(value);
}
inline void sEffectStats::set_pu_material(const char* value, size_t size) {
  set_has_pu_material();
  if (pu_material_ == &::google::protobuf::internal::kEmptyString) {
    pu_material_ = new ::std::string;
  }
  pu_material_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEffectStats::mutable_pu_material() {
  set_has_pu_material();
  if (pu_material_ == &::google::protobuf::internal::kEmptyString) {
    pu_material_ = new ::std::string;
  }
  return pu_material_;
}
inline ::std::string* sEffectStats::release_pu_material() {
  clear_has_pu_material();
  if (pu_material_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pu_material_;
    pu_material_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEffectStats::set_allocated_pu_material(::std::string* pu_material) {
  if (pu_material_ != &::google::protobuf::internal::kEmptyString) {
    delete pu_material_;
  }
  if (pu_material) {
    set_has_pu_material();
    pu_material_ = pu_material;
  } else {
    clear_has_pu_material();
    pu_material_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float pu_life_time = 13;
inline bool sEffectStats::has_pu_life_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sEffectStats::set_has_pu_life_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sEffectStats::clear_has_pu_life_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sEffectStats::clear_pu_life_time() {
  pu_life_time_ = 0;
  clear_has_pu_life_time();
}
inline float sEffectStats::pu_life_time() const {
  return pu_life_time_;
}
inline void sEffectStats::set_pu_life_time(float value) {
  set_has_pu_life_time();
  pu_life_time_ = value;
}

// optional string ccbi = 14;
inline bool sEffectStats::has_ccbi() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sEffectStats::set_has_ccbi() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sEffectStats::clear_has_ccbi() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sEffectStats::clear_ccbi() {
  if (ccbi_ != &::google::protobuf::internal::kEmptyString) {
    ccbi_->clear();
  }
  clear_has_ccbi();
}
inline const ::std::string& sEffectStats::ccbi() const {
  return *ccbi_;
}
inline void sEffectStats::set_ccbi(const ::std::string& value) {
  set_has_ccbi();
  if (ccbi_ == &::google::protobuf::internal::kEmptyString) {
    ccbi_ = new ::std::string;
  }
  ccbi_->assign(value);
}
inline void sEffectStats::set_ccbi(const char* value) {
  set_has_ccbi();
  if (ccbi_ == &::google::protobuf::internal::kEmptyString) {
    ccbi_ = new ::std::string;
  }
  ccbi_->assign(value);
}
inline void sEffectStats::set_ccbi(const char* value, size_t size) {
  set_has_ccbi();
  if (ccbi_ == &::google::protobuf::internal::kEmptyString) {
    ccbi_ = new ::std::string;
  }
  ccbi_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEffectStats::mutable_ccbi() {
  set_has_ccbi();
  if (ccbi_ == &::google::protobuf::internal::kEmptyString) {
    ccbi_ = new ::std::string;
  }
  return ccbi_;
}
inline ::std::string* sEffectStats::release_ccbi() {
  clear_has_ccbi();
  if (ccbi_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ccbi_;
    ccbi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEffectStats::set_allocated_ccbi(::std::string* ccbi) {
  if (ccbi_ != &::google::protobuf::internal::kEmptyString) {
    delete ccbi_;
  }
  if (ccbi) {
    set_has_ccbi();
    ccbi_ = ccbi;
  } else {
    clear_has_ccbi();
    ccbi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sEffect

// optional uint32 uid = 1;
inline bool sEffect::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEffect::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEffect::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEffect::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEffect::uid() const {
  return uid_;
}
inline void sEffect::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional float x = 2;
inline bool sEffect::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEffect::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEffect::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEffect::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float sEffect::x() const {
  return x_;
}
inline void sEffect::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 3;
inline bool sEffect::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sEffect::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sEffect::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sEffect::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float sEffect::y() const {
  return y_;
}
inline void sEffect::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 4;
inline bool sEffect::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sEffect::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sEffect::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sEffect::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float sEffect::z() const {
  return z_;
}
inline void sEffect::set_z(float value) {
  set_has_z();
  z_ = value;
}

// optional float scale = 5;
inline bool sEffect::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sEffect::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sEffect::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sEffect::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float sEffect::scale() const {
  return scale_;
}
inline void sEffect::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional float scaley = 6;
inline bool sEffect::has_scaley() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sEffect::set_has_scaley() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sEffect::clear_has_scaley() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sEffect::clear_scaley() {
  scaley_ = 0;
  clear_has_scaley();
}
inline float sEffect::scaley() const {
  return scaley_;
}
inline void sEffect::set_scaley(float value) {
  set_has_scaley();
  scaley_ = value;
}

// optional float playspeed = 7;
inline bool sEffect::has_playspeed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sEffect::set_has_playspeed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sEffect::clear_has_playspeed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sEffect::clear_playspeed() {
  playspeed_ = 0;
  clear_has_playspeed();
}
inline float sEffect::playspeed() const {
  return playspeed_;
}
inline void sEffect::set_playspeed(float value) {
  set_has_playspeed();
  playspeed_ = value;
}

// optional float playloop = 8;
inline bool sEffect::has_playloop() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sEffect::set_has_playloop() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sEffect::clear_has_playloop() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sEffect::clear_playloop() {
  playloop_ = 0;
  clear_has_playloop();
}
inline float sEffect::playloop() const {
  return playloop_;
}
inline void sEffect::set_playloop(float value) {
  set_has_playloop();
  playloop_ = value;
}

// optional float fadeout = 9;
inline bool sEffect::has_fadeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sEffect::set_has_fadeout() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sEffect::clear_has_fadeout() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sEffect::clear_fadeout() {
  fadeout_ = 0;
  clear_has_fadeout();
}
inline float sEffect::fadeout() const {
  return fadeout_;
}
inline void sEffect::set_fadeout(float value) {
  set_has_fadeout();
  fadeout_ = value;
}

// optional float fadein = 10;
inline bool sEffect::has_fadein() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sEffect::set_has_fadein() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sEffect::clear_has_fadein() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sEffect::clear_fadein() {
  fadein_ = 0;
  clear_has_fadein();
}
inline float sEffect::fadein() const {
  return fadein_;
}
inline void sEffect::set_fadein(float value) {
  set_has_fadein();
  fadein_ = value;
}

// optional uint32 fadeout_blink = 11;
inline bool sEffect::has_fadeout_blink() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sEffect::set_has_fadeout_blink() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sEffect::clear_has_fadeout_blink() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sEffect::clear_fadeout_blink() {
  fadeout_blink_ = 0u;
  clear_has_fadeout_blink();
}
inline ::google::protobuf::uint32 sEffect::fadeout_blink() const {
  return fadeout_blink_;
}
inline void sEffect::set_fadeout_blink(::google::protobuf::uint32 value) {
  set_has_fadeout_blink();
  fadeout_blink_ = value;
}

// optional uint32 fadein_blink = 12;
inline bool sEffect::has_fadein_blink() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sEffect::set_has_fadein_blink() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sEffect::clear_has_fadein_blink() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sEffect::clear_fadein_blink() {
  fadein_blink_ = 0u;
  clear_has_fadein_blink();
}
inline ::google::protobuf::uint32 sEffect::fadein_blink() const {
  return fadein_blink_;
}
inline void sEffect::set_fadein_blink(::google::protobuf::uint32 value) {
  set_has_fadein_blink();
  fadein_blink_ = value;
}

// -------------------------------------------------------------------

// sSubEffects

// optional uint32 uid = 1;
inline bool sSubEffects::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSubEffects::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSubEffects::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSubEffects::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sSubEffects::uid() const {
  return uid_;
}
inline void sSubEffects::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional float x = 2;
inline bool sSubEffects::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sSubEffects::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sSubEffects::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sSubEffects::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float sSubEffects::x() const {
  return x_;
}
inline void sSubEffects::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 3;
inline bool sSubEffects::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sSubEffects::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sSubEffects::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sSubEffects::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float sSubEffects::y() const {
  return y_;
}
inline void sSubEffects::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 4;
inline bool sSubEffects::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sSubEffects::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sSubEffects::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sSubEffects::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float sSubEffects::z() const {
  return z_;
}
inline void sSubEffects::set_z(float value) {
  set_has_z();
  z_ = value;
}

// optional float dirrotate = 5;
inline bool sSubEffects::has_dirrotate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sSubEffects::set_has_dirrotate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sSubEffects::clear_has_dirrotate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sSubEffects::clear_dirrotate() {
  dirrotate_ = 0;
  clear_has_dirrotate();
}
inline float sSubEffects::dirrotate() const {
  return dirrotate_;
}
inline void sSubEffects::set_dirrotate(float value) {
  set_has_dirrotate();
  dirrotate_ = value;
}

// optional float scale = 6;
inline bool sSubEffects::has_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sSubEffects::set_has_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sSubEffects::clear_has_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sSubEffects::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float sSubEffects::scale() const {
  return scale_;
}
inline void sSubEffects::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional float scaley = 7;
inline bool sSubEffects::has_scaley() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sSubEffects::set_has_scaley() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sSubEffects::clear_has_scaley() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sSubEffects::clear_scaley() {
  scaley_ = 0;
  clear_has_scaley();
}
inline float sSubEffects::scaley() const {
  return scaley_;
}
inline void sSubEffects::set_scaley(float value) {
  set_has_scaley();
  scaley_ = value;
}

// -------------------------------------------------------------------

// sEffectSound

// optional float sound_delay = 1;
inline bool sEffectSound::has_sound_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEffectSound::set_has_sound_delay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEffectSound::clear_has_sound_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEffectSound::clear_sound_delay() {
  sound_delay_ = 0;
  clear_has_sound_delay();
}
inline float sEffectSound::sound_delay() const {
  return sound_delay_;
}
inline void sEffectSound::set_sound_delay(float value) {
  set_has_sound_delay();
  sound_delay_ = value;
}

// optional string sound_name = 2;
inline bool sEffectSound::has_sound_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEffectSound::set_has_sound_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEffectSound::clear_has_sound_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEffectSound::clear_sound_name() {
  if (sound_name_ != &::google::protobuf::internal::kEmptyString) {
    sound_name_->clear();
  }
  clear_has_sound_name();
}
inline const ::std::string& sEffectSound::sound_name() const {
  return *sound_name_;
}
inline void sEffectSound::set_sound_name(const ::std::string& value) {
  set_has_sound_name();
  if (sound_name_ == &::google::protobuf::internal::kEmptyString) {
    sound_name_ = new ::std::string;
  }
  sound_name_->assign(value);
}
inline void sEffectSound::set_sound_name(const char* value) {
  set_has_sound_name();
  if (sound_name_ == &::google::protobuf::internal::kEmptyString) {
    sound_name_ = new ::std::string;
  }
  sound_name_->assign(value);
}
inline void sEffectSound::set_sound_name(const char* value, size_t size) {
  set_has_sound_name();
  if (sound_name_ == &::google::protobuf::internal::kEmptyString) {
    sound_name_ = new ::std::string;
  }
  sound_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEffectSound::mutable_sound_name() {
  set_has_sound_name();
  if (sound_name_ == &::google::protobuf::internal::kEmptyString) {
    sound_name_ = new ::std::string;
  }
  return sound_name_;
}
inline ::std::string* sEffectSound::release_sound_name() {
  clear_has_sound_name();
  if (sound_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sound_name_;
    sound_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEffectSound::set_allocated_sound_name(::std::string* sound_name) {
  if (sound_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sound_name_;
  }
  if (sound_name) {
    set_has_sound_name();
    sound_name_ = sound_name;
  } else {
    clear_has_sound_name();
    sound_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sEffects

// optional uint32 uid = 1;
inline bool sEffects::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEffects::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEffects::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEffects::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEffects::uid() const {
  return uid_;
}
inline void sEffects::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// repeated .jynetwork.proto.sSubEffects subeffects = 2;
inline int sEffects::subeffects_size() const {
  return subeffects_.size();
}
inline void sEffects::clear_subeffects() {
  subeffects_.Clear();
}
inline const ::jynetwork::proto::sSubEffects& sEffects::subeffects(int index) const {
  return subeffects_.Get(index);
}
inline ::jynetwork::proto::sSubEffects* sEffects::mutable_subeffects(int index) {
  return subeffects_.Mutable(index);
}
inline ::jynetwork::proto::sSubEffects* sEffects::add_subeffects() {
  return subeffects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSubEffects >&
sEffects::subeffects() const {
  return subeffects_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSubEffects >*
sEffects::mutable_subeffects() {
  return &subeffects_;
}

// repeated .jynetwork.proto.sEffect effects = 3;
inline int sEffects::effects_size() const {
  return effects_.size();
}
inline void sEffects::clear_effects() {
  effects_.Clear();
}
inline const ::jynetwork::proto::sEffect& sEffects::effects(int index) const {
  return effects_.Get(index);
}
inline ::jynetwork::proto::sEffect* sEffects::mutable_effects(int index) {
  return effects_.Mutable(index);
}
inline ::jynetwork::proto::sEffect* sEffects::add_effects() {
  return effects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffect >&
sEffects::effects() const {
  return effects_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffect >*
sEffects::mutable_effects() {
  return &effects_;
}

// optional float dirrotate = 4;
inline bool sEffects::has_dirrotate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sEffects::set_has_dirrotate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sEffects::clear_has_dirrotate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sEffects::clear_dirrotate() {
  dirrotate_ = 0;
  clear_has_dirrotate();
}
inline float sEffects::dirrotate() const {
  return dirrotate_;
}
inline void sEffects::set_dirrotate(float value) {
  set_has_dirrotate();
  dirrotate_ = value;
}

// optional .jynetwork.proto.eEffectPosType postype = 5;
inline bool sEffects::has_postype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sEffects::set_has_postype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sEffects::clear_has_postype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sEffects::clear_postype() {
  postype_ = 0;
  clear_has_postype();
}
inline ::jynetwork::proto::eEffectPosType sEffects::postype() const {
  return static_cast< ::jynetwork::proto::eEffectPosType >(postype_);
}
inline void sEffects::set_postype(::jynetwork::proto::eEffectPosType value) {
  assert(::jynetwork::proto::eEffectPosType_IsValid(value));
  set_has_postype();
  postype_ = value;
}

// optional uint32 interruptable = 6;
inline bool sEffects::has_interruptable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sEffects::set_has_interruptable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sEffects::clear_has_interruptable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sEffects::clear_interruptable() {
  interruptable_ = 0u;
  clear_has_interruptable();
}
inline ::google::protobuf::uint32 sEffects::interruptable() const {
  return interruptable_;
}
inline void sEffects::set_interruptable(::google::protobuf::uint32 value) {
  set_has_interruptable();
  interruptable_ = value;
}

// optional uint32 nextid = 7;
inline bool sEffects::has_nextid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sEffects::set_has_nextid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sEffects::clear_has_nextid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sEffects::clear_nextid() {
  nextid_ = 0u;
  clear_has_nextid();
}
inline ::google::protobuf::uint32 sEffects::nextid() const {
  return nextid_;
}
inline void sEffects::set_nextid(::google::protobuf::uint32 value) {
  set_has_nextid();
  nextid_ = value;
}

// optional .jynetwork.proto.eEffectType efftype = 8;
inline bool sEffects::has_efftype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sEffects::set_has_efftype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sEffects::clear_has_efftype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sEffects::clear_efftype() {
  efftype_ = 1;
  clear_has_efftype();
}
inline ::jynetwork::proto::eEffectType sEffects::efftype() const {
  return static_cast< ::jynetwork::proto::eEffectType >(efftype_);
}
inline void sEffects::set_efftype(::jynetwork::proto::eEffectType value) {
  assert(::jynetwork::proto::eEffectType_IsValid(value));
  set_has_efftype();
  efftype_ = value;
}

// optional string phyname = 9;
inline bool sEffects::has_phyname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sEffects::set_has_phyname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sEffects::clear_has_phyname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sEffects::clear_phyname() {
  if (phyname_ != &::google::protobuf::internal::kEmptyString) {
    phyname_->clear();
  }
  clear_has_phyname();
}
inline const ::std::string& sEffects::phyname() const {
  return *phyname_;
}
inline void sEffects::set_phyname(const ::std::string& value) {
  set_has_phyname();
  if (phyname_ == &::google::protobuf::internal::kEmptyString) {
    phyname_ = new ::std::string;
  }
  phyname_->assign(value);
}
inline void sEffects::set_phyname(const char* value) {
  set_has_phyname();
  if (phyname_ == &::google::protobuf::internal::kEmptyString) {
    phyname_ = new ::std::string;
  }
  phyname_->assign(value);
}
inline void sEffects::set_phyname(const char* value, size_t size) {
  set_has_phyname();
  if (phyname_ == &::google::protobuf::internal::kEmptyString) {
    phyname_ = new ::std::string;
  }
  phyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEffects::mutable_phyname() {
  set_has_phyname();
  if (phyname_ == &::google::protobuf::internal::kEmptyString) {
    phyname_ = new ::std::string;
  }
  return phyname_;
}
inline ::std::string* sEffects::release_phyname() {
  clear_has_phyname();
  if (phyname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phyname_;
    phyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEffects::set_allocated_phyname(::std::string* phyname) {
  if (phyname_ != &::google::protobuf::internal::kEmptyString) {
    delete phyname_;
  }
  if (phyname) {
    set_has_phyname();
    phyname_ = phyname;
  } else {
    clear_has_phyname();
    phyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 physequnce = 10;
inline bool sEffects::has_physequnce() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sEffects::set_has_physequnce() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sEffects::clear_has_physequnce() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sEffects::clear_physequnce() {
  physequnce_ = 0u;
  clear_has_physequnce();
}
inline ::google::protobuf::uint32 sEffects::physequnce() const {
  return physequnce_;
}
inline void sEffects::set_physequnce(::google::protobuf::uint32 value) {
  set_has_physequnce();
  physequnce_ = value;
}

// optional uint32 bindparent = 11;
inline bool sEffects::has_bindparent() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sEffects::set_has_bindparent() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sEffects::clear_has_bindparent() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sEffects::clear_bindparent() {
  bindparent_ = 0u;
  clear_has_bindparent();
}
inline ::google::protobuf::uint32 sEffects::bindparent() const {
  return bindparent_;
}
inline void sEffects::set_bindparent(::google::protobuf::uint32 value) {
  set_has_bindparent();
  bindparent_ = value;
}

// optional uint32 gamestats = 12;
inline bool sEffects::has_gamestats() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sEffects::set_has_gamestats() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sEffects::clear_has_gamestats() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sEffects::clear_gamestats() {
  gamestats_ = 0u;
  clear_has_gamestats();
}
inline ::google::protobuf::uint32 sEffects::gamestats() const {
  return gamestats_;
}
inline void sEffects::set_gamestats(::google::protobuf::uint32 value) {
  set_has_gamestats();
  gamestats_ = value;
}

// optional uint32 hiteffect = 13;
inline bool sEffects::has_hiteffect() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sEffects::set_has_hiteffect() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sEffects::clear_has_hiteffect() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sEffects::clear_hiteffect() {
  hiteffect_ = 0u;
  clear_has_hiteffect();
}
inline ::google::protobuf::uint32 sEffects::hiteffect() const {
  return hiteffect_;
}
inline void sEffects::set_hiteffect(::google::protobuf::uint32 value) {
  set_has_hiteffect();
  hiteffect_ = value;
}

// optional float bullet_speed = 14;
inline bool sEffects::has_bullet_speed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sEffects::set_has_bullet_speed() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sEffects::clear_has_bullet_speed() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sEffects::clear_bullet_speed() {
  bullet_speed_ = 0;
  clear_has_bullet_speed();
}
inline float sEffects::bullet_speed() const {
  return bullet_speed_;
}
inline void sEffects::set_bullet_speed(float value) {
  set_has_bullet_speed();
  bullet_speed_ = value;
}

// optional float accel = 15;
inline bool sEffects::has_accel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sEffects::set_has_accel() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sEffects::clear_has_accel() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sEffects::clear_accel() {
  accel_ = 0;
  clear_has_accel();
}
inline float sEffects::accel() const {
  return accel_;
}
inline void sEffects::set_accel(float value) {
  set_has_accel();
  accel_ = value;
}

// optional float turnrate = 16;
inline bool sEffects::has_turnrate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sEffects::set_has_turnrate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sEffects::clear_has_turnrate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sEffects::clear_turnrate() {
  turnrate_ = 0;
  clear_has_turnrate();
}
inline float sEffects::turnrate() const {
  return turnrate_;
}
inline void sEffects::set_turnrate(float value) {
  set_has_turnrate();
  turnrate_ = value;
}

// optional float yrotspeed = 17;
inline bool sEffects::has_yrotspeed() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sEffects::set_has_yrotspeed() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sEffects::clear_has_yrotspeed() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sEffects::clear_yrotspeed() {
  yrotspeed_ = 0;
  clear_has_yrotspeed();
}
inline float sEffects::yrotspeed() const {
  return yrotspeed_;
}
inline void sEffects::set_yrotspeed(float value) {
  set_has_yrotspeed();
  yrotspeed_ = value;
}

// optional uint32 destructible = 18;
inline bool sEffects::has_destructible() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sEffects::set_has_destructible() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sEffects::clear_has_destructible() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sEffects::clear_destructible() {
  destructible_ = 0u;
  clear_has_destructible();
}
inline ::google::protobuf::uint32 sEffects::destructible() const {
  return destructible_;
}
inline void sEffects::set_destructible(::google::protobuf::uint32 value) {
  set_has_destructible();
  destructible_ = value;
}

// optional uint32 immunebullet = 19;
inline bool sEffects::has_immunebullet() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sEffects::set_has_immunebullet() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sEffects::clear_has_immunebullet() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sEffects::clear_immunebullet() {
  immunebullet_ = 0u;
  clear_has_immunebullet();
}
inline ::google::protobuf::uint32 sEffects::immunebullet() const {
  return immunebullet_;
}
inline void sEffects::set_immunebullet(::google::protobuf::uint32 value) {
  set_has_immunebullet();
  immunebullet_ = value;
}

// optional float lifetime = 20;
inline bool sEffects::has_lifetime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sEffects::set_has_lifetime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sEffects::clear_has_lifetime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sEffects::clear_lifetime() {
  lifetime_ = 0;
  clear_has_lifetime();
}
inline float sEffects::lifetime() const {
  return lifetime_;
}
inline void sEffects::set_lifetime(float value) {
  set_has_lifetime();
  lifetime_ = value;
}

// optional float attack_timespan = 21;
inline bool sEffects::has_attack_timespan() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sEffects::set_has_attack_timespan() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sEffects::clear_has_attack_timespan() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sEffects::clear_attack_timespan() {
  attack_timespan_ = 0;
  clear_has_attack_timespan();
}
inline float sEffects::attack_timespan() const {
  return attack_timespan_;
}
inline void sEffects::set_attack_timespan(float value) {
  set_has_attack_timespan();
  attack_timespan_ = value;
}

// optional uint32 spawn_effect = 22;
inline bool sEffects::has_spawn_effect() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sEffects::set_has_spawn_effect() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sEffects::clear_has_spawn_effect() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sEffects::clear_spawn_effect() {
  spawn_effect_ = 0u;
  clear_has_spawn_effect();
}
inline ::google::protobuf::uint32 sEffects::spawn_effect() const {
  return spawn_effect_;
}
inline void sEffects::set_spawn_effect(::google::protobuf::uint32 value) {
  set_has_spawn_effect();
  spawn_effect_ = value;
}

// optional float zorder = 23;
inline bool sEffects::has_zorder() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sEffects::set_has_zorder() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sEffects::clear_has_zorder() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sEffects::clear_zorder() {
  zorder_ = 0;
  clear_has_zorder();
}
inline float sEffects::zorder() const {
  return zorder_;
}
inline void sEffects::set_zorder(float value) {
  set_has_zorder();
  zorder_ = value;
}

// optional uint32 skip_rotate = 24;
inline bool sEffects::has_skip_rotate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sEffects::set_has_skip_rotate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sEffects::clear_has_skip_rotate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sEffects::clear_skip_rotate() {
  skip_rotate_ = 0u;
  clear_has_skip_rotate();
}
inline ::google::protobuf::uint32 sEffects::skip_rotate() const {
  return skip_rotate_;
}
inline void sEffects::set_skip_rotate(::google::protobuf::uint32 value) {
  set_has_skip_rotate();
  skip_rotate_ = value;
}

// optional uint32 destruct_eff = 25;
inline bool sEffects::has_destruct_eff() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sEffects::set_has_destruct_eff() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sEffects::clear_has_destruct_eff() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sEffects::clear_destruct_eff() {
  destruct_eff_ = 0u;
  clear_has_destruct_eff();
}
inline ::google::protobuf::uint32 sEffects::destruct_eff() const {
  return destruct_eff_;
}
inline void sEffects::set_destruct_eff(::google::protobuf::uint32 value) {
  set_has_destruct_eff();
  destruct_eff_ = value;
}

// repeated float swingtime = 26;
inline int sEffects::swingtime_size() const {
  return swingtime_.size();
}
inline void sEffects::clear_swingtime() {
  swingtime_.Clear();
}
inline float sEffects::swingtime(int index) const {
  return swingtime_.Get(index);
}
inline void sEffects::set_swingtime(int index, float value) {
  swingtime_.Set(index, value);
}
inline void sEffects::add_swingtime(float value) {
  swingtime_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
sEffects::swingtime() const {
  return swingtime_;
}
inline ::google::protobuf::RepeatedField< float >*
sEffects::mutable_swingtime() {
  return &swingtime_;
}

// optional string sound = 27;
inline bool sEffects::has_sound() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void sEffects::set_has_sound() {
  _has_bits_[0] |= 0x04000000u;
}
inline void sEffects::clear_has_sound() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void sEffects::clear_sound() {
  if (sound_ != &::google::protobuf::internal::kEmptyString) {
    sound_->clear();
  }
  clear_has_sound();
}
inline const ::std::string& sEffects::sound() const {
  return *sound_;
}
inline void sEffects::set_sound(const ::std::string& value) {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    sound_ = new ::std::string;
  }
  sound_->assign(value);
}
inline void sEffects::set_sound(const char* value) {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    sound_ = new ::std::string;
  }
  sound_->assign(value);
}
inline void sEffects::set_sound(const char* value, size_t size) {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    sound_ = new ::std::string;
  }
  sound_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEffects::mutable_sound() {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    sound_ = new ::std::string;
  }
  return sound_;
}
inline ::std::string* sEffects::release_sound() {
  clear_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sound_;
    sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEffects::set_allocated_sound(::std::string* sound) {
  if (sound_ != &::google::protobuf::internal::kEmptyString) {
    delete sound_;
  }
  if (sound) {
    set_has_sound();
    sound_ = sound;
  } else {
    clear_has_sound();
    sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 no_target = 28;
inline bool sEffects::has_no_target() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void sEffects::set_has_no_target() {
  _has_bits_[0] |= 0x08000000u;
}
inline void sEffects::clear_has_no_target() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void sEffects::clear_no_target() {
  no_target_ = 0u;
  clear_has_no_target();
}
inline ::google::protobuf::uint32 sEffects::no_target() const {
  return no_target_;
}
inline void sEffects::set_no_target(::google::protobuf::uint32 value) {
  set_has_no_target();
  no_target_ = value;
}

// optional float phy_radius = 29;
inline bool sEffects::has_phy_radius() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void sEffects::set_has_phy_radius() {
  _has_bits_[0] |= 0x10000000u;
}
inline void sEffects::clear_has_phy_radius() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void sEffects::clear_phy_radius() {
  phy_radius_ = 0;
  clear_has_phy_radius();
}
inline float sEffects::phy_radius() const {
  return phy_radius_;
}
inline void sEffects::set_phy_radius(float value) {
  set_has_phy_radius();
  phy_radius_ = value;
}

// optional .jynetwork.proto.eAssitType assist_type = 30;
inline bool sEffects::has_assist_type() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void sEffects::set_has_assist_type() {
  _has_bits_[0] |= 0x20000000u;
}
inline void sEffects::clear_has_assist_type() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void sEffects::clear_assist_type() {
  assist_type_ = 0;
  clear_has_assist_type();
}
inline ::jynetwork::proto::eAssitType sEffects::assist_type() const {
  return static_cast< ::jynetwork::proto::eAssitType >(assist_type_);
}
inline void sEffects::set_assist_type(::jynetwork::proto::eAssitType value) {
  assert(::jynetwork::proto::eAssitType_IsValid(value));
  set_has_assist_type();
  assist_type_ = value;
}

// optional .jynetwork.proto.eEffectScreenType screen_type = 31;
inline bool sEffects::has_screen_type() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void sEffects::set_has_screen_type() {
  _has_bits_[0] |= 0x40000000u;
}
inline void sEffects::clear_has_screen_type() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void sEffects::clear_screen_type() {
  screen_type_ = 0;
  clear_has_screen_type();
}
inline ::jynetwork::proto::eEffectScreenType sEffects::screen_type() const {
  return static_cast< ::jynetwork::proto::eEffectScreenType >(screen_type_);
}
inline void sEffects::set_screen_type(::jynetwork::proto::eEffectScreenType value) {
  assert(::jynetwork::proto::eEffectScreenType_IsValid(value));
  set_has_screen_type();
  screen_type_ = value;
}

// optional float screen_speed = 32;
inline bool sEffects::has_screen_speed() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void sEffects::set_has_screen_speed() {
  _has_bits_[0] |= 0x80000000u;
}
inline void sEffects::clear_has_screen_speed() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void sEffects::clear_screen_speed() {
  screen_speed_ = 0;
  clear_has_screen_speed();
}
inline float sEffects::screen_speed() const {
  return screen_speed_;
}
inline void sEffects::set_screen_speed(float value) {
  set_has_screen_speed();
  screen_speed_ = value;
}

// optional float screen_duration = 33;
inline bool sEffects::has_screen_duration() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void sEffects::set_has_screen_duration() {
  _has_bits_[1] |= 0x00000001u;
}
inline void sEffects::clear_has_screen_duration() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void sEffects::clear_screen_duration() {
  screen_duration_ = 0;
  clear_has_screen_duration();
}
inline float sEffects::screen_duration() const {
  return screen_duration_;
}
inline void sEffects::set_screen_duration(float value) {
  set_has_screen_duration();
  screen_duration_ = value;
}

// optional uint32 screen_colorr = 34;
inline bool sEffects::has_screen_colorr() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void sEffects::set_has_screen_colorr() {
  _has_bits_[1] |= 0x00000002u;
}
inline void sEffects::clear_has_screen_colorr() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void sEffects::clear_screen_colorr() {
  screen_colorr_ = 0u;
  clear_has_screen_colorr();
}
inline ::google::protobuf::uint32 sEffects::screen_colorr() const {
  return screen_colorr_;
}
inline void sEffects::set_screen_colorr(::google::protobuf::uint32 value) {
  set_has_screen_colorr();
  screen_colorr_ = value;
}

// optional uint32 screen_colorg = 35;
inline bool sEffects::has_screen_colorg() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void sEffects::set_has_screen_colorg() {
  _has_bits_[1] |= 0x00000004u;
}
inline void sEffects::clear_has_screen_colorg() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void sEffects::clear_screen_colorg() {
  screen_colorg_ = 0u;
  clear_has_screen_colorg();
}
inline ::google::protobuf::uint32 sEffects::screen_colorg() const {
  return screen_colorg_;
}
inline void sEffects::set_screen_colorg(::google::protobuf::uint32 value) {
  set_has_screen_colorg();
  screen_colorg_ = value;
}

// optional uint32 screen_colorb = 36;
inline bool sEffects::has_screen_colorb() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void sEffects::set_has_screen_colorb() {
  _has_bits_[1] |= 0x00000008u;
}
inline void sEffects::clear_has_screen_colorb() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void sEffects::clear_screen_colorb() {
  screen_colorb_ = 0u;
  clear_has_screen_colorb();
}
inline ::google::protobuf::uint32 sEffects::screen_colorb() const {
  return screen_colorb_;
}
inline void sEffects::set_screen_colorb(::google::protobuf::uint32 value) {
  set_has_screen_colorb();
  screen_colorb_ = value;
}

// optional uint32 screen_colora = 37;
inline bool sEffects::has_screen_colora() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void sEffects::set_has_screen_colora() {
  _has_bits_[1] |= 0x00000010u;
}
inline void sEffects::clear_has_screen_colora() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void sEffects::clear_screen_colora() {
  screen_colora_ = 0u;
  clear_has_screen_colora();
}
inline ::google::protobuf::uint32 sEffects::screen_colora() const {
  return screen_colora_;
}
inline void sEffects::set_screen_colora(::google::protobuf::uint32 value) {
  set_has_screen_colora();
  screen_colora_ = value;
}

// optional .jynetwork.proto.eCameraMoveType camera_move_type = 38;
inline bool sEffects::has_camera_move_type() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void sEffects::set_has_camera_move_type() {
  _has_bits_[1] |= 0x00000020u;
}
inline void sEffects::clear_has_camera_move_type() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void sEffects::clear_camera_move_type() {
  camera_move_type_ = 0;
  clear_has_camera_move_type();
}
inline ::jynetwork::proto::eCameraMoveType sEffects::camera_move_type() const {
  return static_cast< ::jynetwork::proto::eCameraMoveType >(camera_move_type_);
}
inline void sEffects::set_camera_move_type(::jynetwork::proto::eCameraMoveType value) {
  assert(::jynetwork::proto::eCameraMoveType_IsValid(value));
  set_has_camera_move_type();
  camera_move_type_ = value;
}

// optional float camera_move_time = 39;
inline bool sEffects::has_camera_move_time() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void sEffects::set_has_camera_move_time() {
  _has_bits_[1] |= 0x00000040u;
}
inline void sEffects::clear_has_camera_move_time() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void sEffects::clear_camera_move_time() {
  camera_move_time_ = 0;
  clear_has_camera_move_time();
}
inline float sEffects::camera_move_time() const {
  return camera_move_time_;
}
inline void sEffects::set_camera_move_time(float value) {
  set_has_camera_move_time();
  camera_move_time_ = value;
}

// optional float camera_return_time = 40;
inline bool sEffects::has_camera_return_time() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void sEffects::set_has_camera_return_time() {
  _has_bits_[1] |= 0x00000080u;
}
inline void sEffects::clear_has_camera_return_time() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void sEffects::clear_camera_return_time() {
  camera_return_time_ = 0;
  clear_has_camera_return_time();
}
inline float sEffects::camera_return_time() const {
  return camera_return_time_;
}
inline void sEffects::set_camera_return_time(float value) {
  set_has_camera_return_time();
  camera_return_time_ = value;
}

// optional float camera_offsetx = 41;
inline bool sEffects::has_camera_offsetx() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void sEffects::set_has_camera_offsetx() {
  _has_bits_[1] |= 0x00000100u;
}
inline void sEffects::clear_has_camera_offsetx() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void sEffects::clear_camera_offsetx() {
  camera_offsetx_ = 0;
  clear_has_camera_offsetx();
}
inline float sEffects::camera_offsetx() const {
  return camera_offsetx_;
}
inline void sEffects::set_camera_offsetx(float value) {
  set_has_camera_offsetx();
  camera_offsetx_ = value;
}

// optional float camera_offsety = 42;
inline bool sEffects::has_camera_offsety() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void sEffects::set_has_camera_offsety() {
  _has_bits_[1] |= 0x00000200u;
}
inline void sEffects::clear_has_camera_offsety() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void sEffects::clear_camera_offsety() {
  camera_offsety_ = 0;
  clear_has_camera_offsety();
}
inline float sEffects::camera_offsety() const {
  return camera_offsety_;
}
inline void sEffects::set_camera_offsety(float value) {
  set_has_camera_offsety();
  camera_offsety_ = value;
}

// optional float camera_offsetz = 43;
inline bool sEffects::has_camera_offsetz() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void sEffects::set_has_camera_offsetz() {
  _has_bits_[1] |= 0x00000400u;
}
inline void sEffects::clear_has_camera_offsetz() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void sEffects::clear_camera_offsetz() {
  camera_offsetz_ = 0;
  clear_has_camera_offsetz();
}
inline float sEffects::camera_offsetz() const {
  return camera_offsetz_;
}
inline void sEffects::set_camera_offsetz(float value) {
  set_has_camera_offsetz();
  camera_offsetz_ = value;
}

// optional float self_rotate = 44;
inline bool sEffects::has_self_rotate() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void sEffects::set_has_self_rotate() {
  _has_bits_[1] |= 0x00000800u;
}
inline void sEffects::clear_has_self_rotate() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void sEffects::clear_self_rotate() {
  self_rotate_ = 0;
  clear_has_self_rotate();
}
inline float sEffects::self_rotate() const {
  return self_rotate_;
}
inline void sEffects::set_self_rotate(float value) {
  set_has_self_rotate();
  self_rotate_ = value;
}

// optional uint32 render3d = 45;
inline bool sEffects::has_render3d() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void sEffects::set_has_render3d() {
  _has_bits_[1] |= 0x00001000u;
}
inline void sEffects::clear_has_render3d() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void sEffects::clear_render3d() {
  render3d_ = 0u;
  clear_has_render3d();
}
inline ::google::protobuf::uint32 sEffects::render3d() const {
  return render3d_;
}
inline void sEffects::set_render3d(::google::protobuf::uint32 value) {
  set_has_render3d();
  render3d_ = value;
}

// optional uint32 gamestate_lvl = 46;
inline bool sEffects::has_gamestate_lvl() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void sEffects::set_has_gamestate_lvl() {
  _has_bits_[1] |= 0x00002000u;
}
inline void sEffects::clear_has_gamestate_lvl() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void sEffects::clear_gamestate_lvl() {
  gamestate_lvl_ = 0u;
  clear_has_gamestate_lvl();
}
inline ::google::protobuf::uint32 sEffects::gamestate_lvl() const {
  return gamestate_lvl_;
}
inline void sEffects::set_gamestate_lvl(::google::protobuf::uint32 value) {
  set_has_gamestate_lvl();
  gamestate_lvl_ = value;
}

// optional uint32 is_fullscreen = 47;
inline bool sEffects::has_is_fullscreen() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void sEffects::set_has_is_fullscreen() {
  _has_bits_[1] |= 0x00004000u;
}
inline void sEffects::clear_has_is_fullscreen() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void sEffects::clear_is_fullscreen() {
  is_fullscreen_ = 0u;
  clear_has_is_fullscreen();
}
inline ::google::protobuf::uint32 sEffects::is_fullscreen() const {
  return is_fullscreen_;
}
inline void sEffects::set_is_fullscreen(::google::protobuf::uint32 value) {
  set_has_is_fullscreen();
  is_fullscreen_ = value;
}

// optional float phy_rectw = 48;
inline bool sEffects::has_phy_rectw() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void sEffects::set_has_phy_rectw() {
  _has_bits_[1] |= 0x00008000u;
}
inline void sEffects::clear_has_phy_rectw() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void sEffects::clear_phy_rectw() {
  phy_rectw_ = 0;
  clear_has_phy_rectw();
}
inline float sEffects::phy_rectw() const {
  return phy_rectw_;
}
inline void sEffects::set_phy_rectw(float value) {
  set_has_phy_rectw();
  phy_rectw_ = value;
}

// optional float phy_recth = 49;
inline bool sEffects::has_phy_recth() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void sEffects::set_has_phy_recth() {
  _has_bits_[1] |= 0x00010000u;
}
inline void sEffects::clear_has_phy_recth() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void sEffects::clear_phy_recth() {
  phy_recth_ = 0;
  clear_has_phy_recth();
}
inline float sEffects::phy_recth() const {
  return phy_recth_;
}
inline void sEffects::set_phy_recth(float value) {
  set_has_phy_recth();
  phy_recth_ = value;
}

// optional float phy_rectax = 50;
inline bool sEffects::has_phy_rectax() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void sEffects::set_has_phy_rectax() {
  _has_bits_[1] |= 0x00020000u;
}
inline void sEffects::clear_has_phy_rectax() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void sEffects::clear_phy_rectax() {
  phy_rectax_ = 0;
  clear_has_phy_rectax();
}
inline float sEffects::phy_rectax() const {
  return phy_rectax_;
}
inline void sEffects::set_phy_rectax(float value) {
  set_has_phy_rectax();
  phy_rectax_ = value;
}

// optional float phy_rectay = 51;
inline bool sEffects::has_phy_rectay() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void sEffects::set_has_phy_rectay() {
  _has_bits_[1] |= 0x00040000u;
}
inline void sEffects::clear_has_phy_rectay() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void sEffects::clear_phy_rectay() {
  phy_rectay_ = 0;
  clear_has_phy_rectay();
}
inline float sEffects::phy_rectay() const {
  return phy_rectay_;
}
inline void sEffects::set_phy_rectay(float value) {
  set_has_phy_rectay();
  phy_rectay_ = value;
}

// optional float start_delay = 52;
inline bool sEffects::has_start_delay() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void sEffects::set_has_start_delay() {
  _has_bits_[1] |= 0x00080000u;
}
inline void sEffects::clear_has_start_delay() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void sEffects::clear_start_delay() {
  start_delay_ = 0;
  clear_has_start_delay();
}
inline float sEffects::start_delay() const {
  return start_delay_;
}
inline void sEffects::set_start_delay(float value) {
  set_has_start_delay();
  start_delay_ = value;
}

// optional float aoffsetx = 53;
inline bool sEffects::has_aoffsetx() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void sEffects::set_has_aoffsetx() {
  _has_bits_[1] |= 0x00100000u;
}
inline void sEffects::clear_has_aoffsetx() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void sEffects::clear_aoffsetx() {
  aoffsetx_ = 0;
  clear_has_aoffsetx();
}
inline float sEffects::aoffsetx() const {
  return aoffsetx_;
}
inline void sEffects::set_aoffsetx(float value) {
  set_has_aoffsetx();
  aoffsetx_ = value;
}

// optional float aoffsety = 54;
inline bool sEffects::has_aoffsety() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void sEffects::set_has_aoffsety() {
  _has_bits_[1] |= 0x00200000u;
}
inline void sEffects::clear_has_aoffsety() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void sEffects::clear_aoffsety() {
  aoffsety_ = 0;
  clear_has_aoffsety();
}
inline float sEffects::aoffsety() const {
  return aoffsety_;
}
inline void sEffects::set_aoffsety(float value) {
  set_has_aoffsety();
  aoffsety_ = value;
}

// optional uint32 fantasy_func = 55;
inline bool sEffects::has_fantasy_func() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void sEffects::set_has_fantasy_func() {
  _has_bits_[1] |= 0x00400000u;
}
inline void sEffects::clear_has_fantasy_func() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void sEffects::clear_fantasy_func() {
  fantasy_func_ = 0u;
  clear_has_fantasy_func();
}
inline ::google::protobuf::uint32 sEffects::fantasy_func() const {
  return fantasy_func_;
}
inline void sEffects::set_fantasy_func(::google::protobuf::uint32 value) {
  set_has_fantasy_func();
  fantasy_func_ = value;
}

// optional uint32 fantasy_bullect = 56;
inline bool sEffects::has_fantasy_bullect() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void sEffects::set_has_fantasy_bullect() {
  _has_bits_[1] |= 0x00800000u;
}
inline void sEffects::clear_has_fantasy_bullect() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void sEffects::clear_fantasy_bullect() {
  fantasy_bullect_ = 0u;
  clear_has_fantasy_bullect();
}
inline ::google::protobuf::uint32 sEffects::fantasy_bullect() const {
  return fantasy_bullect_;
}
inline void sEffects::set_fantasy_bullect(::google::protobuf::uint32 value) {
  set_has_fantasy_bullect();
  fantasy_bullect_ = value;
}

// optional uint32 fantasy_per_count = 57;
inline bool sEffects::has_fantasy_per_count() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void sEffects::set_has_fantasy_per_count() {
  _has_bits_[1] |= 0x01000000u;
}
inline void sEffects::clear_has_fantasy_per_count() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void sEffects::clear_fantasy_per_count() {
  fantasy_per_count_ = 0u;
  clear_has_fantasy_per_count();
}
inline ::google::protobuf::uint32 sEffects::fantasy_per_count() const {
  return fantasy_per_count_;
}
inline void sEffects::set_fantasy_per_count(::google::protobuf::uint32 value) {
  set_has_fantasy_per_count();
  fantasy_per_count_ = value;
}

// optional uint32 fantasy_per_addcount = 58;
inline bool sEffects::has_fantasy_per_addcount() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void sEffects::set_has_fantasy_per_addcount() {
  _has_bits_[1] |= 0x02000000u;
}
inline void sEffects::clear_has_fantasy_per_addcount() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void sEffects::clear_fantasy_per_addcount() {
  fantasy_per_addcount_ = 0u;
  clear_has_fantasy_per_addcount();
}
inline ::google::protobuf::uint32 sEffects::fantasy_per_addcount() const {
  return fantasy_per_addcount_;
}
inline void sEffects::set_fantasy_per_addcount(::google::protobuf::uint32 value) {
  set_has_fantasy_per_addcount();
  fantasy_per_addcount_ = value;
}

// optional float fantasy_param1 = 59;
inline bool sEffects::has_fantasy_param1() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void sEffects::set_has_fantasy_param1() {
  _has_bits_[1] |= 0x04000000u;
}
inline void sEffects::clear_has_fantasy_param1() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void sEffects::clear_fantasy_param1() {
  fantasy_param1_ = 0;
  clear_has_fantasy_param1();
}
inline float sEffects::fantasy_param1() const {
  return fantasy_param1_;
}
inline void sEffects::set_fantasy_param1(float value) {
  set_has_fantasy_param1();
  fantasy_param1_ = value;
}

// optional float fantasy_param2 = 60;
inline bool sEffects::has_fantasy_param2() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void sEffects::set_has_fantasy_param2() {
  _has_bits_[1] |= 0x08000000u;
}
inline void sEffects::clear_has_fantasy_param2() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void sEffects::clear_fantasy_param2() {
  fantasy_param2_ = 0;
  clear_has_fantasy_param2();
}
inline float sEffects::fantasy_param2() const {
  return fantasy_param2_;
}
inline void sEffects::set_fantasy_param2(float value) {
  set_has_fantasy_param2();
  fantasy_param2_ = value;
}

// optional float fantasy_param3 = 61;
inline bool sEffects::has_fantasy_param3() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void sEffects::set_has_fantasy_param3() {
  _has_bits_[1] |= 0x10000000u;
}
inline void sEffects::clear_has_fantasy_param3() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void sEffects::clear_fantasy_param3() {
  fantasy_param3_ = 0;
  clear_has_fantasy_param3();
}
inline float sEffects::fantasy_param3() const {
  return fantasy_param3_;
}
inline void sEffects::set_fantasy_param3(float value) {
  set_has_fantasy_param3();
  fantasy_param3_ = value;
}

// optional float fantasy_param4 = 62;
inline bool sEffects::has_fantasy_param4() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void sEffects::set_has_fantasy_param4() {
  _has_bits_[1] |= 0x20000000u;
}
inline void sEffects::clear_has_fantasy_param4() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void sEffects::clear_fantasy_param4() {
  fantasy_param4_ = 0;
  clear_has_fantasy_param4();
}
inline float sEffects::fantasy_param4() const {
  return fantasy_param4_;
}
inline void sEffects::set_fantasy_param4(float value) {
  set_has_fantasy_param4();
  fantasy_param4_ = value;
}

// optional float fantasy_param5 = 63;
inline bool sEffects::has_fantasy_param5() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void sEffects::set_has_fantasy_param5() {
  _has_bits_[1] |= 0x40000000u;
}
inline void sEffects::clear_has_fantasy_param5() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void sEffects::clear_fantasy_param5() {
  fantasy_param5_ = 0;
  clear_has_fantasy_param5();
}
inline float sEffects::fantasy_param5() const {
  return fantasy_param5_;
}
inline void sEffects::set_fantasy_param5(float value) {
  set_has_fantasy_param5();
  fantasy_param5_ = value;
}

// optional float fantasy_param6 = 64;
inline bool sEffects::has_fantasy_param6() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void sEffects::set_has_fantasy_param6() {
  _has_bits_[1] |= 0x80000000u;
}
inline void sEffects::clear_has_fantasy_param6() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void sEffects::clear_fantasy_param6() {
  fantasy_param6_ = 0;
  clear_has_fantasy_param6();
}
inline float sEffects::fantasy_param6() const {
  return fantasy_param6_;
}
inline void sEffects::set_fantasy_param6(float value) {
  set_has_fantasy_param6();
  fantasy_param6_ = value;
}

// optional float fantasy_param7 = 65;
inline bool sEffects::has_fantasy_param7() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void sEffects::set_has_fantasy_param7() {
  _has_bits_[2] |= 0x00000001u;
}
inline void sEffects::clear_has_fantasy_param7() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void sEffects::clear_fantasy_param7() {
  fantasy_param7_ = 0;
  clear_has_fantasy_param7();
}
inline float sEffects::fantasy_param7() const {
  return fantasy_param7_;
}
inline void sEffects::set_fantasy_param7(float value) {
  set_has_fantasy_param7();
  fantasy_param7_ = value;
}

// optional float fantasy_param8 = 66;
inline bool sEffects::has_fantasy_param8() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void sEffects::set_has_fantasy_param8() {
  _has_bits_[2] |= 0x00000002u;
}
inline void sEffects::clear_has_fantasy_param8() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void sEffects::clear_fantasy_param8() {
  fantasy_param8_ = 0;
  clear_has_fantasy_param8();
}
inline float sEffects::fantasy_param8() const {
  return fantasy_param8_;
}
inline void sEffects::set_fantasy_param8(float value) {
  set_has_fantasy_param8();
  fantasy_param8_ = value;
}

// optional float fantasy_param9 = 67;
inline bool sEffects::has_fantasy_param9() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void sEffects::set_has_fantasy_param9() {
  _has_bits_[2] |= 0x00000004u;
}
inline void sEffects::clear_has_fantasy_param9() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void sEffects::clear_fantasy_param9() {
  fantasy_param9_ = 0;
  clear_has_fantasy_param9();
}
inline float sEffects::fantasy_param9() const {
  return fantasy_param9_;
}
inline void sEffects::set_fantasy_param9(float value) {
  set_has_fantasy_param9();
  fantasy_param9_ = value;
}

// optional float fantasy_param10 = 68;
inline bool sEffects::has_fantasy_param10() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void sEffects::set_has_fantasy_param10() {
  _has_bits_[2] |= 0x00000008u;
}
inline void sEffects::clear_has_fantasy_param10() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void sEffects::clear_fantasy_param10() {
  fantasy_param10_ = 0;
  clear_has_fantasy_param10();
}
inline float sEffects::fantasy_param10() const {
  return fantasy_param10_;
}
inline void sEffects::set_fantasy_param10(float value) {
  set_has_fantasy_param10();
  fantasy_param10_ = value;
}

// optional float fantasy_param11 = 69;
inline bool sEffects::has_fantasy_param11() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void sEffects::set_has_fantasy_param11() {
  _has_bits_[2] |= 0x00000010u;
}
inline void sEffects::clear_has_fantasy_param11() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void sEffects::clear_fantasy_param11() {
  fantasy_param11_ = 0;
  clear_has_fantasy_param11();
}
inline float sEffects::fantasy_param11() const {
  return fantasy_param11_;
}
inline void sEffects::set_fantasy_param11(float value) {
  set_has_fantasy_param11();
  fantasy_param11_ = value;
}

// optional float fantasy_param12 = 70;
inline bool sEffects::has_fantasy_param12() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void sEffects::set_has_fantasy_param12() {
  _has_bits_[2] |= 0x00000020u;
}
inline void sEffects::clear_has_fantasy_param12() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void sEffects::clear_fantasy_param12() {
  fantasy_param12_ = 0;
  clear_has_fantasy_param12();
}
inline float sEffects::fantasy_param12() const {
  return fantasy_param12_;
}
inline void sEffects::set_fantasy_param12(float value) {
  set_has_fantasy_param12();
  fantasy_param12_ = value;
}

// optional float streak_fade = 71;
inline bool sEffects::has_streak_fade() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void sEffects::set_has_streak_fade() {
  _has_bits_[2] |= 0x00000040u;
}
inline void sEffects::clear_has_streak_fade() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void sEffects::clear_streak_fade() {
  streak_fade_ = 0;
  clear_has_streak_fade();
}
inline float sEffects::streak_fade() const {
  return streak_fade_;
}
inline void sEffects::set_streak_fade(float value) {
  set_has_streak_fade();
  streak_fade_ = value;
}

// optional float streak_minseg = 72;
inline bool sEffects::has_streak_minseg() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void sEffects::set_has_streak_minseg() {
  _has_bits_[2] |= 0x00000080u;
}
inline void sEffects::clear_has_streak_minseg() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void sEffects::clear_streak_minseg() {
  streak_minseg_ = 0;
  clear_has_streak_minseg();
}
inline float sEffects::streak_minseg() const {
  return streak_minseg_;
}
inline void sEffects::set_streak_minseg(float value) {
  set_has_streak_minseg();
  streak_minseg_ = value;
}

// optional float streak_stroke = 73;
inline bool sEffects::has_streak_stroke() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void sEffects::set_has_streak_stroke() {
  _has_bits_[2] |= 0x00000100u;
}
inline void sEffects::clear_has_streak_stroke() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void sEffects::clear_streak_stroke() {
  streak_stroke_ = 0;
  clear_has_streak_stroke();
}
inline float sEffects::streak_stroke() const {
  return streak_stroke_;
}
inline void sEffects::set_streak_stroke(float value) {
  set_has_streak_stroke();
  streak_stroke_ = value;
}

// optional float streak_dispear = 81;
inline bool sEffects::has_streak_dispear() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void sEffects::set_has_streak_dispear() {
  _has_bits_[2] |= 0x00000200u;
}
inline void sEffects::clear_has_streak_dispear() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void sEffects::clear_streak_dispear() {
  streak_dispear_ = 0;
  clear_has_streak_dispear();
}
inline float sEffects::streak_dispear() const {
  return streak_dispear_;
}
inline void sEffects::set_streak_dispear(float value) {
  set_has_streak_dispear();
  streak_dispear_ = value;
}

// optional uint32 streak_colorr = 74;
inline bool sEffects::has_streak_colorr() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void sEffects::set_has_streak_colorr() {
  _has_bits_[2] |= 0x00000400u;
}
inline void sEffects::clear_has_streak_colorr() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void sEffects::clear_streak_colorr() {
  streak_colorr_ = 0u;
  clear_has_streak_colorr();
}
inline ::google::protobuf::uint32 sEffects::streak_colorr() const {
  return streak_colorr_;
}
inline void sEffects::set_streak_colorr(::google::protobuf::uint32 value) {
  set_has_streak_colorr();
  streak_colorr_ = value;
}

// optional uint32 streak_colorg = 75;
inline bool sEffects::has_streak_colorg() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void sEffects::set_has_streak_colorg() {
  _has_bits_[2] |= 0x00000800u;
}
inline void sEffects::clear_has_streak_colorg() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void sEffects::clear_streak_colorg() {
  streak_colorg_ = 0u;
  clear_has_streak_colorg();
}
inline ::google::protobuf::uint32 sEffects::streak_colorg() const {
  return streak_colorg_;
}
inline void sEffects::set_streak_colorg(::google::protobuf::uint32 value) {
  set_has_streak_colorg();
  streak_colorg_ = value;
}

// optional uint32 streak_colorb = 76;
inline bool sEffects::has_streak_colorb() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void sEffects::set_has_streak_colorb() {
  _has_bits_[2] |= 0x00001000u;
}
inline void sEffects::clear_has_streak_colorb() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void sEffects::clear_streak_colorb() {
  streak_colorb_ = 0u;
  clear_has_streak_colorb();
}
inline ::google::protobuf::uint32 sEffects::streak_colorb() const {
  return streak_colorb_;
}
inline void sEffects::set_streak_colorb(::google::protobuf::uint32 value) {
  set_has_streak_colorb();
  streak_colorb_ = value;
}

// optional string streak_name = 77;
inline bool sEffects::has_streak_name() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void sEffects::set_has_streak_name() {
  _has_bits_[2] |= 0x00002000u;
}
inline void sEffects::clear_has_streak_name() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void sEffects::clear_streak_name() {
  if (streak_name_ != &::google::protobuf::internal::kEmptyString) {
    streak_name_->clear();
  }
  clear_has_streak_name();
}
inline const ::std::string& sEffects::streak_name() const {
  return *streak_name_;
}
inline void sEffects::set_streak_name(const ::std::string& value) {
  set_has_streak_name();
  if (streak_name_ == &::google::protobuf::internal::kEmptyString) {
    streak_name_ = new ::std::string;
  }
  streak_name_->assign(value);
}
inline void sEffects::set_streak_name(const char* value) {
  set_has_streak_name();
  if (streak_name_ == &::google::protobuf::internal::kEmptyString) {
    streak_name_ = new ::std::string;
  }
  streak_name_->assign(value);
}
inline void sEffects::set_streak_name(const char* value, size_t size) {
  set_has_streak_name();
  if (streak_name_ == &::google::protobuf::internal::kEmptyString) {
    streak_name_ = new ::std::string;
  }
  streak_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEffects::mutable_streak_name() {
  set_has_streak_name();
  if (streak_name_ == &::google::protobuf::internal::kEmptyString) {
    streak_name_ = new ::std::string;
  }
  return streak_name_;
}
inline ::std::string* sEffects::release_streak_name() {
  clear_has_streak_name();
  if (streak_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = streak_name_;
    streak_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEffects::set_allocated_streak_name(::std::string* streak_name) {
  if (streak_name_ != &::google::protobuf::internal::kEmptyString) {
    delete streak_name_;
  }
  if (streak_name) {
    set_has_streak_name();
    streak_name_ = streak_name;
  } else {
    clear_has_streak_name();
    streak_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 desturct_by_creator = 78;
inline bool sEffects::has_desturct_by_creator() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void sEffects::set_has_desturct_by_creator() {
  _has_bits_[2] |= 0x00004000u;
}
inline void sEffects::clear_has_desturct_by_creator() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void sEffects::clear_desturct_by_creator() {
  desturct_by_creator_ = 0u;
  clear_has_desturct_by_creator();
}
inline ::google::protobuf::uint32 sEffects::desturct_by_creator() const {
  return desturct_by_creator_;
}
inline void sEffects::set_desturct_by_creator(::google::protobuf::uint32 value) {
  set_has_desturct_by_creator();
  desturct_by_creator_ = value;
}

// repeated .jynetwork.proto.sEffectSound effect_sound = 79;
inline int sEffects::effect_sound_size() const {
  return effect_sound_.size();
}
inline void sEffects::clear_effect_sound() {
  effect_sound_.Clear();
}
inline const ::jynetwork::proto::sEffectSound& sEffects::effect_sound(int index) const {
  return effect_sound_.Get(index);
}
inline ::jynetwork::proto::sEffectSound* sEffects::mutable_effect_sound(int index) {
  return effect_sound_.Mutable(index);
}
inline ::jynetwork::proto::sEffectSound* sEffects::add_effect_sound() {
  return effect_sound_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectSound >&
sEffects::effect_sound() const {
  return effect_sound_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectSound >*
sEffects::mutable_effect_sound() {
  return &effect_sound_;
}

// optional uint32 rand_rotate = 80;
inline bool sEffects::has_rand_rotate() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void sEffects::set_has_rand_rotate() {
  _has_bits_[2] |= 0x00010000u;
}
inline void sEffects::clear_has_rand_rotate() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void sEffects::clear_rand_rotate() {
  rand_rotate_ = 0u;
  clear_has_rand_rotate();
}
inline ::google::protobuf::uint32 sEffects::rand_rotate() const {
  return rand_rotate_;
}
inline void sEffects::set_rand_rotate(::google::protobuf::uint32 value) {
  set_has_rand_rotate();
  rand_rotate_ = value;
}

// optional uint32 no_out_erase = 82;
inline bool sEffects::has_no_out_erase() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void sEffects::set_has_no_out_erase() {
  _has_bits_[2] |= 0x00020000u;
}
inline void sEffects::clear_has_no_out_erase() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void sEffects::clear_no_out_erase() {
  no_out_erase_ = 0u;
  clear_has_no_out_erase();
}
inline ::google::protobuf::uint32 sEffects::no_out_erase() const {
  return no_out_erase_;
}
inline void sEffects::set_no_out_erase(::google::protobuf::uint32 value) {
  set_has_no_out_erase();
  no_out_erase_ = value;
}

// optional uint32 retarget = 83;
inline bool sEffects::has_retarget() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void sEffects::set_has_retarget() {
  _has_bits_[2] |= 0x00040000u;
}
inline void sEffects::clear_has_retarget() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void sEffects::clear_retarget() {
  retarget_ = 0u;
  clear_has_retarget();
}
inline ::google::protobuf::uint32 sEffects::retarget() const {
  return retarget_;
}
inline void sEffects::set_retarget(::google::protobuf::uint32 value) {
  set_has_retarget();
  retarget_ = value;
}

// optional uint32 func_move = 84;
inline bool sEffects::has_func_move() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void sEffects::set_has_func_move() {
  _has_bits_[2] |= 0x00080000u;
}
inline void sEffects::clear_has_func_move() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void sEffects::clear_func_move() {
  func_move_ = 0u;
  clear_has_func_move();
}
inline ::google::protobuf::uint32 sEffects::func_move() const {
  return func_move_;
}
inline void sEffects::set_func_move(::google::protobuf::uint32 value) {
  set_has_func_move();
  func_move_ = value;
}

// optional uint32 laser_turnrate = 85;
inline bool sEffects::has_laser_turnrate() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void sEffects::set_has_laser_turnrate() {
  _has_bits_[2] |= 0x00100000u;
}
inline void sEffects::clear_has_laser_turnrate() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void sEffects::clear_laser_turnrate() {
  laser_turnrate_ = 0u;
  clear_has_laser_turnrate();
}
inline ::google::protobuf::uint32 sEffects::laser_turnrate() const {
  return laser_turnrate_;
}
inline void sEffects::set_laser_turnrate(::google::protobuf::uint32 value) {
  set_has_laser_turnrate();
  laser_turnrate_ = value;
}

// optional uint32 is_end_remove = 86;
inline bool sEffects::has_is_end_remove() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void sEffects::set_has_is_end_remove() {
  _has_bits_[2] |= 0x00200000u;
}
inline void sEffects::clear_has_is_end_remove() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void sEffects::clear_is_end_remove() {
  is_end_remove_ = 0u;
  clear_has_is_end_remove();
}
inline ::google::protobuf::uint32 sEffects::is_end_remove() const {
  return is_end_remove_;
}
inline void sEffects::set_is_end_remove(::google::protobuf::uint32 value) {
  set_has_is_end_remove();
  is_end_remove_ = value;
}

// optional float retarget_start_time = 87;
inline bool sEffects::has_retarget_start_time() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void sEffects::set_has_retarget_start_time() {
  _has_bits_[2] |= 0x00400000u;
}
inline void sEffects::clear_has_retarget_start_time() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void sEffects::clear_retarget_start_time() {
  retarget_start_time_ = 0;
  clear_has_retarget_start_time();
}
inline float sEffects::retarget_start_time() const {
  return retarget_start_time_;
}
inline void sEffects::set_retarget_start_time(float value) {
  set_has_retarget_start_time();
  retarget_start_time_ = value;
}

// optional float retarget_end_time = 88;
inline bool sEffects::has_retarget_end_time() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void sEffects::set_has_retarget_end_time() {
  _has_bits_[2] |= 0x00800000u;
}
inline void sEffects::clear_has_retarget_end_time() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void sEffects::clear_retarget_end_time() {
  retarget_end_time_ = 0;
  clear_has_retarget_end_time();
}
inline float sEffects::retarget_end_time() const {
  return retarget_end_time_;
}
inline void sEffects::set_retarget_end_time(float value) {
  set_has_retarget_end_time();
  retarget_end_time_ = value;
}

// optional uint32 is_not_show_damage = 89;
inline bool sEffects::has_is_not_show_damage() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void sEffects::set_has_is_not_show_damage() {
  _has_bits_[2] |= 0x01000000u;
}
inline void sEffects::clear_has_is_not_show_damage() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void sEffects::clear_is_not_show_damage() {
  is_not_show_damage_ = 0u;
  clear_has_is_not_show_damage();
}
inline ::google::protobuf::uint32 sEffects::is_not_show_damage() const {
  return is_not_show_damage_;
}
inline void sEffects::set_is_not_show_damage(::google::protobuf::uint32 value) {
  set_has_is_not_show_damage();
  is_not_show_damage_ = value;
}

// optional uint32 hurt_catlog = 90;
inline bool sEffects::has_hurt_catlog() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void sEffects::set_has_hurt_catlog() {
  _has_bits_[2] |= 0x02000000u;
}
inline void sEffects::clear_has_hurt_catlog() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void sEffects::clear_hurt_catlog() {
  hurt_catlog_ = 0u;
  clear_has_hurt_catlog();
}
inline ::google::protobuf::uint32 sEffects::hurt_catlog() const {
  return hurt_catlog_;
}
inline void sEffects::set_hurt_catlog(::google::protobuf::uint32 value) {
  set_has_hurt_catlog();
  hurt_catlog_ = value;
}

// optional float laser_half_width = 91;
inline bool sEffects::has_laser_half_width() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void sEffects::set_has_laser_half_width() {
  _has_bits_[2] |= 0x04000000u;
}
inline void sEffects::clear_has_laser_half_width() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void sEffects::clear_laser_half_width() {
  laser_half_width_ = 0;
  clear_has_laser_half_width();
}
inline float sEffects::laser_half_width() const {
  return laser_half_width_;
}
inline void sEffects::set_laser_half_width(float value) {
  set_has_laser_half_width();
  laser_half_width_ = value;
}

// optional float alert_radius = 92;
inline bool sEffects::has_alert_radius() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void sEffects::set_has_alert_radius() {
  _has_bits_[2] |= 0x08000000u;
}
inline void sEffects::clear_has_alert_radius() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void sEffects::clear_alert_radius() {
  alert_radius_ = 0;
  clear_has_alert_radius();
}
inline float sEffects::alert_radius() const {
  return alert_radius_;
}
inline void sEffects::set_alert_radius(float value) {
  set_has_alert_radius();
  alert_radius_ = value;
}

// -------------------------------------------------------------------

// sEffectMove

// optional uint32 uid = 1;
inline bool sEffectMove::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEffectMove::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEffectMove::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEffectMove::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEffectMove::uid() const {
  return uid_;
}
inline void sEffectMove::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 func_id = 2;
inline bool sEffectMove::has_func_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEffectMove::set_has_func_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEffectMove::clear_has_func_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEffectMove::clear_func_id() {
  func_id_ = 0u;
  clear_has_func_id();
}
inline ::google::protobuf::uint32 sEffectMove::func_id() const {
  return func_id_;
}
inline void sEffectMove::set_func_id(::google::protobuf::uint32 value) {
  set_has_func_id();
  func_id_ = value;
}

// optional float param1 = 3;
inline bool sEffectMove::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sEffectMove::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sEffectMove::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sEffectMove::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline float sEffectMove::param1() const {
  return param1_;
}
inline void sEffectMove::set_param1(float value) {
  set_has_param1();
  param1_ = value;
}

// optional float param2 = 4;
inline bool sEffectMove::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sEffectMove::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sEffectMove::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sEffectMove::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline float sEffectMove::param2() const {
  return param2_;
}
inline void sEffectMove::set_param2(float value) {
  set_has_param2();
  param2_ = value;
}

// optional float param3 = 5;
inline bool sEffectMove::has_param3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sEffectMove::set_has_param3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sEffectMove::clear_has_param3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sEffectMove::clear_param3() {
  param3_ = 0;
  clear_has_param3();
}
inline float sEffectMove::param3() const {
  return param3_;
}
inline void sEffectMove::set_param3(float value) {
  set_has_param3();
  param3_ = value;
}

// optional float param4 = 6;
inline bool sEffectMove::has_param4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sEffectMove::set_has_param4() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sEffectMove::clear_has_param4() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sEffectMove::clear_param4() {
  param4_ = 0;
  clear_has_param4();
}
inline float sEffectMove::param4() const {
  return param4_;
}
inline void sEffectMove::set_param4(float value) {
  set_has_param4();
  param4_ = value;
}

// optional float param5 = 7;
inline bool sEffectMove::has_param5() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sEffectMove::set_has_param5() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sEffectMove::clear_has_param5() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sEffectMove::clear_param5() {
  param5_ = 0;
  clear_has_param5();
}
inline float sEffectMove::param5() const {
  return param5_;
}
inline void sEffectMove::set_param5(float value) {
  set_has_param5();
  param5_ = value;
}

// optional float param6 = 8;
inline bool sEffectMove::has_param6() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sEffectMove::set_has_param6() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sEffectMove::clear_has_param6() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sEffectMove::clear_param6() {
  param6_ = 0;
  clear_has_param6();
}
inline float sEffectMove::param6() const {
  return param6_;
}
inline void sEffectMove::set_param6(float value) {
  set_has_param6();
  param6_ = value;
}

// optional float param7 = 9;
inline bool sEffectMove::has_param7() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sEffectMove::set_has_param7() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sEffectMove::clear_has_param7() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sEffectMove::clear_param7() {
  param7_ = 0;
  clear_has_param7();
}
inline float sEffectMove::param7() const {
  return param7_;
}
inline void sEffectMove::set_param7(float value) {
  set_has_param7();
  param7_ = value;
}

// optional float param8 = 10;
inline bool sEffectMove::has_param8() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sEffectMove::set_has_param8() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sEffectMove::clear_has_param8() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sEffectMove::clear_param8() {
  param8_ = 0;
  clear_has_param8();
}
inline float sEffectMove::param8() const {
  return param8_;
}
inline void sEffectMove::set_param8(float value) {
  set_has_param8();
  param8_ = value;
}

// optional float param9 = 11;
inline bool sEffectMove::has_param9() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sEffectMove::set_has_param9() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sEffectMove::clear_has_param9() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sEffectMove::clear_param9() {
  param9_ = 0;
  clear_has_param9();
}
inline float sEffectMove::param9() const {
  return param9_;
}
inline void sEffectMove::set_param9(float value) {
  set_has_param9();
  param9_ = value;
}

// optional float param10 = 12;
inline bool sEffectMove::has_param10() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sEffectMove::set_has_param10() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sEffectMove::clear_has_param10() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sEffectMove::clear_param10() {
  param10_ = 0;
  clear_has_param10();
}
inline float sEffectMove::param10() const {
  return param10_;
}
inline void sEffectMove::set_param10(float value) {
  set_has_param10();
  param10_ = value;
}

// optional float param11 = 13;
inline bool sEffectMove::has_param11() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sEffectMove::set_has_param11() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sEffectMove::clear_has_param11() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sEffectMove::clear_param11() {
  param11_ = 0;
  clear_has_param11();
}
inline float sEffectMove::param11() const {
  return param11_;
}
inline void sEffectMove::set_param11(float value) {
  set_has_param11();
  param11_ = value;
}

// optional float param12 = 14;
inline bool sEffectMove::has_param12() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sEffectMove::set_has_param12() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sEffectMove::clear_has_param12() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sEffectMove::clear_param12() {
  param12_ = 0;
  clear_has_param12();
}
inline float sEffectMove::param12() const {
  return param12_;
}
inline void sEffectMove::set_param12(float value) {
  set_has_param12();
  param12_ = value;
}

// -------------------------------------------------------------------

// sEffectTable

// optional uint32 uid = 1;
inline bool sEffectTable::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEffectTable::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEffectTable::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEffectTable::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEffectTable::uid() const {
  return uid_;
}
inline void sEffectTable::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 effectsid = 2;
inline bool sEffectTable::has_effectsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEffectTable::set_has_effectsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEffectTable::clear_has_effectsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEffectTable::clear_effectsid() {
  effectsid_ = 0u;
  clear_has_effectsid();
}
inline ::google::protobuf::uint32 sEffectTable::effectsid() const {
  return effectsid_;
}
inline void sEffectTable::set_effectsid(::google::protobuf::uint32 value) {
  set_has_effectsid();
  effectsid_ = value;
}

// -------------------------------------------------------------------

// sModelAction

// optional uint32 uid = 1;
inline bool sModelAction::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sModelAction::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sModelAction::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sModelAction::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sModelAction::uid() const {
  return uid_;
}
inline void sModelAction::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string resources = 2;
inline bool sModelAction::has_resources() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sModelAction::set_has_resources() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sModelAction::clear_has_resources() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sModelAction::clear_resources() {
  if (resources_ != &::google::protobuf::internal::kEmptyString) {
    resources_->clear();
  }
  clear_has_resources();
}
inline const ::std::string& sModelAction::resources() const {
  return *resources_;
}
inline void sModelAction::set_resources(const ::std::string& value) {
  set_has_resources();
  if (resources_ == &::google::protobuf::internal::kEmptyString) {
    resources_ = new ::std::string;
  }
  resources_->assign(value);
}
inline void sModelAction::set_resources(const char* value) {
  set_has_resources();
  if (resources_ == &::google::protobuf::internal::kEmptyString) {
    resources_ = new ::std::string;
  }
  resources_->assign(value);
}
inline void sModelAction::set_resources(const char* value, size_t size) {
  set_has_resources();
  if (resources_ == &::google::protobuf::internal::kEmptyString) {
    resources_ = new ::std::string;
  }
  resources_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sModelAction::mutable_resources() {
  set_has_resources();
  if (resources_ == &::google::protobuf::internal::kEmptyString) {
    resources_ = new ::std::string;
  }
  return resources_;
}
inline ::std::string* sModelAction::release_resources() {
  clear_has_resources();
  if (resources_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resources_;
    resources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sModelAction::set_allocated_resources(::std::string* resources) {
  if (resources_ != &::google::protobuf::internal::kEmptyString) {
    delete resources_;
  }
  if (resources) {
    set_has_resources();
    resources_ = resources;
  } else {
    clear_has_resources();
    resources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 hold_s = 3;
inline bool sModelAction::has_hold_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sModelAction::set_has_hold_s() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sModelAction::clear_has_hold_s() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sModelAction::clear_hold_s() {
  hold_s_ = 0u;
  clear_has_hold_s();
}
inline ::google::protobuf::uint32 sModelAction::hold_s() const {
  return hold_s_;
}
inline void sModelAction::set_hold_s(::google::protobuf::uint32 value) {
  set_has_hold_s();
  hold_s_ = value;
}

// optional uint32 hold_e = 4;
inline bool sModelAction::has_hold_e() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sModelAction::set_has_hold_e() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sModelAction::clear_has_hold_e() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sModelAction::clear_hold_e() {
  hold_e_ = 0u;
  clear_has_hold_e();
}
inline ::google::protobuf::uint32 sModelAction::hold_e() const {
  return hold_e_;
}
inline void sModelAction::set_hold_e(::google::protobuf::uint32 value) {
  set_has_hold_e();
  hold_e_ = value;
}

// optional uint32 hold_eff = 5;
inline bool sModelAction::has_hold_eff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sModelAction::set_has_hold_eff() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sModelAction::clear_has_hold_eff() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sModelAction::clear_hold_eff() {
  hold_eff_ = 0u;
  clear_has_hold_eff();
}
inline ::google::protobuf::uint32 sModelAction::hold_eff() const {
  return hold_eff_;
}
inline void sModelAction::set_hold_eff(::google::protobuf::uint32 value) {
  set_has_hold_eff();
  hold_eff_ = value;
}

// optional uint32 moveleft_s = 6;
inline bool sModelAction::has_moveleft_s() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sModelAction::set_has_moveleft_s() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sModelAction::clear_has_moveleft_s() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sModelAction::clear_moveleft_s() {
  moveleft_s_ = 0u;
  clear_has_moveleft_s();
}
inline ::google::protobuf::uint32 sModelAction::moveleft_s() const {
  return moveleft_s_;
}
inline void sModelAction::set_moveleft_s(::google::protobuf::uint32 value) {
  set_has_moveleft_s();
  moveleft_s_ = value;
}

// optional uint32 moveleft_e = 7;
inline bool sModelAction::has_moveleft_e() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sModelAction::set_has_moveleft_e() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sModelAction::clear_has_moveleft_e() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sModelAction::clear_moveleft_e() {
  moveleft_e_ = 0u;
  clear_has_moveleft_e();
}
inline ::google::protobuf::uint32 sModelAction::moveleft_e() const {
  return moveleft_e_;
}
inline void sModelAction::set_moveleft_e(::google::protobuf::uint32 value) {
  set_has_moveleft_e();
  moveleft_e_ = value;
}

// optional uint32 moveleft_eff = 8;
inline bool sModelAction::has_moveleft_eff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sModelAction::set_has_moveleft_eff() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sModelAction::clear_has_moveleft_eff() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sModelAction::clear_moveleft_eff() {
  moveleft_eff_ = 0u;
  clear_has_moveleft_eff();
}
inline ::google::protobuf::uint32 sModelAction::moveleft_eff() const {
  return moveleft_eff_;
}
inline void sModelAction::set_moveleft_eff(::google::protobuf::uint32 value) {
  set_has_moveleft_eff();
  moveleft_eff_ = value;
}

// optional uint32 moveleftstop_s = 9;
inline bool sModelAction::has_moveleftstop_s() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sModelAction::set_has_moveleftstop_s() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sModelAction::clear_has_moveleftstop_s() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sModelAction::clear_moveleftstop_s() {
  moveleftstop_s_ = 0u;
  clear_has_moveleftstop_s();
}
inline ::google::protobuf::uint32 sModelAction::moveleftstop_s() const {
  return moveleftstop_s_;
}
inline void sModelAction::set_moveleftstop_s(::google::protobuf::uint32 value) {
  set_has_moveleftstop_s();
  moveleftstop_s_ = value;
}

// optional uint32 moveleftstop_e = 10;
inline bool sModelAction::has_moveleftstop_e() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sModelAction::set_has_moveleftstop_e() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sModelAction::clear_has_moveleftstop_e() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sModelAction::clear_moveleftstop_e() {
  moveleftstop_e_ = 0u;
  clear_has_moveleftstop_e();
}
inline ::google::protobuf::uint32 sModelAction::moveleftstop_e() const {
  return moveleftstop_e_;
}
inline void sModelAction::set_moveleftstop_e(::google::protobuf::uint32 value) {
  set_has_moveleftstop_e();
  moveleftstop_e_ = value;
}

// optional uint32 moveleftstop_eff = 11;
inline bool sModelAction::has_moveleftstop_eff() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sModelAction::set_has_moveleftstop_eff() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sModelAction::clear_has_moveleftstop_eff() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sModelAction::clear_moveleftstop_eff() {
  moveleftstop_eff_ = 0u;
  clear_has_moveleftstop_eff();
}
inline ::google::protobuf::uint32 sModelAction::moveleftstop_eff() const {
  return moveleftstop_eff_;
}
inline void sModelAction::set_moveleftstop_eff(::google::protobuf::uint32 value) {
  set_has_moveleftstop_eff();
  moveleftstop_eff_ = value;
}

// optional uint32 moveleftturn_s = 12;
inline bool sModelAction::has_moveleftturn_s() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sModelAction::set_has_moveleftturn_s() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sModelAction::clear_has_moveleftturn_s() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sModelAction::clear_moveleftturn_s() {
  moveleftturn_s_ = 0u;
  clear_has_moveleftturn_s();
}
inline ::google::protobuf::uint32 sModelAction::moveleftturn_s() const {
  return moveleftturn_s_;
}
inline void sModelAction::set_moveleftturn_s(::google::protobuf::uint32 value) {
  set_has_moveleftturn_s();
  moveleftturn_s_ = value;
}

// optional uint32 moveleftturn_e = 13;
inline bool sModelAction::has_moveleftturn_e() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sModelAction::set_has_moveleftturn_e() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sModelAction::clear_has_moveleftturn_e() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sModelAction::clear_moveleftturn_e() {
  moveleftturn_e_ = 0u;
  clear_has_moveleftturn_e();
}
inline ::google::protobuf::uint32 sModelAction::moveleftturn_e() const {
  return moveleftturn_e_;
}
inline void sModelAction::set_moveleftturn_e(::google::protobuf::uint32 value) {
  set_has_moveleftturn_e();
  moveleftturn_e_ = value;
}

// optional uint32 moveleftturn_eff = 14;
inline bool sModelAction::has_moveleftturn_eff() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sModelAction::set_has_moveleftturn_eff() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sModelAction::clear_has_moveleftturn_eff() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sModelAction::clear_moveleftturn_eff() {
  moveleftturn_eff_ = 0u;
  clear_has_moveleftturn_eff();
}
inline ::google::protobuf::uint32 sModelAction::moveleftturn_eff() const {
  return moveleftturn_eff_;
}
inline void sModelAction::set_moveleftturn_eff(::google::protobuf::uint32 value) {
  set_has_moveleftturn_eff();
  moveleftturn_eff_ = value;
}

// optional uint32 moveright_s = 15;
inline bool sModelAction::has_moveright_s() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sModelAction::set_has_moveright_s() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sModelAction::clear_has_moveright_s() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sModelAction::clear_moveright_s() {
  moveright_s_ = 0u;
  clear_has_moveright_s();
}
inline ::google::protobuf::uint32 sModelAction::moveright_s() const {
  return moveright_s_;
}
inline void sModelAction::set_moveright_s(::google::protobuf::uint32 value) {
  set_has_moveright_s();
  moveright_s_ = value;
}

// optional uint32 moveright_e = 16;
inline bool sModelAction::has_moveright_e() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sModelAction::set_has_moveright_e() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sModelAction::clear_has_moveright_e() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sModelAction::clear_moveright_e() {
  moveright_e_ = 0u;
  clear_has_moveright_e();
}
inline ::google::protobuf::uint32 sModelAction::moveright_e() const {
  return moveright_e_;
}
inline void sModelAction::set_moveright_e(::google::protobuf::uint32 value) {
  set_has_moveright_e();
  moveright_e_ = value;
}

// optional uint32 moveright_eff = 17;
inline bool sModelAction::has_moveright_eff() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sModelAction::set_has_moveright_eff() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sModelAction::clear_has_moveright_eff() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sModelAction::clear_moveright_eff() {
  moveright_eff_ = 0u;
  clear_has_moveright_eff();
}
inline ::google::protobuf::uint32 sModelAction::moveright_eff() const {
  return moveright_eff_;
}
inline void sModelAction::set_moveright_eff(::google::protobuf::uint32 value) {
  set_has_moveright_eff();
  moveright_eff_ = value;
}

// optional uint32 moverightstop_s = 18;
inline bool sModelAction::has_moverightstop_s() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sModelAction::set_has_moverightstop_s() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sModelAction::clear_has_moverightstop_s() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sModelAction::clear_moverightstop_s() {
  moverightstop_s_ = 0u;
  clear_has_moverightstop_s();
}
inline ::google::protobuf::uint32 sModelAction::moverightstop_s() const {
  return moverightstop_s_;
}
inline void sModelAction::set_moverightstop_s(::google::protobuf::uint32 value) {
  set_has_moverightstop_s();
  moverightstop_s_ = value;
}

// optional uint32 moverightstop_e = 19;
inline bool sModelAction::has_moverightstop_e() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sModelAction::set_has_moverightstop_e() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sModelAction::clear_has_moverightstop_e() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sModelAction::clear_moverightstop_e() {
  moverightstop_e_ = 0u;
  clear_has_moverightstop_e();
}
inline ::google::protobuf::uint32 sModelAction::moverightstop_e() const {
  return moverightstop_e_;
}
inline void sModelAction::set_moverightstop_e(::google::protobuf::uint32 value) {
  set_has_moverightstop_e();
  moverightstop_e_ = value;
}

// optional uint32 moverightstop_eff = 20;
inline bool sModelAction::has_moverightstop_eff() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sModelAction::set_has_moverightstop_eff() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sModelAction::clear_has_moverightstop_eff() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sModelAction::clear_moverightstop_eff() {
  moverightstop_eff_ = 0u;
  clear_has_moverightstop_eff();
}
inline ::google::protobuf::uint32 sModelAction::moverightstop_eff() const {
  return moverightstop_eff_;
}
inline void sModelAction::set_moverightstop_eff(::google::protobuf::uint32 value) {
  set_has_moverightstop_eff();
  moverightstop_eff_ = value;
}

// optional uint32 moverightturn_s = 21;
inline bool sModelAction::has_moverightturn_s() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sModelAction::set_has_moverightturn_s() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sModelAction::clear_has_moverightturn_s() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sModelAction::clear_moverightturn_s() {
  moverightturn_s_ = 0u;
  clear_has_moverightturn_s();
}
inline ::google::protobuf::uint32 sModelAction::moverightturn_s() const {
  return moverightturn_s_;
}
inline void sModelAction::set_moverightturn_s(::google::protobuf::uint32 value) {
  set_has_moverightturn_s();
  moverightturn_s_ = value;
}

// optional uint32 moverightturn_e = 22;
inline bool sModelAction::has_moverightturn_e() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sModelAction::set_has_moverightturn_e() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sModelAction::clear_has_moverightturn_e() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sModelAction::clear_moverightturn_e() {
  moverightturn_e_ = 0u;
  clear_has_moverightturn_e();
}
inline ::google::protobuf::uint32 sModelAction::moverightturn_e() const {
  return moverightturn_e_;
}
inline void sModelAction::set_moverightturn_e(::google::protobuf::uint32 value) {
  set_has_moverightturn_e();
  moverightturn_e_ = value;
}

// optional uint32 moverightturn_eff = 23;
inline bool sModelAction::has_moverightturn_eff() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sModelAction::set_has_moverightturn_eff() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sModelAction::clear_has_moverightturn_eff() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sModelAction::clear_moverightturn_eff() {
  moverightturn_eff_ = 0u;
  clear_has_moverightturn_eff();
}
inline ::google::protobuf::uint32 sModelAction::moverightturn_eff() const {
  return moverightturn_eff_;
}
inline void sModelAction::set_moverightturn_eff(::google::protobuf::uint32 value) {
  set_has_moverightturn_eff();
  moverightturn_eff_ = value;
}

// optional uint32 attack_s = 24;
inline bool sModelAction::has_attack_s() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sModelAction::set_has_attack_s() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sModelAction::clear_has_attack_s() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sModelAction::clear_attack_s() {
  attack_s_ = 0u;
  clear_has_attack_s();
}
inline ::google::protobuf::uint32 sModelAction::attack_s() const {
  return attack_s_;
}
inline void sModelAction::set_attack_s(::google::protobuf::uint32 value) {
  set_has_attack_s();
  attack_s_ = value;
}

// optional uint32 attack_e = 25;
inline bool sModelAction::has_attack_e() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sModelAction::set_has_attack_e() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sModelAction::clear_has_attack_e() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sModelAction::clear_attack_e() {
  attack_e_ = 0u;
  clear_has_attack_e();
}
inline ::google::protobuf::uint32 sModelAction::attack_e() const {
  return attack_e_;
}
inline void sModelAction::set_attack_e(::google::protobuf::uint32 value) {
  set_has_attack_e();
  attack_e_ = value;
}

// optional uint32 attack_eff = 26;
inline bool sModelAction::has_attack_eff() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sModelAction::set_has_attack_eff() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sModelAction::clear_has_attack_eff() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sModelAction::clear_attack_eff() {
  attack_eff_ = 0u;
  clear_has_attack_eff();
}
inline ::google::protobuf::uint32 sModelAction::attack_eff() const {
  return attack_eff_;
}
inline void sModelAction::set_attack_eff(::google::protobuf::uint32 value) {
  set_has_attack_eff();
  attack_eff_ = value;
}

// optional uint32 skillnormal_s = 27;
inline bool sModelAction::has_skillnormal_s() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void sModelAction::set_has_skillnormal_s() {
  _has_bits_[0] |= 0x04000000u;
}
inline void sModelAction::clear_has_skillnormal_s() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void sModelAction::clear_skillnormal_s() {
  skillnormal_s_ = 0u;
  clear_has_skillnormal_s();
}
inline ::google::protobuf::uint32 sModelAction::skillnormal_s() const {
  return skillnormal_s_;
}
inline void sModelAction::set_skillnormal_s(::google::protobuf::uint32 value) {
  set_has_skillnormal_s();
  skillnormal_s_ = value;
}

// optional uint32 skillnormal_e = 28;
inline bool sModelAction::has_skillnormal_e() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void sModelAction::set_has_skillnormal_e() {
  _has_bits_[0] |= 0x08000000u;
}
inline void sModelAction::clear_has_skillnormal_e() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void sModelAction::clear_skillnormal_e() {
  skillnormal_e_ = 0u;
  clear_has_skillnormal_e();
}
inline ::google::protobuf::uint32 sModelAction::skillnormal_e() const {
  return skillnormal_e_;
}
inline void sModelAction::set_skillnormal_e(::google::protobuf::uint32 value) {
  set_has_skillnormal_e();
  skillnormal_e_ = value;
}

// optional uint32 skillnormal_eff = 29;
inline bool sModelAction::has_skillnormal_eff() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void sModelAction::set_has_skillnormal_eff() {
  _has_bits_[0] |= 0x10000000u;
}
inline void sModelAction::clear_has_skillnormal_eff() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void sModelAction::clear_skillnormal_eff() {
  skillnormal_eff_ = 0u;
  clear_has_skillnormal_eff();
}
inline ::google::protobuf::uint32 sModelAction::skillnormal_eff() const {
  return skillnormal_eff_;
}
inline void sModelAction::set_skillnormal_eff(::google::protobuf::uint32 value) {
  set_has_skillnormal_eff();
  skillnormal_eff_ = value;
}

// optional uint32 skillsuper_s = 30;
inline bool sModelAction::has_skillsuper_s() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void sModelAction::set_has_skillsuper_s() {
  _has_bits_[0] |= 0x20000000u;
}
inline void sModelAction::clear_has_skillsuper_s() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void sModelAction::clear_skillsuper_s() {
  skillsuper_s_ = 0u;
  clear_has_skillsuper_s();
}
inline ::google::protobuf::uint32 sModelAction::skillsuper_s() const {
  return skillsuper_s_;
}
inline void sModelAction::set_skillsuper_s(::google::protobuf::uint32 value) {
  set_has_skillsuper_s();
  skillsuper_s_ = value;
}

// optional uint32 skillsuper_e = 31;
inline bool sModelAction::has_skillsuper_e() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void sModelAction::set_has_skillsuper_e() {
  _has_bits_[0] |= 0x40000000u;
}
inline void sModelAction::clear_has_skillsuper_e() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void sModelAction::clear_skillsuper_e() {
  skillsuper_e_ = 0u;
  clear_has_skillsuper_e();
}
inline ::google::protobuf::uint32 sModelAction::skillsuper_e() const {
  return skillsuper_e_;
}
inline void sModelAction::set_skillsuper_e(::google::protobuf::uint32 value) {
  set_has_skillsuper_e();
  skillsuper_e_ = value;
}

// optional uint32 skillsuper_eff = 32;
inline bool sModelAction::has_skillsuper_eff() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void sModelAction::set_has_skillsuper_eff() {
  _has_bits_[0] |= 0x80000000u;
}
inline void sModelAction::clear_has_skillsuper_eff() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void sModelAction::clear_skillsuper_eff() {
  skillsuper_eff_ = 0u;
  clear_has_skillsuper_eff();
}
inline ::google::protobuf::uint32 sModelAction::skillsuper_eff() const {
  return skillsuper_eff_;
}
inline void sModelAction::set_skillsuper_eff(::google::protobuf::uint32 value) {
  set_has_skillsuper_eff();
  skillsuper_eff_ = value;
}

// optional uint32 skill25_s = 33;
inline bool sModelAction::has_skill25_s() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void sModelAction::set_has_skill25_s() {
  _has_bits_[1] |= 0x00000001u;
}
inline void sModelAction::clear_has_skill25_s() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void sModelAction::clear_skill25_s() {
  skill25_s_ = 0u;
  clear_has_skill25_s();
}
inline ::google::protobuf::uint32 sModelAction::skill25_s() const {
  return skill25_s_;
}
inline void sModelAction::set_skill25_s(::google::protobuf::uint32 value) {
  set_has_skill25_s();
  skill25_s_ = value;
}

// optional uint32 skill25_e = 34;
inline bool sModelAction::has_skill25_e() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void sModelAction::set_has_skill25_e() {
  _has_bits_[1] |= 0x00000002u;
}
inline void sModelAction::clear_has_skill25_e() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void sModelAction::clear_skill25_e() {
  skill25_e_ = 0u;
  clear_has_skill25_e();
}
inline ::google::protobuf::uint32 sModelAction::skill25_e() const {
  return skill25_e_;
}
inline void sModelAction::set_skill25_e(::google::protobuf::uint32 value) {
  set_has_skill25_e();
  skill25_e_ = value;
}

// optional uint32 skill25_eff = 35;
inline bool sModelAction::has_skill25_eff() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void sModelAction::set_has_skill25_eff() {
  _has_bits_[1] |= 0x00000004u;
}
inline void sModelAction::clear_has_skill25_eff() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void sModelAction::clear_skill25_eff() {
  skill25_eff_ = 0u;
  clear_has_skill25_eff();
}
inline ::google::protobuf::uint32 sModelAction::skill25_eff() const {
  return skill25_eff_;
}
inline void sModelAction::set_skill25_eff(::google::protobuf::uint32 value) {
  set_has_skill25_eff();
  skill25_eff_ = value;
}

// optional uint32 skill50_s = 36;
inline bool sModelAction::has_skill50_s() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void sModelAction::set_has_skill50_s() {
  _has_bits_[1] |= 0x00000008u;
}
inline void sModelAction::clear_has_skill50_s() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void sModelAction::clear_skill50_s() {
  skill50_s_ = 0u;
  clear_has_skill50_s();
}
inline ::google::protobuf::uint32 sModelAction::skill50_s() const {
  return skill50_s_;
}
inline void sModelAction::set_skill50_s(::google::protobuf::uint32 value) {
  set_has_skill50_s();
  skill50_s_ = value;
}

// optional uint32 skill50_e = 37;
inline bool sModelAction::has_skill50_e() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void sModelAction::set_has_skill50_e() {
  _has_bits_[1] |= 0x00000010u;
}
inline void sModelAction::clear_has_skill50_e() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void sModelAction::clear_skill50_e() {
  skill50_e_ = 0u;
  clear_has_skill50_e();
}
inline ::google::protobuf::uint32 sModelAction::skill50_e() const {
  return skill50_e_;
}
inline void sModelAction::set_skill50_e(::google::protobuf::uint32 value) {
  set_has_skill50_e();
  skill50_e_ = value;
}

// optional uint32 skill50_eff = 38;
inline bool sModelAction::has_skill50_eff() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void sModelAction::set_has_skill50_eff() {
  _has_bits_[1] |= 0x00000020u;
}
inline void sModelAction::clear_has_skill50_eff() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void sModelAction::clear_skill50_eff() {
  skill50_eff_ = 0u;
  clear_has_skill50_eff();
}
inline ::google::protobuf::uint32 sModelAction::skill50_eff() const {
  return skill50_eff_;
}
inline void sModelAction::set_skill50_eff(::google::protobuf::uint32 value) {
  set_has_skill50_eff();
  skill50_eff_ = value;
}

// optional uint32 skill75_s = 39;
inline bool sModelAction::has_skill75_s() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void sModelAction::set_has_skill75_s() {
  _has_bits_[1] |= 0x00000040u;
}
inline void sModelAction::clear_has_skill75_s() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void sModelAction::clear_skill75_s() {
  skill75_s_ = 0u;
  clear_has_skill75_s();
}
inline ::google::protobuf::uint32 sModelAction::skill75_s() const {
  return skill75_s_;
}
inline void sModelAction::set_skill75_s(::google::protobuf::uint32 value) {
  set_has_skill75_s();
  skill75_s_ = value;
}

// optional uint32 skill75_e = 40;
inline bool sModelAction::has_skill75_e() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void sModelAction::set_has_skill75_e() {
  _has_bits_[1] |= 0x00000080u;
}
inline void sModelAction::clear_has_skill75_e() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void sModelAction::clear_skill75_e() {
  skill75_e_ = 0u;
  clear_has_skill75_e();
}
inline ::google::protobuf::uint32 sModelAction::skill75_e() const {
  return skill75_e_;
}
inline void sModelAction::set_skill75_e(::google::protobuf::uint32 value) {
  set_has_skill75_e();
  skill75_e_ = value;
}

// optional uint32 skill75_eff = 41;
inline bool sModelAction::has_skill75_eff() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void sModelAction::set_has_skill75_eff() {
  _has_bits_[1] |= 0x00000100u;
}
inline void sModelAction::clear_has_skill75_eff() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void sModelAction::clear_skill75_eff() {
  skill75_eff_ = 0u;
  clear_has_skill75_eff();
}
inline ::google::protobuf::uint32 sModelAction::skill75_eff() const {
  return skill75_eff_;
}
inline void sModelAction::set_skill75_eff(::google::protobuf::uint32 value) {
  set_has_skill75_eff();
  skill75_eff_ = value;
}

// optional uint32 skill100_s = 42;
inline bool sModelAction::has_skill100_s() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void sModelAction::set_has_skill100_s() {
  _has_bits_[1] |= 0x00000200u;
}
inline void sModelAction::clear_has_skill100_s() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void sModelAction::clear_skill100_s() {
  skill100_s_ = 0u;
  clear_has_skill100_s();
}
inline ::google::protobuf::uint32 sModelAction::skill100_s() const {
  return skill100_s_;
}
inline void sModelAction::set_skill100_s(::google::protobuf::uint32 value) {
  set_has_skill100_s();
  skill100_s_ = value;
}

// optional uint32 skill100_e = 43;
inline bool sModelAction::has_skill100_e() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void sModelAction::set_has_skill100_e() {
  _has_bits_[1] |= 0x00000400u;
}
inline void sModelAction::clear_has_skill100_e() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void sModelAction::clear_skill100_e() {
  skill100_e_ = 0u;
  clear_has_skill100_e();
}
inline ::google::protobuf::uint32 sModelAction::skill100_e() const {
  return skill100_e_;
}
inline void sModelAction::set_skill100_e(::google::protobuf::uint32 value) {
  set_has_skill100_e();
  skill100_e_ = value;
}

// optional uint32 skill100_eff = 44;
inline bool sModelAction::has_skill100_eff() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void sModelAction::set_has_skill100_eff() {
  _has_bits_[1] |= 0x00000800u;
}
inline void sModelAction::clear_has_skill100_eff() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void sModelAction::clear_skill100_eff() {
  skill100_eff_ = 0u;
  clear_has_skill100_eff();
}
inline ::google::protobuf::uint32 sModelAction::skill100_eff() const {
  return skill100_eff_;
}
inline void sModelAction::set_skill100_eff(::google::protobuf::uint32 value) {
  set_has_skill100_eff();
  skill100_eff_ = value;
}

// optional uint32 dead_s = 45;
inline bool sModelAction::has_dead_s() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void sModelAction::set_has_dead_s() {
  _has_bits_[1] |= 0x00001000u;
}
inline void sModelAction::clear_has_dead_s() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void sModelAction::clear_dead_s() {
  dead_s_ = 0u;
  clear_has_dead_s();
}
inline ::google::protobuf::uint32 sModelAction::dead_s() const {
  return dead_s_;
}
inline void sModelAction::set_dead_s(::google::protobuf::uint32 value) {
  set_has_dead_s();
  dead_s_ = value;
}

// optional uint32 dead_e = 46;
inline bool sModelAction::has_dead_e() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void sModelAction::set_has_dead_e() {
  _has_bits_[1] |= 0x00002000u;
}
inline void sModelAction::clear_has_dead_e() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void sModelAction::clear_dead_e() {
  dead_e_ = 0u;
  clear_has_dead_e();
}
inline ::google::protobuf::uint32 sModelAction::dead_e() const {
  return dead_e_;
}
inline void sModelAction::set_dead_e(::google::protobuf::uint32 value) {
  set_has_dead_e();
  dead_e_ = value;
}

// optional uint32 dead_eff = 47;
inline bool sModelAction::has_dead_eff() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void sModelAction::set_has_dead_eff() {
  _has_bits_[1] |= 0x00004000u;
}
inline void sModelAction::clear_has_dead_eff() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void sModelAction::clear_dead_eff() {
  dead_eff_ = 0u;
  clear_has_dead_eff();
}
inline ::google::protobuf::uint32 sModelAction::dead_eff() const {
  return dead_eff_;
}
inline void sModelAction::set_dead_eff(::google::protobuf::uint32 value) {
  set_has_dead_eff();
  dead_eff_ = value;
}

// optional uint32 turnin_s = 48;
inline bool sModelAction::has_turnin_s() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void sModelAction::set_has_turnin_s() {
  _has_bits_[1] |= 0x00008000u;
}
inline void sModelAction::clear_has_turnin_s() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void sModelAction::clear_turnin_s() {
  turnin_s_ = 0u;
  clear_has_turnin_s();
}
inline ::google::protobuf::uint32 sModelAction::turnin_s() const {
  return turnin_s_;
}
inline void sModelAction::set_turnin_s(::google::protobuf::uint32 value) {
  set_has_turnin_s();
  turnin_s_ = value;
}

// optional uint32 turnin_e = 49;
inline bool sModelAction::has_turnin_e() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void sModelAction::set_has_turnin_e() {
  _has_bits_[1] |= 0x00010000u;
}
inline void sModelAction::clear_has_turnin_e() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void sModelAction::clear_turnin_e() {
  turnin_e_ = 0u;
  clear_has_turnin_e();
}
inline ::google::protobuf::uint32 sModelAction::turnin_e() const {
  return turnin_e_;
}
inline void sModelAction::set_turnin_e(::google::protobuf::uint32 value) {
  set_has_turnin_e();
  turnin_e_ = value;
}

// optional uint32 turnin_eff = 50;
inline bool sModelAction::has_turnin_eff() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void sModelAction::set_has_turnin_eff() {
  _has_bits_[1] |= 0x00020000u;
}
inline void sModelAction::clear_has_turnin_eff() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void sModelAction::clear_turnin_eff() {
  turnin_eff_ = 0u;
  clear_has_turnin_eff();
}
inline ::google::protobuf::uint32 sModelAction::turnin_eff() const {
  return turnin_eff_;
}
inline void sModelAction::set_turnin_eff(::google::protobuf::uint32 value) {
  set_has_turnin_eff();
  turnin_eff_ = value;
}

// optional float turnin_scale = 51;
inline bool sModelAction::has_turnin_scale() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void sModelAction::set_has_turnin_scale() {
  _has_bits_[1] |= 0x00040000u;
}
inline void sModelAction::clear_has_turnin_scale() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void sModelAction::clear_turnin_scale() {
  turnin_scale_ = 0;
  clear_has_turnin_scale();
}
inline float sModelAction::turnin_scale() const {
  return turnin_scale_;
}
inline void sModelAction::set_turnin_scale(float value) {
  set_has_turnin_scale();
  turnin_scale_ = value;
}

// optional uint32 main_s = 52;
inline bool sModelAction::has_main_s() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void sModelAction::set_has_main_s() {
  _has_bits_[1] |= 0x00080000u;
}
inline void sModelAction::clear_has_main_s() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void sModelAction::clear_main_s() {
  main_s_ = 0u;
  clear_has_main_s();
}
inline ::google::protobuf::uint32 sModelAction::main_s() const {
  return main_s_;
}
inline void sModelAction::set_main_s(::google::protobuf::uint32 value) {
  set_has_main_s();
  main_s_ = value;
}

// optional uint32 main_e = 53;
inline bool sModelAction::has_main_e() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void sModelAction::set_has_main_e() {
  _has_bits_[1] |= 0x00100000u;
}
inline void sModelAction::clear_has_main_e() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void sModelAction::clear_main_e() {
  main_e_ = 0u;
  clear_has_main_e();
}
inline ::google::protobuf::uint32 sModelAction::main_e() const {
  return main_e_;
}
inline void sModelAction::set_main_e(::google::protobuf::uint32 value) {
  set_has_main_e();
  main_e_ = value;
}

// optional uint32 main_eff = 54;
inline bool sModelAction::has_main_eff() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void sModelAction::set_has_main_eff() {
  _has_bits_[1] |= 0x00200000u;
}
inline void sModelAction::clear_has_main_eff() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void sModelAction::clear_main_eff() {
  main_eff_ = 0u;
  clear_has_main_eff();
}
inline ::google::protobuf::uint32 sModelAction::main_eff() const {
  return main_eff_;
}
inline void sModelAction::set_main_eff(::google::protobuf::uint32 value) {
  set_has_main_eff();
  main_eff_ = value;
}

// optional uint32 main2_s = 55;
inline bool sModelAction::has_main2_s() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void sModelAction::set_has_main2_s() {
  _has_bits_[1] |= 0x00400000u;
}
inline void sModelAction::clear_has_main2_s() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void sModelAction::clear_main2_s() {
  main2_s_ = 0u;
  clear_has_main2_s();
}
inline ::google::protobuf::uint32 sModelAction::main2_s() const {
  return main2_s_;
}
inline void sModelAction::set_main2_s(::google::protobuf::uint32 value) {
  set_has_main2_s();
  main2_s_ = value;
}

// optional uint32 main2_e = 56;
inline bool sModelAction::has_main2_e() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void sModelAction::set_has_main2_e() {
  _has_bits_[1] |= 0x00800000u;
}
inline void sModelAction::clear_has_main2_e() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void sModelAction::clear_main2_e() {
  main2_e_ = 0u;
  clear_has_main2_e();
}
inline ::google::protobuf::uint32 sModelAction::main2_e() const {
  return main2_e_;
}
inline void sModelAction::set_main2_e(::google::protobuf::uint32 value) {
  set_has_main2_e();
  main2_e_ = value;
}

// optional uint32 main2_eff = 57;
inline bool sModelAction::has_main2_eff() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void sModelAction::set_has_main2_eff() {
  _has_bits_[1] |= 0x01000000u;
}
inline void sModelAction::clear_has_main2_eff() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void sModelAction::clear_main2_eff() {
  main2_eff_ = 0u;
  clear_has_main2_eff();
}
inline ::google::protobuf::uint32 sModelAction::main2_eff() const {
  return main2_eff_;
}
inline void sModelAction::set_main2_eff(::google::protobuf::uint32 value) {
  set_has_main2_eff();
  main2_eff_ = value;
}

// optional float model_scale = 58;
inline bool sModelAction::has_model_scale() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void sModelAction::set_has_model_scale() {
  _has_bits_[1] |= 0x02000000u;
}
inline void sModelAction::clear_has_model_scale() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void sModelAction::clear_model_scale() {
  model_scale_ = 0;
  clear_has_model_scale();
}
inline float sModelAction::model_scale() const {
  return model_scale_;
}
inline void sModelAction::set_model_scale(float value) {
  set_has_model_scale();
  model_scale_ = value;
}

// optional uint32 monster_left_s = 59;
inline bool sModelAction::has_monster_left_s() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void sModelAction::set_has_monster_left_s() {
  _has_bits_[1] |= 0x04000000u;
}
inline void sModelAction::clear_has_monster_left_s() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void sModelAction::clear_monster_left_s() {
  monster_left_s_ = 0u;
  clear_has_monster_left_s();
}
inline ::google::protobuf::uint32 sModelAction::monster_left_s() const {
  return monster_left_s_;
}
inline void sModelAction::set_monster_left_s(::google::protobuf::uint32 value) {
  set_has_monster_left_s();
  monster_left_s_ = value;
}

// optional uint32 monster_left_e = 60;
inline bool sModelAction::has_monster_left_e() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void sModelAction::set_has_monster_left_e() {
  _has_bits_[1] |= 0x08000000u;
}
inline void sModelAction::clear_has_monster_left_e() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void sModelAction::clear_monster_left_e() {
  monster_left_e_ = 0u;
  clear_has_monster_left_e();
}
inline ::google::protobuf::uint32 sModelAction::monster_left_e() const {
  return monster_left_e_;
}
inline void sModelAction::set_monster_left_e(::google::protobuf::uint32 value) {
  set_has_monster_left_e();
  monster_left_e_ = value;
}

// optional uint32 monster_right_s = 61;
inline bool sModelAction::has_monster_right_s() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void sModelAction::set_has_monster_right_s() {
  _has_bits_[1] |= 0x10000000u;
}
inline void sModelAction::clear_has_monster_right_s() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void sModelAction::clear_monster_right_s() {
  monster_right_s_ = 0u;
  clear_has_monster_right_s();
}
inline ::google::protobuf::uint32 sModelAction::monster_right_s() const {
  return monster_right_s_;
}
inline void sModelAction::set_monster_right_s(::google::protobuf::uint32 value) {
  set_has_monster_right_s();
  monster_right_s_ = value;
}

// optional uint32 monster_right_e = 62;
inline bool sModelAction::has_monster_right_e() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void sModelAction::set_has_monster_right_e() {
  _has_bits_[1] |= 0x20000000u;
}
inline void sModelAction::clear_has_monster_right_e() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void sModelAction::clear_monster_right_e() {
  monster_right_e_ = 0u;
  clear_has_monster_right_e();
}
inline ::google::protobuf::uint32 sModelAction::monster_right_e() const {
  return monster_right_e_;
}
inline void sModelAction::set_monster_right_e(::google::protobuf::uint32 value) {
  set_has_monster_right_e();
  monster_right_e_ = value;
}

// optional uint32 boss_turnin_s = 63;
inline bool sModelAction::has_boss_turnin_s() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void sModelAction::set_has_boss_turnin_s() {
  _has_bits_[1] |= 0x40000000u;
}
inline void sModelAction::clear_has_boss_turnin_s() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void sModelAction::clear_boss_turnin_s() {
  boss_turnin_s_ = 0u;
  clear_has_boss_turnin_s();
}
inline ::google::protobuf::uint32 sModelAction::boss_turnin_s() const {
  return boss_turnin_s_;
}
inline void sModelAction::set_boss_turnin_s(::google::protobuf::uint32 value) {
  set_has_boss_turnin_s();
  boss_turnin_s_ = value;
}

// optional uint32 boss_turnin_e = 64;
inline bool sModelAction::has_boss_turnin_e() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void sModelAction::set_has_boss_turnin_e() {
  _has_bits_[1] |= 0x80000000u;
}
inline void sModelAction::clear_has_boss_turnin_e() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void sModelAction::clear_boss_turnin_e() {
  boss_turnin_e_ = 0u;
  clear_has_boss_turnin_e();
}
inline ::google::protobuf::uint32 sModelAction::boss_turnin_e() const {
  return boss_turnin_e_;
}
inline void sModelAction::set_boss_turnin_e(::google::protobuf::uint32 value) {
  set_has_boss_turnin_e();
  boss_turnin_e_ = value;
}

// optional uint32 monster_skill1_s = 65;
inline bool sModelAction::has_monster_skill1_s() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void sModelAction::set_has_monster_skill1_s() {
  _has_bits_[2] |= 0x00000001u;
}
inline void sModelAction::clear_has_monster_skill1_s() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void sModelAction::clear_monster_skill1_s() {
  monster_skill1_s_ = 0u;
  clear_has_monster_skill1_s();
}
inline ::google::protobuf::uint32 sModelAction::monster_skill1_s() const {
  return monster_skill1_s_;
}
inline void sModelAction::set_monster_skill1_s(::google::protobuf::uint32 value) {
  set_has_monster_skill1_s();
  monster_skill1_s_ = value;
}

// optional uint32 monster_skill1_e = 66;
inline bool sModelAction::has_monster_skill1_e() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void sModelAction::set_has_monster_skill1_e() {
  _has_bits_[2] |= 0x00000002u;
}
inline void sModelAction::clear_has_monster_skill1_e() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void sModelAction::clear_monster_skill1_e() {
  monster_skill1_e_ = 0u;
  clear_has_monster_skill1_e();
}
inline ::google::protobuf::uint32 sModelAction::monster_skill1_e() const {
  return monster_skill1_e_;
}
inline void sModelAction::set_monster_skill1_e(::google::protobuf::uint32 value) {
  set_has_monster_skill1_e();
  monster_skill1_e_ = value;
}

// optional uint32 monster_skill2_s = 67;
inline bool sModelAction::has_monster_skill2_s() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void sModelAction::set_has_monster_skill2_s() {
  _has_bits_[2] |= 0x00000004u;
}
inline void sModelAction::clear_has_monster_skill2_s() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void sModelAction::clear_monster_skill2_s() {
  monster_skill2_s_ = 0u;
  clear_has_monster_skill2_s();
}
inline ::google::protobuf::uint32 sModelAction::monster_skill2_s() const {
  return monster_skill2_s_;
}
inline void sModelAction::set_monster_skill2_s(::google::protobuf::uint32 value) {
  set_has_monster_skill2_s();
  monster_skill2_s_ = value;
}

// optional uint32 monster_skill2_e = 68;
inline bool sModelAction::has_monster_skill2_e() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void sModelAction::set_has_monster_skill2_e() {
  _has_bits_[2] |= 0x00000008u;
}
inline void sModelAction::clear_has_monster_skill2_e() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void sModelAction::clear_monster_skill2_e() {
  monster_skill2_e_ = 0u;
  clear_has_monster_skill2_e();
}
inline ::google::protobuf::uint32 sModelAction::monster_skill2_e() const {
  return monster_skill2_e_;
}
inline void sModelAction::set_monster_skill2_e(::google::protobuf::uint32 value) {
  set_has_monster_skill2_e();
  monster_skill2_e_ = value;
}

// optional uint32 monster_skill3_s = 69;
inline bool sModelAction::has_monster_skill3_s() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void sModelAction::set_has_monster_skill3_s() {
  _has_bits_[2] |= 0x00000010u;
}
inline void sModelAction::clear_has_monster_skill3_s() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void sModelAction::clear_monster_skill3_s() {
  monster_skill3_s_ = 0u;
  clear_has_monster_skill3_s();
}
inline ::google::protobuf::uint32 sModelAction::monster_skill3_s() const {
  return monster_skill3_s_;
}
inline void sModelAction::set_monster_skill3_s(::google::protobuf::uint32 value) {
  set_has_monster_skill3_s();
  monster_skill3_s_ = value;
}

// optional uint32 monster_skill3_e = 70;
inline bool sModelAction::has_monster_skill3_e() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void sModelAction::set_has_monster_skill3_e() {
  _has_bits_[2] |= 0x00000020u;
}
inline void sModelAction::clear_has_monster_skill3_e() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void sModelAction::clear_monster_skill3_e() {
  monster_skill3_e_ = 0u;
  clear_has_monster_skill3_e();
}
inline ::google::protobuf::uint32 sModelAction::monster_skill3_e() const {
  return monster_skill3_e_;
}
inline void sModelAction::set_monster_skill3_e(::google::protobuf::uint32 value) {
  set_has_monster_skill3_e();
  monster_skill3_e_ = value;
}

// optional uint32 monster_skill4_s = 96;
inline bool sModelAction::has_monster_skill4_s() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void sModelAction::set_has_monster_skill4_s() {
  _has_bits_[2] |= 0x00000040u;
}
inline void sModelAction::clear_has_monster_skill4_s() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void sModelAction::clear_monster_skill4_s() {
  monster_skill4_s_ = 0u;
  clear_has_monster_skill4_s();
}
inline ::google::protobuf::uint32 sModelAction::monster_skill4_s() const {
  return monster_skill4_s_;
}
inline void sModelAction::set_monster_skill4_s(::google::protobuf::uint32 value) {
  set_has_monster_skill4_s();
  monster_skill4_s_ = value;
}

// optional uint32 monster_skill4_e = 97;
inline bool sModelAction::has_monster_skill4_e() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void sModelAction::set_has_monster_skill4_e() {
  _has_bits_[2] |= 0x00000080u;
}
inline void sModelAction::clear_has_monster_skill4_e() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void sModelAction::clear_monster_skill4_e() {
  monster_skill4_e_ = 0u;
  clear_has_monster_skill4_e();
}
inline ::google::protobuf::uint32 sModelAction::monster_skill4_e() const {
  return monster_skill4_e_;
}
inline void sModelAction::set_monster_skill4_e(::google::protobuf::uint32 value) {
  set_has_monster_skill4_e();
  monster_skill4_e_ = value;
}

// optional uint32 actor_eff = 71;
inline bool sModelAction::has_actor_eff() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void sModelAction::set_has_actor_eff() {
  _has_bits_[2] |= 0x00000100u;
}
inline void sModelAction::clear_has_actor_eff() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void sModelAction::clear_actor_eff() {
  actor_eff_ = 0u;
  clear_has_actor_eff();
}
inline ::google::protobuf::uint32 sModelAction::actor_eff() const {
  return actor_eff_;
}
inline void sModelAction::set_actor_eff(::google::protobuf::uint32 value) {
  set_has_actor_eff();
  actor_eff_ = value;
}

// optional uint32 levelup_s = 72;
inline bool sModelAction::has_levelup_s() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void sModelAction::set_has_levelup_s() {
  _has_bits_[2] |= 0x00000200u;
}
inline void sModelAction::clear_has_levelup_s() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void sModelAction::clear_levelup_s() {
  levelup_s_ = 0u;
  clear_has_levelup_s();
}
inline ::google::protobuf::uint32 sModelAction::levelup_s() const {
  return levelup_s_;
}
inline void sModelAction::set_levelup_s(::google::protobuf::uint32 value) {
  set_has_levelup_s();
  levelup_s_ = value;
}

// optional uint32 levelup_e = 73;
inline bool sModelAction::has_levelup_e() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void sModelAction::set_has_levelup_e() {
  _has_bits_[2] |= 0x00000400u;
}
inline void sModelAction::clear_has_levelup_e() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void sModelAction::clear_levelup_e() {
  levelup_e_ = 0u;
  clear_has_levelup_e();
}
inline ::google::protobuf::uint32 sModelAction::levelup_e() const {
  return levelup_e_;
}
inline void sModelAction::set_levelup_e(::google::protobuf::uint32 value) {
  set_has_levelup_e();
  levelup_e_ = value;
}

// optional uint32 levelup_eff = 74;
inline bool sModelAction::has_levelup_eff() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void sModelAction::set_has_levelup_eff() {
  _has_bits_[2] |= 0x00000800u;
}
inline void sModelAction::clear_has_levelup_eff() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void sModelAction::clear_levelup_eff() {
  levelup_eff_ = 0u;
  clear_has_levelup_eff();
}
inline ::google::protobuf::uint32 sModelAction::levelup_eff() const {
  return levelup_eff_;
}
inline void sModelAction::set_levelup_eff(::google::protobuf::uint32 value) {
  set_has_levelup_eff();
  levelup_eff_ = value;
}

// optional uint32 ahold_s = 75;
inline bool sModelAction::has_ahold_s() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void sModelAction::set_has_ahold_s() {
  _has_bits_[2] |= 0x00001000u;
}
inline void sModelAction::clear_has_ahold_s() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void sModelAction::clear_ahold_s() {
  ahold_s_ = 0u;
  clear_has_ahold_s();
}
inline ::google::protobuf::uint32 sModelAction::ahold_s() const {
  return ahold_s_;
}
inline void sModelAction::set_ahold_s(::google::protobuf::uint32 value) {
  set_has_ahold_s();
  ahold_s_ = value;
}

// optional uint32 ahold_e = 76;
inline bool sModelAction::has_ahold_e() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void sModelAction::set_has_ahold_e() {
  _has_bits_[2] |= 0x00002000u;
}
inline void sModelAction::clear_has_ahold_e() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void sModelAction::clear_ahold_e() {
  ahold_e_ = 0u;
  clear_has_ahold_e();
}
inline ::google::protobuf::uint32 sModelAction::ahold_e() const {
  return ahold_e_;
}
inline void sModelAction::set_ahold_e(::google::protobuf::uint32 value) {
  set_has_ahold_e();
  ahold_e_ = value;
}

// optional uint32 ahold_eff = 77;
inline bool sModelAction::has_ahold_eff() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void sModelAction::set_has_ahold_eff() {
  _has_bits_[2] |= 0x00004000u;
}
inline void sModelAction::clear_has_ahold_eff() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void sModelAction::clear_ahold_eff() {
  ahold_eff_ = 0u;
  clear_has_ahold_eff();
}
inline ::google::protobuf::uint32 sModelAction::ahold_eff() const {
  return ahold_eff_;
}
inline void sModelAction::set_ahold_eff(::google::protobuf::uint32 value) {
  set_has_ahold_eff();
  ahold_eff_ = value;
}

// optional uint32 amoveleft_s = 78;
inline bool sModelAction::has_amoveleft_s() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void sModelAction::set_has_amoveleft_s() {
  _has_bits_[2] |= 0x00008000u;
}
inline void sModelAction::clear_has_amoveleft_s() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void sModelAction::clear_amoveleft_s() {
  amoveleft_s_ = 0u;
  clear_has_amoveleft_s();
}
inline ::google::protobuf::uint32 sModelAction::amoveleft_s() const {
  return amoveleft_s_;
}
inline void sModelAction::set_amoveleft_s(::google::protobuf::uint32 value) {
  set_has_amoveleft_s();
  amoveleft_s_ = value;
}

// optional uint32 amoveleft_e = 79;
inline bool sModelAction::has_amoveleft_e() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void sModelAction::set_has_amoveleft_e() {
  _has_bits_[2] |= 0x00010000u;
}
inline void sModelAction::clear_has_amoveleft_e() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void sModelAction::clear_amoveleft_e() {
  amoveleft_e_ = 0u;
  clear_has_amoveleft_e();
}
inline ::google::protobuf::uint32 sModelAction::amoveleft_e() const {
  return amoveleft_e_;
}
inline void sModelAction::set_amoveleft_e(::google::protobuf::uint32 value) {
  set_has_amoveleft_e();
  amoveleft_e_ = value;
}

// optional uint32 amoveleft_eff = 80;
inline bool sModelAction::has_amoveleft_eff() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void sModelAction::set_has_amoveleft_eff() {
  _has_bits_[2] |= 0x00020000u;
}
inline void sModelAction::clear_has_amoveleft_eff() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void sModelAction::clear_amoveleft_eff() {
  amoveleft_eff_ = 0u;
  clear_has_amoveleft_eff();
}
inline ::google::protobuf::uint32 sModelAction::amoveleft_eff() const {
  return amoveleft_eff_;
}
inline void sModelAction::set_amoveleft_eff(::google::protobuf::uint32 value) {
  set_has_amoveleft_eff();
  amoveleft_eff_ = value;
}

// optional uint32 amoveleftstop_s = 81;
inline bool sModelAction::has_amoveleftstop_s() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void sModelAction::set_has_amoveleftstop_s() {
  _has_bits_[2] |= 0x00040000u;
}
inline void sModelAction::clear_has_amoveleftstop_s() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void sModelAction::clear_amoveleftstop_s() {
  amoveleftstop_s_ = 0u;
  clear_has_amoveleftstop_s();
}
inline ::google::protobuf::uint32 sModelAction::amoveleftstop_s() const {
  return amoveleftstop_s_;
}
inline void sModelAction::set_amoveleftstop_s(::google::protobuf::uint32 value) {
  set_has_amoveleftstop_s();
  amoveleftstop_s_ = value;
}

// optional uint32 amoveleftstop_e = 82;
inline bool sModelAction::has_amoveleftstop_e() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void sModelAction::set_has_amoveleftstop_e() {
  _has_bits_[2] |= 0x00080000u;
}
inline void sModelAction::clear_has_amoveleftstop_e() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void sModelAction::clear_amoveleftstop_e() {
  amoveleftstop_e_ = 0u;
  clear_has_amoveleftstop_e();
}
inline ::google::protobuf::uint32 sModelAction::amoveleftstop_e() const {
  return amoveleftstop_e_;
}
inline void sModelAction::set_amoveleftstop_e(::google::protobuf::uint32 value) {
  set_has_amoveleftstop_e();
  amoveleftstop_e_ = value;
}

// optional uint32 amoveleftstop_eff = 83;
inline bool sModelAction::has_amoveleftstop_eff() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void sModelAction::set_has_amoveleftstop_eff() {
  _has_bits_[2] |= 0x00100000u;
}
inline void sModelAction::clear_has_amoveleftstop_eff() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void sModelAction::clear_amoveleftstop_eff() {
  amoveleftstop_eff_ = 0u;
  clear_has_amoveleftstop_eff();
}
inline ::google::protobuf::uint32 sModelAction::amoveleftstop_eff() const {
  return amoveleftstop_eff_;
}
inline void sModelAction::set_amoveleftstop_eff(::google::protobuf::uint32 value) {
  set_has_amoveleftstop_eff();
  amoveleftstop_eff_ = value;
}

// optional uint32 amoveleftturn_s = 84;
inline bool sModelAction::has_amoveleftturn_s() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void sModelAction::set_has_amoveleftturn_s() {
  _has_bits_[2] |= 0x00200000u;
}
inline void sModelAction::clear_has_amoveleftturn_s() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void sModelAction::clear_amoveleftturn_s() {
  amoveleftturn_s_ = 0u;
  clear_has_amoveleftturn_s();
}
inline ::google::protobuf::uint32 sModelAction::amoveleftturn_s() const {
  return amoveleftturn_s_;
}
inline void sModelAction::set_amoveleftturn_s(::google::protobuf::uint32 value) {
  set_has_amoveleftturn_s();
  amoveleftturn_s_ = value;
}

// optional uint32 amoveleftturn_e = 85;
inline bool sModelAction::has_amoveleftturn_e() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void sModelAction::set_has_amoveleftturn_e() {
  _has_bits_[2] |= 0x00400000u;
}
inline void sModelAction::clear_has_amoveleftturn_e() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void sModelAction::clear_amoveleftturn_e() {
  amoveleftturn_e_ = 0u;
  clear_has_amoveleftturn_e();
}
inline ::google::protobuf::uint32 sModelAction::amoveleftturn_e() const {
  return amoveleftturn_e_;
}
inline void sModelAction::set_amoveleftturn_e(::google::protobuf::uint32 value) {
  set_has_amoveleftturn_e();
  amoveleftturn_e_ = value;
}

// optional uint32 amoveleftturn_eff = 86;
inline bool sModelAction::has_amoveleftturn_eff() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void sModelAction::set_has_amoveleftturn_eff() {
  _has_bits_[2] |= 0x00800000u;
}
inline void sModelAction::clear_has_amoveleftturn_eff() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void sModelAction::clear_amoveleftturn_eff() {
  amoveleftturn_eff_ = 0u;
  clear_has_amoveleftturn_eff();
}
inline ::google::protobuf::uint32 sModelAction::amoveleftturn_eff() const {
  return amoveleftturn_eff_;
}
inline void sModelAction::set_amoveleftturn_eff(::google::protobuf::uint32 value) {
  set_has_amoveleftturn_eff();
  amoveleftturn_eff_ = value;
}

// optional uint32 amoveright_s = 87;
inline bool sModelAction::has_amoveright_s() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void sModelAction::set_has_amoveright_s() {
  _has_bits_[2] |= 0x01000000u;
}
inline void sModelAction::clear_has_amoveright_s() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void sModelAction::clear_amoveright_s() {
  amoveright_s_ = 0u;
  clear_has_amoveright_s();
}
inline ::google::protobuf::uint32 sModelAction::amoveright_s() const {
  return amoveright_s_;
}
inline void sModelAction::set_amoveright_s(::google::protobuf::uint32 value) {
  set_has_amoveright_s();
  amoveright_s_ = value;
}

// optional uint32 amoveright_e = 88;
inline bool sModelAction::has_amoveright_e() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void sModelAction::set_has_amoveright_e() {
  _has_bits_[2] |= 0x02000000u;
}
inline void sModelAction::clear_has_amoveright_e() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void sModelAction::clear_amoveright_e() {
  amoveright_e_ = 0u;
  clear_has_amoveright_e();
}
inline ::google::protobuf::uint32 sModelAction::amoveright_e() const {
  return amoveright_e_;
}
inline void sModelAction::set_amoveright_e(::google::protobuf::uint32 value) {
  set_has_amoveright_e();
  amoveright_e_ = value;
}

// optional uint32 amoveright_eff = 89;
inline bool sModelAction::has_amoveright_eff() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void sModelAction::set_has_amoveright_eff() {
  _has_bits_[2] |= 0x04000000u;
}
inline void sModelAction::clear_has_amoveright_eff() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void sModelAction::clear_amoveright_eff() {
  amoveright_eff_ = 0u;
  clear_has_amoveright_eff();
}
inline ::google::protobuf::uint32 sModelAction::amoveright_eff() const {
  return amoveright_eff_;
}
inline void sModelAction::set_amoveright_eff(::google::protobuf::uint32 value) {
  set_has_amoveright_eff();
  amoveright_eff_ = value;
}

// optional uint32 amoverightstop_s = 90;
inline bool sModelAction::has_amoverightstop_s() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void sModelAction::set_has_amoverightstop_s() {
  _has_bits_[2] |= 0x08000000u;
}
inline void sModelAction::clear_has_amoverightstop_s() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void sModelAction::clear_amoverightstop_s() {
  amoverightstop_s_ = 0u;
  clear_has_amoverightstop_s();
}
inline ::google::protobuf::uint32 sModelAction::amoverightstop_s() const {
  return amoverightstop_s_;
}
inline void sModelAction::set_amoverightstop_s(::google::protobuf::uint32 value) {
  set_has_amoverightstop_s();
  amoverightstop_s_ = value;
}

// optional uint32 amoverightstop_e = 91;
inline bool sModelAction::has_amoverightstop_e() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void sModelAction::set_has_amoverightstop_e() {
  _has_bits_[2] |= 0x10000000u;
}
inline void sModelAction::clear_has_amoverightstop_e() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void sModelAction::clear_amoverightstop_e() {
  amoverightstop_e_ = 0u;
  clear_has_amoverightstop_e();
}
inline ::google::protobuf::uint32 sModelAction::amoverightstop_e() const {
  return amoverightstop_e_;
}
inline void sModelAction::set_amoverightstop_e(::google::protobuf::uint32 value) {
  set_has_amoverightstop_e();
  amoverightstop_e_ = value;
}

// optional uint32 amoverightstop_eff = 92;
inline bool sModelAction::has_amoverightstop_eff() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void sModelAction::set_has_amoverightstop_eff() {
  _has_bits_[2] |= 0x20000000u;
}
inline void sModelAction::clear_has_amoverightstop_eff() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void sModelAction::clear_amoverightstop_eff() {
  amoverightstop_eff_ = 0u;
  clear_has_amoverightstop_eff();
}
inline ::google::protobuf::uint32 sModelAction::amoverightstop_eff() const {
  return amoverightstop_eff_;
}
inline void sModelAction::set_amoverightstop_eff(::google::protobuf::uint32 value) {
  set_has_amoverightstop_eff();
  amoverightstop_eff_ = value;
}

// optional uint32 amoverightturn_s = 93;
inline bool sModelAction::has_amoverightturn_s() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void sModelAction::set_has_amoverightturn_s() {
  _has_bits_[2] |= 0x40000000u;
}
inline void sModelAction::clear_has_amoverightturn_s() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void sModelAction::clear_amoverightturn_s() {
  amoverightturn_s_ = 0u;
  clear_has_amoverightturn_s();
}
inline ::google::protobuf::uint32 sModelAction::amoverightturn_s() const {
  return amoverightturn_s_;
}
inline void sModelAction::set_amoverightturn_s(::google::protobuf::uint32 value) {
  set_has_amoverightturn_s();
  amoverightturn_s_ = value;
}

// optional uint32 amoverightturn_e = 94;
inline bool sModelAction::has_amoverightturn_e() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void sModelAction::set_has_amoverightturn_e() {
  _has_bits_[2] |= 0x80000000u;
}
inline void sModelAction::clear_has_amoverightturn_e() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void sModelAction::clear_amoverightturn_e() {
  amoverightturn_e_ = 0u;
  clear_has_amoverightturn_e();
}
inline ::google::protobuf::uint32 sModelAction::amoverightturn_e() const {
  return amoverightturn_e_;
}
inline void sModelAction::set_amoverightturn_e(::google::protobuf::uint32 value) {
  set_has_amoverightturn_e();
  amoverightturn_e_ = value;
}

// optional uint32 amoverightturn_eff = 95;
inline bool sModelAction::has_amoverightturn_eff() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void sModelAction::set_has_amoverightturn_eff() {
  _has_bits_[3] |= 0x00000001u;
}
inline void sModelAction::clear_has_amoverightturn_eff() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void sModelAction::clear_amoverightturn_eff() {
  amoverightturn_eff_ = 0u;
  clear_has_amoverightturn_eff();
}
inline ::google::protobuf::uint32 sModelAction::amoverightturn_eff() const {
  return amoverightturn_eff_;
}
inline void sModelAction::set_amoverightturn_eff(::google::protobuf::uint32 value) {
  set_has_amoverightturn_eff();
  amoverightturn_eff_ = value;
}

// optional uint32 turnout_s = 98;
inline bool sModelAction::has_turnout_s() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void sModelAction::set_has_turnout_s() {
  _has_bits_[3] |= 0x00000002u;
}
inline void sModelAction::clear_has_turnout_s() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void sModelAction::clear_turnout_s() {
  turnout_s_ = 0u;
  clear_has_turnout_s();
}
inline ::google::protobuf::uint32 sModelAction::turnout_s() const {
  return turnout_s_;
}
inline void sModelAction::set_turnout_s(::google::protobuf::uint32 value) {
  set_has_turnout_s();
  turnout_s_ = value;
}

// optional uint32 turnout_e = 99;
inline bool sModelAction::has_turnout_e() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline void sModelAction::set_has_turnout_e() {
  _has_bits_[3] |= 0x00000004u;
}
inline void sModelAction::clear_has_turnout_e() {
  _has_bits_[3] &= ~0x00000004u;
}
inline void sModelAction::clear_turnout_e() {
  turnout_e_ = 0u;
  clear_has_turnout_e();
}
inline ::google::protobuf::uint32 sModelAction::turnout_e() const {
  return turnout_e_;
}
inline void sModelAction::set_turnout_e(::google::protobuf::uint32 value) {
  set_has_turnout_e();
  turnout_e_ = value;
}

// optional uint32 turnout_eff = 100;
inline bool sModelAction::has_turnout_eff() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
inline void sModelAction::set_has_turnout_eff() {
  _has_bits_[3] |= 0x00000008u;
}
inline void sModelAction::clear_has_turnout_eff() {
  _has_bits_[3] &= ~0x00000008u;
}
inline void sModelAction::clear_turnout_eff() {
  turnout_eff_ = 0u;
  clear_has_turnout_eff();
}
inline ::google::protobuf::uint32 sModelAction::turnout_eff() const {
  return turnout_eff_;
}
inline void sModelAction::set_turnout_eff(::google::protobuf::uint32 value) {
  set_has_turnout_eff();
  turnout_eff_ = value;
}

// optional float turnout_scale = 101;
inline bool sModelAction::has_turnout_scale() const {
  return (_has_bits_[3] & 0x00000010u) != 0;
}
inline void sModelAction::set_has_turnout_scale() {
  _has_bits_[3] |= 0x00000010u;
}
inline void sModelAction::clear_has_turnout_scale() {
  _has_bits_[3] &= ~0x00000010u;
}
inline void sModelAction::clear_turnout_scale() {
  turnout_scale_ = 0;
  clear_has_turnout_scale();
}
inline float sModelAction::turnout_scale() const {
  return turnout_scale_;
}
inline void sModelAction::set_turnout_scale(float value) {
  set_has_turnout_scale();
  turnout_scale_ = value;
}

// optional float turnout_delay = 102;
inline bool sModelAction::has_turnout_delay() const {
  return (_has_bits_[3] & 0x00000020u) != 0;
}
inline void sModelAction::set_has_turnout_delay() {
  _has_bits_[3] |= 0x00000020u;
}
inline void sModelAction::clear_has_turnout_delay() {
  _has_bits_[3] &= ~0x00000020u;
}
inline void sModelAction::clear_turnout_delay() {
  turnout_delay_ = 0;
  clear_has_turnout_delay();
}
inline float sModelAction::turnout_delay() const {
  return turnout_delay_;
}
inline void sModelAction::set_turnout_delay(float value) {
  set_has_turnout_delay();
  turnout_delay_ = value;
}

// optional uint32 attack2_s = 103;
inline bool sModelAction::has_attack2_s() const {
  return (_has_bits_[3] & 0x00000040u) != 0;
}
inline void sModelAction::set_has_attack2_s() {
  _has_bits_[3] |= 0x00000040u;
}
inline void sModelAction::clear_has_attack2_s() {
  _has_bits_[3] &= ~0x00000040u;
}
inline void sModelAction::clear_attack2_s() {
  attack2_s_ = 0u;
  clear_has_attack2_s();
}
inline ::google::protobuf::uint32 sModelAction::attack2_s() const {
  return attack2_s_;
}
inline void sModelAction::set_attack2_s(::google::protobuf::uint32 value) {
  set_has_attack2_s();
  attack2_s_ = value;
}

// optional uint32 attack2_e = 104;
inline bool sModelAction::has_attack2_e() const {
  return (_has_bits_[3] & 0x00000080u) != 0;
}
inline void sModelAction::set_has_attack2_e() {
  _has_bits_[3] |= 0x00000080u;
}
inline void sModelAction::clear_has_attack2_e() {
  _has_bits_[3] &= ~0x00000080u;
}
inline void sModelAction::clear_attack2_e() {
  attack2_e_ = 0u;
  clear_has_attack2_e();
}
inline ::google::protobuf::uint32 sModelAction::attack2_e() const {
  return attack2_e_;
}
inline void sModelAction::set_attack2_e(::google::protobuf::uint32 value) {
  set_has_attack2_e();
  attack2_e_ = value;
}

// optional uint32 victory_s = 105;
inline bool sModelAction::has_victory_s() const {
  return (_has_bits_[3] & 0x00000100u) != 0;
}
inline void sModelAction::set_has_victory_s() {
  _has_bits_[3] |= 0x00000100u;
}
inline void sModelAction::clear_has_victory_s() {
  _has_bits_[3] &= ~0x00000100u;
}
inline void sModelAction::clear_victory_s() {
  victory_s_ = 0u;
  clear_has_victory_s();
}
inline ::google::protobuf::uint32 sModelAction::victory_s() const {
  return victory_s_;
}
inline void sModelAction::set_victory_s(::google::protobuf::uint32 value) {
  set_has_victory_s();
  victory_s_ = value;
}

// optional uint32 victory_e = 106;
inline bool sModelAction::has_victory_e() const {
  return (_has_bits_[3] & 0x00000200u) != 0;
}
inline void sModelAction::set_has_victory_e() {
  _has_bits_[3] |= 0x00000200u;
}
inline void sModelAction::clear_has_victory_e() {
  _has_bits_[3] &= ~0x00000200u;
}
inline void sModelAction::clear_victory_e() {
  victory_e_ = 0u;
  clear_has_victory_e();
}
inline ::google::protobuf::uint32 sModelAction::victory_e() const {
  return victory_e_;
}
inline void sModelAction::set_victory_e(::google::protobuf::uint32 value) {
  set_has_victory_e();
  victory_e_ = value;
}

// optional uint32 victory2_s = 107;
inline bool sModelAction::has_victory2_s() const {
  return (_has_bits_[3] & 0x00000400u) != 0;
}
inline void sModelAction::set_has_victory2_s() {
  _has_bits_[3] |= 0x00000400u;
}
inline void sModelAction::clear_has_victory2_s() {
  _has_bits_[3] &= ~0x00000400u;
}
inline void sModelAction::clear_victory2_s() {
  victory2_s_ = 0u;
  clear_has_victory2_s();
}
inline ::google::protobuf::uint32 sModelAction::victory2_s() const {
  return victory2_s_;
}
inline void sModelAction::set_victory2_s(::google::protobuf::uint32 value) {
  set_has_victory2_s();
  victory2_s_ = value;
}

// optional uint32 victory2_e = 108;
inline bool sModelAction::has_victory2_e() const {
  return (_has_bits_[3] & 0x00000800u) != 0;
}
inline void sModelAction::set_has_victory2_e() {
  _has_bits_[3] |= 0x00000800u;
}
inline void sModelAction::clear_has_victory2_e() {
  _has_bits_[3] &= ~0x00000800u;
}
inline void sModelAction::clear_victory2_e() {
  victory2_e_ = 0u;
  clear_has_victory2_e();
}
inline ::google::protobuf::uint32 sModelAction::victory2_e() const {
  return victory2_e_;
}
inline void sModelAction::set_victory2_e(::google::protobuf::uint32 value) {
  set_has_victory2_e();
  victory2_e_ = value;
}

// optional float victory_scale = 109;
inline bool sModelAction::has_victory_scale() const {
  return (_has_bits_[3] & 0x00001000u) != 0;
}
inline void sModelAction::set_has_victory_scale() {
  _has_bits_[3] |= 0x00001000u;
}
inline void sModelAction::clear_has_victory_scale() {
  _has_bits_[3] &= ~0x00001000u;
}
inline void sModelAction::clear_victory_scale() {
  victory_scale_ = 0;
  clear_has_victory_scale();
}
inline float sModelAction::victory_scale() const {
  return victory_scale_;
}
inline void sModelAction::set_victory_scale(float value) {
  set_has_victory_scale();
  victory_scale_ = value;
}

// -------------------------------------------------------------------

// sStageLine

// optional uint32 stageid = 1;
inline bool sStageLine::has_stageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sStageLine::set_has_stageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sStageLine::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sStageLine::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 sStageLine::stageid() const {
  return stageid_;
}
inline void sStageLine::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
}

// optional float posx = 2;
inline bool sStageLine::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sStageLine::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sStageLine::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sStageLine::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline float sStageLine::posx() const {
  return posx_;
}
inline void sStageLine::set_posx(float value) {
  set_has_posx();
  posx_ = value;
}

// optional float posy = 3;
inline bool sStageLine::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sStageLine::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sStageLine::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sStageLine::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline float sStageLine::posy() const {
  return posy_;
}
inline void sStageLine::set_posy(float value) {
  set_has_posy();
  posy_ = value;
}

// optional uint32 flipx = 4;
inline bool sStageLine::has_flipx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sStageLine::set_has_flipx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sStageLine::clear_has_flipx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sStageLine::clear_flipx() {
  flipx_ = 0u;
  clear_has_flipx();
}
inline ::google::protobuf::uint32 sStageLine::flipx() const {
  return flipx_;
}
inline void sStageLine::set_flipx(::google::protobuf::uint32 value) {
  set_has_flipx();
  flipx_ = value;
}

// optional uint32 flipy = 5;
inline bool sStageLine::has_flipy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sStageLine::set_has_flipy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sStageLine::clear_has_flipy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sStageLine::clear_flipy() {
  flipy_ = 0u;
  clear_has_flipy();
}
inline ::google::protobuf::uint32 sStageLine::flipy() const {
  return flipy_;
}
inline void sStageLine::set_flipy(::google::protobuf::uint32 value) {
  set_has_flipy();
  flipy_ = value;
}

// optional float rotate = 6;
inline bool sStageLine::has_rotate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sStageLine::set_has_rotate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sStageLine::clear_has_rotate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sStageLine::clear_rotate() {
  rotate_ = 0;
  clear_has_rotate();
}
inline float sStageLine::rotate() const {
  return rotate_;
}
inline void sStageLine::set_rotate(float value) {
  set_has_rotate();
  rotate_ = value;
}

// -------------------------------------------------------------------

// sStageProp

// optional uint32 stageid = 1;
inline bool sStageProp::has_stageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sStageProp::set_has_stageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sStageProp::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sStageProp::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 sStageProp::stageid() const {
  return stageid_;
}
inline void sStageProp::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
}

// optional uint32 nlocalename = 2;
inline bool sStageProp::has_nlocalename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sStageProp::set_has_nlocalename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sStageProp::clear_has_nlocalename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sStageProp::clear_nlocalename() {
  nlocalename_ = 0u;
  clear_has_nlocalename();
}
inline ::google::protobuf::uint32 sStageProp::nlocalename() const {
  return nlocalename_;
}
inline void sStageProp::set_nlocalename(::google::protobuf::uint32 value) {
  set_has_nlocalename();
  nlocalename_ = value;
}

// optional uint32 propflag = 3;
inline bool sStageProp::has_propflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sStageProp::set_has_propflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sStageProp::clear_has_propflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sStageProp::clear_propflag() {
  propflag_ = 0u;
  clear_has_propflag();
}
inline ::google::protobuf::uint32 sStageProp::propflag() const {
  return propflag_;
}
inline void sStageProp::set_propflag(::google::protobuf::uint32 value) {
  set_has_propflag();
  propflag_ = value;
}

// optional string spic = 4;
inline bool sStageProp::has_spic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sStageProp::set_has_spic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sStageProp::clear_has_spic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sStageProp::clear_spic() {
  if (spic_ != &::google::protobuf::internal::kEmptyString) {
    spic_->clear();
  }
  clear_has_spic();
}
inline const ::std::string& sStageProp::spic() const {
  return *spic_;
}
inline void sStageProp::set_spic(const ::std::string& value) {
  set_has_spic();
  if (spic_ == &::google::protobuf::internal::kEmptyString) {
    spic_ = new ::std::string;
  }
  spic_->assign(value);
}
inline void sStageProp::set_spic(const char* value) {
  set_has_spic();
  if (spic_ == &::google::protobuf::internal::kEmptyString) {
    spic_ = new ::std::string;
  }
  spic_->assign(value);
}
inline void sStageProp::set_spic(const char* value, size_t size) {
  set_has_spic();
  if (spic_ == &::google::protobuf::internal::kEmptyString) {
    spic_ = new ::std::string;
  }
  spic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sStageProp::mutable_spic() {
  set_has_spic();
  if (spic_ == &::google::protobuf::internal::kEmptyString) {
    spic_ = new ::std::string;
  }
  return spic_;
}
inline ::std::string* sStageProp::release_spic() {
  clear_has_spic();
  if (spic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = spic_;
    spic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sStageProp::set_allocated_spic(::std::string* spic) {
  if (spic_ != &::google::protobuf::internal::kEmptyString) {
    delete spic_;
  }
  if (spic) {
    set_has_spic();
    spic_ = spic;
  } else {
    clear_has_spic();
    spic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float posx = 5;
inline bool sStageProp::has_posx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sStageProp::set_has_posx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sStageProp::clear_has_posx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sStageProp::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline float sStageProp::posx() const {
  return posx_;
}
inline void sStageProp::set_posx(float value) {
  set_has_posx();
  posx_ = value;
}

// optional float posy = 6;
inline bool sStageProp::has_posy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sStageProp::set_has_posy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sStageProp::clear_has_posy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sStageProp::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline float sStageProp::posy() const {
  return posy_;
}
inline void sStageProp::set_posy(float value) {
  set_has_posy();
  posy_ = value;
}

// optional .jynetwork.proto.sStageLine line = 7;
inline bool sStageProp::has_line() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sStageProp::set_has_line() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sStageProp::clear_has_line() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sStageProp::clear_line() {
  if (line_ != NULL) line_->::jynetwork::proto::sStageLine::Clear();
  clear_has_line();
}
inline const ::jynetwork::proto::sStageLine& sStageProp::line() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return line_ != NULL ? *line_ : *default_instance().line_;
#else
  return line_ != NULL ? *line_ : *default_instance_->line_;
#endif
}
inline ::jynetwork::proto::sStageLine* sStageProp::mutable_line() {
  set_has_line();
  if (line_ == NULL) line_ = new ::jynetwork::proto::sStageLine;
  return line_;
}
inline ::jynetwork::proto::sStageLine* sStageProp::release_line() {
  clear_has_line();
  ::jynetwork::proto::sStageLine* temp = line_;
  line_ = NULL;
  return temp;
}
inline void sStageProp::set_allocated_line(::jynetwork::proto::sStageLine* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
}

// -------------------------------------------------------------------

// sDebugSpawnBullet

// optional uint32 ntype = 1;
inline bool sDebugSpawnBullet::has_ntype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sDebugSpawnBullet::set_has_ntype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sDebugSpawnBullet::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sDebugSpawnBullet::clear_ntype() {
  ntype_ = 0u;
  clear_has_ntype();
}
inline ::google::protobuf::uint32 sDebugSpawnBullet::ntype() const {
  return ntype_;
}
inline void sDebugSpawnBullet::set_ntype(::google::protobuf::uint32 value) {
  set_has_ntype();
  ntype_ = value;
}

// optional fixed64 bullet = 2;
inline bool sDebugSpawnBullet::has_bullet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sDebugSpawnBullet::set_has_bullet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sDebugSpawnBullet::clear_has_bullet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sDebugSpawnBullet::clear_bullet() {
  bullet_ = GOOGLE_ULONGLONG(0);
  clear_has_bullet();
}
inline ::google::protobuf::uint64 sDebugSpawnBullet::bullet() const {
  return bullet_;
}
inline void sDebugSpawnBullet::set_bullet(::google::protobuf::uint64 value) {
  set_has_bullet();
  bullet_ = value;
}

// optional string func_name = 3;
inline bool sDebugSpawnBullet::has_func_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sDebugSpawnBullet::set_has_func_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sDebugSpawnBullet::clear_has_func_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sDebugSpawnBullet::clear_func_name() {
  if (func_name_ != &::google::protobuf::internal::kEmptyString) {
    func_name_->clear();
  }
  clear_has_func_name();
}
inline const ::std::string& sDebugSpawnBullet::func_name() const {
  return *func_name_;
}
inline void sDebugSpawnBullet::set_func_name(const ::std::string& value) {
  set_has_func_name();
  if (func_name_ == &::google::protobuf::internal::kEmptyString) {
    func_name_ = new ::std::string;
  }
  func_name_->assign(value);
}
inline void sDebugSpawnBullet::set_func_name(const char* value) {
  set_has_func_name();
  if (func_name_ == &::google::protobuf::internal::kEmptyString) {
    func_name_ = new ::std::string;
  }
  func_name_->assign(value);
}
inline void sDebugSpawnBullet::set_func_name(const char* value, size_t size) {
  set_has_func_name();
  if (func_name_ == &::google::protobuf::internal::kEmptyString) {
    func_name_ = new ::std::string;
  }
  func_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sDebugSpawnBullet::mutable_func_name() {
  set_has_func_name();
  if (func_name_ == &::google::protobuf::internal::kEmptyString) {
    func_name_ = new ::std::string;
  }
  return func_name_;
}
inline ::std::string* sDebugSpawnBullet::release_func_name() {
  clear_has_func_name();
  if (func_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = func_name_;
    func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sDebugSpawnBullet::set_allocated_func_name(::std::string* func_name) {
  if (func_name_ != &::google::protobuf::internal::kEmptyString) {
    delete func_name_;
  }
  if (func_name) {
    set_has_func_name();
    func_name_ = func_name;
  } else {
    clear_has_func_name();
    func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float x = 4;
inline bool sDebugSpawnBullet::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sDebugSpawnBullet::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sDebugSpawnBullet::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sDebugSpawnBullet::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float sDebugSpawnBullet::x() const {
  return x_;
}
inline void sDebugSpawnBullet::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 5;
inline bool sDebugSpawnBullet::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sDebugSpawnBullet::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sDebugSpawnBullet::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sDebugSpawnBullet::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float sDebugSpawnBullet::y() const {
  return y_;
}
inline void sDebugSpawnBullet::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// sDebugEraseBullet

// optional fixed64 bullet = 2;
inline bool sDebugEraseBullet::has_bullet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sDebugEraseBullet::set_has_bullet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sDebugEraseBullet::clear_has_bullet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sDebugEraseBullet::clear_bullet() {
  bullet_ = GOOGLE_ULONGLONG(0);
  clear_has_bullet();
}
inline ::google::protobuf::uint64 sDebugEraseBullet::bullet() const {
  return bullet_;
}
inline void sDebugEraseBullet::set_bullet(::google::protobuf::uint64 value) {
  set_has_bullet();
  bullet_ = value;
}

// optional string func_name = 3;
inline bool sDebugEraseBullet::has_func_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sDebugEraseBullet::set_has_func_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sDebugEraseBullet::clear_has_func_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sDebugEraseBullet::clear_func_name() {
  if (func_name_ != &::google::protobuf::internal::kEmptyString) {
    func_name_->clear();
  }
  clear_has_func_name();
}
inline const ::std::string& sDebugEraseBullet::func_name() const {
  return *func_name_;
}
inline void sDebugEraseBullet::set_func_name(const ::std::string& value) {
  set_has_func_name();
  if (func_name_ == &::google::protobuf::internal::kEmptyString) {
    func_name_ = new ::std::string;
  }
  func_name_->assign(value);
}
inline void sDebugEraseBullet::set_func_name(const char* value) {
  set_has_func_name();
  if (func_name_ == &::google::protobuf::internal::kEmptyString) {
    func_name_ = new ::std::string;
  }
  func_name_->assign(value);
}
inline void sDebugEraseBullet::set_func_name(const char* value, size_t size) {
  set_has_func_name();
  if (func_name_ == &::google::protobuf::internal::kEmptyString) {
    func_name_ = new ::std::string;
  }
  func_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sDebugEraseBullet::mutable_func_name() {
  set_has_func_name();
  if (func_name_ == &::google::protobuf::internal::kEmptyString) {
    func_name_ = new ::std::string;
  }
  return func_name_;
}
inline ::std::string* sDebugEraseBullet::release_func_name() {
  clear_has_func_name();
  if (func_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = func_name_;
    func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sDebugEraseBullet::set_allocated_func_name(::std::string* func_name) {
  if (func_name_ != &::google::protobuf::internal::kEmptyString) {
    delete func_name_;
  }
  if (func_name) {
    set_has_func_name();
    func_name_ = func_name;
  } else {
    clear_has_func_name();
    func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float x = 4;
inline bool sDebugEraseBullet::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sDebugEraseBullet::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sDebugEraseBullet::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sDebugEraseBullet::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float sDebugEraseBullet::x() const {
  return x_;
}
inline void sDebugEraseBullet::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 5;
inline bool sDebugEraseBullet::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sDebugEraseBullet::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sDebugEraseBullet::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sDebugEraseBullet::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float sDebugEraseBullet::y() const {
  return y_;
}
inline void sDebugEraseBullet::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// sAISetting

// optional uint32 aid = 1;
inline bool sAISetting::has_aid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sAISetting::set_has_aid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sAISetting::clear_has_aid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sAISetting::clear_aid() {
  aid_ = 0u;
  clear_has_aid();
}
inline ::google::protobuf::uint32 sAISetting::aid() const {
  return aid_;
}
inline void sAISetting::set_aid(::google::protobuf::uint32 value) {
  set_has_aid();
  aid_ = value;
}

// optional uint32 amove = 2;
inline bool sAISetting::has_amove() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sAISetting::set_has_amove() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sAISetting::clear_has_amove() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sAISetting::clear_amove() {
  amove_ = 0u;
  clear_has_amove();
}
inline ::google::protobuf::uint32 sAISetting::amove() const {
  return amove_;
}
inline void sAISetting::set_amove(::google::protobuf::uint32 value) {
  set_has_amove();
  amove_ = value;
}

// optional uint32 attack = 3;
inline bool sAISetting::has_attack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sAISetting::set_has_attack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sAISetting::clear_has_attack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sAISetting::clear_attack() {
  attack_ = 0u;
  clear_has_attack();
}
inline ::google::protobuf::uint32 sAISetting::attack() const {
  return attack_;
}
inline void sAISetting::set_attack(::google::protobuf::uint32 value) {
  set_has_attack();
  attack_ = value;
}

// optional uint32 normal = 4;
inline bool sAISetting::has_normal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sAISetting::set_has_normal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sAISetting::clear_has_normal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sAISetting::clear_normal() {
  normal_ = 0u;
  clear_has_normal();
}
inline ::google::protobuf::uint32 sAISetting::normal() const {
  return normal_;
}
inline void sAISetting::set_normal(::google::protobuf::uint32 value) {
  set_has_normal();
  normal_ = value;
}

// optional uint32 super = 5;
inline bool sAISetting::has_super() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sAISetting::set_has_super() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sAISetting::clear_has_super() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sAISetting::clear_super() {
  super_ = 0u;
  clear_has_super();
}
inline ::google::protobuf::uint32 sAISetting::super() const {
  return super_;
}
inline void sAISetting::set_super(::google::protobuf::uint32 value) {
  set_has_super();
  super_ = value;
}

// repeated uint32 extras = 6;
inline int sAISetting::extras_size() const {
  return extras_.size();
}
inline void sAISetting::clear_extras() {
  extras_.Clear();
}
inline ::google::protobuf::uint32 sAISetting::extras(int index) const {
  return extras_.Get(index);
}
inline void sAISetting::set_extras(int index, ::google::protobuf::uint32 value) {
  extras_.Set(index, value);
}
inline void sAISetting::add_extras(::google::protobuf::uint32 value) {
  extras_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sAISetting::extras() const {
  return extras_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sAISetting::mutable_extras() {
  return &extras_;
}

// -------------------------------------------------------------------

// sActionEff3d

// optional uint32 bind_effect_status = 1;
inline bool sActionEff3d::has_bind_effect_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sActionEff3d::set_has_bind_effect_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sActionEff3d::clear_has_bind_effect_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sActionEff3d::clear_bind_effect_status() {
  bind_effect_status_ = 0u;
  clear_has_bind_effect_status();
}
inline ::google::protobuf::uint32 sActionEff3d::bind_effect_status() const {
  return bind_effect_status_;
}
inline void sActionEff3d::set_bind_effect_status(::google::protobuf::uint32 value) {
  set_has_bind_effect_status();
  bind_effect_status_ = value;
}

// optional string bind_skeleton = 2;
inline bool sActionEff3d::has_bind_skeleton() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sActionEff3d::set_has_bind_skeleton() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sActionEff3d::clear_has_bind_skeleton() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sActionEff3d::clear_bind_skeleton() {
  if (bind_skeleton_ != &::google::protobuf::internal::kEmptyString) {
    bind_skeleton_->clear();
  }
  clear_has_bind_skeleton();
}
inline const ::std::string& sActionEff3d::bind_skeleton() const {
  return *bind_skeleton_;
}
inline void sActionEff3d::set_bind_skeleton(const ::std::string& value) {
  set_has_bind_skeleton();
  if (bind_skeleton_ == &::google::protobuf::internal::kEmptyString) {
    bind_skeleton_ = new ::std::string;
  }
  bind_skeleton_->assign(value);
}
inline void sActionEff3d::set_bind_skeleton(const char* value) {
  set_has_bind_skeleton();
  if (bind_skeleton_ == &::google::protobuf::internal::kEmptyString) {
    bind_skeleton_ = new ::std::string;
  }
  bind_skeleton_->assign(value);
}
inline void sActionEff3d::set_bind_skeleton(const char* value, size_t size) {
  set_has_bind_skeleton();
  if (bind_skeleton_ == &::google::protobuf::internal::kEmptyString) {
    bind_skeleton_ = new ::std::string;
  }
  bind_skeleton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sActionEff3d::mutable_bind_skeleton() {
  set_has_bind_skeleton();
  if (bind_skeleton_ == &::google::protobuf::internal::kEmptyString) {
    bind_skeleton_ = new ::std::string;
  }
  return bind_skeleton_;
}
inline ::std::string* sActionEff3d::release_bind_skeleton() {
  clear_has_bind_skeleton();
  if (bind_skeleton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bind_skeleton_;
    bind_skeleton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sActionEff3d::set_allocated_bind_skeleton(::std::string* bind_skeleton) {
  if (bind_skeleton_ != &::google::protobuf::internal::kEmptyString) {
    delete bind_skeleton_;
  }
  if (bind_skeleton) {
    set_has_bind_skeleton();
    bind_skeleton_ = bind_skeleton;
  } else {
    clear_has_bind_skeleton();
    bind_skeleton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float delay_time = 3;
inline bool sActionEff3d::has_delay_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sActionEff3d::set_has_delay_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sActionEff3d::clear_has_delay_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sActionEff3d::clear_delay_time() {
  delay_time_ = 0;
  clear_has_delay_time();
}
inline float sActionEff3d::delay_time() const {
  return delay_time_;
}
inline void sActionEff3d::set_delay_time(float value) {
  set_has_delay_time();
  delay_time_ = value;
}

// optional float life_time = 4;
inline bool sActionEff3d::has_life_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sActionEff3d::set_has_life_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sActionEff3d::clear_has_life_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sActionEff3d::clear_life_time() {
  life_time_ = 0;
  clear_has_life_time();
}
inline float sActionEff3d::life_time() const {
  return life_time_;
}
inline void sActionEff3d::set_life_time(float value) {
  set_has_life_time();
  life_time_ = value;
}

// optional float effect_status_scale = 5;
inline bool sActionEff3d::has_effect_status_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sActionEff3d::set_has_effect_status_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sActionEff3d::clear_has_effect_status_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sActionEff3d::clear_effect_status_scale() {
  effect_status_scale_ = 0;
  clear_has_effect_status_scale();
}
inline float sActionEff3d::effect_status_scale() const {
  return effect_status_scale_;
}
inline void sActionEff3d::set_effect_status_scale(float value) {
  set_has_effect_status_scale();
  effect_status_scale_ = value;
}

// optional float effect_status_x = 6;
inline bool sActionEff3d::has_effect_status_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sActionEff3d::set_has_effect_status_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sActionEff3d::clear_has_effect_status_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sActionEff3d::clear_effect_status_x() {
  effect_status_x_ = 0;
  clear_has_effect_status_x();
}
inline float sActionEff3d::effect_status_x() const {
  return effect_status_x_;
}
inline void sActionEff3d::set_effect_status_x(float value) {
  set_has_effect_status_x();
  effect_status_x_ = value;
}

// optional float effect_status_y = 7;
inline bool sActionEff3d::has_effect_status_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sActionEff3d::set_has_effect_status_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sActionEff3d::clear_has_effect_status_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sActionEff3d::clear_effect_status_y() {
  effect_status_y_ = 0;
  clear_has_effect_status_y();
}
inline float sActionEff3d::effect_status_y() const {
  return effect_status_y_;
}
inline void sActionEff3d::set_effect_status_y(float value) {
  set_has_effect_status_y();
  effect_status_y_ = value;
}

// optional float effect_status_z = 8;
inline bool sActionEff3d::has_effect_status_z() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sActionEff3d::set_has_effect_status_z() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sActionEff3d::clear_has_effect_status_z() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sActionEff3d::clear_effect_status_z() {
  effect_status_z_ = 0;
  clear_has_effect_status_z();
}
inline float sActionEff3d::effect_status_z() const {
  return effect_status_z_;
}
inline void sActionEff3d::set_effect_status_z(float value) {
  set_has_effect_status_z();
  effect_status_z_ = value;
}

// optional float effect_status_degreex = 9;
inline bool sActionEff3d::has_effect_status_degreex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sActionEff3d::set_has_effect_status_degreex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sActionEff3d::clear_has_effect_status_degreex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sActionEff3d::clear_effect_status_degreex() {
  effect_status_degreex_ = 0;
  clear_has_effect_status_degreex();
}
inline float sActionEff3d::effect_status_degreex() const {
  return effect_status_degreex_;
}
inline void sActionEff3d::set_effect_status_degreex(float value) {
  set_has_effect_status_degreex();
  effect_status_degreex_ = value;
}

// optional float effect_status_degreey = 10;
inline bool sActionEff3d::has_effect_status_degreey() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sActionEff3d::set_has_effect_status_degreey() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sActionEff3d::clear_has_effect_status_degreey() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sActionEff3d::clear_effect_status_degreey() {
  effect_status_degreey_ = 0;
  clear_has_effect_status_degreey();
}
inline float sActionEff3d::effect_status_degreey() const {
  return effect_status_degreey_;
}
inline void sActionEff3d::set_effect_status_degreey(float value) {
  set_has_effect_status_degreey();
  effect_status_degreey_ = value;
}

// optional float effect_status_degreez = 11;
inline bool sActionEff3d::has_effect_status_degreez() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sActionEff3d::set_has_effect_status_degreez() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sActionEff3d::clear_has_effect_status_degreez() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sActionEff3d::clear_effect_status_degreez() {
  effect_status_degreez_ = 0;
  clear_has_effect_status_degreez();
}
inline float sActionEff3d::effect_status_degreez() const {
  return effect_status_degreez_;
}
inline void sActionEff3d::set_effect_status_degreez(float value) {
  set_has_effect_status_degreez();
  effect_status_degreez_ = value;
}

// -------------------------------------------------------------------

// sActionEffect

// optional uint32 groupid = 1;
inline bool sActionEffect::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sActionEffect::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sActionEffect::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sActionEffect::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 sActionEffect::groupid() const {
  return groupid_;
}
inline void sActionEffect::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// repeated uint32 equip_ids = 2;
inline int sActionEffect::equip_ids_size() const {
  return equip_ids_.size();
}
inline void sActionEffect::clear_equip_ids() {
  equip_ids_.Clear();
}
inline ::google::protobuf::uint32 sActionEffect::equip_ids(int index) const {
  return equip_ids_.Get(index);
}
inline void sActionEffect::set_equip_ids(int index, ::google::protobuf::uint32 value) {
  equip_ids_.Set(index, value);
}
inline void sActionEffect::add_equip_ids(::google::protobuf::uint32 value) {
  equip_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sActionEffect::equip_ids() const {
  return equip_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sActionEffect::mutable_equip_ids() {
  return &equip_ids_;
}

// repeated uint32 actor_ids = 3;
inline int sActionEffect::actor_ids_size() const {
  return actor_ids_.size();
}
inline void sActionEffect::clear_actor_ids() {
  actor_ids_.Clear();
}
inline ::google::protobuf::uint32 sActionEffect::actor_ids(int index) const {
  return actor_ids_.Get(index);
}
inline void sActionEffect::set_actor_ids(int index, ::google::protobuf::uint32 value) {
  actor_ids_.Set(index, value);
}
inline void sActionEffect::add_actor_ids(::google::protobuf::uint32 value) {
  actor_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sActionEffect::actor_ids() const {
  return actor_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sActionEffect::mutable_actor_ids() {
  return &actor_ids_;
}

// optional uint32 action_id = 4;
inline bool sActionEffect::has_action_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sActionEffect::set_has_action_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sActionEffect::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sActionEffect::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 sActionEffect::action_id() const {
  return action_id_;
}
inline void sActionEffect::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// repeated .jynetwork.proto.sActionEff3d effs = 6;
inline int sActionEffect::effs_size() const {
  return effs_.size();
}
inline void sActionEffect::clear_effs() {
  effs_.Clear();
}
inline const ::jynetwork::proto::sActionEff3d& sActionEffect::effs(int index) const {
  return effs_.Get(index);
}
inline ::jynetwork::proto::sActionEff3d* sActionEffect::mutable_effs(int index) {
  return effs_.Mutable(index);
}
inline ::jynetwork::proto::sActionEff3d* sActionEffect::add_effs() {
  return effs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActionEff3d >&
sActionEffect::effs() const {
  return effs_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActionEff3d >*
sActionEffect::mutable_effs() {
  return &effs_;
}

// -------------------------------------------------------------------

// sPPLConstant

// optional uint32 elite_energy = 1;
inline bool sPPLConstant::has_elite_energy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPPLConstant::set_has_elite_energy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPPLConstant::clear_has_elite_energy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPPLConstant::clear_elite_energy() {
  elite_energy_ = 0u;
  clear_has_elite_energy();
}
inline ::google::protobuf::uint32 sPPLConstant::elite_energy() const {
  return elite_energy_;
}
inline void sPPLConstant::set_elite_energy(::google::protobuf::uint32 value) {
  set_has_elite_energy();
  elite_energy_ = value;
}

// optional uint32 ball_energy = 2;
inline bool sPPLConstant::has_ball_energy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPPLConstant::set_has_ball_energy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPPLConstant::clear_has_ball_energy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPPLConstant::clear_ball_energy() {
  ball_energy_ = 0u;
  clear_has_ball_energy();
}
inline ::google::protobuf::uint32 sPPLConstant::ball_energy() const {
  return ball_energy_;
}
inline void sPPLConstant::set_ball_energy(::google::protobuf::uint32 value) {
  set_has_ball_energy();
  ball_energy_ = value;
}

// optional uint32 boss_energy = 3;
inline bool sPPLConstant::has_boss_energy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPPLConstant::set_has_boss_energy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPPLConstant::clear_has_boss_energy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPPLConstant::clear_boss_energy() {
  boss_energy_ = 0u;
  clear_has_boss_energy();
}
inline ::google::protobuf::uint32 sPPLConstant::boss_energy() const {
  return boss_energy_;
}
inline void sPPLConstant::set_boss_energy(::google::protobuf::uint32 value) {
  set_has_boss_energy();
  boss_energy_ = value;
}

// optional uint32 lv1_skill_consume = 4;
inline bool sPPLConstant::has_lv1_skill_consume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sPPLConstant::set_has_lv1_skill_consume() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sPPLConstant::clear_has_lv1_skill_consume() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sPPLConstant::clear_lv1_skill_consume() {
  lv1_skill_consume_ = 0u;
  clear_has_lv1_skill_consume();
}
inline ::google::protobuf::uint32 sPPLConstant::lv1_skill_consume() const {
  return lv1_skill_consume_;
}
inline void sPPLConstant::set_lv1_skill_consume(::google::protobuf::uint32 value) {
  set_has_lv1_skill_consume();
  lv1_skill_consume_ = value;
}

// optional uint32 lv2_skill_consume = 5;
inline bool sPPLConstant::has_lv2_skill_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sPPLConstant::set_has_lv2_skill_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sPPLConstant::clear_has_lv2_skill_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sPPLConstant::clear_lv2_skill_consume() {
  lv2_skill_consume_ = 0u;
  clear_has_lv2_skill_consume();
}
inline ::google::protobuf::uint32 sPPLConstant::lv2_skill_consume() const {
  return lv2_skill_consume_;
}
inline void sPPLConstant::set_lv2_skill_consume(::google::protobuf::uint32 value) {
  set_has_lv2_skill_consume();
  lv2_skill_consume_ = value;
}

// optional uint32 lv3_skill_consume = 6;
inline bool sPPLConstant::has_lv3_skill_consume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sPPLConstant::set_has_lv3_skill_consume() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sPPLConstant::clear_has_lv3_skill_consume() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sPPLConstant::clear_lv3_skill_consume() {
  lv3_skill_consume_ = 0u;
  clear_has_lv3_skill_consume();
}
inline ::google::protobuf::uint32 sPPLConstant::lv3_skill_consume() const {
  return lv3_skill_consume_;
}
inline void sPPLConstant::set_lv3_skill_consume(::google::protobuf::uint32 value) {
  set_has_lv3_skill_consume();
  lv3_skill_consume_ = value;
}

// optional uint32 lv1_hp_loss = 7;
inline bool sPPLConstant::has_lv1_hp_loss() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sPPLConstant::set_has_lv1_hp_loss() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sPPLConstant::clear_has_lv1_hp_loss() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sPPLConstant::clear_lv1_hp_loss() {
  lv1_hp_loss_ = 0u;
  clear_has_lv1_hp_loss();
}
inline ::google::protobuf::uint32 sPPLConstant::lv1_hp_loss() const {
  return lv1_hp_loss_;
}
inline void sPPLConstant::set_lv1_hp_loss(::google::protobuf::uint32 value) {
  set_has_lv1_hp_loss();
  lv1_hp_loss_ = value;
}

// optional uint32 lv2_hp_loss = 8;
inline bool sPPLConstant::has_lv2_hp_loss() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sPPLConstant::set_has_lv2_hp_loss() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sPPLConstant::clear_has_lv2_hp_loss() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sPPLConstant::clear_lv2_hp_loss() {
  lv2_hp_loss_ = 0u;
  clear_has_lv2_hp_loss();
}
inline ::google::protobuf::uint32 sPPLConstant::lv2_hp_loss() const {
  return lv2_hp_loss_;
}
inline void sPPLConstant::set_lv2_hp_loss(::google::protobuf::uint32 value) {
  set_has_lv2_hp_loss();
  lv2_hp_loss_ = value;
}

// optional uint32 lv3_hp_loss = 9;
inline bool sPPLConstant::has_lv3_hp_loss() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sPPLConstant::set_has_lv3_hp_loss() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sPPLConstant::clear_has_lv3_hp_loss() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sPPLConstant::clear_lv3_hp_loss() {
  lv3_hp_loss_ = 0u;
  clear_has_lv3_hp_loss();
}
inline ::google::protobuf::uint32 sPPLConstant::lv3_hp_loss() const {
  return lv3_hp_loss_;
}
inline void sPPLConstant::set_lv3_hp_loss(::google::protobuf::uint32 value) {
  set_has_lv3_hp_loss();
  lv3_hp_loss_ = value;
}

// optional uint32 lv4_hp_loss = 10;
inline bool sPPLConstant::has_lv4_hp_loss() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sPPLConstant::set_has_lv4_hp_loss() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sPPLConstant::clear_has_lv4_hp_loss() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sPPLConstant::clear_lv4_hp_loss() {
  lv4_hp_loss_ = 0u;
  clear_has_lv4_hp_loss();
}
inline ::google::protobuf::uint32 sPPLConstant::lv4_hp_loss() const {
  return lv4_hp_loss_;
}
inline void sPPLConstant::set_lv4_hp_loss(::google::protobuf::uint32 value) {
  set_has_lv4_hp_loss();
  lv4_hp_loss_ = value;
}

// optional uint32 lv5_hp_loss = 11;
inline bool sPPLConstant::has_lv5_hp_loss() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sPPLConstant::set_has_lv5_hp_loss() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sPPLConstant::clear_has_lv5_hp_loss() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sPPLConstant::clear_lv5_hp_loss() {
  lv5_hp_loss_ = 0u;
  clear_has_lv5_hp_loss();
}
inline ::google::protobuf::uint32 sPPLConstant::lv5_hp_loss() const {
  return lv5_hp_loss_;
}
inline void sPPLConstant::set_lv5_hp_loss(::google::protobuf::uint32 value) {
  set_has_lv5_hp_loss();
  lv5_hp_loss_ = value;
}

// optional uint32 random_cost = 12;
inline bool sPPLConstant::has_random_cost() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sPPLConstant::set_has_random_cost() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sPPLConstant::clear_has_random_cost() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sPPLConstant::clear_random_cost() {
  random_cost_ = 0u;
  clear_has_random_cost();
}
inline ::google::protobuf::uint32 sPPLConstant::random_cost() const {
  return random_cost_;
}
inline void sPPLConstant::set_random_cost(::google::protobuf::uint32 value) {
  set_has_random_cost();
  random_cost_ = value;
}

// optional uint32 random_increment = 13;
inline bool sPPLConstant::has_random_increment() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sPPLConstant::set_has_random_increment() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sPPLConstant::clear_has_random_increment() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sPPLConstant::clear_random_increment() {
  random_increment_ = 0u;
  clear_has_random_increment();
}
inline ::google::protobuf::uint32 sPPLConstant::random_increment() const {
  return random_increment_;
}
inline void sPPLConstant::set_random_increment(::google::protobuf::uint32 value) {
  set_has_random_increment();
  random_increment_ = value;
}

// optional uint32 normal_energy = 14;
inline bool sPPLConstant::has_normal_energy() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sPPLConstant::set_has_normal_energy() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sPPLConstant::clear_has_normal_energy() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sPPLConstant::clear_normal_energy() {
  normal_energy_ = 0u;
  clear_has_normal_energy();
}
inline ::google::protobuf::uint32 sPPLConstant::normal_energy() const {
  return normal_energy_;
}
inline void sPPLConstant::set_normal_energy(::google::protobuf::uint32 value) {
  set_has_normal_energy();
  normal_energy_ = value;
}

// -------------------------------------------------------------------

// sPersistDB

// optional uint32 nversion = 1;
inline bool sPersistDB::has_nversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPersistDB::set_has_nversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPersistDB::clear_has_nversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPersistDB::clear_nversion() {
  nversion_ = 0u;
  clear_has_nversion();
}
inline ::google::protobuf::uint32 sPersistDB::nversion() const {
  return nversion_;
}
inline void sPersistDB::set_nversion(::google::protobuf::uint32 value) {
  set_has_nversion();
  nversion_ = value;
}

// repeated .jynetwork.proto.sItemStats itemstats = 2;
inline int sPersistDB::itemstats_size() const {
  return itemstats_.size();
}
inline void sPersistDB::clear_itemstats() {
  itemstats_.Clear();
}
inline const ::jynetwork::proto::sItemStats& sPersistDB::itemstats(int index) const {
  return itemstats_.Get(index);
}
inline ::jynetwork::proto::sItemStats* sPersistDB::mutable_itemstats(int index) {
  return itemstats_.Mutable(index);
}
inline ::jynetwork::proto::sItemStats* sPersistDB::add_itemstats() {
  return itemstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sItemStats >&
sPersistDB::itemstats() const {
  return itemstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sItemStats >*
sPersistDB::mutable_itemstats() {
  return &itemstats_;
}

// repeated .jynetwork.proto.sGameStats gamestats = 3;
inline int sPersistDB::gamestats_size() const {
  return gamestats_.size();
}
inline void sPersistDB::clear_gamestats() {
  gamestats_.Clear();
}
inline const ::jynetwork::proto::sGameStats& sPersistDB::gamestats(int index) const {
  return gamestats_.Get(index);
}
inline ::jynetwork::proto::sGameStats* sPersistDB::mutable_gamestats(int index) {
  return gamestats_.Mutable(index);
}
inline ::jynetwork::proto::sGameStats* sPersistDB::add_gamestats() {
  return gamestats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sGameStats >&
sPersistDB::gamestats() const {
  return gamestats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sGameStats >*
sPersistDB::mutable_gamestats() {
  return &gamestats_;
}

// repeated .jynetwork.proto.sEquipStats equipstats = 4;
inline int sPersistDB::equipstats_size() const {
  return equipstats_.size();
}
inline void sPersistDB::clear_equipstats() {
  equipstats_.Clear();
}
inline const ::jynetwork::proto::sEquipStats& sPersistDB::equipstats(int index) const {
  return equipstats_.Get(index);
}
inline ::jynetwork::proto::sEquipStats* sPersistDB::mutable_equipstats(int index) {
  return equipstats_.Mutable(index);
}
inline ::jynetwork::proto::sEquipStats* sPersistDB::add_equipstats() {
  return equipstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipStats >&
sPersistDB::equipstats() const {
  return equipstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipStats >*
sPersistDB::mutable_equipstats() {
  return &equipstats_;
}

// repeated .jynetwork.proto.sSkillStats skillstats = 5;
inline int sPersistDB::skillstats_size() const {
  return skillstats_.size();
}
inline void sPersistDB::clear_skillstats() {
  skillstats_.Clear();
}
inline const ::jynetwork::proto::sSkillStats& sPersistDB::skillstats(int index) const {
  return skillstats_.Get(index);
}
inline ::jynetwork::proto::sSkillStats* sPersistDB::mutable_skillstats(int index) {
  return skillstats_.Mutable(index);
}
inline ::jynetwork::proto::sSkillStats* sPersistDB::add_skillstats() {
  return skillstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSkillStats >&
sPersistDB::skillstats() const {
  return skillstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSkillStats >*
sPersistDB::mutable_skillstats() {
  return &skillstats_;
}

// repeated .jynetwork.proto.sCardStats cardstats = 6;
inline int sPersistDB::cardstats_size() const {
  return cardstats_.size();
}
inline void sPersistDB::clear_cardstats() {
  cardstats_.Clear();
}
inline const ::jynetwork::proto::sCardStats& sPersistDB::cardstats(int index) const {
  return cardstats_.Get(index);
}
inline ::jynetwork::proto::sCardStats* sPersistDB::mutable_cardstats(int index) {
  return cardstats_.Mutable(index);
}
inline ::jynetwork::proto::sCardStats* sPersistDB::add_cardstats() {
  return cardstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardStats >&
sPersistDB::cardstats() const {
  return cardstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardStats >*
sPersistDB::mutable_cardstats() {
  return &cardstats_;
}

// repeated .jynetwork.proto.sBuffStats buffstats = 7;
inline int sPersistDB::buffstats_size() const {
  return buffstats_.size();
}
inline void sPersistDB::clear_buffstats() {
  buffstats_.Clear();
}
inline const ::jynetwork::proto::sBuffStats& sPersistDB::buffstats(int index) const {
  return buffstats_.Get(index);
}
inline ::jynetwork::proto::sBuffStats* sPersistDB::mutable_buffstats(int index) {
  return buffstats_.Mutable(index);
}
inline ::jynetwork::proto::sBuffStats* sPersistDB::add_buffstats() {
  return buffstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuffStats >&
sPersistDB::buffstats() const {
  return buffstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuffStats >*
sPersistDB::mutable_buffstats() {
  return &buffstats_;
}

// repeated .jynetwork.proto.sCastleStats castlestats = 8;
inline int sPersistDB::castlestats_size() const {
  return castlestats_.size();
}
inline void sPersistDB::clear_castlestats() {
  castlestats_.Clear();
}
inline const ::jynetwork::proto::sCastleStats& sPersistDB::castlestats(int index) const {
  return castlestats_.Get(index);
}
inline ::jynetwork::proto::sCastleStats* sPersistDB::mutable_castlestats(int index) {
  return castlestats_.Mutable(index);
}
inline ::jynetwork::proto::sCastleStats* sPersistDB::add_castlestats() {
  return castlestats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleStats >&
sPersistDB::castlestats() const {
  return castlestats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleStats >*
sPersistDB::mutable_castlestats() {
  return &castlestats_;
}

// repeated .jynetwork.proto.sStageProp stageprops = 9;
inline int sPersistDB::stageprops_size() const {
  return stageprops_.size();
}
inline void sPersistDB::clear_stageprops() {
  stageprops_.Clear();
}
inline const ::jynetwork::proto::sStageProp& sPersistDB::stageprops(int index) const {
  return stageprops_.Get(index);
}
inline ::jynetwork::proto::sStageProp* sPersistDB::mutable_stageprops(int index) {
  return stageprops_.Mutable(index);
}
inline ::jynetwork::proto::sStageProp* sPersistDB::add_stageprops() {
  return stageprops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sStageProp >&
sPersistDB::stageprops() const {
  return stageprops_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sStageProp >*
sPersistDB::mutable_stageprops() {
  return &stageprops_;
}

// repeated .jynetwork.proto.sEffectStats effectstats = 10;
inline int sPersistDB::effectstats_size() const {
  return effectstats_.size();
}
inline void sPersistDB::clear_effectstats() {
  effectstats_.Clear();
}
inline const ::jynetwork::proto::sEffectStats& sPersistDB::effectstats(int index) const {
  return effectstats_.Get(index);
}
inline ::jynetwork::proto::sEffectStats* sPersistDB::mutable_effectstats(int index) {
  return effectstats_.Mutable(index);
}
inline ::jynetwork::proto::sEffectStats* sPersistDB::add_effectstats() {
  return effectstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectStats >&
sPersistDB::effectstats() const {
  return effectstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectStats >*
sPersistDB::mutable_effectstats() {
  return &effectstats_;
}

// repeated .jynetwork.proto.sEffects effects = 11;
inline int sPersistDB::effects_size() const {
  return effects_.size();
}
inline void sPersistDB::clear_effects() {
  effects_.Clear();
}
inline const ::jynetwork::proto::sEffects& sPersistDB::effects(int index) const {
  return effects_.Get(index);
}
inline ::jynetwork::proto::sEffects* sPersistDB::mutable_effects(int index) {
  return effects_.Mutable(index);
}
inline ::jynetwork::proto::sEffects* sPersistDB::add_effects() {
  return effects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffects >&
sPersistDB::effects() const {
  return effects_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffects >*
sPersistDB::mutable_effects() {
  return &effects_;
}

// repeated .jynetwork.proto.sModelAction modelactions = 12;
inline int sPersistDB::modelactions_size() const {
  return modelactions_.size();
}
inline void sPersistDB::clear_modelactions() {
  modelactions_.Clear();
}
inline const ::jynetwork::proto::sModelAction& sPersistDB::modelactions(int index) const {
  return modelactions_.Get(index);
}
inline ::jynetwork::proto::sModelAction* sPersistDB::mutable_modelactions(int index) {
  return modelactions_.Mutable(index);
}
inline ::jynetwork::proto::sModelAction* sPersistDB::add_modelactions() {
  return modelactions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sModelAction >&
sPersistDB::modelactions() const {
  return modelactions_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sModelAction >*
sPersistDB::mutable_modelactions() {
  return &modelactions_;
}

// repeated .jynetwork.proto.sMonsterRefresh monsterrefresh = 13;
inline int sPersistDB::monsterrefresh_size() const {
  return monsterrefresh_.size();
}
inline void sPersistDB::clear_monsterrefresh() {
  monsterrefresh_.Clear();
}
inline const ::jynetwork::proto::sMonsterRefresh& sPersistDB::monsterrefresh(int index) const {
  return monsterrefresh_.Get(index);
}
inline ::jynetwork::proto::sMonsterRefresh* sPersistDB::mutable_monsterrefresh(int index) {
  return monsterrefresh_.Mutable(index);
}
inline ::jynetwork::proto::sMonsterRefresh* sPersistDB::add_monsterrefresh() {
  return monsterrefresh_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefresh >&
sPersistDB::monsterrefresh() const {
  return monsterrefresh_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMonsterRefresh >*
sPersistDB::mutable_monsterrefresh() {
  return &monsterrefresh_;
}

// repeated .jynetwork.proto.sDropStats dropstats = 14;
inline int sPersistDB::dropstats_size() const {
  return dropstats_.size();
}
inline void sPersistDB::clear_dropstats() {
  dropstats_.Clear();
}
inline const ::jynetwork::proto::sDropStats& sPersistDB::dropstats(int index) const {
  return dropstats_.Get(index);
}
inline ::jynetwork::proto::sDropStats* sPersistDB::mutable_dropstats(int index) {
  return dropstats_.Mutable(index);
}
inline ::jynetwork::proto::sDropStats* sPersistDB::add_dropstats() {
  return dropstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropStats >&
sPersistDB::dropstats() const {
  return dropstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropStats >*
sPersistDB::mutable_dropstats() {
  return &dropstats_;
}

// repeated .jynetwork.proto.sCharactorStats charactorstats = 15;
inline int sPersistDB::charactorstats_size() const {
  return charactorstats_.size();
}
inline void sPersistDB::clear_charactorstats() {
  charactorstats_.Clear();
}
inline const ::jynetwork::proto::sCharactorStats& sPersistDB::charactorstats(int index) const {
  return charactorstats_.Get(index);
}
inline ::jynetwork::proto::sCharactorStats* sPersistDB::mutable_charactorstats(int index) {
  return charactorstats_.Mutable(index);
}
inline ::jynetwork::proto::sCharactorStats* sPersistDB::add_charactorstats() {
  return charactorstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorStats >&
sPersistDB::charactorstats() const {
  return charactorstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharactorStats >*
sPersistDB::mutable_charactorstats() {
  return &charactorstats_;
}

// repeated .jynetwork.proto.sEffectTable effecttable = 16;
inline int sPersistDB::effecttable_size() const {
  return effecttable_.size();
}
inline void sPersistDB::clear_effecttable() {
  effecttable_.Clear();
}
inline const ::jynetwork::proto::sEffectTable& sPersistDB::effecttable(int index) const {
  return effecttable_.Get(index);
}
inline ::jynetwork::proto::sEffectTable* sPersistDB::mutable_effecttable(int index) {
  return effecttable_.Mutable(index);
}
inline ::jynetwork::proto::sEffectTable* sPersistDB::add_effecttable() {
  return effecttable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectTable >&
sPersistDB::effecttable() const {
  return effecttable_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectTable >*
sPersistDB::mutable_effecttable() {
  return &effecttable_;
}

// repeated .jynetwork.proto.sAISetting ais = 17;
inline int sPersistDB::ais_size() const {
  return ais_.size();
}
inline void sPersistDB::clear_ais() {
  ais_.Clear();
}
inline const ::jynetwork::proto::sAISetting& sPersistDB::ais(int index) const {
  return ais_.Get(index);
}
inline ::jynetwork::proto::sAISetting* sPersistDB::mutable_ais(int index) {
  return ais_.Mutable(index);
}
inline ::jynetwork::proto::sAISetting* sPersistDB::add_ais() {
  return ais_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sAISetting >&
sPersistDB::ais() const {
  return ais_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sAISetting >*
sPersistDB::mutable_ais() {
  return &ais_;
}

// repeated .jynetwork.proto.sSoundStats soundstats = 18;
inline int sPersistDB::soundstats_size() const {
  return soundstats_.size();
}
inline void sPersistDB::clear_soundstats() {
  soundstats_.Clear();
}
inline const ::jynetwork::proto::sSoundStats& sPersistDB::soundstats(int index) const {
  return soundstats_.Get(index);
}
inline ::jynetwork::proto::sSoundStats* sPersistDB::mutable_soundstats(int index) {
  return soundstats_.Mutable(index);
}
inline ::jynetwork::proto::sSoundStats* sPersistDB::add_soundstats() {
  return soundstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundStats >&
sPersistDB::soundstats() const {
  return soundstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundStats >*
sPersistDB::mutable_soundstats() {
  return &soundstats_;
}

// repeated .jynetwork.proto.sSoundTable soundtable = 19;
inline int sPersistDB::soundtable_size() const {
  return soundtable_.size();
}
inline void sPersistDB::clear_soundtable() {
  soundtable_.Clear();
}
inline const ::jynetwork::proto::sSoundTable& sPersistDB::soundtable(int index) const {
  return soundtable_.Get(index);
}
inline ::jynetwork::proto::sSoundTable* sPersistDB::mutable_soundtable(int index) {
  return soundtable_.Mutable(index);
}
inline ::jynetwork::proto::sSoundTable* sPersistDB::add_soundtable() {
  return soundtable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundTable >&
sPersistDB::soundtable() const {
  return soundtable_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundTable >*
sPersistDB::mutable_soundtable() {
  return &soundtable_;
}

// repeated .jynetwork.proto.sShopItem shopstats = 20;
inline int sPersistDB::shopstats_size() const {
  return shopstats_.size();
}
inline void sPersistDB::clear_shopstats() {
  shopstats_.Clear();
}
inline const ::jynetwork::proto::sShopItem& sPersistDB::shopstats(int index) const {
  return shopstats_.Get(index);
}
inline ::jynetwork::proto::sShopItem* sPersistDB::mutable_shopstats(int index) {
  return shopstats_.Mutable(index);
}
inline ::jynetwork::proto::sShopItem* sPersistDB::add_shopstats() {
  return shopstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sShopItem >&
sPersistDB::shopstats() const {
  return shopstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sShopItem >*
sPersistDB::mutable_shopstats() {
  return &shopstats_;
}

// repeated .jynetwork.proto.sCharSkillLevelUp char_skill_levelup = 21;
inline int sPersistDB::char_skill_levelup_size() const {
  return char_skill_levelup_.size();
}
inline void sPersistDB::clear_char_skill_levelup() {
  char_skill_levelup_.Clear();
}
inline const ::jynetwork::proto::sCharSkillLevelUp& sPersistDB::char_skill_levelup(int index) const {
  return char_skill_levelup_.Get(index);
}
inline ::jynetwork::proto::sCharSkillLevelUp* sPersistDB::mutable_char_skill_levelup(int index) {
  return char_skill_levelup_.Mutable(index);
}
inline ::jynetwork::proto::sCharSkillLevelUp* sPersistDB::add_char_skill_levelup() {
  return char_skill_levelup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharSkillLevelUp >&
sPersistDB::char_skill_levelup() const {
  return char_skill_levelup_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharSkillLevelUp >*
sPersistDB::mutable_char_skill_levelup() {
  return &char_skill_levelup_;
}

// repeated .jynetwork.proto.sCharExp char_exp = 22;
inline int sPersistDB::char_exp_size() const {
  return char_exp_.size();
}
inline void sPersistDB::clear_char_exp() {
  char_exp_.Clear();
}
inline const ::jynetwork::proto::sCharExp& sPersistDB::char_exp(int index) const {
  return char_exp_.Get(index);
}
inline ::jynetwork::proto::sCharExp* sPersistDB::mutable_char_exp(int index) {
  return char_exp_.Mutable(index);
}
inline ::jynetwork::proto::sCharExp* sPersistDB::add_char_exp() {
  return char_exp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharExp >&
sPersistDB::char_exp() const {
  return char_exp_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharExp >*
sPersistDB::mutable_char_exp() {
  return &char_exp_;
}

// repeated .jynetwork.proto.sCharLevelUp char_levelup = 23;
inline int sPersistDB::char_levelup_size() const {
  return char_levelup_.size();
}
inline void sPersistDB::clear_char_levelup() {
  char_levelup_.Clear();
}
inline const ::jynetwork::proto::sCharLevelUp& sPersistDB::char_levelup(int index) const {
  return char_levelup_.Get(index);
}
inline ::jynetwork::proto::sCharLevelUp* sPersistDB::mutable_char_levelup(int index) {
  return char_levelup_.Mutable(index);
}
inline ::jynetwork::proto::sCharLevelUp* sPersistDB::add_char_levelup() {
  return char_levelup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharLevelUp >&
sPersistDB::char_levelup() const {
  return char_levelup_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharLevelUp >*
sPersistDB::mutable_char_levelup() {
  return &char_levelup_;
}

// repeated .jynetwork.proto.sCharChangeJob char_change_job = 24;
inline int sPersistDB::char_change_job_size() const {
  return char_change_job_.size();
}
inline void sPersistDB::clear_char_change_job() {
  char_change_job_.Clear();
}
inline const ::jynetwork::proto::sCharChangeJob& sPersistDB::char_change_job(int index) const {
  return char_change_job_.Get(index);
}
inline ::jynetwork::proto::sCharChangeJob* sPersistDB::mutable_char_change_job(int index) {
  return char_change_job_.Mutable(index);
}
inline ::jynetwork::proto::sCharChangeJob* sPersistDB::add_char_change_job() {
  return char_change_job_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharChangeJob >&
sPersistDB::char_change_job() const {
  return char_change_job_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCharChangeJob >*
sPersistDB::mutable_char_change_job() {
  return &char_change_job_;
}

// repeated .jynetwork.proto.sCardIntensify card_intensify = 25;
inline int sPersistDB::card_intensify_size() const {
  return card_intensify_.size();
}
inline void sPersistDB::clear_card_intensify() {
  card_intensify_.Clear();
}
inline const ::jynetwork::proto::sCardIntensify& sPersistDB::card_intensify(int index) const {
  return card_intensify_.Get(index);
}
inline ::jynetwork::proto::sCardIntensify* sPersistDB::mutable_card_intensify(int index) {
  return card_intensify_.Mutable(index);
}
inline ::jynetwork::proto::sCardIntensify* sPersistDB::add_card_intensify() {
  return card_intensify_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardIntensify >&
sPersistDB::card_intensify() const {
  return card_intensify_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardIntensify >*
sPersistDB::mutable_card_intensify() {
  return &card_intensify_;
}

// repeated .jynetwork.proto.sCardLevelUp card_levelup = 26;
inline int sPersistDB::card_levelup_size() const {
  return card_levelup_.size();
}
inline void sPersistDB::clear_card_levelup() {
  card_levelup_.Clear();
}
inline const ::jynetwork::proto::sCardLevelUp& sPersistDB::card_levelup(int index) const {
  return card_levelup_.Get(index);
}
inline ::jynetwork::proto::sCardLevelUp* sPersistDB::mutable_card_levelup(int index) {
  return card_levelup_.Mutable(index);
}
inline ::jynetwork::proto::sCardLevelUp* sPersistDB::add_card_levelup() {
  return card_levelup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardLevelUp >&
sPersistDB::card_levelup() const {
  return card_levelup_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardLevelUp >*
sPersistDB::mutable_card_levelup() {
  return &card_levelup_;
}

// repeated .jynetwork.proto.sCardStarUp card_starup = 27;
inline int sPersistDB::card_starup_size() const {
  return card_starup_.size();
}
inline void sPersistDB::clear_card_starup() {
  card_starup_.Clear();
}
inline const ::jynetwork::proto::sCardStarUp& sPersistDB::card_starup(int index) const {
  return card_starup_.Get(index);
}
inline ::jynetwork::proto::sCardStarUp* sPersistDB::mutable_card_starup(int index) {
  return card_starup_.Mutable(index);
}
inline ::jynetwork::proto::sCardStarUp* sPersistDB::add_card_starup() {
  return card_starup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardStarUp >&
sPersistDB::card_starup() const {
  return card_starup_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCardStarUp >*
sPersistDB::mutable_card_starup() {
  return &card_starup_;
}

// repeated .jynetwork.proto.sDropStats drop_stats = 28;
inline int sPersistDB::drop_stats_size() const {
  return drop_stats_.size();
}
inline void sPersistDB::clear_drop_stats() {
  drop_stats_.Clear();
}
inline const ::jynetwork::proto::sDropStats& sPersistDB::drop_stats(int index) const {
  return drop_stats_.Get(index);
}
inline ::jynetwork::proto::sDropStats* sPersistDB::mutable_drop_stats(int index) {
  return drop_stats_.Mutable(index);
}
inline ::jynetwork::proto::sDropStats* sPersistDB::add_drop_stats() {
  return drop_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropStats >&
sPersistDB::drop_stats() const {
  return drop_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropStats >*
sPersistDB::mutable_drop_stats() {
  return &drop_stats_;
}

// repeated .jynetwork.proto.sEquipIntensify equip_intensify = 29;
inline int sPersistDB::equip_intensify_size() const {
  return equip_intensify_.size();
}
inline void sPersistDB::clear_equip_intensify() {
  equip_intensify_.Clear();
}
inline const ::jynetwork::proto::sEquipIntensify& sPersistDB::equip_intensify(int index) const {
  return equip_intensify_.Get(index);
}
inline ::jynetwork::proto::sEquipIntensify* sPersistDB::mutable_equip_intensify(int index) {
  return equip_intensify_.Mutable(index);
}
inline ::jynetwork::proto::sEquipIntensify* sPersistDB::add_equip_intensify() {
  return equip_intensify_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipIntensify >&
sPersistDB::equip_intensify() const {
  return equip_intensify_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipIntensify >*
sPersistDB::mutable_equip_intensify() {
  return &equip_intensify_;
}

// repeated .jynetwork.proto.sEquipLevelUp equip_levelup = 30;
inline int sPersistDB::equip_levelup_size() const {
  return equip_levelup_.size();
}
inline void sPersistDB::clear_equip_levelup() {
  equip_levelup_.Clear();
}
inline const ::jynetwork::proto::sEquipLevelUp& sPersistDB::equip_levelup(int index) const {
  return equip_levelup_.Get(index);
}
inline ::jynetwork::proto::sEquipLevelUp* sPersistDB::mutable_equip_levelup(int index) {
  return equip_levelup_.Mutable(index);
}
inline ::jynetwork::proto::sEquipLevelUp* sPersistDB::add_equip_levelup() {
  return equip_levelup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipLevelUp >&
sPersistDB::equip_levelup() const {
  return equip_levelup_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipLevelUp >*
sPersistDB::mutable_equip_levelup() {
  return &equip_levelup_;
}

// repeated .jynetwork.proto.sEquipStarUp equip_starup = 31;
inline int sPersistDB::equip_starup_size() const {
  return equip_starup_.size();
}
inline void sPersistDB::clear_equip_starup() {
  equip_starup_.Clear();
}
inline const ::jynetwork::proto::sEquipStarUp& sPersistDB::equip_starup(int index) const {
  return equip_starup_.Get(index);
}
inline ::jynetwork::proto::sEquipStarUp* sPersistDB::mutable_equip_starup(int index) {
  return equip_starup_.Mutable(index);
}
inline ::jynetwork::proto::sEquipStarUp* sPersistDB::add_equip_starup() {
  return equip_starup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipStarUp >&
sPersistDB::equip_starup() const {
  return equip_starup_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipStarUp >*
sPersistDB::mutable_equip_starup() {
  return &equip_starup_;
}

// repeated .jynetwork.proto.sTaskStats taskstats = 32;
inline int sPersistDB::taskstats_size() const {
  return taskstats_.size();
}
inline void sPersistDB::clear_taskstats() {
  taskstats_.Clear();
}
inline const ::jynetwork::proto::sTaskStats& sPersistDB::taskstats(int index) const {
  return taskstats_.Get(index);
}
inline ::jynetwork::proto::sTaskStats* sPersistDB::mutable_taskstats(int index) {
  return taskstats_.Mutable(index);
}
inline ::jynetwork::proto::sTaskStats* sPersistDB::add_taskstats() {
  return taskstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sTaskStats >&
sPersistDB::taskstats() const {
  return taskstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sTaskStats >*
sPersistDB::mutable_taskstats() {
  return &taskstats_;
}

// repeated .jynetwork.proto.sBuyStaminaStats buy_stamina = 33;
inline int sPersistDB::buy_stamina_size() const {
  return buy_stamina_.size();
}
inline void sPersistDB::clear_buy_stamina() {
  buy_stamina_.Clear();
}
inline const ::jynetwork::proto::sBuyStaminaStats& sPersistDB::buy_stamina(int index) const {
  return buy_stamina_.Get(index);
}
inline ::jynetwork::proto::sBuyStaminaStats* sPersistDB::mutable_buy_stamina(int index) {
  return buy_stamina_.Mutable(index);
}
inline ::jynetwork::proto::sBuyStaminaStats* sPersistDB::add_buy_stamina() {
  return buy_stamina_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuyStaminaStats >&
sPersistDB::buy_stamina() const {
  return buy_stamina_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuyStaminaStats >*
sPersistDB::mutable_buy_stamina() {
  return &buy_stamina_;
}

// repeated .jynetwork.proto.sBuyGoldStats buy_gold = 34;
inline int sPersistDB::buy_gold_size() const {
  return buy_gold_.size();
}
inline void sPersistDB::clear_buy_gold() {
  buy_gold_.Clear();
}
inline const ::jynetwork::proto::sBuyGoldStats& sPersistDB::buy_gold(int index) const {
  return buy_gold_.Get(index);
}
inline ::jynetwork::proto::sBuyGoldStats* sPersistDB::mutable_buy_gold(int index) {
  return buy_gold_.Mutable(index);
}
inline ::jynetwork::proto::sBuyGoldStats* sPersistDB::add_buy_gold() {
  return buy_gold_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuyGoldStats >&
sPersistDB::buy_gold() const {
  return buy_gold_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBuyGoldStats >*
sPersistDB::mutable_buy_gold() {
  return &buy_gold_;
}

// repeated string bnks = 35;
inline int sPersistDB::bnks_size() const {
  return bnks_.size();
}
inline void sPersistDB::clear_bnks() {
  bnks_.Clear();
}
inline const ::std::string& sPersistDB::bnks(int index) const {
  return bnks_.Get(index);
}
inline ::std::string* sPersistDB::mutable_bnks(int index) {
  return bnks_.Mutable(index);
}
inline void sPersistDB::set_bnks(int index, const ::std::string& value) {
  bnks_.Mutable(index)->assign(value);
}
inline void sPersistDB::set_bnks(int index, const char* value) {
  bnks_.Mutable(index)->assign(value);
}
inline void sPersistDB::set_bnks(int index, const char* value, size_t size) {
  bnks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPersistDB::add_bnks() {
  return bnks_.Add();
}
inline void sPersistDB::add_bnks(const ::std::string& value) {
  bnks_.Add()->assign(value);
}
inline void sPersistDB::add_bnks(const char* value) {
  bnks_.Add()->assign(value);
}
inline void sPersistDB::add_bnks(const char* value, size_t size) {
  bnks_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
sPersistDB::bnks() const {
  return bnks_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
sPersistDB::mutable_bnks() {
  return &bnks_;
}

// repeated .jynetwork.proto.sPrefixStats prefix_stats = 36;
inline int sPersistDB::prefix_stats_size() const {
  return prefix_stats_.size();
}
inline void sPersistDB::clear_prefix_stats() {
  prefix_stats_.Clear();
}
inline const ::jynetwork::proto::sPrefixStats& sPersistDB::prefix_stats(int index) const {
  return prefix_stats_.Get(index);
}
inline ::jynetwork::proto::sPrefixStats* sPersistDB::mutable_prefix_stats(int index) {
  return prefix_stats_.Mutable(index);
}
inline ::jynetwork::proto::sPrefixStats* sPersistDB::add_prefix_stats() {
  return prefix_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPrefixStats >&
sPersistDB::prefix_stats() const {
  return prefix_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPrefixStats >*
sPersistDB::mutable_prefix_stats() {
  return &prefix_stats_;
}

// repeated .jynetwork.proto.sActionEffect action_effect = 37;
inline int sPersistDB::action_effect_size() const {
  return action_effect_.size();
}
inline void sPersistDB::clear_action_effect() {
  action_effect_.Clear();
}
inline const ::jynetwork::proto::sActionEffect& sPersistDB::action_effect(int index) const {
  return action_effect_.Get(index);
}
inline ::jynetwork::proto::sActionEffect* sPersistDB::mutable_action_effect(int index) {
  return action_effect_.Mutable(index);
}
inline ::jynetwork::proto::sActionEffect* sPersistDB::add_action_effect() {
  return action_effect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActionEffect >&
sPersistDB::action_effect() const {
  return action_effect_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActionEffect >*
sPersistDB::mutable_action_effect() {
  return &action_effect_;
}

// repeated .jynetwork.proto.sDecomStats decom_stats = 38;
inline int sPersistDB::decom_stats_size() const {
  return decom_stats_.size();
}
inline void sPersistDB::clear_decom_stats() {
  decom_stats_.Clear();
}
inline const ::jynetwork::proto::sDecomStats& sPersistDB::decom_stats(int index) const {
  return decom_stats_.Get(index);
}
inline ::jynetwork::proto::sDecomStats* sPersistDB::mutable_decom_stats(int index) {
  return decom_stats_.Mutable(index);
}
inline ::jynetwork::proto::sDecomStats* sPersistDB::add_decom_stats() {
  return decom_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDecomStats >&
sPersistDB::decom_stats() const {
  return decom_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDecomStats >*
sPersistDB::mutable_decom_stats() {
  return &decom_stats_;
}

// optional .jynetwork.proto.sPPLConstant ppl_constant = 39;
inline bool sPersistDB::has_ppl_constant() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void sPersistDB::set_has_ppl_constant() {
  _has_bits_[1] |= 0x00000040u;
}
inline void sPersistDB::clear_has_ppl_constant() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void sPersistDB::clear_ppl_constant() {
  if (ppl_constant_ != NULL) ppl_constant_->::jynetwork::proto::sPPLConstant::Clear();
  clear_has_ppl_constant();
}
inline const ::jynetwork::proto::sPPLConstant& sPersistDB::ppl_constant() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ppl_constant_ != NULL ? *ppl_constant_ : *default_instance().ppl_constant_;
#else
  return ppl_constant_ != NULL ? *ppl_constant_ : *default_instance_->ppl_constant_;
#endif
}
inline ::jynetwork::proto::sPPLConstant* sPersistDB::mutable_ppl_constant() {
  set_has_ppl_constant();
  if (ppl_constant_ == NULL) ppl_constant_ = new ::jynetwork::proto::sPPLConstant;
  return ppl_constant_;
}
inline ::jynetwork::proto::sPPLConstant* sPersistDB::release_ppl_constant() {
  clear_has_ppl_constant();
  ::jynetwork::proto::sPPLConstant* temp = ppl_constant_;
  ppl_constant_ = NULL;
  return temp;
}
inline void sPersistDB::set_allocated_ppl_constant(::jynetwork::proto::sPPLConstant* ppl_constant) {
  delete ppl_constant_;
  ppl_constant_ = ppl_constant;
  if (ppl_constant) {
    set_has_ppl_constant();
  } else {
    clear_has_ppl_constant();
  }
}

// repeated .jynetwork.proto.sWeekStats week_stats = 40;
inline int sPersistDB::week_stats_size() const {
  return week_stats_.size();
}
inline void sPersistDB::clear_week_stats() {
  week_stats_.Clear();
}
inline const ::jynetwork::proto::sWeekStats& sPersistDB::week_stats(int index) const {
  return week_stats_.Get(index);
}
inline ::jynetwork::proto::sWeekStats* sPersistDB::mutable_week_stats(int index) {
  return week_stats_.Mutable(index);
}
inline ::jynetwork::proto::sWeekStats* sPersistDB::add_week_stats() {
  return week_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sWeekStats >&
sPersistDB::week_stats() const {
  return week_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sWeekStats >*
sPersistDB::mutable_week_stats() {
  return &week_stats_;
}

// repeated .jynetwork.proto.sPartnerStats partnerstats = 41;
inline int sPersistDB::partnerstats_size() const {
  return partnerstats_.size();
}
inline void sPersistDB::clear_partnerstats() {
  partnerstats_.Clear();
}
inline const ::jynetwork::proto::sPartnerStats& sPersistDB::partnerstats(int index) const {
  return partnerstats_.Get(index);
}
inline ::jynetwork::proto::sPartnerStats* sPersistDB::mutable_partnerstats(int index) {
  return partnerstats_.Mutable(index);
}
inline ::jynetwork::proto::sPartnerStats* sPersistDB::add_partnerstats() {
  return partnerstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerStats >&
sPersistDB::partnerstats() const {
  return partnerstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerStats >*
sPersistDB::mutable_partnerstats() {
  return &partnerstats_;
}

// repeated .jynetwork.proto.sPartnerLvUpStats partner_lv_up_stats = 42;
inline int sPersistDB::partner_lv_up_stats_size() const {
  return partner_lv_up_stats_.size();
}
inline void sPersistDB::clear_partner_lv_up_stats() {
  partner_lv_up_stats_.Clear();
}
inline const ::jynetwork::proto::sPartnerLvUpStats& sPersistDB::partner_lv_up_stats(int index) const {
  return partner_lv_up_stats_.Get(index);
}
inline ::jynetwork::proto::sPartnerLvUpStats* sPersistDB::mutable_partner_lv_up_stats(int index) {
  return partner_lv_up_stats_.Mutable(index);
}
inline ::jynetwork::proto::sPartnerLvUpStats* sPersistDB::add_partner_lv_up_stats() {
  return partner_lv_up_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerLvUpStats >&
sPersistDB::partner_lv_up_stats() const {
  return partner_lv_up_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerLvUpStats >*
sPersistDB::mutable_partner_lv_up_stats() {
  return &partner_lv_up_stats_;
}

// repeated .jynetwork.proto.sPartnerIntensifyStats partner_intensify_stats = 43;
inline int sPersistDB::partner_intensify_stats_size() const {
  return partner_intensify_stats_.size();
}
inline void sPersistDB::clear_partner_intensify_stats() {
  partner_intensify_stats_.Clear();
}
inline const ::jynetwork::proto::sPartnerIntensifyStats& sPersistDB::partner_intensify_stats(int index) const {
  return partner_intensify_stats_.Get(index);
}
inline ::jynetwork::proto::sPartnerIntensifyStats* sPersistDB::mutable_partner_intensify_stats(int index) {
  return partner_intensify_stats_.Mutable(index);
}
inline ::jynetwork::proto::sPartnerIntensifyStats* sPersistDB::add_partner_intensify_stats() {
  return partner_intensify_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerIntensifyStats >&
sPersistDB::partner_intensify_stats() const {
  return partner_intensify_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerIntensifyStats >*
sPersistDB::mutable_partner_intensify_stats() {
  return &partner_intensify_stats_;
}

// repeated .jynetwork.proto.sPartnerStarStats partner_star_stats = 44;
inline int sPersistDB::partner_star_stats_size() const {
  return partner_star_stats_.size();
}
inline void sPersistDB::clear_partner_star_stats() {
  partner_star_stats_.Clear();
}
inline const ::jynetwork::proto::sPartnerStarStats& sPersistDB::partner_star_stats(int index) const {
  return partner_star_stats_.Get(index);
}
inline ::jynetwork::proto::sPartnerStarStats* sPersistDB::mutable_partner_star_stats(int index) {
  return partner_star_stats_.Mutable(index);
}
inline ::jynetwork::proto::sPartnerStarStats* sPersistDB::add_partner_star_stats() {
  return partner_star_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerStarStats >&
sPersistDB::partner_star_stats() const {
  return partner_star_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPartnerStarStats >*
sPersistDB::mutable_partner_star_stats() {
  return &partner_star_stats_;
}

// repeated .jynetwork.proto.sActivityStats activity_stats = 45;
inline int sPersistDB::activity_stats_size() const {
  return activity_stats_.size();
}
inline void sPersistDB::clear_activity_stats() {
  activity_stats_.Clear();
}
inline const ::jynetwork::proto::sActivityStats& sPersistDB::activity_stats(int index) const {
  return activity_stats_.Get(index);
}
inline ::jynetwork::proto::sActivityStats* sPersistDB::mutable_activity_stats(int index) {
  return activity_stats_.Mutable(index);
}
inline ::jynetwork::proto::sActivityStats* sPersistDB::add_activity_stats() {
  return activity_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActivityStats >&
sPersistDB::activity_stats() const {
  return activity_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sActivityStats >*
sPersistDB::mutable_activity_stats() {
  return &activity_stats_;
}

// repeated .jynetwork.proto.sResourseStats resourse_stats = 46;
inline int sPersistDB::resourse_stats_size() const {
  return resourse_stats_.size();
}
inline void sPersistDB::clear_resourse_stats() {
  resourse_stats_.Clear();
}
inline const ::jynetwork::proto::sResourseStats& sPersistDB::resourse_stats(int index) const {
  return resourse_stats_.Get(index);
}
inline ::jynetwork::proto::sResourseStats* sPersistDB::mutable_resourse_stats(int index) {
  return resourse_stats_.Mutable(index);
}
inline ::jynetwork::proto::sResourseStats* sPersistDB::add_resourse_stats() {
  return resourse_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sResourseStats >&
sPersistDB::resourse_stats() const {
  return resourse_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sResourseStats >*
sPersistDB::mutable_resourse_stats() {
  return &resourse_stats_;
}

// repeated .jynetwork.proto.sHomeBackground home_bg_stats = 47;
inline int sPersistDB::home_bg_stats_size() const {
  return home_bg_stats_.size();
}
inline void sPersistDB::clear_home_bg_stats() {
  home_bg_stats_.Clear();
}
inline const ::jynetwork::proto::sHomeBackground& sPersistDB::home_bg_stats(int index) const {
  return home_bg_stats_.Get(index);
}
inline ::jynetwork::proto::sHomeBackground* sPersistDB::mutable_home_bg_stats(int index) {
  return home_bg_stats_.Mutable(index);
}
inline ::jynetwork::proto::sHomeBackground* sPersistDB::add_home_bg_stats() {
  return home_bg_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sHomeBackground >&
sPersistDB::home_bg_stats() const {
  return home_bg_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sHomeBackground >*
sPersistDB::mutable_home_bg_stats() {
  return &home_bg_stats_;
}

// repeated .jynetwork.proto.sBattleMapGuide battle_map_guide = 48;
inline int sPersistDB::battle_map_guide_size() const {
  return battle_map_guide_.size();
}
inline void sPersistDB::clear_battle_map_guide() {
  battle_map_guide_.Clear();
}
inline const ::jynetwork::proto::sBattleMapGuide& sPersistDB::battle_map_guide(int index) const {
  return battle_map_guide_.Get(index);
}
inline ::jynetwork::proto::sBattleMapGuide* sPersistDB::mutable_battle_map_guide(int index) {
  return battle_map_guide_.Mutable(index);
}
inline ::jynetwork::proto::sBattleMapGuide* sPersistDB::add_battle_map_guide() {
  return battle_map_guide_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBattleMapGuide >&
sPersistDB::battle_map_guide() const {
  return battle_map_guide_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBattleMapGuide >*
sPersistDB::mutable_battle_map_guide() {
  return &battle_map_guide_;
}

// repeated .jynetwork.proto.sEquipRecommend equip_recommend_stats = 49;
inline int sPersistDB::equip_recommend_stats_size() const {
  return equip_recommend_stats_.size();
}
inline void sPersistDB::clear_equip_recommend_stats() {
  equip_recommend_stats_.Clear();
}
inline const ::jynetwork::proto::sEquipRecommend& sPersistDB::equip_recommend_stats(int index) const {
  return equip_recommend_stats_.Get(index);
}
inline ::jynetwork::proto::sEquipRecommend* sPersistDB::mutable_equip_recommend_stats(int index) {
  return equip_recommend_stats_.Mutable(index);
}
inline ::jynetwork::proto::sEquipRecommend* sPersistDB::add_equip_recommend_stats() {
  return equip_recommend_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipRecommend >&
sPersistDB::equip_recommend_stats() const {
  return equip_recommend_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipRecommend >*
sPersistDB::mutable_equip_recommend_stats() {
  return &equip_recommend_stats_;
}

// repeated .jynetwork.proto.sSoundEffectWav sound_effect = 50;
inline int sPersistDB::sound_effect_size() const {
  return sound_effect_.size();
}
inline void sPersistDB::clear_sound_effect() {
  sound_effect_.Clear();
}
inline const ::jynetwork::proto::sSoundEffectWav& sPersistDB::sound_effect(int index) const {
  return sound_effect_.Get(index);
}
inline ::jynetwork::proto::sSoundEffectWav* sPersistDB::mutable_sound_effect(int index) {
  return sound_effect_.Mutable(index);
}
inline ::jynetwork::proto::sSoundEffectWav* sPersistDB::add_sound_effect() {
  return sound_effect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundEffectWav >&
sPersistDB::sound_effect() const {
  return sound_effect_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundEffectWav >*
sPersistDB::mutable_sound_effect() {
  return &sound_effect_;
}

// repeated .jynetwork.proto.sSoundEffectMusic music_effect = 51;
inline int sPersistDB::music_effect_size() const {
  return music_effect_.size();
}
inline void sPersistDB::clear_music_effect() {
  music_effect_.Clear();
}
inline const ::jynetwork::proto::sSoundEffectMusic& sPersistDB::music_effect(int index) const {
  return music_effect_.Get(index);
}
inline ::jynetwork::proto::sSoundEffectMusic* sPersistDB::mutable_music_effect(int index) {
  return music_effect_.Mutable(index);
}
inline ::jynetwork::proto::sSoundEffectMusic* sPersistDB::add_music_effect() {
  return music_effect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundEffectMusic >&
sPersistDB::music_effect() const {
  return music_effect_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSoundEffectMusic >*
sPersistDB::mutable_music_effect() {
  return &music_effect_;
}

// repeated .jynetwork.proto.sEquipIdentify equip_identify = 52;
inline int sPersistDB::equip_identify_size() const {
  return equip_identify_.size();
}
inline void sPersistDB::clear_equip_identify() {
  equip_identify_.Clear();
}
inline const ::jynetwork::proto::sEquipIdentify& sPersistDB::equip_identify(int index) const {
  return equip_identify_.Get(index);
}
inline ::jynetwork::proto::sEquipIdentify* sPersistDB::mutable_equip_identify(int index) {
  return equip_identify_.Mutable(index);
}
inline ::jynetwork::proto::sEquipIdentify* sPersistDB::add_equip_identify() {
  return equip_identify_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipIdentify >&
sPersistDB::equip_identify() const {
  return equip_identify_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipIdentify >*
sPersistDB::mutable_equip_identify() {
  return &equip_identify_;
}

// repeated .jynetwork.proto.sAttributeBase attribute_base = 53;
inline int sPersistDB::attribute_base_size() const {
  return attribute_base_.size();
}
inline void sPersistDB::clear_attribute_base() {
  attribute_base_.Clear();
}
inline const ::jynetwork::proto::sAttributeBase& sPersistDB::attribute_base(int index) const {
  return attribute_base_.Get(index);
}
inline ::jynetwork::proto::sAttributeBase* sPersistDB::mutable_attribute_base(int index) {
  return attribute_base_.Mutable(index);
}
inline ::jynetwork::proto::sAttributeBase* sPersistDB::add_attribute_base() {
  return attribute_base_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sAttributeBase >&
sPersistDB::attribute_base() const {
  return attribute_base_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sAttributeBase >*
sPersistDB::mutable_attribute_base() {
  return &attribute_base_;
}

// repeated .jynetwork.proto.sCorpsLevel crops_level = 54;
inline int sPersistDB::crops_level_size() const {
  return crops_level_.size();
}
inline void sPersistDB::clear_crops_level() {
  crops_level_.Clear();
}
inline const ::jynetwork::proto::sCorpsLevel& sPersistDB::crops_level(int index) const {
  return crops_level_.Get(index);
}
inline ::jynetwork::proto::sCorpsLevel* sPersistDB::mutable_crops_level(int index) {
  return crops_level_.Mutable(index);
}
inline ::jynetwork::proto::sCorpsLevel* sPersistDB::add_crops_level() {
  return crops_level_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCorpsLevel >&
sPersistDB::crops_level() const {
  return crops_level_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCorpsLevel >*
sPersistDB::mutable_crops_level() {
  return &crops_level_;
}

// repeated .jynetwork.proto.sEffectMove effect_move = 55;
inline int sPersistDB::effect_move_size() const {
  return effect_move_.size();
}
inline void sPersistDB::clear_effect_move() {
  effect_move_.Clear();
}
inline const ::jynetwork::proto::sEffectMove& sPersistDB::effect_move(int index) const {
  return effect_move_.Get(index);
}
inline ::jynetwork::proto::sEffectMove* sPersistDB::mutable_effect_move(int index) {
  return effect_move_.Mutable(index);
}
inline ::jynetwork::proto::sEffectMove* sPersistDB::add_effect_move() {
  return effect_move_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectMove >&
sPersistDB::effect_move() const {
  return effect_move_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEffectMove >*
sPersistDB::mutable_effect_move() {
  return &effect_move_;
}

// repeated .jynetwork.proto.sVipStats vip_stats = 56;
inline int sPersistDB::vip_stats_size() const {
  return vip_stats_.size();
}
inline void sPersistDB::clear_vip_stats() {
  vip_stats_.Clear();
}
inline const ::jynetwork::proto::sVipStats& sPersistDB::vip_stats(int index) const {
  return vip_stats_.Get(index);
}
inline ::jynetwork::proto::sVipStats* sPersistDB::mutable_vip_stats(int index) {
  return vip_stats_.Mutable(index);
}
inline ::jynetwork::proto::sVipStats* sPersistDB::add_vip_stats() {
  return vip_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipStats >&
sPersistDB::vip_stats() const {
  return vip_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipStats >*
sPersistDB::mutable_vip_stats() {
  return &vip_stats_;
}

// repeated .jynetwork.proto.sVipCostStats elite_reset = 57;
inline int sPersistDB::elite_reset_size() const {
  return elite_reset_.size();
}
inline void sPersistDB::clear_elite_reset() {
  elite_reset_.Clear();
}
inline const ::jynetwork::proto::sVipCostStats& sPersistDB::elite_reset(int index) const {
  return elite_reset_.Get(index);
}
inline ::jynetwork::proto::sVipCostStats* sPersistDB::mutable_elite_reset(int index) {
  return elite_reset_.Mutable(index);
}
inline ::jynetwork::proto::sVipCostStats* sPersistDB::add_elite_reset() {
  return elite_reset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >&
sPersistDB::elite_reset() const {
  return elite_reset_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >*
sPersistDB::mutable_elite_reset() {
  return &elite_reset_;
}

// repeated .jynetwork.proto.sVipCostStats shop_reset = 58;
inline int sPersistDB::shop_reset_size() const {
  return shop_reset_.size();
}
inline void sPersistDB::clear_shop_reset() {
  shop_reset_.Clear();
}
inline const ::jynetwork::proto::sVipCostStats& sPersistDB::shop_reset(int index) const {
  return shop_reset_.Get(index);
}
inline ::jynetwork::proto::sVipCostStats* sPersistDB::mutable_shop_reset(int index) {
  return shop_reset_.Mutable(index);
}
inline ::jynetwork::proto::sVipCostStats* sPersistDB::add_shop_reset() {
  return shop_reset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >&
sPersistDB::shop_reset() const {
  return shop_reset_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >*
sPersistDB::mutable_shop_reset() {
  return &shop_reset_;
}

// repeated .jynetwork.proto.sVipCostStats worldboss_reset = 59;
inline int sPersistDB::worldboss_reset_size() const {
  return worldboss_reset_.size();
}
inline void sPersistDB::clear_worldboss_reset() {
  worldboss_reset_.Clear();
}
inline const ::jynetwork::proto::sVipCostStats& sPersistDB::worldboss_reset(int index) const {
  return worldboss_reset_.Get(index);
}
inline ::jynetwork::proto::sVipCostStats* sPersistDB::mutable_worldboss_reset(int index) {
  return worldboss_reset_.Mutable(index);
}
inline ::jynetwork::proto::sVipCostStats* sPersistDB::add_worldboss_reset() {
  return worldboss_reset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >&
sPersistDB::worldboss_reset() const {
  return worldboss_reset_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >*
sPersistDB::mutable_worldboss_reset() {
  return &worldboss_reset_;
}

// repeated .jynetwork.proto.sEquipGroupStats equip_group_stats = 60;
inline int sPersistDB::equip_group_stats_size() const {
  return equip_group_stats_.size();
}
inline void sPersistDB::clear_equip_group_stats() {
  equip_group_stats_.Clear();
}
inline const ::jynetwork::proto::sEquipGroupStats& sPersistDB::equip_group_stats(int index) const {
  return equip_group_stats_.Get(index);
}
inline ::jynetwork::proto::sEquipGroupStats* sPersistDB::mutable_equip_group_stats(int index) {
  return equip_group_stats_.Mutable(index);
}
inline ::jynetwork::proto::sEquipGroupStats* sPersistDB::add_equip_group_stats() {
  return equip_group_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipGroupStats >&
sPersistDB::equip_group_stats() const {
  return equip_group_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipGroupStats >*
sPersistDB::mutable_equip_group_stats() {
  return &equip_group_stats_;
}

// repeated .jynetwork.proto.sConstantsStats constant_group_stats = 61;
inline int sPersistDB::constant_group_stats_size() const {
  return constant_group_stats_.size();
}
inline void sPersistDB::clear_constant_group_stats() {
  constant_group_stats_.Clear();
}
inline const ::jynetwork::proto::sConstantsStats& sPersistDB::constant_group_stats(int index) const {
  return constant_group_stats_.Get(index);
}
inline ::jynetwork::proto::sConstantsStats* sPersistDB::mutable_constant_group_stats(int index) {
  return constant_group_stats_.Mutable(index);
}
inline ::jynetwork::proto::sConstantsStats* sPersistDB::add_constant_group_stats() {
  return constant_group_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sConstantsStats >&
sPersistDB::constant_group_stats() const {
  return constant_group_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sConstantsStats >*
sPersistDB::mutable_constant_group_stats() {
  return &constant_group_stats_;
}

// repeated .jynetwork.proto.sMusiceEventTable music_event = 62;
inline int sPersistDB::music_event_size() const {
  return music_event_.size();
}
inline void sPersistDB::clear_music_event() {
  music_event_.Clear();
}
inline const ::jynetwork::proto::sMusiceEventTable& sPersistDB::music_event(int index) const {
  return music_event_.Get(index);
}
inline ::jynetwork::proto::sMusiceEventTable* sPersistDB::mutable_music_event(int index) {
  return music_event_.Mutable(index);
}
inline ::jynetwork::proto::sMusiceEventTable* sPersistDB::add_music_event() {
  return music_event_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMusiceEventTable >&
sPersistDB::music_event() const {
  return music_event_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sMusiceEventTable >*
sPersistDB::mutable_music_event() {
  return &music_event_;
}

// repeated .jynetwork.proto.sCastleEndlessRelation castle_er = 63;
inline int sPersistDB::castle_er_size() const {
  return castle_er_.size();
}
inline void sPersistDB::clear_castle_er() {
  castle_er_.Clear();
}
inline const ::jynetwork::proto::sCastleEndlessRelation& sPersistDB::castle_er(int index) const {
  return castle_er_.Get(index);
}
inline ::jynetwork::proto::sCastleEndlessRelation* sPersistDB::mutable_castle_er(int index) {
  return castle_er_.Mutable(index);
}
inline ::jynetwork::proto::sCastleEndlessRelation* sPersistDB::add_castle_er() {
  return castle_er_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleEndlessRelation >&
sPersistDB::castle_er() const {
  return castle_er_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sCastleEndlessRelation >*
sPersistDB::mutable_castle_er() {
  return &castle_er_;
}

// repeated .jynetwork.proto.CorpsBossMapStats bossMapStats = 64;
inline int sPersistDB::bossmapstats_size() const {
  return bossmapstats_.size();
}
inline void sPersistDB::clear_bossmapstats() {
  bossmapstats_.Clear();
}
inline const ::jynetwork::proto::CorpsBossMapStats& sPersistDB::bossmapstats(int index) const {
  return bossmapstats_.Get(index);
}
inline ::jynetwork::proto::CorpsBossMapStats* sPersistDB::mutable_bossmapstats(int index) {
  return bossmapstats_.Mutable(index);
}
inline ::jynetwork::proto::CorpsBossMapStats* sPersistDB::add_bossmapstats() {
  return bossmapstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossMapStats >&
sPersistDB::bossmapstats() const {
  return bossmapstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::CorpsBossMapStats >*
sPersistDB::mutable_bossmapstats() {
  return &bossmapstats_;
}

// repeated .jynetwork.proto.sVipCostStats cold_reset = 65;
inline int sPersistDB::cold_reset_size() const {
  return cold_reset_.size();
}
inline void sPersistDB::clear_cold_reset() {
  cold_reset_.Clear();
}
inline const ::jynetwork::proto::sVipCostStats& sPersistDB::cold_reset(int index) const {
  return cold_reset_.Get(index);
}
inline ::jynetwork::proto::sVipCostStats* sPersistDB::mutable_cold_reset(int index) {
  return cold_reset_.Mutable(index);
}
inline ::jynetwork::proto::sVipCostStats* sPersistDB::add_cold_reset() {
  return cold_reset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >&
sPersistDB::cold_reset() const {
  return cold_reset_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >*
sPersistDB::mutable_cold_reset() {
  return &cold_reset_;
}

// repeated string battle_loadings = 66;
inline int sPersistDB::battle_loadings_size() const {
  return battle_loadings_.size();
}
inline void sPersistDB::clear_battle_loadings() {
  battle_loadings_.Clear();
}
inline const ::std::string& sPersistDB::battle_loadings(int index) const {
  return battle_loadings_.Get(index);
}
inline ::std::string* sPersistDB::mutable_battle_loadings(int index) {
  return battle_loadings_.Mutable(index);
}
inline void sPersistDB::set_battle_loadings(int index, const ::std::string& value) {
  battle_loadings_.Mutable(index)->assign(value);
}
inline void sPersistDB::set_battle_loadings(int index, const char* value) {
  battle_loadings_.Mutable(index)->assign(value);
}
inline void sPersistDB::set_battle_loadings(int index, const char* value, size_t size) {
  battle_loadings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPersistDB::add_battle_loadings() {
  return battle_loadings_.Add();
}
inline void sPersistDB::add_battle_loadings(const ::std::string& value) {
  battle_loadings_.Add()->assign(value);
}
inline void sPersistDB::add_battle_loadings(const char* value) {
  battle_loadings_.Add()->assign(value);
}
inline void sPersistDB::add_battle_loadings(const char* value, size_t size) {
  battle_loadings_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
sPersistDB::battle_loadings() const {
  return battle_loadings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
sPersistDB::mutable_battle_loadings() {
  return &battle_loadings_;
}

// repeated .jynetwork.proto.sVipCostStats double_fight_reset = 67;
inline int sPersistDB::double_fight_reset_size() const {
  return double_fight_reset_.size();
}
inline void sPersistDB::clear_double_fight_reset() {
  double_fight_reset_.Clear();
}
inline const ::jynetwork::proto::sVipCostStats& sPersistDB::double_fight_reset(int index) const {
  return double_fight_reset_.Get(index);
}
inline ::jynetwork::proto::sVipCostStats* sPersistDB::mutable_double_fight_reset(int index) {
  return double_fight_reset_.Mutable(index);
}
inline ::jynetwork::proto::sVipCostStats* sPersistDB::add_double_fight_reset() {
  return double_fight_reset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >&
sPersistDB::double_fight_reset() const {
  return double_fight_reset_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sVipCostStats >*
sPersistDB::mutable_double_fight_reset() {
  return &double_fight_reset_;
}

// -------------------------------------------------------------------

// sMusicSetting

// optional uint32 bgm_open = 1;
inline bool sMusicSetting::has_bgm_open() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sMusicSetting::set_has_bgm_open() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sMusicSetting::clear_has_bgm_open() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sMusicSetting::clear_bgm_open() {
  bgm_open_ = 0u;
  clear_has_bgm_open();
}
inline ::google::protobuf::uint32 sMusicSetting::bgm_open() const {
  return bgm_open_;
}
inline void sMusicSetting::set_bgm_open(::google::protobuf::uint32 value) {
  set_has_bgm_open();
  bgm_open_ = value;
}

// optional uint32 se_open = 2;
inline bool sMusicSetting::has_se_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sMusicSetting::set_has_se_open() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sMusicSetting::clear_has_se_open() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sMusicSetting::clear_se_open() {
  se_open_ = 0u;
  clear_has_se_open();
}
inline ::google::protobuf::uint32 sMusicSetting::se_open() const {
  return se_open_;
}
inline void sMusicSetting::set_se_open(::google::protobuf::uint32 value) {
  set_has_se_open();
  se_open_ = value;
}

// optional float bgm_vol = 3;
inline bool sMusicSetting::has_bgm_vol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sMusicSetting::set_has_bgm_vol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sMusicSetting::clear_has_bgm_vol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sMusicSetting::clear_bgm_vol() {
  bgm_vol_ = 0;
  clear_has_bgm_vol();
}
inline float sMusicSetting::bgm_vol() const {
  return bgm_vol_;
}
inline void sMusicSetting::set_bgm_vol(float value) {
  set_has_bgm_vol();
  bgm_vol_ = value;
}

// optional float se_vol = 4;
inline bool sMusicSetting::has_se_vol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sMusicSetting::set_has_se_vol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sMusicSetting::clear_has_se_vol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sMusicSetting::clear_se_vol() {
  se_vol_ = 0;
  clear_has_se_vol();
}
inline float sMusicSetting::se_vol() const {
  return se_vol_;
}
inline void sMusicSetting::set_se_vol(float value) {
  set_has_se_vol();
  se_vol_ = value;
}

// -------------------------------------------------------------------

// sPlayerSaveExt

// optional .jynetwork.proto.sMusicSetting music = 1;
inline bool sPlayerSaveExt::has_music() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPlayerSaveExt::set_has_music() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPlayerSaveExt::clear_has_music() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPlayerSaveExt::clear_music() {
  if (music_ != NULL) music_->::jynetwork::proto::sMusicSetting::Clear();
  clear_has_music();
}
inline const ::jynetwork::proto::sMusicSetting& sPlayerSaveExt::music() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return music_ != NULL ? *music_ : *default_instance().music_;
#else
  return music_ != NULL ? *music_ : *default_instance_->music_;
#endif
}
inline ::jynetwork::proto::sMusicSetting* sPlayerSaveExt::mutable_music() {
  set_has_music();
  if (music_ == NULL) music_ = new ::jynetwork::proto::sMusicSetting;
  return music_;
}
inline ::jynetwork::proto::sMusicSetting* sPlayerSaveExt::release_music() {
  clear_has_music();
  ::jynetwork::proto::sMusicSetting* temp = music_;
  music_ = NULL;
  return temp;
}
inline void sPlayerSaveExt::set_allocated_music(::jynetwork::proto::sMusicSetting* music) {
  delete music_;
  music_ = music;
  if (music) {
    set_has_music();
  } else {
    clear_has_music();
  }
}

// optional uint32 skillauto = 2;
inline bool sPlayerSaveExt::has_skillauto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPlayerSaveExt::set_has_skillauto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPlayerSaveExt::clear_has_skillauto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPlayerSaveExt::clear_skillauto() {
  skillauto_ = 0u;
  clear_has_skillauto();
}
inline ::google::protobuf::uint32 sPlayerSaveExt::skillauto() const {
  return skillauto_;
}
inline void sPlayerSaveExt::set_skillauto(::google::protobuf::uint32 value) {
  set_has_skillauto();
  skillauto_ = value;
}

// repeated uint32 guides = 3;
inline int sPlayerSaveExt::guides_size() const {
  return guides_.size();
}
inline void sPlayerSaveExt::clear_guides() {
  guides_.Clear();
}
inline ::google::protobuf::uint32 sPlayerSaveExt::guides(int index) const {
  return guides_.Get(index);
}
inline void sPlayerSaveExt::set_guides(int index, ::google::protobuf::uint32 value) {
  guides_.Set(index, value);
}
inline void sPlayerSaveExt::add_guides(::google::protobuf::uint32 value) {
  guides_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sPlayerSaveExt::guides() const {
  return guides_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sPlayerSaveExt::mutable_guides() {
  return &guides_;
}

// -------------------------------------------------------------------

// sLanguageCell

// optional uint32 uid = 1;
inline bool sLanguageCell::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sLanguageCell::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sLanguageCell::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sLanguageCell::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sLanguageCell::uid() const {
  return uid_;
}
inline void sLanguageCell::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string language = 2;
inline bool sLanguageCell::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sLanguageCell::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sLanguageCell::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sLanguageCell::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& sLanguageCell::language() const {
  return *language_;
}
inline void sLanguageCell::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void sLanguageCell::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void sLanguageCell::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sLanguageCell::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* sLanguageCell::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sLanguageCell::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sLanguages

// optional uint32 uid = 1;
inline bool sLanguages::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sLanguages::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sLanguages::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sLanguages::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sLanguages::uid() const {
  return uid_;
}
inline void sLanguages::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// repeated .jynetwork.proto.sLanguageCell cells = 2;
inline int sLanguages::cells_size() const {
  return cells_.size();
}
inline void sLanguages::clear_cells() {
  cells_.Clear();
}
inline const ::jynetwork::proto::sLanguageCell& sLanguages::cells(int index) const {
  return cells_.Get(index);
}
inline ::jynetwork::proto::sLanguageCell* sLanguages::mutable_cells(int index) {
  return cells_.Mutable(index);
}
inline ::jynetwork::proto::sLanguageCell* sLanguages::add_cells() {
  return cells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sLanguageCell >&
sLanguages::cells() const {
  return cells_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sLanguageCell >*
sLanguages::mutable_cells() {
  return &cells_;
}

// -------------------------------------------------------------------

// sBattleGuide

// optional int32 wave = 1;
inline bool sBattleGuide::has_wave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sBattleGuide::set_has_wave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sBattleGuide::clear_has_wave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sBattleGuide::clear_wave() {
  wave_ = 0;
  clear_has_wave();
}
inline ::google::protobuf::int32 sBattleGuide::wave() const {
  return wave_;
}
inline void sBattleGuide::set_wave(::google::protobuf::int32 value) {
  set_has_wave();
  wave_ = value;
}

// optional uint32 is_init = 2;
inline bool sBattleGuide::has_is_init() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sBattleGuide::set_has_is_init() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sBattleGuide::clear_has_is_init() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sBattleGuide::clear_is_init() {
  is_init_ = 0u;
  clear_has_is_init();
}
inline ::google::protobuf::uint32 sBattleGuide::is_init() const {
  return is_init_;
}
inline void sBattleGuide::set_is_init(::google::protobuf::uint32 value) {
  set_has_is_init();
  is_init_ = value;
}

// optional float delay = 3;
inline bool sBattleGuide::has_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sBattleGuide::set_has_delay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sBattleGuide::clear_has_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sBattleGuide::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline float sBattleGuide::delay() const {
  return delay_;
}
inline void sBattleGuide::set_delay(float value) {
  set_has_delay();
  delay_ = value;
}

// optional uint32 is_pause = 4;
inline bool sBattleGuide::has_is_pause() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sBattleGuide::set_has_is_pause() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sBattleGuide::clear_has_is_pause() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sBattleGuide::clear_is_pause() {
  is_pause_ = 0u;
  clear_has_is_pause();
}
inline ::google::protobuf::uint32 sBattleGuide::is_pause() const {
  return is_pause_;
}
inline void sBattleGuide::set_is_pause(::google::protobuf::uint32 value) {
  set_has_is_pause();
  is_pause_ = value;
}

// optional uint32 is_continue = 5;
inline bool sBattleGuide::has_is_continue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sBattleGuide::set_has_is_continue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sBattleGuide::clear_has_is_continue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sBattleGuide::clear_is_continue() {
  is_continue_ = 0u;
  clear_has_is_continue();
}
inline ::google::protobuf::uint32 sBattleGuide::is_continue() const {
  return is_continue_;
}
inline void sBattleGuide::set_is_continue(::google::protobuf::uint32 value) {
  set_has_is_continue();
  is_continue_ = value;
}

// optional uint32 end_to_continue = 6;
inline bool sBattleGuide::has_end_to_continue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sBattleGuide::set_has_end_to_continue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sBattleGuide::clear_has_end_to_continue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sBattleGuide::clear_end_to_continue() {
  end_to_continue_ = 0u;
  clear_has_end_to_continue();
}
inline ::google::protobuf::uint32 sBattleGuide::end_to_continue() const {
  return end_to_continue_;
}
inline void sBattleGuide::set_end_to_continue(::google::protobuf::uint32 value) {
  set_has_end_to_continue();
  end_to_continue_ = value;
}

// optional uint32 end_condition = 7;
inline bool sBattleGuide::has_end_condition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sBattleGuide::set_has_end_condition() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sBattleGuide::clear_has_end_condition() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sBattleGuide::clear_end_condition() {
  end_condition_ = 0u;
  clear_has_end_condition();
}
inline ::google::protobuf::uint32 sBattleGuide::end_condition() const {
  return end_condition_;
}
inline void sBattleGuide::set_end_condition(::google::protobuf::uint32 value) {
  set_has_end_condition();
  end_condition_ = value;
}

// optional float ec_param1 = 8;
inline bool sBattleGuide::has_ec_param1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sBattleGuide::set_has_ec_param1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sBattleGuide::clear_has_ec_param1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sBattleGuide::clear_ec_param1() {
  ec_param1_ = 0;
  clear_has_ec_param1();
}
inline float sBattleGuide::ec_param1() const {
  return ec_param1_;
}
inline void sBattleGuide::set_ec_param1(float value) {
  set_has_ec_param1();
  ec_param1_ = value;
}

// optional uint32 ec_param2 = 9;
inline bool sBattleGuide::has_ec_param2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sBattleGuide::set_has_ec_param2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sBattleGuide::clear_has_ec_param2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sBattleGuide::clear_ec_param2() {
  ec_param2_ = 0u;
  clear_has_ec_param2();
}
inline ::google::protobuf::uint32 sBattleGuide::ec_param2() const {
  return ec_param2_;
}
inline void sBattleGuide::set_ec_param2(::google::protobuf::uint32 value) {
  set_has_ec_param2();
  ec_param2_ = value;
}

// optional uint32 show_ccb = 10;
inline bool sBattleGuide::has_show_ccb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sBattleGuide::set_has_show_ccb() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sBattleGuide::clear_has_show_ccb() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sBattleGuide::clear_show_ccb() {
  show_ccb_ = 0u;
  clear_has_show_ccb();
}
inline ::google::protobuf::uint32 sBattleGuide::show_ccb() const {
  return show_ccb_;
}
inline void sBattleGuide::set_show_ccb(::google::protobuf::uint32 value) {
  set_has_show_ccb();
  show_ccb_ = value;
}

// optional string ccb_param = 11;
inline bool sBattleGuide::has_ccb_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sBattleGuide::set_has_ccb_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sBattleGuide::clear_has_ccb_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sBattleGuide::clear_ccb_param() {
  if (ccb_param_ != &::google::protobuf::internal::kEmptyString) {
    ccb_param_->clear();
  }
  clear_has_ccb_param();
}
inline const ::std::string& sBattleGuide::ccb_param() const {
  return *ccb_param_;
}
inline void sBattleGuide::set_ccb_param(const ::std::string& value) {
  set_has_ccb_param();
  if (ccb_param_ == &::google::protobuf::internal::kEmptyString) {
    ccb_param_ = new ::std::string;
  }
  ccb_param_->assign(value);
}
inline void sBattleGuide::set_ccb_param(const char* value) {
  set_has_ccb_param();
  if (ccb_param_ == &::google::protobuf::internal::kEmptyString) {
    ccb_param_ = new ::std::string;
  }
  ccb_param_->assign(value);
}
inline void sBattleGuide::set_ccb_param(const char* value, size_t size) {
  set_has_ccb_param();
  if (ccb_param_ == &::google::protobuf::internal::kEmptyString) {
    ccb_param_ = new ::std::string;
  }
  ccb_param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sBattleGuide::mutable_ccb_param() {
  set_has_ccb_param();
  if (ccb_param_ == &::google::protobuf::internal::kEmptyString) {
    ccb_param_ = new ::std::string;
  }
  return ccb_param_;
}
inline ::std::string* sBattleGuide::release_ccb_param() {
  clear_has_ccb_param();
  if (ccb_param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ccb_param_;
    ccb_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sBattleGuide::set_allocated_ccb_param(::std::string* ccb_param) {
  if (ccb_param_ != &::google::protobuf::internal::kEmptyString) {
    delete ccb_param_;
  }
  if (ccb_param) {
    set_has_ccb_param();
    ccb_param_ = ccb_param;
  } else {
    clear_has_ccb_param();
    ccb_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ccb_right_in = 12;
inline bool sBattleGuide::has_ccb_right_in() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sBattleGuide::set_has_ccb_right_in() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sBattleGuide::clear_has_ccb_right_in() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sBattleGuide::clear_ccb_right_in() {
  ccb_right_in_ = 0u;
  clear_has_ccb_right_in();
}
inline ::google::protobuf::uint32 sBattleGuide::ccb_right_in() const {
  return ccb_right_in_;
}
inline void sBattleGuide::set_ccb_right_in(::google::protobuf::uint32 value) {
  set_has_ccb_right_in();
  ccb_right_in_ = value;
}

// optional string ccb_char_name = 13;
inline bool sBattleGuide::has_ccb_char_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sBattleGuide::set_has_ccb_char_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sBattleGuide::clear_has_ccb_char_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sBattleGuide::clear_ccb_char_name() {
  if (ccb_char_name_ != &::google::protobuf::internal::kEmptyString) {
    ccb_char_name_->clear();
  }
  clear_has_ccb_char_name();
}
inline const ::std::string& sBattleGuide::ccb_char_name() const {
  return *ccb_char_name_;
}
inline void sBattleGuide::set_ccb_char_name(const ::std::string& value) {
  set_has_ccb_char_name();
  if (ccb_char_name_ == &::google::protobuf::internal::kEmptyString) {
    ccb_char_name_ = new ::std::string;
  }
  ccb_char_name_->assign(value);
}
inline void sBattleGuide::set_ccb_char_name(const char* value) {
  set_has_ccb_char_name();
  if (ccb_char_name_ == &::google::protobuf::internal::kEmptyString) {
    ccb_char_name_ = new ::std::string;
  }
  ccb_char_name_->assign(value);
}
inline void sBattleGuide::set_ccb_char_name(const char* value, size_t size) {
  set_has_ccb_char_name();
  if (ccb_char_name_ == &::google::protobuf::internal::kEmptyString) {
    ccb_char_name_ = new ::std::string;
  }
  ccb_char_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sBattleGuide::mutable_ccb_char_name() {
  set_has_ccb_char_name();
  if (ccb_char_name_ == &::google::protobuf::internal::kEmptyString) {
    ccb_char_name_ = new ::std::string;
  }
  return ccb_char_name_;
}
inline ::std::string* sBattleGuide::release_ccb_char_name() {
  clear_has_ccb_char_name();
  if (ccb_char_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ccb_char_name_;
    ccb_char_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sBattleGuide::set_allocated_ccb_char_name(::std::string* ccb_char_name) {
  if (ccb_char_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ccb_char_name_;
  }
  if (ccb_char_name) {
    set_has_ccb_char_name();
    ccb_char_name_ = ccb_char_name;
  } else {
    clear_has_ccb_char_name();
    ccb_char_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ccb_end = 14;
inline bool sBattleGuide::has_ccb_end() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sBattleGuide::set_has_ccb_end() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sBattleGuide::clear_has_ccb_end() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sBattleGuide::clear_ccb_end() {
  ccb_end_ = 0u;
  clear_has_ccb_end();
}
inline ::google::protobuf::uint32 sBattleGuide::ccb_end() const {
  return ccb_end_;
}
inline void sBattleGuide::set_ccb_end(::google::protobuf::uint32 value) {
  set_has_ccb_end();
  ccb_end_ = value;
}

// optional uint32 show_speech = 15;
inline bool sBattleGuide::has_show_speech() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sBattleGuide::set_has_show_speech() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sBattleGuide::clear_has_show_speech() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sBattleGuide::clear_show_speech() {
  show_speech_ = 0u;
  clear_has_show_speech();
}
inline ::google::protobuf::uint32 sBattleGuide::show_speech() const {
  return show_speech_;
}
inline void sBattleGuide::set_show_speech(::google::protobuf::uint32 value) {
  set_has_show_speech();
  show_speech_ = value;
}

// optional uint32 triger_before = 16;
inline bool sBattleGuide::has_triger_before() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sBattleGuide::set_has_triger_before() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sBattleGuide::clear_has_triger_before() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sBattleGuide::clear_triger_before() {
  triger_before_ = 0u;
  clear_has_triger_before();
}
inline ::google::protobuf::uint32 sBattleGuide::triger_before() const {
  return triger_before_;
}
inline void sBattleGuide::set_triger_before(::google::protobuf::uint32 value) {
  set_has_triger_before();
  triger_before_ = value;
}

// optional uint32 triger = 17;
inline bool sBattleGuide::has_triger() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sBattleGuide::set_has_triger() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sBattleGuide::clear_has_triger() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sBattleGuide::clear_triger() {
  triger_ = 0u;
  clear_has_triger();
}
inline ::google::protobuf::uint32 sBattleGuide::triger() const {
  return triger_;
}
inline void sBattleGuide::set_triger(::google::protobuf::uint32 value) {
  set_has_triger();
  triger_ = value;
}

// optional float in_x = 18;
inline bool sBattleGuide::has_in_x() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sBattleGuide::set_has_in_x() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sBattleGuide::clear_has_in_x() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sBattleGuide::clear_in_x() {
  in_x_ = 0;
  clear_has_in_x();
}
inline float sBattleGuide::in_x() const {
  return in_x_;
}
inline void sBattleGuide::set_in_x(float value) {
  set_has_in_x();
  in_x_ = value;
}

// optional float in_y = 19;
inline bool sBattleGuide::has_in_y() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sBattleGuide::set_has_in_y() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sBattleGuide::clear_has_in_y() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sBattleGuide::clear_in_y() {
  in_y_ = 0;
  clear_has_in_y();
}
inline float sBattleGuide::in_y() const {
  return in_y_;
}
inline void sBattleGuide::set_in_y(float value) {
  set_has_in_y();
  in_y_ = value;
}

// optional uint32 lost_play = 20;
inline bool sBattleGuide::has_lost_play() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sBattleGuide::set_has_lost_play() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sBattleGuide::clear_has_lost_play() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sBattleGuide::clear_lost_play() {
  lost_play_ = 0u;
  clear_has_lost_play();
}
inline ::google::protobuf::uint32 sBattleGuide::lost_play() const {
  return lost_play_;
}
inline void sBattleGuide::set_lost_play(::google::protobuf::uint32 value) {
  set_has_lost_play();
  lost_play_ = value;
}

// optional string ccb_anim_name = 21;
inline bool sBattleGuide::has_ccb_anim_name() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sBattleGuide::set_has_ccb_anim_name() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sBattleGuide::clear_has_ccb_anim_name() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sBattleGuide::clear_ccb_anim_name() {
  if (ccb_anim_name_ != &::google::protobuf::internal::kEmptyString) {
    ccb_anim_name_->clear();
  }
  clear_has_ccb_anim_name();
}
inline const ::std::string& sBattleGuide::ccb_anim_name() const {
  return *ccb_anim_name_;
}
inline void sBattleGuide::set_ccb_anim_name(const ::std::string& value) {
  set_has_ccb_anim_name();
  if (ccb_anim_name_ == &::google::protobuf::internal::kEmptyString) {
    ccb_anim_name_ = new ::std::string;
  }
  ccb_anim_name_->assign(value);
}
inline void sBattleGuide::set_ccb_anim_name(const char* value) {
  set_has_ccb_anim_name();
  if (ccb_anim_name_ == &::google::protobuf::internal::kEmptyString) {
    ccb_anim_name_ = new ::std::string;
  }
  ccb_anim_name_->assign(value);
}
inline void sBattleGuide::set_ccb_anim_name(const char* value, size_t size) {
  set_has_ccb_anim_name();
  if (ccb_anim_name_ == &::google::protobuf::internal::kEmptyString) {
    ccb_anim_name_ = new ::std::string;
  }
  ccb_anim_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sBattleGuide::mutable_ccb_anim_name() {
  set_has_ccb_anim_name();
  if (ccb_anim_name_ == &::google::protobuf::internal::kEmptyString) {
    ccb_anim_name_ = new ::std::string;
  }
  return ccb_anim_name_;
}
inline ::std::string* sBattleGuide::release_ccb_anim_name() {
  clear_has_ccb_anim_name();
  if (ccb_anim_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ccb_anim_name_;
    ccb_anim_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sBattleGuide::set_allocated_ccb_anim_name(::std::string* ccb_anim_name) {
  if (ccb_anim_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ccb_anim_name_;
  }
  if (ccb_anim_name) {
    set_has_ccb_anim_name();
    ccb_anim_name_ = ccb_anim_name;
  } else {
    clear_has_ccb_anim_name();
    ccb_anim_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 anim3d_name = 22;
inline bool sBattleGuide::has_anim3d_name() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sBattleGuide::set_has_anim3d_name() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sBattleGuide::clear_has_anim3d_name() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sBattleGuide::clear_anim3d_name() {
  anim3d_name_ = 0u;
  clear_has_anim3d_name();
}
inline ::google::protobuf::uint32 sBattleGuide::anim3d_name() const {
  return anim3d_name_;
}
inline void sBattleGuide::set_anim3d_name(::google::protobuf::uint32 value) {
  set_has_anim3d_name();
  anim3d_name_ = value;
}

// optional uint32 anim3d_name_loop = 23;
inline bool sBattleGuide::has_anim3d_name_loop() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sBattleGuide::set_has_anim3d_name_loop() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sBattleGuide::clear_has_anim3d_name_loop() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sBattleGuide::clear_anim3d_name_loop() {
  anim3d_name_loop_ = 0u;
  clear_has_anim3d_name_loop();
}
inline ::google::protobuf::uint32 sBattleGuide::anim3d_name_loop() const {
  return anim3d_name_loop_;
}
inline void sBattleGuide::set_anim3d_name_loop(::google::protobuf::uint32 value) {
  set_has_anim3d_name_loop();
  anim3d_name_loop_ = value;
}

// optional string speech = 24;
inline bool sBattleGuide::has_speech() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sBattleGuide::set_has_speech() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sBattleGuide::clear_has_speech() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sBattleGuide::clear_speech() {
  if (speech_ != &::google::protobuf::internal::kEmptyString) {
    speech_->clear();
  }
  clear_has_speech();
}
inline const ::std::string& sBattleGuide::speech() const {
  return *speech_;
}
inline void sBattleGuide::set_speech(const ::std::string& value) {
  set_has_speech();
  if (speech_ == &::google::protobuf::internal::kEmptyString) {
    speech_ = new ::std::string;
  }
  speech_->assign(value);
}
inline void sBattleGuide::set_speech(const char* value) {
  set_has_speech();
  if (speech_ == &::google::protobuf::internal::kEmptyString) {
    speech_ = new ::std::string;
  }
  speech_->assign(value);
}
inline void sBattleGuide::set_speech(const char* value, size_t size) {
  set_has_speech();
  if (speech_ == &::google::protobuf::internal::kEmptyString) {
    speech_ = new ::std::string;
  }
  speech_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sBattleGuide::mutable_speech() {
  set_has_speech();
  if (speech_ == &::google::protobuf::internal::kEmptyString) {
    speech_ = new ::std::string;
  }
  return speech_;
}
inline ::std::string* sBattleGuide::release_speech() {
  clear_has_speech();
  if (speech_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = speech_;
    speech_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sBattleGuide::set_allocated_speech(::std::string* speech) {
  if (speech_ != &::google::protobuf::internal::kEmptyString) {
    delete speech_;
  }
  if (speech) {
    set_has_speech();
    speech_ = speech;
  } else {
    clear_has_speech();
    speech_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float speech_time = 25;
inline bool sBattleGuide::has_speech_time() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sBattleGuide::set_has_speech_time() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sBattleGuide::clear_has_speech_time() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sBattleGuide::clear_speech_time() {
  speech_time_ = 0;
  clear_has_speech_time();
}
inline float sBattleGuide::speech_time() const {
  return speech_time_;
}
inline void sBattleGuide::set_speech_time(float value) {
  set_has_speech_time();
  speech_time_ = value;
}

// optional float pause_delay = 26;
inline bool sBattleGuide::has_pause_delay() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sBattleGuide::set_has_pause_delay() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sBattleGuide::clear_has_pause_delay() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sBattleGuide::clear_pause_delay() {
  pause_delay_ = 0;
  clear_has_pause_delay();
}
inline float sBattleGuide::pause_delay() const {
  return pause_delay_;
}
inline void sBattleGuide::set_pause_delay(float value) {
  set_has_pause_delay();
  pause_delay_ = value;
}

// -------------------------------------------------------------------

// sBattleMapGuide

// optional uint32 mapid = 1;
inline bool sBattleMapGuide::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sBattleMapGuide::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sBattleMapGuide::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sBattleMapGuide::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 sBattleMapGuide::mapid() const {
  return mapid_;
}
inline void sBattleMapGuide::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// repeated .jynetwork.proto.sBattleGuide guides = 2;
inline int sBattleMapGuide::guides_size() const {
  return guides_.size();
}
inline void sBattleMapGuide::clear_guides() {
  guides_.Clear();
}
inline const ::jynetwork::proto::sBattleGuide& sBattleMapGuide::guides(int index) const {
  return guides_.Get(index);
}
inline ::jynetwork::proto::sBattleGuide* sBattleMapGuide::mutable_guides(int index) {
  return guides_.Mutable(index);
}
inline ::jynetwork::proto::sBattleGuide* sBattleMapGuide::add_guides() {
  return guides_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBattleGuide >&
sBattleMapGuide::guides() const {
  return guides_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sBattleGuide >*
sBattleMapGuide::mutable_guides() {
  return &guides_;
}

// -------------------------------------------------------------------

// sSoundEffectWav

// optional string snd_name = 1;
inline bool sSoundEffectWav::has_snd_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSoundEffectWav::set_has_snd_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSoundEffectWav::clear_has_snd_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSoundEffectWav::clear_snd_name() {
  if (snd_name_ != &::google::protobuf::internal::kEmptyString) {
    snd_name_->clear();
  }
  clear_has_snd_name();
}
inline const ::std::string& sSoundEffectWav::snd_name() const {
  return *snd_name_;
}
inline void sSoundEffectWav::set_snd_name(const ::std::string& value) {
  set_has_snd_name();
  if (snd_name_ == &::google::protobuf::internal::kEmptyString) {
    snd_name_ = new ::std::string;
  }
  snd_name_->assign(value);
}
inline void sSoundEffectWav::set_snd_name(const char* value) {
  set_has_snd_name();
  if (snd_name_ == &::google::protobuf::internal::kEmptyString) {
    snd_name_ = new ::std::string;
  }
  snd_name_->assign(value);
}
inline void sSoundEffectWav::set_snd_name(const char* value, size_t size) {
  set_has_snd_name();
  if (snd_name_ == &::google::protobuf::internal::kEmptyString) {
    snd_name_ = new ::std::string;
  }
  snd_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSoundEffectWav::mutable_snd_name() {
  set_has_snd_name();
  if (snd_name_ == &::google::protobuf::internal::kEmptyString) {
    snd_name_ = new ::std::string;
  }
  return snd_name_;
}
inline ::std::string* sSoundEffectWav::release_snd_name() {
  clear_has_snd_name();
  if (snd_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snd_name_;
    snd_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSoundEffectWav::set_allocated_snd_name(::std::string* snd_name) {
  if (snd_name_ != &::google::protobuf::internal::kEmptyString) {
    delete snd_name_;
  }
  if (snd_name) {
    set_has_snd_name();
    snd_name_ = snd_name;
  } else {
    clear_has_snd_name();
    snd_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string snd_files = 2;
inline int sSoundEffectWav::snd_files_size() const {
  return snd_files_.size();
}
inline void sSoundEffectWav::clear_snd_files() {
  snd_files_.Clear();
}
inline const ::std::string& sSoundEffectWav::snd_files(int index) const {
  return snd_files_.Get(index);
}
inline ::std::string* sSoundEffectWav::mutable_snd_files(int index) {
  return snd_files_.Mutable(index);
}
inline void sSoundEffectWav::set_snd_files(int index, const ::std::string& value) {
  snd_files_.Mutable(index)->assign(value);
}
inline void sSoundEffectWav::set_snd_files(int index, const char* value) {
  snd_files_.Mutable(index)->assign(value);
}
inline void sSoundEffectWav::set_snd_files(int index, const char* value, size_t size) {
  snd_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSoundEffectWav::add_snd_files() {
  return snd_files_.Add();
}
inline void sSoundEffectWav::add_snd_files(const ::std::string& value) {
  snd_files_.Add()->assign(value);
}
inline void sSoundEffectWav::add_snd_files(const char* value) {
  snd_files_.Add()->assign(value);
}
inline void sSoundEffectWav::add_snd_files(const char* value, size_t size) {
  snd_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
sSoundEffectWav::snd_files() const {
  return snd_files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
sSoundEffectWav::mutable_snd_files() {
  return &snd_files_;
}

// optional uint32 is_mp3 = 3;
inline bool sSoundEffectWav::has_is_mp3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sSoundEffectWav::set_has_is_mp3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sSoundEffectWav::clear_has_is_mp3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sSoundEffectWav::clear_is_mp3() {
  is_mp3_ = 0u;
  clear_has_is_mp3();
}
inline ::google::protobuf::uint32 sSoundEffectWav::is_mp3() const {
  return is_mp3_;
}
inline void sSoundEffectWav::set_is_mp3(::google::protobuf::uint32 value) {
  set_has_is_mp3();
  is_mp3_ = value;
}

// optional float duration = 4;
inline bool sSoundEffectWav::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sSoundEffectWav::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sSoundEffectWav::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sSoundEffectWav::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float sSoundEffectWav::duration() const {
  return duration_;
}
inline void sSoundEffectWav::set_duration(float value) {
  set_has_duration();
  duration_ = value;
}

// optional uint32 max_count = 5;
inline bool sSoundEffectWav::has_max_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sSoundEffectWav::set_has_max_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sSoundEffectWav::clear_has_max_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sSoundEffectWav::clear_max_count() {
  max_count_ = 0u;
  clear_has_max_count();
}
inline ::google::protobuf::uint32 sSoundEffectWav::max_count() const {
  return max_count_;
}
inline void sSoundEffectWav::set_max_count(::google::protobuf::uint32 value) {
  set_has_max_count();
  max_count_ = value;
}

// -------------------------------------------------------------------

// sSoundEffectMusic

// optional uint32 uid = 1;
inline bool sSoundEffectMusic::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSoundEffectMusic::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSoundEffectMusic::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSoundEffectMusic::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sSoundEffectMusic::uid() const {
  return uid_;
}
inline void sSoundEffectMusic::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string snd_file = 2;
inline bool sSoundEffectMusic::has_snd_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sSoundEffectMusic::set_has_snd_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sSoundEffectMusic::clear_has_snd_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sSoundEffectMusic::clear_snd_file() {
  if (snd_file_ != &::google::protobuf::internal::kEmptyString) {
    snd_file_->clear();
  }
  clear_has_snd_file();
}
inline const ::std::string& sSoundEffectMusic::snd_file() const {
  return *snd_file_;
}
inline void sSoundEffectMusic::set_snd_file(const ::std::string& value) {
  set_has_snd_file();
  if (snd_file_ == &::google::protobuf::internal::kEmptyString) {
    snd_file_ = new ::std::string;
  }
  snd_file_->assign(value);
}
inline void sSoundEffectMusic::set_snd_file(const char* value) {
  set_has_snd_file();
  if (snd_file_ == &::google::protobuf::internal::kEmptyString) {
    snd_file_ = new ::std::string;
  }
  snd_file_->assign(value);
}
inline void sSoundEffectMusic::set_snd_file(const char* value, size_t size) {
  set_has_snd_file();
  if (snd_file_ == &::google::protobuf::internal::kEmptyString) {
    snd_file_ = new ::std::string;
  }
  snd_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSoundEffectMusic::mutable_snd_file() {
  set_has_snd_file();
  if (snd_file_ == &::google::protobuf::internal::kEmptyString) {
    snd_file_ = new ::std::string;
  }
  return snd_file_;
}
inline ::std::string* sSoundEffectMusic::release_snd_file() {
  clear_has_snd_file();
  if (snd_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snd_file_;
    snd_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSoundEffectMusic::set_allocated_snd_file(::std::string* snd_file) {
  if (snd_file_ != &::google::protobuf::internal::kEmptyString) {
    delete snd_file_;
  }
  if (snd_file) {
    set_has_snd_file();
    snd_file_ = snd_file;
  } else {
    clear_has_snd_file();
    snd_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float duration = 3;
inline bool sSoundEffectMusic::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sSoundEffectMusic::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sSoundEffectMusic::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sSoundEffectMusic::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float sSoundEffectMusic::duration() const {
  return duration_;
}
inline void sSoundEffectMusic::set_duration(float value) {
  set_has_duration();
  duration_ = value;
}

// optional uint32 next_id = 4;
inline bool sSoundEffectMusic::has_next_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sSoundEffectMusic::set_has_next_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sSoundEffectMusic::clear_has_next_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sSoundEffectMusic::clear_next_id() {
  next_id_ = 0u;
  clear_has_next_id();
}
inline ::google::protobuf::uint32 sSoundEffectMusic::next_id() const {
  return next_id_;
}
inline void sSoundEffectMusic::set_next_id(::google::protobuf::uint32 value) {
  set_has_next_id();
  next_id_ = value;
}

// -------------------------------------------------------------------

// sMusiceEventTable

// optional uint32 uid = 1;
inline bool sMusiceEventTable::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sMusiceEventTable::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sMusiceEventTable::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sMusiceEventTable::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sMusiceEventTable::uid() const {
  return uid_;
}
inline void sMusiceEventTable::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// repeated uint32 musicid = 2;
inline int sMusiceEventTable::musicid_size() const {
  return musicid_.size();
}
inline void sMusiceEventTable::clear_musicid() {
  musicid_.Clear();
}
inline ::google::protobuf::uint32 sMusiceEventTable::musicid(int index) const {
  return musicid_.Get(index);
}
inline void sMusiceEventTable::set_musicid(int index, ::google::protobuf::uint32 value) {
  musicid_.Set(index, value);
}
inline void sMusiceEventTable::add_musicid(::google::protobuf::uint32 value) {
  musicid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sMusiceEventTable::musicid() const {
  return musicid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sMusiceEventTable::mutable_musicid() {
  return &musicid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace jynetwork

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StoC_2eproto__INCLUDED
