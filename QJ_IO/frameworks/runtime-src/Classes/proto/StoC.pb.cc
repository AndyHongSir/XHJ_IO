// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoC.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StoC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace jynetwork {
namespace proto {

void protobuf_ShutdownFile_StoC_2eproto() {
  delete sCharactorInit::default_instance_;
  delete sPersonItemStats::default_instance_;
  delete sPersonEquipStats::default_instance_;
  delete sPersonSkillStats::default_instance_;
  delete sMonsterStats::default_instance_;
  delete sPersonTaskStats::default_instance_;
  delete sCastleEndlessRelation::default_instance_;
  delete sCastleInfo::default_instance_;
  delete sCastleComplete::default_instance_;
  delete sCastleDrop::default_instance_;
  delete sMonsterRefreshGroup::default_instance_;
  delete sMonsterRefresh::default_instance_;
  delete sCastleBlock::default_instance_;
  delete sCastleStats::default_instance_;
  delete sSoundStats::default_instance_;
  delete sSoundTable::default_instance_;
  delete sEffectStats::default_instance_;
  delete sEffect::default_instance_;
  delete sSubEffects::default_instance_;
  delete sEffectSound::default_instance_;
  delete sEffects::default_instance_;
  delete sEffectMove::default_instance_;
  delete sEffectTable::default_instance_;
  delete sModelAction::default_instance_;
  delete sStageLine::default_instance_;
  delete sStageProp::default_instance_;
  delete sDebugSpawnBullet::default_instance_;
  delete sDebugEraseBullet::default_instance_;
  delete sAISetting::default_instance_;
  delete sActionEff3d::default_instance_;
  delete sActionEffect::default_instance_;
  delete sPPLConstant::default_instance_;
  delete sPersistDB::default_instance_;
  delete sMusicSetting::default_instance_;
  delete sPlayerSaveExt::default_instance_;
  delete sLanguageCell::default_instance_;
  delete sLanguages::default_instance_;
  delete sBattleGuide::default_instance_;
  delete sBattleMapGuide::default_instance_;
  delete sSoundEffectWav::default_instance_;
  delete sSoundEffectMusic::default_instance_;
  delete sMusiceEventTable::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_StoC_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_StoC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::jynetwork::proto::protobuf_AddDesc_scbase_2eproto();
  ::jynetwork::proto::protobuf_AddDesc_XML_2eproto();
  ::jynetwork::proto::protobuf_AddDesc_MessageHeader_2eproto();
  sCharactorInit::default_instance_ = new sCharactorInit();
  sPersonItemStats::default_instance_ = new sPersonItemStats();
  sPersonEquipStats::default_instance_ = new sPersonEquipStats();
  sPersonSkillStats::default_instance_ = new sPersonSkillStats();
  sMonsterStats::default_instance_ = new sMonsterStats();
  sPersonTaskStats::default_instance_ = new sPersonTaskStats();
  sCastleEndlessRelation::default_instance_ = new sCastleEndlessRelation();
  sCastleInfo::default_instance_ = new sCastleInfo();
  sCastleComplete::default_instance_ = new sCastleComplete();
  sCastleDrop::default_instance_ = new sCastleDrop();
  sMonsterRefreshGroup::default_instance_ = new sMonsterRefreshGroup();
  sMonsterRefresh::default_instance_ = new sMonsterRefresh();
  sCastleBlock::default_instance_ = new sCastleBlock();
  sCastleStats::default_instance_ = new sCastleStats();
  sSoundStats::default_instance_ = new sSoundStats();
  sSoundTable::default_instance_ = new sSoundTable();
  sEffectStats::default_instance_ = new sEffectStats();
  sEffect::default_instance_ = new sEffect();
  sSubEffects::default_instance_ = new sSubEffects();
  sEffectSound::default_instance_ = new sEffectSound();
  sEffects::default_instance_ = new sEffects();
  sEffectMove::default_instance_ = new sEffectMove();
  sEffectTable::default_instance_ = new sEffectTable();
  sModelAction::default_instance_ = new sModelAction();
  sStageLine::default_instance_ = new sStageLine();
  sStageProp::default_instance_ = new sStageProp();
  sDebugSpawnBullet::default_instance_ = new sDebugSpawnBullet();
  sDebugEraseBullet::default_instance_ = new sDebugEraseBullet();
  sAISetting::default_instance_ = new sAISetting();
  sActionEff3d::default_instance_ = new sActionEff3d();
  sActionEffect::default_instance_ = new sActionEffect();
  sPPLConstant::default_instance_ = new sPPLConstant();
  sPersistDB::default_instance_ = new sPersistDB();
  sMusicSetting::default_instance_ = new sMusicSetting();
  sPlayerSaveExt::default_instance_ = new sPlayerSaveExt();
  sLanguageCell::default_instance_ = new sLanguageCell();
  sLanguages::default_instance_ = new sLanguages();
  sBattleGuide::default_instance_ = new sBattleGuide();
  sBattleMapGuide::default_instance_ = new sBattleMapGuide();
  sSoundEffectWav::default_instance_ = new sSoundEffectWav();
  sSoundEffectMusic::default_instance_ = new sSoundEffectMusic();
  sMusiceEventTable::default_instance_ = new sMusiceEventTable();
  sCharactorInit::default_instance_->InitAsDefaultInstance();
  sPersonItemStats::default_instance_->InitAsDefaultInstance();
  sPersonEquipStats::default_instance_->InitAsDefaultInstance();
  sPersonSkillStats::default_instance_->InitAsDefaultInstance();
  sMonsterStats::default_instance_->InitAsDefaultInstance();
  sPersonTaskStats::default_instance_->InitAsDefaultInstance();
  sCastleEndlessRelation::default_instance_->InitAsDefaultInstance();
  sCastleInfo::default_instance_->InitAsDefaultInstance();
  sCastleComplete::default_instance_->InitAsDefaultInstance();
  sCastleDrop::default_instance_->InitAsDefaultInstance();
  sMonsterRefreshGroup::default_instance_->InitAsDefaultInstance();
  sMonsterRefresh::default_instance_->InitAsDefaultInstance();
  sCastleBlock::default_instance_->InitAsDefaultInstance();
  sCastleStats::default_instance_->InitAsDefaultInstance();
  sSoundStats::default_instance_->InitAsDefaultInstance();
  sSoundTable::default_instance_->InitAsDefaultInstance();
  sEffectStats::default_instance_->InitAsDefaultInstance();
  sEffect::default_instance_->InitAsDefaultInstance();
  sSubEffects::default_instance_->InitAsDefaultInstance();
  sEffectSound::default_instance_->InitAsDefaultInstance();
  sEffects::default_instance_->InitAsDefaultInstance();
  sEffectMove::default_instance_->InitAsDefaultInstance();
  sEffectTable::default_instance_->InitAsDefaultInstance();
  sModelAction::default_instance_->InitAsDefaultInstance();
  sStageLine::default_instance_->InitAsDefaultInstance();
  sStageProp::default_instance_->InitAsDefaultInstance();
  sDebugSpawnBullet::default_instance_->InitAsDefaultInstance();
  sDebugEraseBullet::default_instance_->InitAsDefaultInstance();
  sAISetting::default_instance_->InitAsDefaultInstance();
  sActionEff3d::default_instance_->InitAsDefaultInstance();
  sActionEffect::default_instance_->InitAsDefaultInstance();
  sPPLConstant::default_instance_->InitAsDefaultInstance();
  sPersistDB::default_instance_->InitAsDefaultInstance();
  sMusicSetting::default_instance_->InitAsDefaultInstance();
  sPlayerSaveExt::default_instance_->InitAsDefaultInstance();
  sLanguageCell::default_instance_->InitAsDefaultInstance();
  sLanguages::default_instance_->InitAsDefaultInstance();
  sBattleGuide::default_instance_->InitAsDefaultInstance();
  sBattleMapGuide::default_instance_->InitAsDefaultInstance();
  sSoundEffectWav::default_instance_->InitAsDefaultInstance();
  sSoundEffectMusic::default_instance_->InitAsDefaultInstance();
  sMusiceEventTable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StoC_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_StoC_2eproto_once_);
void protobuf_AddDesc_StoC_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_StoC_2eproto_once_,
                 &protobuf_AddDesc_StoC_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StoC_2eproto {
  StaticDescriptorInitializer_StoC_2eproto() {
    protobuf_AddDesc_StoC_2eproto();
  }
} static_descriptor_initializer_StoC_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int sCharactorInit::kUidFieldNumber;
const int sCharactorInit::kPlayernameFieldNumber;
const int sCharactorInit::kRoleFieldNumber;
const int sCharactorInit::kLevelFieldNumber;
const int sCharactorInit::kExpFieldNumber;
const int sCharactorInit::kRankFieldNumber;
const int sCharactorInit::kRankexpFieldNumber;
const int sCharactorInit::kStatsidFieldNumber;
const int sCharactorInit::kWeaponidFieldNumber;
const int sCharactorInit::kHeadidFieldNumber;
const int sCharactorInit::kBodyidFieldNumber;
const int sCharactorInit::kOffhandidFieldNumber;
const int sCharactorInit::kRingidFieldNumber;
const int sCharactorInit::kNeckidFieldNumber;
const int sCharactorInit::kSkillidFieldNumber;
const int sCharactorInit::kSkillsidFieldNumber;
const int sCharactorInit::kSkillmidFieldNumber;
const int sCharactorInit::kSkilllidFieldNumber;
const int sCharactorInit::kCardwarrioridFieldNumber;
const int sCharactorInit::kCardmagicidFieldNumber;
const int sCharactorInit::kCardarcheridFieldNumber;
const int sCharactorInit::kCardpvpidFieldNumber;
const int sCharactorInit::kCastleprogressFieldNumber;
const int sCharactorInit::kBuffsidFieldNumber;
const int sCharactorInit::kGamestatsFieldNumber;
const int sCharactorInit::kLocalNameFieldNumber;
#endif  // !_MSC_VER

sCharactorInit::sCharactorInit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCharactorInit::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(
      ::jynetwork::proto::sGameStats::internal_default_instance());
#else
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(&::jynetwork::proto::sGameStats::default_instance());
#endif
}

sCharactorInit::sCharactorInit(const sCharactorInit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCharactorInit::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_ = 0;
  level_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  rankexp_ = GOOGLE_ULONGLONG(0);
  statsid_ = 0u;
  weaponid_ = GOOGLE_ULONGLONG(0);
  headid_ = GOOGLE_ULONGLONG(0);
  bodyid_ = GOOGLE_ULONGLONG(0);
  offhandid_ = GOOGLE_ULONGLONG(0);
  ringid_ = GOOGLE_ULONGLONG(0);
  neckid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0u;
  skillsid_ = 0u;
  skillmid_ = 0u;
  skilllid_ = 0u;
  cardwarriorid_ = GOOGLE_ULONGLONG(0);
  cardmagicid_ = GOOGLE_ULONGLONG(0);
  cardarcherid_ = GOOGLE_ULONGLONG(0);
  cardpvpid_ = GOOGLE_ULONGLONG(0);
  castleprogress_ = GOOGLE_ULONGLONG(0);
  gamestats_ = NULL;
  local_name_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCharactorInit::~sCharactorInit() {
  SharedDtor();
}

void sCharactorInit::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete gamestats_;
  }
}

void sCharactorInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCharactorInit& sCharactorInit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sCharactorInit* sCharactorInit::default_instance_ = NULL;

sCharactorInit* sCharactorInit::New() const {
  return new sCharactorInit;
}

void sCharactorInit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    role_ = 0;
    level_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    rank_ = 0u;
    rankexp_ = GOOGLE_ULONGLONG(0);
    statsid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    weaponid_ = GOOGLE_ULONGLONG(0);
    headid_ = GOOGLE_ULONGLONG(0);
    bodyid_ = GOOGLE_ULONGLONG(0);
    offhandid_ = GOOGLE_ULONGLONG(0);
    ringid_ = GOOGLE_ULONGLONG(0);
    neckid_ = GOOGLE_ULONGLONG(0);
    skillid_ = 0u;
    skillsid_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    skillmid_ = 0u;
    skilllid_ = 0u;
    cardwarriorid_ = GOOGLE_ULONGLONG(0);
    cardmagicid_ = GOOGLE_ULONGLONG(0);
    cardarcherid_ = GOOGLE_ULONGLONG(0);
    cardpvpid_ = GOOGLE_ULONGLONG(0);
    castleprogress_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_gamestats()) {
      if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
    }
    local_name_ = 0u;
  }
  buffsid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCharactorInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }

      // optional string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role;
        break;
      }

      // optional .jynetwork.proto.eRoleType role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eRoleType_IsValid(value)) {
            set_role(static_cast< ::jynetwork::proto::eRoleType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rankexp;
        break;
      }

      // optional uint64 rankexp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rankexp_)));
          set_has_rankexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_statsid;
        break;
      }

      // optional uint32 statsid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statsid_)));
          set_has_statsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_weaponid;
        break;
      }

      // optional uint64 weaponid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_headid;
        break;
      }

      // optional uint64 headid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bodyid;
        break;
      }

      // optional uint64 bodyid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_offhandid;
        break;
      }

      // optional uint64 offhandid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offhandid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offhandid_)));
          set_has_offhandid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ringid;
        break;
      }

      // optional uint64 ringid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ringid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ringid_)));
          set_has_ringid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_neckid;
        break;
      }

      // optional uint64 neckid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_neckid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &neckid_)));
          set_has_neckid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_skillid;
        break;
      }

      // optional uint32 skillid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_skillsid;
        break;
      }

      // optional uint32 skillsid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillsid_)));
          set_has_skillsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_skillmid;
        break;
      }

      // optional uint32 skillmid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillmid_)));
          set_has_skillmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_skilllid;
        break;
      }

      // optional uint32 skilllid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllid_)));
          set_has_skilllid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_cardwarriorid;
        break;
      }

      // optional uint64 cardwarriorid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardwarriorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cardwarriorid_)));
          set_has_cardwarriorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_cardmagicid;
        break;
      }

      // optional uint64 cardmagicid = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardmagicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cardmagicid_)));
          set_has_cardmagicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_cardarcherid;
        break;
      }

      // optional uint64 cardarcherid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardarcherid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cardarcherid_)));
          set_has_cardarcherid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_castleprogress;
        break;
      }

      // optional uint64 castleprogress = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_castleprogress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &castleprogress_)));
          set_has_castleprogress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_buffsid;
        break;
      }

      // repeated .jynetwork.proto.sBuffStats buffsid = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffsid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffsid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_buffsid;
        if (input->ExpectTag(202)) goto parse_gamestats;
        break;
      }

      // optional .jynetwork.proto.sGameStats gamestats = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamestats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_local_name;
        break;
      }

      // optional uint32 local_name = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_name_)));
          set_has_local_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_cardpvpid;
        break;
      }

      // optional uint64 cardpvpid = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardpvpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cardpvpid_)));
          set_has_cardpvpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCharactorInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // optional .jynetwork.proto.eRoleType role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->role(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint64 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->exp(), output);
  }

  // optional uint32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rank(), output);
  }

  // optional uint64 rankexp = 7;
  if (has_rankexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->rankexp(), output);
  }

  // optional uint32 statsid = 8;
  if (has_statsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->statsid(), output);
  }

  // optional uint64 weaponid = 9;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->weaponid(), output);
  }

  // optional uint64 headid = 10;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->headid(), output);
  }

  // optional uint64 bodyid = 11;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->bodyid(), output);
  }

  // optional uint64 offhandid = 12;
  if (has_offhandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->offhandid(), output);
  }

  // optional uint64 ringid = 13;
  if (has_ringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->ringid(), output);
  }

  // optional uint64 neckid = 14;
  if (has_neckid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->neckid(), output);
  }

  // optional uint32 skillid = 15;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->skillid(), output);
  }

  // optional uint32 skillsid = 16;
  if (has_skillsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->skillsid(), output);
  }

  // optional uint32 skillmid = 17;
  if (has_skillmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->skillmid(), output);
  }

  // optional uint32 skilllid = 18;
  if (has_skilllid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->skilllid(), output);
  }

  // optional uint64 cardwarriorid = 20;
  if (has_cardwarriorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->cardwarriorid(), output);
  }

  // optional uint64 cardmagicid = 21;
  if (has_cardmagicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->cardmagicid(), output);
  }

  // optional uint64 cardarcherid = 22;
  if (has_cardarcherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->cardarcherid(), output);
  }

  // optional uint64 castleprogress = 23;
  if (has_castleprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->castleprogress(), output);
  }

  // repeated .jynetwork.proto.sBuffStats buffsid = 24;
  for (int i = 0; i < this->buffsid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->buffsid(i), output);
  }

  // optional .jynetwork.proto.sGameStats gamestats = 25;
  if (has_gamestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->gamestats(), output);
  }

  // optional uint32 local_name = 26;
  if (has_local_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->local_name(), output);
  }

  // optional uint64 cardpvpid = 27;
  if (has_cardpvpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->cardpvpid(), output);
  }

}

int sCharactorInit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional .jynetwork.proto.eRoleType role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 rankexp = 7;
    if (has_rankexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rankexp());
    }

    // optional uint32 statsid = 8;
    if (has_statsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statsid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 weaponid = 9;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weaponid());
    }

    // optional uint64 headid = 10;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->headid());
    }

    // optional uint64 bodyid = 11;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bodyid());
    }

    // optional uint64 offhandid = 12;
    if (has_offhandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offhandid());
    }

    // optional uint64 ringid = 13;
    if (has_ringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ringid());
    }

    // optional uint64 neckid = 14;
    if (has_neckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->neckid());
    }

    // optional uint32 skillid = 15;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skillsid = 16;
    if (has_skillsid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillsid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 skillmid = 17;
    if (has_skillmid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillmid());
    }

    // optional uint32 skilllid = 18;
    if (has_skilllid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllid());
    }

    // optional uint64 cardwarriorid = 20;
    if (has_cardwarriorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cardwarriorid());
    }

    // optional uint64 cardmagicid = 21;
    if (has_cardmagicid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cardmagicid());
    }

    // optional uint64 cardarcherid = 22;
    if (has_cardarcherid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cardarcherid());
    }

    // optional uint64 cardpvpid = 27;
    if (has_cardpvpid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cardpvpid());
    }

    // optional uint64 castleprogress = 23;
    if (has_castleprogress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->castleprogress());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .jynetwork.proto.sGameStats gamestats = 25;
    if (has_gamestats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestats());
    }

    // optional uint32 local_name = 26;
    if (has_local_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_name());
    }

  }
  // repeated .jynetwork.proto.sBuffStats buffsid = 24;
  total_size += 2 * this->buffsid_size();
  for (int i = 0; i < this->buffsid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffsid(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCharactorInit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCharactorInit*>(&from));
}

void sCharactorInit::MergeFrom(const sCharactorInit& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffsid_.MergeFrom(from.buffsid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rankexp()) {
      set_rankexp(from.rankexp());
    }
    if (from.has_statsid()) {
      set_statsid(from.statsid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_offhandid()) {
      set_offhandid(from.offhandid());
    }
    if (from.has_ringid()) {
      set_ringid(from.ringid());
    }
    if (from.has_neckid()) {
      set_neckid(from.neckid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skillsid()) {
      set_skillsid(from.skillsid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_skillmid()) {
      set_skillmid(from.skillmid());
    }
    if (from.has_skilllid()) {
      set_skilllid(from.skilllid());
    }
    if (from.has_cardwarriorid()) {
      set_cardwarriorid(from.cardwarriorid());
    }
    if (from.has_cardmagicid()) {
      set_cardmagicid(from.cardmagicid());
    }
    if (from.has_cardarcherid()) {
      set_cardarcherid(from.cardarcherid());
    }
    if (from.has_cardpvpid()) {
      set_cardpvpid(from.cardpvpid());
    }
    if (from.has_castleprogress()) {
      set_castleprogress(from.castleprogress());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_gamestats()) {
      mutable_gamestats()->::jynetwork::proto::sGameStats::MergeFrom(from.gamestats());
    }
    if (from.has_local_name()) {
      set_local_name(from.local_name());
    }
  }
}

void sCharactorInit::CopyFrom(const sCharactorInit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCharactorInit::IsInitialized() const {

  return true;
}

void sCharactorInit::Swap(sCharactorInit* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(playername_, other->playername_);
    std::swap(role_, other->role_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(rank_, other->rank_);
    std::swap(rankexp_, other->rankexp_);
    std::swap(statsid_, other->statsid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(offhandid_, other->offhandid_);
    std::swap(ringid_, other->ringid_);
    std::swap(neckid_, other->neckid_);
    std::swap(skillid_, other->skillid_);
    std::swap(skillsid_, other->skillsid_);
    std::swap(skillmid_, other->skillmid_);
    std::swap(skilllid_, other->skilllid_);
    std::swap(cardwarriorid_, other->cardwarriorid_);
    std::swap(cardmagicid_, other->cardmagicid_);
    std::swap(cardarcherid_, other->cardarcherid_);
    std::swap(cardpvpid_, other->cardpvpid_);
    std::swap(castleprogress_, other->castleprogress_);
    buffsid_.Swap(&other->buffsid_);
    std::swap(gamestats_, other->gamestats_);
    std::swap(local_name_, other->local_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCharactorInit::GetTypeName() const {
  return "jynetwork.proto.sCharactorInit";
}


// ===================================================================

#ifndef _MSC_VER
const int sPersonItemStats::kUidFieldNumber;
const int sPersonItemStats::kItemidFieldNumber;
const int sPersonItemStats::kAmountFieldNumber;
const int sPersonItemStats::kOperFieldNumber;
#endif  // !_MSC_VER

sPersonItemStats::sPersonItemStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPersonItemStats::InitAsDefaultInstance() {
}

sPersonItemStats::sPersonItemStats(const sPersonItemStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPersonItemStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  amount_ = 0u;
  oper_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPersonItemStats::~sPersonItemStats() {
  SharedDtor();
}

void sPersonItemStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sPersonItemStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPersonItemStats& sPersonItemStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sPersonItemStats* sPersonItemStats::default_instance_ = NULL;

sPersonItemStats* sPersonItemStats::New() const {
  return new sPersonItemStats;
}

void sPersonItemStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    itemid_ = 0u;
    amount_ = 0u;
    oper_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPersonItemStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional uint32 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_oper;
        break;
      }

      // optional .jynetwork.proto.ePersonalOpertionType oper = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::ePersonalOpertionType_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::ePersonalOpertionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPersonItemStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional uint32 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->amount(), output);
  }

  // optional .jynetwork.proto.ePersonalOpertionType oper = 4;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->oper(), output);
  }

}

int sPersonItemStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amount());
    }

    // optional .jynetwork.proto.ePersonalOpertionType oper = 4;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPersonItemStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPersonItemStats*>(&from));
}

void sPersonItemStats::MergeFrom(const sPersonItemStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
}

void sPersonItemStats::CopyFrom(const sPersonItemStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPersonItemStats::IsInitialized() const {

  return true;
}

void sPersonItemStats::Swap(sPersonItemStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(itemid_, other->itemid_);
    std::swap(amount_, other->amount_);
    std::swap(oper_, other->oper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPersonItemStats::GetTypeName() const {
  return "jynetwork.proto.sPersonItemStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sPersonEquipStats::kUidFieldNumber;
const int sPersonEquipStats::kEquipidFieldNumber;
const int sPersonEquipStats::kLevelFieldNumber;
const int sPersonEquipStats::kIntensifyFieldNumber;
const int sPersonEquipStats::kGamestatsFieldNumber;
const int sPersonEquipStats::kExpFieldNumber;
const int sPersonEquipStats::kStarlvFieldNumber;
const int sPersonEquipStats::kAttrTypeFieldNumber;
const int sPersonEquipStats::kAttrValueFieldNumber;
const int sPersonEquipStats::kOperFieldNumber;
const int sPersonEquipStats::kIsNewFieldNumber;
const int sPersonEquipStats::kIsLockFieldNumber;
const int sPersonEquipStats::kWordTypeFieldNumber;
const int sPersonEquipStats::kWordValueFieldNumber;
const int sPersonEquipStats::kNewAttrTypeFieldNumber;
const int sPersonEquipStats::kNewAttrValueFieldNumber;
#endif  // !_MSC_VER

sPersonEquipStats::sPersonEquipStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPersonEquipStats::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(
      ::jynetwork::proto::sGameStats::internal_default_instance());
#else
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(&::jynetwork::proto::sGameStats::default_instance());
#endif
}

sPersonEquipStats::sPersonEquipStats(const sPersonEquipStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPersonEquipStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  equipid_ = 0u;
  level_ = 0u;
  intensify_ = 0u;
  gamestats_ = NULL;
  exp_ = 0u;
  starlv_ = 0u;
  oper_ = 1;
  is_new_ = 0u;
  is_lock_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPersonEquipStats::~sPersonEquipStats() {
  SharedDtor();
}

void sPersonEquipStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete gamestats_;
  }
}

void sPersonEquipStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPersonEquipStats& sPersonEquipStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sPersonEquipStats* sPersonEquipStats::default_instance_ = NULL;

sPersonEquipStats* sPersonEquipStats::New() const {
  return new sPersonEquipStats;
}

void sPersonEquipStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    equipid_ = 0u;
    level_ = 0u;
    intensify_ = 0u;
    if (has_gamestats()) {
      if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
    }
    exp_ = 0u;
    starlv_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    oper_ = 1;
    is_new_ = 0u;
    is_lock_ = 0u;
  }
  attr_type_.Clear();
  attr_value_.Clear();
  word_type_.Clear();
  word_value_.Clear();
  new_attr_type_.Clear();
  new_attr_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPersonEquipStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipid;
        break;
      }

      // optional uint32 equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_intensify;
        break;
      }

      // optional uint32 intensify = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensify_)));
          set_has_intensify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gamestats;
        break;
      }

      // optional .jynetwork.proto.sGameStats gamestats = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamestats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_starlv;
        break;
      }

      // optional uint32 starlv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_attr_type;
        break;
      }

      // repeated uint32 attr_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_attr_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attr_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_attr_type;
        if (input->ExpectTag(72)) goto parse_attr_value;
        break;
      }

      // repeated uint32 attr_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_attr_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attr_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_attr_value;
        if (input->ExpectTag(80)) goto parse_oper;
        break;
      }

      // optional .jynetwork.proto.ePersonalOpertionType oper = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::ePersonalOpertionType_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::ePersonalOpertionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_new;
        break;
      }

      // optional uint32 is_new = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_lock;
        break;
      }

      // optional uint32 is_lock = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_lock_)));
          set_has_is_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_word_type;
        break;
      }

      // repeated uint32 word_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_word_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_word_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_word_type;
        if (input->ExpectTag(117)) goto parse_word_value;
        break;
      }

      // repeated float word_value = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_word_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 117, input, this->mutable_word_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_word_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_word_value;
        if (input->ExpectTag(120)) goto parse_new_attr_type;
        break;
      }

      // repeated uint32 new_attr_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_attr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_new_attr_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_new_attr_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_new_attr_type;
        if (input->ExpectTag(128)) goto parse_new_attr_value;
        break;
      }

      // repeated uint32 new_attr_value = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_new_attr_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_new_attr_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_new_attr_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPersonEquipStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equipid(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 intensify = 4;
  if (has_intensify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->intensify(), output);
  }

  // optional .jynetwork.proto.sGameStats gamestats = 5;
  if (has_gamestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->gamestats(), output);
  }

  // optional uint32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }

  // optional uint32 starlv = 7;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->starlv(), output);
  }

  // repeated uint32 attr_type = 8;
  for (int i = 0; i < this->attr_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->attr_type(i), output);
  }

  // repeated uint32 attr_value = 9;
  for (int i = 0; i < this->attr_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->attr_value(i), output);
  }

  // optional .jynetwork.proto.ePersonalOpertionType oper = 10;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->oper(), output);
  }

  // optional uint32 is_new = 11;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->is_new(), output);
  }

  // optional uint32 is_lock = 12;
  if (has_is_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->is_lock(), output);
  }

  // repeated uint32 word_type = 13;
  for (int i = 0; i < this->word_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->word_type(i), output);
  }

  // repeated float word_value = 14;
  for (int i = 0; i < this->word_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      14, this->word_value(i), output);
  }

  // repeated uint32 new_attr_type = 15;
  for (int i = 0; i < this->new_attr_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->new_attr_type(i), output);
  }

  // repeated uint32 new_attr_value = 16;
  for (int i = 0; i < this->new_attr_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->new_attr_value(i), output);
  }

}

int sPersonEquipStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 intensify = 4;
    if (has_intensify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensify());
    }

    // optional .jynetwork.proto.sGameStats gamestats = 5;
    if (has_gamestats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestats());
    }

    // optional uint32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 starlv = 7;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlv());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .jynetwork.proto.ePersonalOpertionType oper = 10;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional uint32 is_new = 11;
    if (has_is_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_new());
    }

    // optional uint32 is_lock = 12;
    if (has_is_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_lock());
    }

  }
  // repeated uint32 attr_type = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attr_type(i));
    }
    total_size += 1 * this->attr_type_size() + data_size;
  }

  // repeated uint32 attr_value = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attr_value(i));
    }
    total_size += 1 * this->attr_value_size() + data_size;
  }

  // repeated uint32 word_type = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->word_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->word_type(i));
    }
    total_size += 1 * this->word_type_size() + data_size;
  }

  // repeated float word_value = 14;
  {
    int data_size = 0;
    data_size = 4 * this->word_value_size();
    total_size += 1 * this->word_value_size() + data_size;
  }

  // repeated uint32 new_attr_type = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->new_attr_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->new_attr_type(i));
    }
    total_size += 1 * this->new_attr_type_size() + data_size;
  }

  // repeated uint32 new_attr_value = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->new_attr_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->new_attr_value(i));
    }
    total_size += 2 * this->new_attr_value_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPersonEquipStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPersonEquipStats*>(&from));
}

void sPersonEquipStats::MergeFrom(const sPersonEquipStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_type_.MergeFrom(from.attr_type_);
  attr_value_.MergeFrom(from.attr_value_);
  word_type_.MergeFrom(from.word_type_);
  word_value_.MergeFrom(from.word_value_);
  new_attr_type_.MergeFrom(from.new_attr_type_);
  new_attr_value_.MergeFrom(from.new_attr_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_intensify()) {
      set_intensify(from.intensify());
    }
    if (from.has_gamestats()) {
      mutable_gamestats()->::jynetwork::proto::sGameStats::MergeFrom(from.gamestats());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_is_lock()) {
      set_is_lock(from.is_lock());
    }
  }
}

void sPersonEquipStats::CopyFrom(const sPersonEquipStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPersonEquipStats::IsInitialized() const {

  return true;
}

void sPersonEquipStats::Swap(sPersonEquipStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(equipid_, other->equipid_);
    std::swap(level_, other->level_);
    std::swap(intensify_, other->intensify_);
    std::swap(gamestats_, other->gamestats_);
    std::swap(exp_, other->exp_);
    std::swap(starlv_, other->starlv_);
    attr_type_.Swap(&other->attr_type_);
    attr_value_.Swap(&other->attr_value_);
    std::swap(oper_, other->oper_);
    std::swap(is_new_, other->is_new_);
    std::swap(is_lock_, other->is_lock_);
    word_type_.Swap(&other->word_type_);
    word_value_.Swap(&other->word_value_);
    new_attr_type_.Swap(&other->new_attr_type_);
    new_attr_value_.Swap(&other->new_attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPersonEquipStats::GetTypeName() const {
  return "jynetwork.proto.sPersonEquipStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sPersonSkillStats::kUidFieldNumber;
const int sPersonSkillStats::kSkillidFieldNumber;
const int sPersonSkillStats::kLevelFieldNumber;
const int sPersonSkillStats::kGamestatsFieldNumber;
const int sPersonSkillStats::kOperFieldNumber;
#endif  // !_MSC_VER

sPersonSkillStats::sPersonSkillStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPersonSkillStats::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(
      ::jynetwork::proto::sGameStats::internal_default_instance());
#else
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(&::jynetwork::proto::sGameStats::default_instance());
#endif
}

sPersonSkillStats::sPersonSkillStats(const sPersonSkillStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPersonSkillStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  skillid_ = 0u;
  level_ = 0u;
  gamestats_ = NULL;
  oper_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPersonSkillStats::~sPersonSkillStats() {
  SharedDtor();
}

void sPersonSkillStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete gamestats_;
  }
}

void sPersonSkillStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPersonSkillStats& sPersonSkillStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sPersonSkillStats* sPersonSkillStats::default_instance_ = NULL;

sPersonSkillStats* sPersonSkillStats::New() const {
  return new sPersonSkillStats;
}

void sPersonSkillStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    skillid_ = 0u;
    level_ = 0u;
    if (has_gamestats()) {
      if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
    }
    oper_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPersonSkillStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        break;
      }

      // optional uint32 skillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gamestats;
        break;
      }

      // optional .jynetwork.proto.sGameStats gamestats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamestats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_oper;
        break;
      }

      // optional .jynetwork.proto.ePersonalOpertionType oper = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::ePersonalOpertionType_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::ePersonalOpertionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPersonSkillStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 skillid = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional .jynetwork.proto.sGameStats gamestats = 4;
  if (has_gamestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->gamestats(), output);
  }

  // optional .jynetwork.proto.ePersonalOpertionType oper = 5;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->oper(), output);
  }

}

int sPersonSkillStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 skillid = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional .jynetwork.proto.sGameStats gamestats = 4;
    if (has_gamestats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestats());
    }

    // optional .jynetwork.proto.ePersonalOpertionType oper = 5;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPersonSkillStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPersonSkillStats*>(&from));
}

void sPersonSkillStats::MergeFrom(const sPersonSkillStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_gamestats()) {
      mutable_gamestats()->::jynetwork::proto::sGameStats::MergeFrom(from.gamestats());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
}

void sPersonSkillStats::CopyFrom(const sPersonSkillStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPersonSkillStats::IsInitialized() const {

  return true;
}

void sPersonSkillStats::Swap(sPersonSkillStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(gamestats_, other->gamestats_);
    std::swap(oper_, other->oper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPersonSkillStats::GetTypeName() const {
  return "jynetwork.proto.sPersonSkillStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sMonsterStats::kUidFieldNumber;
const int sMonsterStats::kLevelFieldNumber;
const int sMonsterStats::kCardFieldNumber;
const int sMonsterStats::kQualityFieldNumber;
const int sMonsterStats::kIntensifyFieldNumber;
const int sMonsterStats::kSkillLvl1FieldNumber;
const int sMonsterStats::kSkillLvl2FieldNumber;
const int sMonsterStats::kCardidFieldNumber;
const int sMonsterStats::kExpFieldNumber;
const int sMonsterStats::kSkillidFieldNumber;
const int sMonsterStats::kOperFieldNumber;
const int sMonsterStats::kGamestatsFieldNumber;
#endif  // !_MSC_VER

sMonsterStats::sMonsterStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sMonsterStats::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  card_ = const_cast< ::jynetwork::proto::sCardStats*>(
      ::jynetwork::proto::sCardStats::internal_default_instance());
#else
  card_ = const_cast< ::jynetwork::proto::sCardStats*>(&::jynetwork::proto::sCardStats::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(
      ::jynetwork::proto::sGameStats::internal_default_instance());
#else
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(&::jynetwork::proto::sGameStats::default_instance());
#endif
}

sMonsterStats::sMonsterStats(const sMonsterStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sMonsterStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  card_ = NULL;
  quality_ = 0;
  intensify_ = 0u;
  skill_lvl1_ = 0u;
  skill_lvl2_ = 0u;
  cardid_ = 0u;
  exp_ = 0u;
  oper_ = 1;
  gamestats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sMonsterStats::~sMonsterStats() {
  SharedDtor();
}

void sMonsterStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete card_;
    delete gamestats_;
  }
}

void sMonsterStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sMonsterStats& sMonsterStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sMonsterStats* sMonsterStats::default_instance_ = NULL;

sMonsterStats* sMonsterStats::New() const {
  return new sMonsterStats;
}

void sMonsterStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
    if (has_card()) {
      if (card_ != NULL) card_->::jynetwork::proto::sCardStats::Clear();
    }
    quality_ = 0;
    intensify_ = 0u;
    skill_lvl1_ = 0u;
    skill_lvl2_ = 0u;
    cardid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = 0u;
    oper_ = 1;
    if (has_gamestats()) {
      if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
    }
  }
  skillid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sMonsterStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card;
        break;
      }

      // optional .jynetwork.proto.sCardStats card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // optional .jynetwork.proto.eCardQuality quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eCardQuality_IsValid(value)) {
            set_quality(static_cast< ::jynetwork::proto::eCardQuality >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_intensify;
        break;
      }

      // optional uint32 intensify = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensify_)));
          set_has_intensify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skill_lvl1;
        break;
      }

      // optional uint32 skill_lvl1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_lvl1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_lvl1_)));
          set_has_skill_lvl1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skill_lvl2;
        break;
      }

      // optional uint32 skill_lvl2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_lvl2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_lvl2_)));
          set_has_skill_lvl2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cardid;
        break;
      }

      // optional uint32 cardid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_skillid;
        break;
      }

      // repeated uint32 skillid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_skillid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skillid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_skillid;
        if (input->ExpectTag(104)) goto parse_oper;
        break;
      }

      // optional .jynetwork.proto.ePersonalOpertionType oper = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::ePersonalOpertionType_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::ePersonalOpertionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_gamestats;
        break;
      }

      // optional .jynetwork.proto.sGameStats gamestats = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamestats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sMonsterStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional .jynetwork.proto.sCardStats card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->card(), output);
  }

  // optional .jynetwork.proto.eCardQuality quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->quality(), output);
  }

  // optional uint32 intensify = 5;
  if (has_intensify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->intensify(), output);
  }

  // optional uint32 skill_lvl1 = 6;
  if (has_skill_lvl1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skill_lvl1(), output);
  }

  // optional uint32 skill_lvl2 = 7;
  if (has_skill_lvl2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->skill_lvl2(), output);
  }

  // optional uint32 cardid = 10;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cardid(), output);
  }

  // optional uint32 exp = 11;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->exp(), output);
  }

  // repeated uint32 skillid = 12;
  for (int i = 0; i < this->skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->skillid(i), output);
  }

  // optional .jynetwork.proto.ePersonalOpertionType oper = 13;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->oper(), output);
  }

  // optional .jynetwork.proto.sGameStats gamestats = 14;
  if (has_gamestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->gamestats(), output);
  }

}

int sMonsterStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional .jynetwork.proto.sCardStats card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }

    // optional .jynetwork.proto.eCardQuality quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // optional uint32 intensify = 5;
    if (has_intensify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensify());
    }

    // optional uint32 skill_lvl1 = 6;
    if (has_skill_lvl1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_lvl1());
    }

    // optional uint32 skill_lvl2 = 7;
    if (has_skill_lvl2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_lvl2());
    }

    // optional uint32 cardid = 10;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 exp = 11;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional .jynetwork.proto.ePersonalOpertionType oper = 13;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional .jynetwork.proto.sGameStats gamestats = 14;
    if (has_gamestats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestats());
    }

  }
  // repeated uint32 skillid = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skillid(i));
    }
    total_size += 1 * this->skillid_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sMonsterStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sMonsterStats*>(&from));
}

void sMonsterStats::MergeFrom(const sMonsterStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillid_.MergeFrom(from.skillid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_card()) {
      mutable_card()->::jynetwork::proto::sCardStats::MergeFrom(from.card());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_intensify()) {
      set_intensify(from.intensify());
    }
    if (from.has_skill_lvl1()) {
      set_skill_lvl1(from.skill_lvl1());
    }
    if (from.has_skill_lvl2()) {
      set_skill_lvl2(from.skill_lvl2());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_gamestats()) {
      mutable_gamestats()->::jynetwork::proto::sGameStats::MergeFrom(from.gamestats());
    }
  }
}

void sMonsterStats::CopyFrom(const sMonsterStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sMonsterStats::IsInitialized() const {

  return true;
}

void sMonsterStats::Swap(sMonsterStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(level_, other->level_);
    std::swap(card_, other->card_);
    std::swap(quality_, other->quality_);
    std::swap(intensify_, other->intensify_);
    std::swap(skill_lvl1_, other->skill_lvl1_);
    std::swap(skill_lvl2_, other->skill_lvl2_);
    std::swap(cardid_, other->cardid_);
    std::swap(exp_, other->exp_);
    skillid_.Swap(&other->skillid_);
    std::swap(oper_, other->oper_);
    std::swap(gamestats_, other->gamestats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sMonsterStats::GetTypeName() const {
  return "jynetwork.proto.sMonsterStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sPersonTaskStats::kUidFieldNumber;
const int sPersonTaskStats::kVarFieldNumber;
const int sPersonTaskStats::kCanFinishFieldNumber;
const int sPersonTaskStats::kOperFieldNumber;
const int sPersonTaskStats::kNameFieldNumber;
const int sPersonTaskStats::kScoreFieldNumber;
#endif  // !_MSC_VER

sPersonTaskStats::sPersonTaskStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPersonTaskStats::InitAsDefaultInstance() {
}

sPersonTaskStats::sPersonTaskStats(const sPersonTaskStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPersonTaskStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  var_ = 0u;
  can_finish_ = 0u;
  oper_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPersonTaskStats::~sPersonTaskStats() {
  SharedDtor();
}

void sPersonTaskStats::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sPersonTaskStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPersonTaskStats& sPersonTaskStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sPersonTaskStats* sPersonTaskStats::default_instance_ = NULL;

sPersonTaskStats* sPersonTaskStats::New() const {
  return new sPersonTaskStats;
}

void sPersonTaskStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    var_ = 0u;
    can_finish_ = 0u;
    oper_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPersonTaskStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_var;
        break;
      }

      // optional uint32 var = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &var_)));
          set_has_var();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_finish;
        break;
      }

      // optional uint32 can_finish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_finish_)));
          set_has_can_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_oper;
        break;
      }

      // optional .jynetwork.proto.ePersonalOpertionType oper = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::ePersonalOpertionType_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::ePersonalOpertionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional bytes name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional uint32 score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPersonTaskStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 var = 2;
  if (has_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->var(), output);
  }

  // optional uint32 can_finish = 3;
  if (has_can_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->can_finish(), output);
  }

  // optional .jynetwork.proto.ePersonalOpertionType oper = 4;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->oper(), output);
  }

  // optional bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->name(), output);
  }

  // optional uint32 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->score(), output);
  }

}

int sPersonTaskStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 var = 2;
    if (has_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->var());
    }

    // optional uint32 can_finish = 3;
    if (has_can_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_finish());
    }

    // optional .jynetwork.proto.ePersonalOpertionType oper = 4;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPersonTaskStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPersonTaskStats*>(&from));
}

void sPersonTaskStats::MergeFrom(const sPersonTaskStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_var()) {
      set_var(from.var());
    }
    if (from.has_can_finish()) {
      set_can_finish(from.can_finish());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void sPersonTaskStats::CopyFrom(const sPersonTaskStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPersonTaskStats::IsInitialized() const {

  return true;
}

void sPersonTaskStats::Swap(sPersonTaskStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(var_, other->var_);
    std::swap(can_finish_, other->can_finish_);
    std::swap(oper_, other->oper_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPersonTaskStats::GetTypeName() const {
  return "jynetwork.proto.sPersonTaskStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sCastleEndlessRelation::kMapidFieldNumber;
const int sCastleEndlessRelation::kGroupidFieldNumber;
const int sCastleEndlessRelation::kBaseGroupidFieldNumber;
#endif  // !_MSC_VER

sCastleEndlessRelation::sCastleEndlessRelation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCastleEndlessRelation::InitAsDefaultInstance() {
}

sCastleEndlessRelation::sCastleEndlessRelation(const sCastleEndlessRelation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCastleEndlessRelation::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  groupid_ = 0u;
  base_groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCastleEndlessRelation::~sCastleEndlessRelation() {
  SharedDtor();
}

void sCastleEndlessRelation::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCastleEndlessRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCastleEndlessRelation& sCastleEndlessRelation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sCastleEndlessRelation* sCastleEndlessRelation::default_instance_ = NULL;

sCastleEndlessRelation* sCastleEndlessRelation::New() const {
  return new sCastleEndlessRelation;
}

void sCastleEndlessRelation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    groupid_ = 0u;
    base_groupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCastleEndlessRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // optional uint32 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_base_groupid;
        break;
      }

      // optional uint32 base_groupid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_groupid_)));
          set_has_base_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCastleEndlessRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional uint32 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  // optional uint32 base_groupid = 3;
  if (has_base_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->base_groupid(), output);
  }

}

int sCastleEndlessRelation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 base_groupid = 3;
    if (has_base_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_groupid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCastleEndlessRelation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCastleEndlessRelation*>(&from));
}

void sCastleEndlessRelation::MergeFrom(const sCastleEndlessRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_base_groupid()) {
      set_base_groupid(from.base_groupid());
    }
  }
}

void sCastleEndlessRelation::CopyFrom(const sCastleEndlessRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCastleEndlessRelation::IsInitialized() const {

  return true;
}

void sCastleEndlessRelation::Swap(sCastleEndlessRelation* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(groupid_, other->groupid_);
    std::swap(base_groupid_, other->base_groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCastleEndlessRelation::GetTypeName() const {
  return "jynetwork.proto.sCastleEndlessRelation";
}


// ===================================================================

#ifndef _MSC_VER
const int sCastleInfo::kUidFieldNumber;
const int sCastleInfo::kDifficultyFieldNumber;
const int sCastleInfo::kStarFieldNumber;
const int sCastleInfo::kScoreFieldNumber;
const int sCastleInfo::kFactionFieldNumber;
const int sCastleInfo::kDifficultChangeFieldNumber;
const int sCastleInfo::kAttackTimesFieldNumber;
const int sCastleInfo::kCastleCatlogFieldNumber;
const int sCastleInfo::kResetTimesFieldNumber;
#endif  // !_MSC_VER

sCastleInfo::sCastleInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCastleInfo::InitAsDefaultInstance() {
}

sCastleInfo::sCastleInfo(const sCastleInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCastleInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  difficulty_ = 0u;
  star_ = 0u;
  score_ = 0u;
  faction_ = 0u;
  difficult_change_ = 0u;
  attack_times_ = 0u;
  castle_catlog_ = 0u;
  reset_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCastleInfo::~sCastleInfo() {
  SharedDtor();
}

void sCastleInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCastleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCastleInfo& sCastleInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sCastleInfo* sCastleInfo::default_instance_ = NULL;

sCastleInfo* sCastleInfo::New() const {
  return new sCastleInfo;
}

void sCastleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    difficulty_ = 0u;
    star_ = 0u;
    score_ = 0u;
    faction_ = 0u;
    difficult_change_ = 0u;
    attack_times_ = 0u;
    castle_catlog_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reset_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCastleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_difficulty;
        break;
      }

      // optional uint32 difficulty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional uint32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional uint32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_faction;
        break;
      }

      // optional uint32 faction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_)));
          set_has_faction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_difficult_change;
        break;
      }

      // optional uint32 difficult_change = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficult_change_)));
          set_has_difficult_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attack_times;
        break;
      }

      // optional uint32 attack_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_times_)));
          set_has_attack_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_castle_catlog;
        break;
      }

      // optional uint32 castle_catlog = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_castle_catlog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castle_catlog_)));
          set_has_castle_catlog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reset_times;
        break;
      }

      // optional uint32 reset_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_times_)));
          set_has_reset_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCastleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 difficulty = 2;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->difficulty(), output);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // optional uint32 faction = 5;
  if (has_faction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->faction(), output);
  }

  // optional uint32 difficult_change = 6;
  if (has_difficult_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->difficult_change(), output);
  }

  // optional uint32 attack_times = 7;
  if (has_attack_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->attack_times(), output);
  }

  // optional uint32 castle_catlog = 8;
  if (has_castle_catlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->castle_catlog(), output);
  }

  // optional uint32 reset_times = 9;
  if (has_reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reset_times(), output);
  }

}

int sCastleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 difficulty = 2;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // optional uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 faction = 5;
    if (has_faction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction());
    }

    // optional uint32 difficult_change = 6;
    if (has_difficult_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficult_change());
    }

    // optional uint32 attack_times = 7;
    if (has_attack_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_times());
    }

    // optional uint32 castle_catlog = 8;
    if (has_castle_catlog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castle_catlog());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 reset_times = 9;
    if (has_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_times());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCastleInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCastleInfo*>(&from));
}

void sCastleInfo::MergeFrom(const sCastleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_faction()) {
      set_faction(from.faction());
    }
    if (from.has_difficult_change()) {
      set_difficult_change(from.difficult_change());
    }
    if (from.has_attack_times()) {
      set_attack_times(from.attack_times());
    }
    if (from.has_castle_catlog()) {
      set_castle_catlog(from.castle_catlog());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reset_times()) {
      set_reset_times(from.reset_times());
    }
  }
}

void sCastleInfo::CopyFrom(const sCastleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCastleInfo::IsInitialized() const {

  return true;
}

void sCastleInfo::Swap(sCastleInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(star_, other->star_);
    std::swap(score_, other->score_);
    std::swap(faction_, other->faction_);
    std::swap(difficult_change_, other->difficult_change_);
    std::swap(attack_times_, other->attack_times_);
    std::swap(castle_catlog_, other->castle_catlog_);
    std::swap(reset_times_, other->reset_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCastleInfo::GetTypeName() const {
  return "jynetwork.proto.sCastleInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int sCastleComplete::kLastUidFieldNumber;
const int sCastleComplete::kLastDifficultFieldNumber;
const int sCastleComplete::kCiFieldNumber;
#endif  // !_MSC_VER

sCastleComplete::sCastleComplete()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCastleComplete::InitAsDefaultInstance() {
}

sCastleComplete::sCastleComplete(const sCastleComplete& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCastleComplete::SharedCtor() {
  _cached_size_ = 0;
  last_uid_ = 0u;
  last_difficult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCastleComplete::~sCastleComplete() {
  SharedDtor();
}

void sCastleComplete::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCastleComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCastleComplete& sCastleComplete::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sCastleComplete* sCastleComplete::default_instance_ = NULL;

sCastleComplete* sCastleComplete::New() const {
  return new sCastleComplete;
}

void sCastleComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_uid_ = 0u;
    last_difficult_ = 0u;
  }
  ci_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCastleComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_uid_)));
          set_has_last_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_difficult;
        break;
      }

      // optional uint32 last_difficult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_difficult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_difficult_)));
          set_has_last_difficult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ci;
        break;
      }

      // repeated .jynetwork.proto.sCastleInfo ci = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ci:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ci()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ci;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCastleComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_uid = 1;
  if (has_last_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_uid(), output);
  }

  // optional uint32 last_difficult = 2;
  if (has_last_difficult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_difficult(), output);
  }

  // repeated .jynetwork.proto.sCastleInfo ci = 3;
  for (int i = 0; i < this->ci_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ci(i), output);
  }

}

int sCastleComplete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_uid = 1;
    if (has_last_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_uid());
    }

    // optional uint32 last_difficult = 2;
    if (has_last_difficult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_difficult());
    }

  }
  // repeated .jynetwork.proto.sCastleInfo ci = 3;
  total_size += 1 * this->ci_size();
  for (int i = 0; i < this->ci_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ci(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCastleComplete::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCastleComplete*>(&from));
}

void sCastleComplete::MergeFrom(const sCastleComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  ci_.MergeFrom(from.ci_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_uid()) {
      set_last_uid(from.last_uid());
    }
    if (from.has_last_difficult()) {
      set_last_difficult(from.last_difficult());
    }
  }
}

void sCastleComplete::CopyFrom(const sCastleComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCastleComplete::IsInitialized() const {

  return true;
}

void sCastleComplete::Swap(sCastleComplete* other) {
  if (other != this) {
    std::swap(last_uid_, other->last_uid_);
    std::swap(last_difficult_, other->last_difficult_);
    ci_.Swap(&other->ci_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCastleComplete::GetTypeName() const {
  return "jynetwork.proto.sCastleComplete";
}


// ===================================================================

#ifndef _MSC_VER
const int sCastleDrop::kDropTypeFieldNumber;
const int sCastleDrop::kDropIdFieldNumber;
#endif  // !_MSC_VER

sCastleDrop::sCastleDrop()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCastleDrop::InitAsDefaultInstance() {
}

sCastleDrop::sCastleDrop(const sCastleDrop& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCastleDrop::SharedCtor() {
  _cached_size_ = 0;
  drop_type_ = 0u;
  drop_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCastleDrop::~sCastleDrop() {
  SharedDtor();
}

void sCastleDrop::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCastleDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCastleDrop& sCastleDrop::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sCastleDrop* sCastleDrop::default_instance_ = NULL;

sCastleDrop* sCastleDrop::New() const {
  return new sCastleDrop;
}

void sCastleDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    drop_type_ = 0u;
    drop_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCastleDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 drop_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_type_)));
          set_has_drop_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_drop_id;
        break;
      }

      // optional uint32 drop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_id_)));
          set_has_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCastleDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 drop_type = 1;
  if (has_drop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->drop_type(), output);
  }

  // optional uint32 drop_id = 2;
  if (has_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->drop_id(), output);
  }

}

int sCastleDrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 drop_type = 1;
    if (has_drop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_type());
    }

    // optional uint32 drop_id = 2;
    if (has_drop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCastleDrop::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCastleDrop*>(&from));
}

void sCastleDrop::MergeFrom(const sCastleDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drop_type()) {
      set_drop_type(from.drop_type());
    }
    if (from.has_drop_id()) {
      set_drop_id(from.drop_id());
    }
  }
}

void sCastleDrop::CopyFrom(const sCastleDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCastleDrop::IsInitialized() const {

  return true;
}

void sCastleDrop::Swap(sCastleDrop* other) {
  if (other != this) {
    std::swap(drop_type_, other->drop_type_);
    std::swap(drop_id_, other->drop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCastleDrop::GetTypeName() const {
  return "jynetwork.proto.sCastleDrop";
}


// ===================================================================

#ifndef _MSC_VER
const int sMonsterRefreshGroup::kMonstersFieldNumber;
const int sMonsterRefreshGroup::kDurtimeFieldNumber;
const int sMonsterRefreshGroup::kShowWarningFieldNumber;
const int sMonsterRefreshGroup::kGroupIdFieldNumber;
const int sMonsterRefreshGroup::kDieMaskFieldNumber;
const int sMonsterRefreshGroup::kWaveIndexFieldNumber;
#endif  // !_MSC_VER

sMonsterRefreshGroup::sMonsterRefreshGroup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sMonsterRefreshGroup::InitAsDefaultInstance() {
}

sMonsterRefreshGroup::sMonsterRefreshGroup(const sMonsterRefreshGroup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sMonsterRefreshGroup::SharedCtor() {
  _cached_size_ = 0;
  durtime_ = 0;
  show_warning_ = 0u;
  groupid_ = 0u;
  die_mask_ = 0u;
  wave_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sMonsterRefreshGroup::~sMonsterRefreshGroup() {
  SharedDtor();
}

void sMonsterRefreshGroup::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sMonsterRefreshGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sMonsterRefreshGroup& sMonsterRefreshGroup::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sMonsterRefreshGroup* sMonsterRefreshGroup::default_instance_ = NULL;

sMonsterRefreshGroup* sMonsterRefreshGroup::New() const {
  return new sMonsterRefreshGroup;
}

void sMonsterRefreshGroup::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    durtime_ = 0;
    show_warning_ = 0u;
    groupid_ = 0u;
    die_mask_ = 0u;
    wave_index_ = 0u;
  }
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sMonsterRefreshGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jynetwork.proto.sMonsterRefresh monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsters;
        if (input->ExpectTag(16)) goto parse_show_warning;
        break;
      }

      // optional uint32 show_warning = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_warning_)));
          set_has_show_warning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupId;
        break;
      }

      // optional uint32 groupId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_durtime;
        break;
      }

      // optional float durtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_durtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &durtime_)));
          set_has_durtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_die_mask;
        break;
      }

      // optional uint32 die_mask = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_die_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &die_mask_)));
          set_has_die_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wave_index;
        break;
      }

      // optional uint32 wave_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_index_)));
          set_has_wave_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sMonsterRefreshGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jynetwork.proto.sMonsterRefresh monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->monsters(i), output);
  }

  // optional uint32 show_warning = 2;
  if (has_show_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->show_warning(), output);
  }

  // optional uint32 groupId = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->groupid(), output);
  }

  // optional float durtime = 4;
  if (has_durtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->durtime(), output);
  }

  // optional uint32 die_mask = 5;
  if (has_die_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->die_mask(), output);
  }

  // optional uint32 wave_index = 6;
  if (has_wave_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->wave_index(), output);
  }

}

int sMonsterRefreshGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float durtime = 4;
    if (has_durtime()) {
      total_size += 1 + 4;
    }

    // optional uint32 show_warning = 2;
    if (has_show_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_warning());
    }

    // optional uint32 groupId = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 die_mask = 5;
    if (has_die_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->die_mask());
    }

    // optional uint32 wave_index = 6;
    if (has_wave_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave_index());
    }

  }
  // repeated .jynetwork.proto.sMonsterRefresh monsters = 1;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sMonsterRefreshGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sMonsterRefreshGroup*>(&from));
}

void sMonsterRefreshGroup::MergeFrom(const sMonsterRefreshGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_durtime()) {
      set_durtime(from.durtime());
    }
    if (from.has_show_warning()) {
      set_show_warning(from.show_warning());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_die_mask()) {
      set_die_mask(from.die_mask());
    }
    if (from.has_wave_index()) {
      set_wave_index(from.wave_index());
    }
  }
}

void sMonsterRefreshGroup::CopyFrom(const sMonsterRefreshGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sMonsterRefreshGroup::IsInitialized() const {

  return true;
}

void sMonsterRefreshGroup::Swap(sMonsterRefreshGroup* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(durtime_, other->durtime_);
    std::swap(show_warning_, other->show_warning_);
    std::swap(groupid_, other->groupid_);
    std::swap(die_mask_, other->die_mask_);
    std::swap(wave_index_, other->wave_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sMonsterRefreshGroup::GetTypeName() const {
  return "jynetwork.proto.sMonsterRefreshGroup";
}


// ===================================================================

#ifndef _MSC_VER
const int sMonsterRefresh::kMonsteridFieldNumber;
const int sMonsterRefresh::kPlayeridFieldNumber;
const int sMonsterRefresh::kAtypeFieldNumber;
const int sMonsterRefresh::kLevelFieldNumber;
const int sMonsterRefresh::kModifyhpFieldNumber;
const int sMonsterRefresh::kModifyatkFieldNumber;
const int sMonsterRefresh::kStxFieldNumber;
const int sMonsterRefresh::kStyFieldNumber;
const int sMonsterRefresh::kStartx1FieldNumber;
const int sMonsterRefresh::kStarty1FieldNumber;
const int sMonsterRefresh::kEndx2FieldNumber;
const int sMonsterRefresh::kEndy2FieldNumber;
const int sMonsterRefresh::kOutxFieldNumber;
const int sMonsterRefresh::kOutyFieldNumber;
const int sMonsterRefresh::kMovTypeFieldNumber;
const int sMonsterRefresh::kSpawnTimeFieldNumber;
const int sMonsterRefresh::kDropsidFieldNumber;
const int sMonsterRefresh::kScoreFieldNumber;
const int sMonsterRefresh::kDelaytimeFieldNumber;
const int sMonsterRefresh::kWaveEndActionFieldNumber;
const int sMonsterRefresh::kBodyEffectFieldNumber;
const int sMonsterRefresh::kAttackTypeFieldNumber;
const int sMonsterRefresh::kDropGoldFieldNumber;
const int sMonsterRefresh::kDropBoxAmountFieldNumber;
const int sMonsterRefresh::kDropBoxFieldNumber;
const int sMonsterRefresh::kDropGoldSizeFieldNumber;
const int sMonsterRefresh::kStartx2FieldNumber;
const int sMonsterRefresh::kStarty2FieldNumber;
const int sMonsterRefresh::kEndx1FieldNumber;
const int sMonsterRefresh::kEndy1FieldNumber;
const int sMonsterRefresh::kMoveStepsFieldNumber;
const int sMonsterRefresh::kStepGapTimeFieldNumber;
const int sMonsterRefresh::kSpawnTypeFieldNumber;
const int sMonsterRefresh::kSpawnGroupIdFieldNumber;
const int sMonsterRefresh::kConditionSpawnFieldNumber;
const int sMonsterRefresh::kConditionParamFieldNumber;
const int sMonsterRefresh::kConditionTimeFieldNumber;
const int sMonsterRefresh::kResurgenceFieldNumber;
const int sMonsterRefresh::kResurgenceIdFieldNumber;
const int sMonsterRefresh::kPShowConditionFieldNumber;
const int sMonsterRefresh::kGroupIdFieldNumber;
const int sMonsterRefresh::kConditionIdFieldNumber;
const int sMonsterRefresh::kPDelayTimeFieldNumber;
const int sMonsterRefresh::kTurninInvincibleTimeFieldNumber;
const int sMonsterRefresh::kDurtimeFieldNumber;
const int sMonsterRefresh::kKeyMonsterFieldNumber;
const int sMonsterRefresh::kBossKeyFieldNumber;
const int sMonsterRefresh::kUidFieldNumber;
const int sMonsterRefresh::kDieMaskFieldNumber;
const int sMonsterRefresh::kNeedSynchronizeFieldNumber;
const int sMonsterRefresh::kMonsterNameFieldNumber;
const int sMonsterRefresh::kMonsterHeadFieldNumber;
const int sMonsterRefresh::kMonsterVectoryFieldNumber;
const int sMonsterRefresh::kDropGoldAmountFieldNumber;
#endif  // !_MSC_VER

sMonsterRefresh::sMonsterRefresh()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sMonsterRefresh::InitAsDefaultInstance() {
}

sMonsterRefresh::sMonsterRefresh(const sMonsterRefresh& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sMonsterRefresh::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  playerid_ = 0u;
  atype_ = 0;
  level_ = 0u;
  modifyhp_ = 0;
  modifyatk_ = 0;
  stx_ = 0;
  sty_ = 0;
  startx1_ = 0;
  starty1_ = 0;
  endx2_ = 0;
  endy2_ = 0;
  outx_ = 0;
  outy_ = 0;
  mov_type_ = 0;
  spawn_time_ = 0;
  dropsid_ = 0u;
  score_ = 0u;
  delaytime_ = 0;
  wave_end_action_ = 0u;
  body_effect_ = 0u;
  attack_type_ = 1;
  drop_gold_ = 0;
  drop_box_amount_ = 0;
  drop_box_ = 0;
  drop_gold_size_ = 0;
  startx2_ = 0;
  starty2_ = 0;
  endx1_ = 0;
  endy1_ = 0;
  step_gap_time_ = 0;
  spawn_type_ = 0u;
  spawn_group_id_ = 0u;
  condition_spawn_ = 0u;
  condition_param_ = 0u;
  condition_time_ = 0u;
  resurgence_ = 0u;
  resurgence_id_ = 0u;
  p_showcondition_ = 0u;
  groupid_ = 0u;
  conditionid_ = 0u;
  p_delaytime_ = 0u;
  turnin_invincible_time_ = 0;
  durtime_ = 0;
  keymonster_ = 0;
  boss_key_ = 0u;
  uid_ = 0u;
  die_mask_ = 0u;
  need_synchronize_ = 0u;
  monster_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  monster_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  monster_vectory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  drop_gold_amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sMonsterRefresh::~sMonsterRefresh() {
  SharedDtor();
}

void sMonsterRefresh::SharedDtor() {
  if (monster_name_ != &::google::protobuf::internal::kEmptyString) {
    delete monster_name_;
  }
  if (monster_head_ != &::google::protobuf::internal::kEmptyString) {
    delete monster_head_;
  }
  if (monster_vectory_ != &::google::protobuf::internal::kEmptyString) {
    delete monster_vectory_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sMonsterRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sMonsterRefresh& sMonsterRefresh::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sMonsterRefresh* sMonsterRefresh::default_instance_ = NULL;

sMonsterRefresh* sMonsterRefresh::New() const {
  return new sMonsterRefresh;
}

void sMonsterRefresh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    playerid_ = 0u;
    atype_ = 0;
    level_ = 0u;
    modifyhp_ = 0;
    modifyatk_ = 0;
    stx_ = 0;
    sty_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    startx1_ = 0;
    starty1_ = 0;
    endx2_ = 0;
    endy2_ = 0;
    outx_ = 0;
    outy_ = 0;
    mov_type_ = 0;
    spawn_time_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    dropsid_ = 0u;
    score_ = 0u;
    delaytime_ = 0;
    wave_end_action_ = 0u;
    body_effect_ = 0u;
    attack_type_ = 1;
    drop_gold_ = 0;
    drop_box_amount_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    drop_box_ = 0;
    drop_gold_size_ = 0;
    startx2_ = 0;
    starty2_ = 0;
    endx1_ = 0;
    endy1_ = 0;
    step_gap_time_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    spawn_type_ = 0u;
    spawn_group_id_ = 0u;
    condition_spawn_ = 0u;
    condition_param_ = 0u;
    condition_time_ = 0u;
    resurgence_ = 0u;
    resurgence_id_ = 0u;
    p_showcondition_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    groupid_ = 0u;
    conditionid_ = 0u;
    p_delaytime_ = 0u;
    turnin_invincible_time_ = 0;
    durtime_ = 0;
    keymonster_ = 0;
    boss_key_ = 0u;
    uid_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    die_mask_ = 0u;
    need_synchronize_ = 0u;
    if (has_monster_name()) {
      if (monster_name_ != &::google::protobuf::internal::kEmptyString) {
        monster_name_->clear();
      }
    }
    if (has_monster_head()) {
      if (monster_head_ != &::google::protobuf::internal::kEmptyString) {
        monster_head_->clear();
      }
    }
    if (has_monster_vectory()) {
      if (monster_vectory_ != &::google::protobuf::internal::kEmptyString) {
        monster_vectory_->clear();
      }
    }
    drop_gold_amount_ = 0u;
  }
  move_steps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sMonsterRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 monsterid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_atype;
        break;
      }

      // optional .jynetwork.proto.eActorLvlType atype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eActorLvlType_IsValid(value)) {
            set_atype(static_cast< ::jynetwork::proto::eActorLvlType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_modifyhp;
        break;
      }

      // optional float modifyhp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_modifyhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &modifyhp_)));
          set_has_modifyhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_modifyatk;
        break;
      }

      // optional float modifyatk = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_modifyatk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &modifyatk_)));
          set_has_modifyatk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_stx;
        break;
      }

      // optional int32 stx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stx_)));
          set_has_stx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sty;
        break;
      }

      // optional int32 sty = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sty_)));
          set_has_sty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_startx1;
        break;
      }

      // optional int32 startx1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startx1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startx1_)));
          set_has_startx1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_starty1;
        break;
      }

      // optional int32 starty1 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starty1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starty1_)));
          set_has_starty1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_endx2;
        break;
      }

      // optional int32 endx2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endx2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endx2_)));
          set_has_endx2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_endy2;
        break;
      }

      // optional int32 endy2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endy2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endy2_)));
          set_has_endy2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_outx;
        break;
      }

      // optional int32 outx = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outx_)));
          set_has_outx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_outy;
        break;
      }

      // optional int32 outy = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outy_)));
          set_has_outy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_mov_type;
        break;
      }

      // optional .jynetwork.proto.eMovementType mov_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mov_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eMovementType_IsValid(value)) {
            set_mov_type(static_cast< ::jynetwork::proto::eMovementType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_spawn_time;
        break;
      }

      // optional float spawn_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_spawn_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spawn_time_)));
          set_has_spawn_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_dropsid;
        break;
      }

      // optional uint32 dropsid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropsid_)));
          set_has_dropsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_score;
        break;
      }

      // optional uint32 score = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_delaytime;
        break;
      }

      // optional float delaytime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_delaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_wave_end_action;
        break;
      }

      // optional uint32 wave_end_action = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave_end_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_end_action_)));
          set_has_wave_end_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_body_effect;
        break;
      }

      // optional uint32 body_effect = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_effect_)));
          set_has_body_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_attack_type;
        break;
      }

      // optional .jynetwork.proto.eMonsterAttackMode attack_type = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eMonsterAttackMode_IsValid(value)) {
            set_attack_type(static_cast< ::jynetwork::proto::eMonsterAttackMode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_drop_gold;
        break;
      }

      // optional int32 drop_gold = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_gold_)));
          set_has_drop_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_drop_box_amount;
        break;
      }

      // optional int32 drop_box_amount = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_box_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_box_amount_)));
          set_has_drop_box_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_drop_box;
        break;
      }

      // optional int32 drop_box = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_box_)));
          set_has_drop_box();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_drop_gold_size;
        break;
      }

      // optional int32 drop_gold_size = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_gold_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_gold_size_)));
          set_has_drop_gold_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_startx2;
        break;
      }

      // optional int32 startx2 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startx2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startx2_)));
          set_has_startx2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_starty2;
        break;
      }

      // optional int32 starty2 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starty2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starty2_)));
          set_has_starty2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_endx1;
        break;
      }

      // optional int32 endx1 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endx1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endx1_)));
          set_has_endx1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_endy1;
        break;
      }

      // optional int32 endy1 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endy1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endy1_)));
          set_has_endy1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_move_steps;
        break;
      }

      // repeated uint32 move_steps = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 248, input, this->mutable_move_steps())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_move_steps())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_move_steps;
        if (input->ExpectTag(261)) goto parse_step_gap_time;
        break;
      }

      // optional float step_gap_time = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_step_gap_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_gap_time_)));
          set_has_step_gap_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_spawn_type;
        break;
      }

      // optional uint32 spawn_type = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spawn_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawn_type_)));
          set_has_spawn_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_spawn_group_id;
        break;
      }

      // optional uint32 spawn_group_id = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spawn_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawn_group_id_)));
          set_has_spawn_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_condition_spawn;
        break;
      }

      // optional uint32 condition_spawn = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition_spawn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_spawn_)));
          set_has_condition_spawn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_condition_param;
        break;
      }

      // optional uint32 condition_param = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_param_)));
          set_has_condition_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_condition_time;
        break;
      }

      // optional uint32 condition_time = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_time_)));
          set_has_condition_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_resurgence;
        break;
      }

      // optional uint32 resurgence = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resurgence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resurgence_)));
          set_has_resurgence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_resurgence_id;
        break;
      }

      // optional uint32 resurgence_id = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resurgence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resurgence_id_)));
          set_has_resurgence_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_p_showCondition;
        break;
      }

      // optional uint32 p_showCondition = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p_showCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p_showcondition_)));
          set_has_p_showcondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_groupId;
        break;
      }

      // optional uint32 groupId = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_conditionId;
        break;
      }

      // optional uint32 conditionId = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conditionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conditionid_)));
          set_has_conditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_p_delayTime;
        break;
      }

      // optional uint32 p_delayTime = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p_delayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p_delaytime_)));
          set_has_p_delaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(357)) goto parse_turnin_invincible_time;
        break;
      }

      // optional float turnin_invincible_time = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_turnin_invincible_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnin_invincible_time_)));
          set_has_turnin_invincible_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(365)) goto parse_durtime;
        break;
      }

      // optional float durtime = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_durtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &durtime_)));
          set_has_durtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_keyMonster;
        break;
      }

      // optional int32 keyMonster = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keymonster_)));
          set_has_keymonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_boss_key;
        break;
      }

      // optional uint32 boss_key = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_key_)));
          set_has_boss_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_die_mask;
        break;
      }

      // optional uint32 die_mask = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_die_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &die_mask_)));
          set_has_die_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_need_synchronize;
        break;
      }

      // optional uint32 need_synchronize = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_synchronize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_synchronize_)));
          set_has_need_synchronize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_monster_name;
        break;
      }

      // optional string monster_name = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monster_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_monster_head;
        break;
      }

      // optional string monster_head = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monster_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_monster_vectory;
        break;
      }

      // optional string monster_vectory = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_vectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monster_vectory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_drop_gold_amount;
        break;
      }

      // optional uint32 drop_gold_amount = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_gold_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_gold_amount_)));
          set_has_drop_gold_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sMonsterRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 monsterid = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // optional .jynetwork.proto.eActorLvlType atype = 3;
  if (has_atype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->atype(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional float modifyhp = 5;
  if (has_modifyhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->modifyhp(), output);
  }

  // optional float modifyatk = 6;
  if (has_modifyatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->modifyatk(), output);
  }

  // optional int32 stx = 7;
  if (has_stx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stx(), output);
  }

  // optional int32 sty = 8;
  if (has_sty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sty(), output);
  }

  // optional int32 startx1 = 9;
  if (has_startx1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->startx1(), output);
  }

  // optional int32 starty1 = 10;
  if (has_starty1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->starty1(), output);
  }

  // optional int32 endx2 = 11;
  if (has_endx2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->endx2(), output);
  }

  // optional int32 endy2 = 12;
  if (has_endy2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->endy2(), output);
  }

  // optional int32 outx = 13;
  if (has_outx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->outx(), output);
  }

  // optional int32 outy = 14;
  if (has_outy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->outy(), output);
  }

  // optional .jynetwork.proto.eMovementType mov_type = 15;
  if (has_mov_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->mov_type(), output);
  }

  // optional float spawn_time = 16;
  if (has_spawn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->spawn_time(), output);
  }

  // optional uint32 dropsid = 17;
  if (has_dropsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->dropsid(), output);
  }

  // optional uint32 score = 18;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->score(), output);
  }

  // optional float delaytime = 19;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->delaytime(), output);
  }

  // optional uint32 wave_end_action = 20;
  if (has_wave_end_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->wave_end_action(), output);
  }

  // optional uint32 body_effect = 21;
  if (has_body_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->body_effect(), output);
  }

  // optional .jynetwork.proto.eMonsterAttackMode attack_type = 22;
  if (has_attack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->attack_type(), output);
  }

  // optional int32 drop_gold = 23;
  if (has_drop_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->drop_gold(), output);
  }

  // optional int32 drop_box_amount = 24;
  if (has_drop_box_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->drop_box_amount(), output);
  }

  // optional int32 drop_box = 25;
  if (has_drop_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->drop_box(), output);
  }

  // optional int32 drop_gold_size = 26;
  if (has_drop_gold_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->drop_gold_size(), output);
  }

  // optional int32 startx2 = 27;
  if (has_startx2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->startx2(), output);
  }

  // optional int32 starty2 = 28;
  if (has_starty2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->starty2(), output);
  }

  // optional int32 endx1 = 29;
  if (has_endx1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->endx1(), output);
  }

  // optional int32 endy1 = 30;
  if (has_endy1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->endy1(), output);
  }

  // repeated uint32 move_steps = 31;
  for (int i = 0; i < this->move_steps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      31, this->move_steps(i), output);
  }

  // optional float step_gap_time = 32;
  if (has_step_gap_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->step_gap_time(), output);
  }

  // optional uint32 spawn_type = 33;
  if (has_spawn_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->spawn_type(), output);
  }

  // optional uint32 spawn_group_id = 34;
  if (has_spawn_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->spawn_group_id(), output);
  }

  // optional uint32 condition_spawn = 35;
  if (has_condition_spawn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->condition_spawn(), output);
  }

  // optional uint32 condition_param = 36;
  if (has_condition_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->condition_param(), output);
  }

  // optional uint32 condition_time = 37;
  if (has_condition_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->condition_time(), output);
  }

  // optional uint32 resurgence = 38;
  if (has_resurgence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->resurgence(), output);
  }

  // optional uint32 resurgence_id = 39;
  if (has_resurgence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->resurgence_id(), output);
  }

  // optional uint32 p_showCondition = 40;
  if (has_p_showcondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->p_showcondition(), output);
  }

  // optional uint32 groupId = 41;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->groupid(), output);
  }

  // optional uint32 conditionId = 42;
  if (has_conditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->conditionid(), output);
  }

  // optional uint32 p_delayTime = 43;
  if (has_p_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->p_delaytime(), output);
  }

  // optional float turnin_invincible_time = 44;
  if (has_turnin_invincible_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->turnin_invincible_time(), output);
  }

  // optional float durtime = 45;
  if (has_durtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->durtime(), output);
  }

  // optional int32 keyMonster = 46;
  if (has_keymonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->keymonster(), output);
  }

  // optional uint32 boss_key = 47;
  if (has_boss_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->boss_key(), output);
  }

  // optional uint32 uid = 48;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->uid(), output);
  }

  // optional uint32 die_mask = 49;
  if (has_die_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->die_mask(), output);
  }

  // optional uint32 need_synchronize = 50;
  if (has_need_synchronize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->need_synchronize(), output);
  }

  // optional string monster_name = 51;
  if (has_monster_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      51, this->monster_name(), output);
  }

  // optional string monster_head = 52;
  if (has_monster_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      52, this->monster_head(), output);
  }

  // optional string monster_vectory = 53;
  if (has_monster_vectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      53, this->monster_vectory(), output);
  }

  // optional uint32 drop_gold_amount = 54;
  if (has_drop_gold_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->drop_gold_amount(), output);
  }

}

int sMonsterRefresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 monsterid = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional .jynetwork.proto.eActorLvlType atype = 3;
    if (has_atype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atype());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional float modifyhp = 5;
    if (has_modifyhp()) {
      total_size += 1 + 4;
    }

    // optional float modifyatk = 6;
    if (has_modifyatk()) {
      total_size += 1 + 4;
    }

    // optional int32 stx = 7;
    if (has_stx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stx());
    }

    // optional int32 sty = 8;
    if (has_sty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sty());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 startx1 = 9;
    if (has_startx1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startx1());
    }

    // optional int32 starty1 = 10;
    if (has_starty1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starty1());
    }

    // optional int32 endx2 = 11;
    if (has_endx2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endx2());
    }

    // optional int32 endy2 = 12;
    if (has_endy2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endy2());
    }

    // optional int32 outx = 13;
    if (has_outx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outx());
    }

    // optional int32 outy = 14;
    if (has_outy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outy());
    }

    // optional .jynetwork.proto.eMovementType mov_type = 15;
    if (has_mov_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mov_type());
    }

    // optional float spawn_time = 16;
    if (has_spawn_time()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 dropsid = 17;
    if (has_dropsid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropsid());
    }

    // optional uint32 score = 18;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional float delaytime = 19;
    if (has_delaytime()) {
      total_size += 2 + 4;
    }

    // optional uint32 wave_end_action = 20;
    if (has_wave_end_action()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave_end_action());
    }

    // optional uint32 body_effect = 21;
    if (has_body_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body_effect());
    }

    // optional .jynetwork.proto.eMonsterAttackMode attack_type = 22;
    if (has_attack_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attack_type());
    }

    // optional int32 drop_gold = 23;
    if (has_drop_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_gold());
    }

    // optional int32 drop_box_amount = 24;
    if (has_drop_box_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_box_amount());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 drop_box = 25;
    if (has_drop_box()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_box());
    }

    // optional int32 drop_gold_size = 26;
    if (has_drop_gold_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_gold_size());
    }

    // optional int32 startx2 = 27;
    if (has_startx2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startx2());
    }

    // optional int32 starty2 = 28;
    if (has_starty2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starty2());
    }

    // optional int32 endx1 = 29;
    if (has_endx1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endx1());
    }

    // optional int32 endy1 = 30;
    if (has_endy1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endy1());
    }

    // optional float step_gap_time = 32;
    if (has_step_gap_time()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 spawn_type = 33;
    if (has_spawn_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawn_type());
    }

    // optional uint32 spawn_group_id = 34;
    if (has_spawn_group_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawn_group_id());
    }

    // optional uint32 condition_spawn = 35;
    if (has_condition_spawn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->condition_spawn());
    }

    // optional uint32 condition_param = 36;
    if (has_condition_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->condition_param());
    }

    // optional uint32 condition_time = 37;
    if (has_condition_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->condition_time());
    }

    // optional uint32 resurgence = 38;
    if (has_resurgence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resurgence());
    }

    // optional uint32 resurgence_id = 39;
    if (has_resurgence_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resurgence_id());
    }

    // optional uint32 p_showCondition = 40;
    if (has_p_showcondition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p_showcondition());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 groupId = 41;
    if (has_groupid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 conditionId = 42;
    if (has_conditionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conditionid());
    }

    // optional uint32 p_delayTime = 43;
    if (has_p_delaytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p_delaytime());
    }

    // optional float turnin_invincible_time = 44;
    if (has_turnin_invincible_time()) {
      total_size += 2 + 4;
    }

    // optional float durtime = 45;
    if (has_durtime()) {
      total_size += 2 + 4;
    }

    // optional int32 keyMonster = 46;
    if (has_keymonster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keymonster());
    }

    // optional uint32 boss_key = 47;
    if (has_boss_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_key());
    }

    // optional uint32 uid = 48;
    if (has_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 die_mask = 49;
    if (has_die_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->die_mask());
    }

    // optional uint32 need_synchronize = 50;
    if (has_need_synchronize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_synchronize());
    }

    // optional string monster_name = 51;
    if (has_monster_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monster_name());
    }

    // optional string monster_head = 52;
    if (has_monster_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monster_head());
    }

    // optional string monster_vectory = 53;
    if (has_monster_vectory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monster_vectory());
    }

    // optional uint32 drop_gold_amount = 54;
    if (has_drop_gold_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_gold_amount());
    }

  }
  // repeated uint32 move_steps = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->move_steps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->move_steps(i));
    }
    total_size += 2 * this->move_steps_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sMonsterRefresh::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sMonsterRefresh*>(&from));
}

void sMonsterRefresh::MergeFrom(const sMonsterRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  move_steps_.MergeFrom(from.move_steps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_atype()) {
      set_atype(from.atype());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_modifyhp()) {
      set_modifyhp(from.modifyhp());
    }
    if (from.has_modifyatk()) {
      set_modifyatk(from.modifyatk());
    }
    if (from.has_stx()) {
      set_stx(from.stx());
    }
    if (from.has_sty()) {
      set_sty(from.sty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_startx1()) {
      set_startx1(from.startx1());
    }
    if (from.has_starty1()) {
      set_starty1(from.starty1());
    }
    if (from.has_endx2()) {
      set_endx2(from.endx2());
    }
    if (from.has_endy2()) {
      set_endy2(from.endy2());
    }
    if (from.has_outx()) {
      set_outx(from.outx());
    }
    if (from.has_outy()) {
      set_outy(from.outy());
    }
    if (from.has_mov_type()) {
      set_mov_type(from.mov_type());
    }
    if (from.has_spawn_time()) {
      set_spawn_time(from.spawn_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dropsid()) {
      set_dropsid(from.dropsid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_wave_end_action()) {
      set_wave_end_action(from.wave_end_action());
    }
    if (from.has_body_effect()) {
      set_body_effect(from.body_effect());
    }
    if (from.has_attack_type()) {
      set_attack_type(from.attack_type());
    }
    if (from.has_drop_gold()) {
      set_drop_gold(from.drop_gold());
    }
    if (from.has_drop_box_amount()) {
      set_drop_box_amount(from.drop_box_amount());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_drop_box()) {
      set_drop_box(from.drop_box());
    }
    if (from.has_drop_gold_size()) {
      set_drop_gold_size(from.drop_gold_size());
    }
    if (from.has_startx2()) {
      set_startx2(from.startx2());
    }
    if (from.has_starty2()) {
      set_starty2(from.starty2());
    }
    if (from.has_endx1()) {
      set_endx1(from.endx1());
    }
    if (from.has_endy1()) {
      set_endy1(from.endy1());
    }
    if (from.has_step_gap_time()) {
      set_step_gap_time(from.step_gap_time());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_spawn_type()) {
      set_spawn_type(from.spawn_type());
    }
    if (from.has_spawn_group_id()) {
      set_spawn_group_id(from.spawn_group_id());
    }
    if (from.has_condition_spawn()) {
      set_condition_spawn(from.condition_spawn());
    }
    if (from.has_condition_param()) {
      set_condition_param(from.condition_param());
    }
    if (from.has_condition_time()) {
      set_condition_time(from.condition_time());
    }
    if (from.has_resurgence()) {
      set_resurgence(from.resurgence());
    }
    if (from.has_resurgence_id()) {
      set_resurgence_id(from.resurgence_id());
    }
    if (from.has_p_showcondition()) {
      set_p_showcondition(from.p_showcondition());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_conditionid()) {
      set_conditionid(from.conditionid());
    }
    if (from.has_p_delaytime()) {
      set_p_delaytime(from.p_delaytime());
    }
    if (from.has_turnin_invincible_time()) {
      set_turnin_invincible_time(from.turnin_invincible_time());
    }
    if (from.has_durtime()) {
      set_durtime(from.durtime());
    }
    if (from.has_keymonster()) {
      set_keymonster(from.keymonster());
    }
    if (from.has_boss_key()) {
      set_boss_key(from.boss_key());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_die_mask()) {
      set_die_mask(from.die_mask());
    }
    if (from.has_need_synchronize()) {
      set_need_synchronize(from.need_synchronize());
    }
    if (from.has_monster_name()) {
      set_monster_name(from.monster_name());
    }
    if (from.has_monster_head()) {
      set_monster_head(from.monster_head());
    }
    if (from.has_monster_vectory()) {
      set_monster_vectory(from.monster_vectory());
    }
    if (from.has_drop_gold_amount()) {
      set_drop_gold_amount(from.drop_gold_amount());
    }
  }
}

void sMonsterRefresh::CopyFrom(const sMonsterRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sMonsterRefresh::IsInitialized() const {

  return true;
}

void sMonsterRefresh::Swap(sMonsterRefresh* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(playerid_, other->playerid_);
    std::swap(atype_, other->atype_);
    std::swap(level_, other->level_);
    std::swap(modifyhp_, other->modifyhp_);
    std::swap(modifyatk_, other->modifyatk_);
    std::swap(stx_, other->stx_);
    std::swap(sty_, other->sty_);
    std::swap(startx1_, other->startx1_);
    std::swap(starty1_, other->starty1_);
    std::swap(endx2_, other->endx2_);
    std::swap(endy2_, other->endy2_);
    std::swap(outx_, other->outx_);
    std::swap(outy_, other->outy_);
    std::swap(mov_type_, other->mov_type_);
    std::swap(spawn_time_, other->spawn_time_);
    std::swap(dropsid_, other->dropsid_);
    std::swap(score_, other->score_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(wave_end_action_, other->wave_end_action_);
    std::swap(body_effect_, other->body_effect_);
    std::swap(attack_type_, other->attack_type_);
    std::swap(drop_gold_, other->drop_gold_);
    std::swap(drop_box_amount_, other->drop_box_amount_);
    std::swap(drop_box_, other->drop_box_);
    std::swap(drop_gold_size_, other->drop_gold_size_);
    std::swap(startx2_, other->startx2_);
    std::swap(starty2_, other->starty2_);
    std::swap(endx1_, other->endx1_);
    std::swap(endy1_, other->endy1_);
    move_steps_.Swap(&other->move_steps_);
    std::swap(step_gap_time_, other->step_gap_time_);
    std::swap(spawn_type_, other->spawn_type_);
    std::swap(spawn_group_id_, other->spawn_group_id_);
    std::swap(condition_spawn_, other->condition_spawn_);
    std::swap(condition_param_, other->condition_param_);
    std::swap(condition_time_, other->condition_time_);
    std::swap(resurgence_, other->resurgence_);
    std::swap(resurgence_id_, other->resurgence_id_);
    std::swap(p_showcondition_, other->p_showcondition_);
    std::swap(groupid_, other->groupid_);
    std::swap(conditionid_, other->conditionid_);
    std::swap(p_delaytime_, other->p_delaytime_);
    std::swap(turnin_invincible_time_, other->turnin_invincible_time_);
    std::swap(durtime_, other->durtime_);
    std::swap(keymonster_, other->keymonster_);
    std::swap(boss_key_, other->boss_key_);
    std::swap(uid_, other->uid_);
    std::swap(die_mask_, other->die_mask_);
    std::swap(need_synchronize_, other->need_synchronize_);
    std::swap(monster_name_, other->monster_name_);
    std::swap(monster_head_, other->monster_head_);
    std::swap(monster_vectory_, other->monster_vectory_);
    std::swap(drop_gold_amount_, other->drop_gold_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sMonsterRefresh::GetTypeName() const {
  return "jynetwork.proto.sMonsterRefresh";
}


// ===================================================================

#ifndef _MSC_VER
const int sCastleBlock::kBlockNameFieldNumber;
const int sCastleBlock::kScrollScaleFieldNumber;
#endif  // !_MSC_VER

sCastleBlock::sCastleBlock()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCastleBlock::InitAsDefaultInstance() {
}

sCastleBlock::sCastleBlock(const sCastleBlock& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCastleBlock::SharedCtor() {
  _cached_size_ = 0;
  block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scroll_scale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCastleBlock::~sCastleBlock() {
  SharedDtor();
}

void sCastleBlock::SharedDtor() {
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    delete block_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCastleBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCastleBlock& sCastleBlock::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sCastleBlock* sCastleBlock::default_instance_ = NULL;

sCastleBlock* sCastleBlock::New() const {
  return new sCastleBlock;
}

void sCastleBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_name()) {
      if (block_name_ != &::google::protobuf::internal::kEmptyString) {
        block_name_->clear();
      }
    }
    scroll_scale_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCastleBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string block_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_scroll_scale;
        break;
      }

      // optional float scroll_scale = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scroll_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scroll_scale_)));
          set_has_scroll_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCastleBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string block_name = 1;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_name(), output);
  }

  // optional float scroll_scale = 2;
  if (has_scroll_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scroll_scale(), output);
  }

}

int sCastleBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string block_name = 1;
    if (has_block_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_name());
    }

    // optional float scroll_scale = 2;
    if (has_scroll_scale()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCastleBlock::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCastleBlock*>(&from));
}

void sCastleBlock::MergeFrom(const sCastleBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_name()) {
      set_block_name(from.block_name());
    }
    if (from.has_scroll_scale()) {
      set_scroll_scale(from.scroll_scale());
    }
  }
}

void sCastleBlock::CopyFrom(const sCastleBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCastleBlock::IsInitialized() const {

  return true;
}

void sCastleBlock::Swap(sCastleBlock* other) {
  if (other != this) {
    std::swap(block_name_, other->block_name_);
    std::swap(scroll_scale_, other->scroll_scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCastleBlock::GetTypeName() const {
  return "jynetwork.proto.sCastleBlock";
}


// ===================================================================

#ifndef _MSC_VER
const int sCastleStats::kUidFieldNumber;
const int sCastleStats::kCastlenameFieldNumber;
const int sCastleStats::kCastlemapFieldNumber;
const int sCastleStats::kCastlebossmapFieldNumber;
const int sCastleStats::kNumlimitFieldNumber;
const int sCastleStats::kLevellimitFieldNumber;
const int sCastleStats::kRanklimitFieldNumber;
const int sCastleStats::kWeekdaylimitFieldNumber;
const int sCastleStats::kDayBegintimeFieldNumber;
const int sCastleStats::kDayEndtimeFieldNumber;
const int sCastleStats::kFrontcastleFieldNumber;
const int sCastleStats::kGroupsFieldNumber;
const int sCastleStats::kBossmapScrollFieldNumber;
const int sCastleStats::kWaterefFieldNumber;
const int sCastleStats::kMapEffectFieldNumber;
const int sCastleStats::kBlockMoFieldNumber;
const int sCastleStats::kAssistDropFieldNumber;
const int sCastleStats::kEnterEffectFieldNumber;
const int sCastleStats::kDiveEffectFieldNumber;
const int sCastleStats::kCastlemusicFieldNumber;
const int sCastleStats::kBossmusicFieldNumber;
const int sCastleStats::kMapScrollSpeedFieldNumber;
const int sCastleStats::kSkillAllowFieldNumber;
const int sCastleStats::kPartnerAllowFieldNumber;
const int sCastleStats::kAssistDropRateFieldNumber;
const int sCastleStats::kItemDropFieldNumber;
const int sCastleStats::kDifficultFieldNumber;
const int sCastleStats::kFactionFieldNumber;
const int sCastleStats::kItemDropIdFieldNumber;
const int sCastleStats::kFatigueFieldNumber;
const int sCastleStats::kCastleTypeFieldNumber;
const int sCastleStats::kCastleCatlogFieldNumber;
const int sCastleStats::kMapColorRFieldNumber;
const int sCastleStats::kMapColorGFieldNumber;
const int sCastleStats::kMapColorBFieldNumber;
const int sCastleStats::kCloudColorRFieldNumber;
const int sCastleStats::kCloudColorGFieldNumber;
const int sCastleStats::kCloudColorBFieldNumber;
const int sCastleStats::kBodyColorRFieldNumber;
const int sCastleStats::kBodyColorGFieldNumber;
const int sCastleStats::kBodyColorBFieldNumber;
const int sCastleStats::kStarHpFieldNumber;
const int sCastleStats::kStarTimeFieldNumber;
const int sCastleStats::kStarScoreFieldNumber;
const int sCastleStats::kRecommondAttackFieldNumber;
const int sCastleStats::kWinConditionFieldNumber;
const int sCastleStats::kTimeLimitFieldNumber;
const int sCastleStats::kEnemyEnhanceTimeFieldNumber;
const int sCastleStats::kEnemyEnhanceFieldNumber;
const int sCastleStats::kDescriptionFieldNumber;
const int sCastleStats::kBossNameFieldNumber;
const int sCastleStats::kBossModelFieldNumber;
const int sCastleStats::kBossScaleFieldNumber;
const int sCastleStats::kBossXFieldNumber;
const int sCastleStats::kBossYFieldNumber;
const int sCastleStats::kOpenConditionDescFieldNumber;
const int sCastleStats::kStageIdFieldNumber;
const int sCastleStats::kStageGroupIdFieldNumber;
const int sCastleStats::kStageDetailIdFieldNumber;
const int sCastleStats::kDiveCloudFieldNumber;
const int sCastleStats::kDiveBottomFieldNumber;
const int sCastleStats::kResultBgFieldNumber;
const int sCastleStats::kChaosFieldNumber;
const int sCastleStats::kAfterDropIdFieldNumber;
const int sCastleStats::kPercentFieldNumber;
const int sCastleStats::kChaosGroupFieldNumber;
const int sCastleStats::kRoleFieldNumber;
const int sCastleStats::kFirstDropFieldNumber;
const int sCastleStats::kFirstPassDropFieldNumber;
const int sCastleStats::kJoblimitFieldNumber;
const int sCastleStats::kFirstDropShowTypeFieldNumber;
const int sCastleStats::kDifficultPercentFieldNumber;
const int sCastleStats::kDifficultTcFieldNumber;
const int sCastleStats::kMvpDropFieldNumber;
const int sCastleStats::kDropShowFieldNumber;
const int sCastleStats::kDropShowTypeFieldNumber;
const int sCastleStats::kLoadTipsFieldNumber;
const int sCastleStats::kCanWellOverFieldNumber;
const int sCastleStats::kPmattackFieldNumber;
#endif  // !_MSC_VER

sCastleStats::sCastleStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCastleStats::InitAsDefaultInstance() {
}

sCastleStats::sCastleStats(const sCastleStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCastleStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  castlename_ = 0u;
  castlemap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  castlebossmap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  numlimit_ = 0u;
  levellimit_ = 0u;
  ranklimit_ = 0u;
  day_begintime_ = 0u;
  day_endtime_ = 0u;
  frontcastle_ = 0u;
  bossmap_scroll_ = 0;
  wateref_ = 0u;
  map_effect_ = 0u;
  enter_effect_ = 0u;
  dive_effect_ = 0u;
  castlemusic_ = 0u;
  bossmusic_ = 0u;
  map_scroll_speed_ = 0;
  skill_allow_ = 0u;
  partner_allow_ = 0u;
  assist_drop_rate_ = 0;
  difficult_ = 0u;
  faction_ = 0u;
  item_drop_id_ = 0u;
  fatigue_ = 0u;
  castle_type_ = 0u;
  castle_catlog_ = 0u;
  map_color_r_ = 0u;
  map_color_g_ = 0u;
  map_color_b_ = 0u;
  cloud_color_r_ = 0u;
  cloud_color_g_ = 0u;
  cloud_color_b_ = 0u;
  body_color_r_ = 0u;
  body_color_g_ = 0u;
  body_color_b_ = 0u;
  star_hp_ = 0;
  star_time_ = 0;
  star_score_ = 0;
  recommond_attack_ = 0;
  win_condition_ = 0u;
  time_limit_ = 0;
  enemy_enhance_time_ = 0;
  enemy_enhance_ = 0;
  description_ = 0u;
  boss_name_ = 0u;
  boss_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boss_scale_ = 0;
  boss_x_ = 0;
  boss_y_ = 0;
  open_condition_desc_ = 0u;
  stage_id_ = 0u;
  stage_group_id_ = 0u;
  stage_detail_id_ = 0u;
  dive_cloud_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dive_bottom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_bg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  after_drop_id_ = 0u;
  percent_ = 0u;
  role_ = 0;
  first_drop_ = 0u;
  joblimit_ = 0u;
  mvp_drop_ = 0u;
  can_well_over_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCastleStats::~sCastleStats() {
  SharedDtor();
}

void sCastleStats::SharedDtor() {
  if (castlemap_ != &::google::protobuf::internal::kEmptyString) {
    delete castlemap_;
  }
  if (castlebossmap_ != &::google::protobuf::internal::kEmptyString) {
    delete castlebossmap_;
  }
  if (boss_model_ != &::google::protobuf::internal::kEmptyString) {
    delete boss_model_;
  }
  if (dive_cloud_ != &::google::protobuf::internal::kEmptyString) {
    delete dive_cloud_;
  }
  if (dive_bottom_ != &::google::protobuf::internal::kEmptyString) {
    delete dive_bottom_;
  }
  if (result_bg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_bg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCastleStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCastleStats& sCastleStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sCastleStats* sCastleStats::default_instance_ = NULL;

sCastleStats* sCastleStats::New() const {
  return new sCastleStats;
}

void sCastleStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    castlename_ = 0u;
    if (has_castlemap()) {
      if (castlemap_ != &::google::protobuf::internal::kEmptyString) {
        castlemap_->clear();
      }
    }
    if (has_castlebossmap()) {
      if (castlebossmap_ != &::google::protobuf::internal::kEmptyString) {
        castlebossmap_->clear();
      }
    }
    numlimit_ = 0u;
    levellimit_ = 0u;
    ranklimit_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    day_begintime_ = 0u;
    day_endtime_ = 0u;
    frontcastle_ = 0u;
    bossmap_scroll_ = 0;
    wateref_ = 0u;
    map_effect_ = 0u;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    enter_effect_ = 0u;
    dive_effect_ = 0u;
    castlemusic_ = 0u;
    bossmusic_ = 0u;
    map_scroll_speed_ = 0;
    skill_allow_ = 0u;
    partner_allow_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    assist_drop_rate_ = 0;
    difficult_ = 0u;
    faction_ = 0u;
    item_drop_id_ = 0u;
    fatigue_ = 0u;
    castle_type_ = 0u;
    castle_catlog_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    map_color_r_ = 0u;
    map_color_g_ = 0u;
    map_color_b_ = 0u;
    cloud_color_r_ = 0u;
    cloud_color_g_ = 0u;
    cloud_color_b_ = 0u;
    body_color_r_ = 0u;
    body_color_g_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    body_color_b_ = 0u;
    star_hp_ = 0;
    star_time_ = 0;
    star_score_ = 0;
    recommond_attack_ = 0;
    win_condition_ = 0u;
    time_limit_ = 0;
    enemy_enhance_time_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    enemy_enhance_ = 0;
    description_ = 0u;
    boss_name_ = 0u;
    if (has_boss_model()) {
      if (boss_model_ != &::google::protobuf::internal::kEmptyString) {
        boss_model_->clear();
      }
    }
    boss_scale_ = 0;
    boss_x_ = 0;
    boss_y_ = 0;
    open_condition_desc_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    stage_id_ = 0u;
    stage_group_id_ = 0u;
    stage_detail_id_ = 0u;
    if (has_dive_cloud()) {
      if (dive_cloud_ != &::google::protobuf::internal::kEmptyString) {
        dive_cloud_->clear();
      }
    }
    if (has_dive_bottom()) {
      if (dive_bottom_ != &::google::protobuf::internal::kEmptyString) {
        dive_bottom_->clear();
      }
    }
    if (has_result_bg()) {
      if (result_bg_ != &::google::protobuf::internal::kEmptyString) {
        result_bg_->clear();
      }
    }
    after_drop_id_ = 0u;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    percent_ = 0u;
    role_ = 0;
    first_drop_ = 0u;
    joblimit_ = 0u;
  }
  if (_has_bits_[73 / 32] & (0xffu << (73 % 32))) {
    mvp_drop_ = 0u;
    can_well_over_ = 0u;
  }
  weekdaylimit_.Clear();
  groups_.Clear();
  block_mo_.Clear();
  assist_drop_.Clear();
  item_drop_.Clear();
  chaos_.Clear();
  chaos_group_.Clear();
  first_pass_drop_.Clear();
  first_drop_show_type_.Clear();
  difficult_percent_.Clear();
  difficult_tc_.Clear();
  drop_show_.Clear();
  drop_show_type_.Clear();
  load_tips_.Clear();
  pmattack_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCastleStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_castlename;
        break;
      }

      // optional uint32 castlename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_castlename:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castlename_)));
          set_has_castlename();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_castlemap;
        break;
      }

      // optional string castlemap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_castlemap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_castlemap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_castlebossmap;
        break;
      }

      // optional string castlebossmap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_castlebossmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_castlebossmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_numlimit;
        break;
      }

      // optional uint32 numlimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numlimit_)));
          set_has_numlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_levellimit;
        break;
      }

      // optional uint32 levellimit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levellimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levellimit_)));
          set_has_levellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ranklimit;
        break;
      }

      // optional uint32 ranklimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranklimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranklimit_)));
          set_has_ranklimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_weekdaylimit;
        break;
      }

      // repeated uint32 weekdaylimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekdaylimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_weekdaylimit())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_weekdaylimit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_weekdaylimit;
        if (input->ExpectTag(77)) goto parse_day_begintime;
        break;
      }

      // optional fixed32 day_begintime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_day_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &day_begintime_)));
          set_has_day_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_day_endtime;
        break;
      }

      // optional fixed32 day_endtime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_day_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &day_endtime_)));
          set_has_day_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_frontcastle;
        break;
      }

      // optional uint32 frontcastle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frontcastle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frontcastle_)));
          set_has_frontcastle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_groups;
        break;
      }

      // repeated .jynetwork.proto.sMonsterRefreshGroup groups = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_groups;
        if (input->ExpectTag(109)) goto parse_bossmap_scroll;
        break;
      }

      // optional float bossmap_scroll = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bossmap_scroll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bossmap_scroll_)));
          set_has_bossmap_scroll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_wateref;
        break;
      }

      // optional uint32 wateref = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wateref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wateref_)));
          set_has_wateref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_map_effect;
        break;
      }

      // optional uint32 map_effect = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_effect_)));
          set_has_map_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_block_mo;
        break;
      }

      // repeated .jynetwork.proto.sCastleBlock block_mo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_mo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block_mo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_block_mo;
        if (input->ExpectTag(152)) goto parse_assist_drop;
        break;
      }

      // repeated uint32 assist_drop = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assist_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_assist_drop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_assist_drop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_assist_drop;
        if (input->ExpectTag(160)) goto parse_enter_effect;
        break;
      }

      // optional uint32 enter_effect = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enter_effect_)));
          set_has_enter_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_dive_effect;
        break;
      }

      // optional uint32 dive_effect = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dive_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dive_effect_)));
          set_has_dive_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_castlemusic;
        break;
      }

      // optional uint32 castlemusic = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_castlemusic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castlemusic_)));
          set_has_castlemusic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_bossmusic;
        break;
      }

      // optional uint32 bossmusic = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossmusic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossmusic_)));
          set_has_bossmusic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_map_scroll_speed;
        break;
      }

      // optional float map_scroll_speed = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_map_scroll_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &map_scroll_speed_)));
          set_has_map_scroll_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_skill_allow;
        break;
      }

      // optional uint32 skill_allow = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_allow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_allow_)));
          set_has_skill_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_partner_allow;
        break;
      }

      // optional uint32 partner_allow = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_allow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_allow_)));
          set_has_partner_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_assist_drop_rate;
        break;
      }

      // optional float assist_drop_rate = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_assist_drop_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assist_drop_rate_)));
          set_has_assist_drop_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_item_drop;
        break;
      }

      // repeated .jynetwork.proto.sCastleDrop item_drop = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_drop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_drop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_item_drop;
        if (input->ExpectTag(232)) goto parse_difficult;
        break;
      }

      // optional uint32 difficult = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficult_)));
          set_has_difficult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_faction;
        break;
      }

      // optional uint32 faction = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_)));
          set_has_faction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_item_drop_id;
        break;
      }

      // optional uint32 item_drop_id = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_drop_id_)));
          set_has_item_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_fatigue;
        break;
      }

      // optional uint32 fatigue = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fatigue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fatigue_)));
          set_has_fatigue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_castle_type;
        break;
      }

      // optional uint32 castle_type = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_castle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castle_type_)));
          set_has_castle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_castle_catlog;
        break;
      }

      // optional uint32 castle_catlog = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_castle_catlog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castle_catlog_)));
          set_has_castle_catlog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_map_color_r;
        break;
      }

      // optional uint32 map_color_r = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_color_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_color_r_)));
          set_has_map_color_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_map_color_g;
        break;
      }

      // optional uint32 map_color_g = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_color_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_color_g_)));
          set_has_map_color_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_map_color_b;
        break;
      }

      // optional uint32 map_color_b = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_color_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_color_b_)));
          set_has_map_color_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_cloud_color_r;
        break;
      }

      // optional uint32 cloud_color_r = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloud_color_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloud_color_r_)));
          set_has_cloud_color_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_cloud_color_g;
        break;
      }

      // optional uint32 cloud_color_g = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloud_color_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloud_color_g_)));
          set_has_cloud_color_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_cloud_color_b;
        break;
      }

      // optional uint32 cloud_color_b = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloud_color_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloud_color_b_)));
          set_has_cloud_color_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_body_color_r;
        break;
      }

      // optional uint32 body_color_r = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_color_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_color_r_)));
          set_has_body_color_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_body_color_g;
        break;
      }

      // optional uint32 body_color_g = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_color_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_color_g_)));
          set_has_body_color_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_body_color_b;
        break;
      }

      // optional uint32 body_color_b = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_color_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_color_b_)));
          set_has_body_color_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(357)) goto parse_star_hp;
        break;
      }

      // optional float star_hp = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_star_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &star_hp_)));
          set_has_star_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(365)) goto parse_star_time;
        break;
      }

      // optional float star_time = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_star_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &star_time_)));
          set_has_star_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(373)) goto parse_star_score;
        break;
      }

      // optional float star_score = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_star_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &star_score_)));
          set_has_star_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(381)) goto parse_recommond_attack;
        break;
      }

      // optional float recommond_attack = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_recommond_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recommond_attack_)));
          set_has_recommond_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_win_condition;
        break;
      }

      // optional uint32 win_condition = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_condition_)));
          set_has_win_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(397)) goto parse_time_limit;
        break;
      }

      // optional float time_limit = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_limit_)));
          set_has_time_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(405)) goto parse_enemy_enhance_time;
        break;
      }

      // optional float enemy_enhance_time = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enemy_enhance_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enemy_enhance_time_)));
          set_has_enemy_enhance_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(413)) goto parse_enemy_enhance;
        break;
      }

      // optional float enemy_enhance = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enemy_enhance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enemy_enhance_)));
          set_has_enemy_enhance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_description;
        break;
      }

      // optional uint32 description = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_description:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &description_)));
          set_has_description();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_boss_name;
        break;
      }

      // optional uint32 boss_name = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_name_)));
          set_has_boss_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_boss_model;
        break;
      }

      // optional string boss_model = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boss_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(445)) goto parse_boss_scale;
        break;
      }

      // optional float boss_scale = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_boss_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boss_scale_)));
          set_has_boss_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(453)) goto parse_boss_x;
        break;
      }

      // optional float boss_x = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_boss_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boss_x_)));
          set_has_boss_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(461)) goto parse_boss_y;
        break;
      }

      // optional float boss_y = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_boss_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boss_y_)));
          set_has_boss_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_open_condition_desc;
        break;
      }

      // optional uint32 open_condition_desc = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_condition_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_condition_desc_)));
          set_has_open_condition_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_stage_id;
        break;
      }

      // optional uint32 stage_id = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_stage_group_id;
        break;
      }

      // optional uint32 stage_group_id = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_group_id_)));
          set_has_stage_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_stage_detail_id;
        break;
      }

      // optional uint32 stage_detail_id = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_detail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_detail_id_)));
          set_has_stage_detail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_dive_cloud;
        break;
      }

      // optional string dive_cloud = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dive_cloud:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dive_cloud()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_dive_bottom;
        break;
      }

      // optional string dive_bottom = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dive_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dive_bottom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_result_bg;
        break;
      }

      // optional string result_bg = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_bg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_bg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_chaos;
        break;
      }

      // repeated .jynetwork.proto.sChaosStats chaos = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chaos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chaos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_chaos;
        if (input->ExpectTag(528)) goto parse_after_drop_id;
        break;
      }

      // optional uint32 after_drop_id = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_after_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &after_drop_id_)));
          set_has_after_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_percent;
        break;
      }

      // optional uint32 percent = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_chaos_group;
        break;
      }

      // repeated uint32 chaos_group = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chaos_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 544, input, this->mutable_chaos_group())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chaos_group())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_chaos_group;
        if (input->ExpectTag(552)) goto parse_role;
        break;
      }

      // optional .jynetwork.proto.eRoleType role = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eRoleType_IsValid(value)) {
            set_role(static_cast< ::jynetwork::proto::eRoleType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_first_drop;
        break;
      }

      // optional uint32 first_drop = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_drop_)));
          set_has_first_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_first_pass_drop;
        break;
      }

      // repeated uint32 first_pass_drop = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_pass_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 568, input, this->mutable_first_pass_drop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_first_pass_drop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_first_pass_drop;
        if (input->ExpectTag(576)) goto parse_joblimit;
        break;
      }

      // optional uint32 joblimit = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joblimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joblimit_)));
          set_has_joblimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_first_drop_show_type;
        break;
      }

      // repeated uint32 first_drop_show_type = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_drop_show_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 584, input, this->mutable_first_drop_show_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_first_drop_show_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_first_drop_show_type;
        if (input->ExpectTag(597)) goto parse_difficult_percent;
        break;
      }

      // repeated float difficult_percent = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_difficult_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 597, input, this->mutable_difficult_percent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_difficult_percent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(597)) goto parse_difficult_percent;
        if (input->ExpectTag(600)) goto parse_difficult_tc;
        break;
      }

      // repeated uint32 difficult_tc = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult_tc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 600, input, this->mutable_difficult_tc())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_difficult_tc())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_difficult_tc;
        if (input->ExpectTag(608)) goto parse_mvp_drop;
        break;
      }

      // optional uint32 mvp_drop = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mvp_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mvp_drop_)));
          set_has_mvp_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_drop_show;
        break;
      }

      // repeated uint32 drop_show = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 616, input, this->mutable_drop_show())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_drop_show())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_drop_show;
        if (input->ExpectTag(624)) goto parse_drop_show_type;
        break;
      }

      // repeated uint32 drop_show_type = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_show_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 624, input, this->mutable_drop_show_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_drop_show_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_drop_show_type;
        if (input->ExpectTag(634)) goto parse_load_tips;
        break;
      }

      // repeated string load_tips = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_tips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_load_tips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(634)) goto parse_load_tips;
        if (input->ExpectTag(640)) goto parse_can_well_over;
        break;
      }

      // optional uint32 can_well_over = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_well_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_well_over_)));
          set_has_can_well_over();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(653)) goto parse_pmattack;
        break;
      }

      // repeated float pmattack = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pmattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 653, input, this->mutable_pmattack())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pmattack())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(653)) goto parse_pmattack;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCastleStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 castlename = 2;
  if (has_castlename()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->castlename(), output);
  }

  // optional string castlemap = 3;
  if (has_castlemap()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->castlemap(), output);
  }

  // optional string castlebossmap = 4;
  if (has_castlebossmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->castlebossmap(), output);
  }

  // optional uint32 numlimit = 5;
  if (has_numlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->numlimit(), output);
  }

  // optional uint32 levellimit = 6;
  if (has_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->levellimit(), output);
  }

  // optional uint32 ranklimit = 7;
  if (has_ranklimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ranklimit(), output);
  }

  // repeated uint32 weekdaylimit = 8;
  for (int i = 0; i < this->weekdaylimit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->weekdaylimit(i), output);
  }

  // optional fixed32 day_begintime = 9;
  if (has_day_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->day_begintime(), output);
  }

  // optional fixed32 day_endtime = 10;
  if (has_day_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->day_endtime(), output);
  }

  // optional uint32 frontcastle = 11;
  if (has_frontcastle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->frontcastle(), output);
  }

  // repeated .jynetwork.proto.sMonsterRefreshGroup groups = 12;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->groups(i), output);
  }

  // optional float bossmap_scroll = 13;
  if (has_bossmap_scroll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->bossmap_scroll(), output);
  }

  // optional uint32 wateref = 14;
  if (has_wateref()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->wateref(), output);
  }

  // optional uint32 map_effect = 15;
  if (has_map_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->map_effect(), output);
  }

  // repeated .jynetwork.proto.sCastleBlock block_mo = 16;
  for (int i = 0; i < this->block_mo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->block_mo(i), output);
  }

  // repeated uint32 assist_drop = 19;
  for (int i = 0; i < this->assist_drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->assist_drop(i), output);
  }

  // optional uint32 enter_effect = 20;
  if (has_enter_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->enter_effect(), output);
  }

  // optional uint32 dive_effect = 21;
  if (has_dive_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->dive_effect(), output);
  }

  // optional uint32 castlemusic = 22;
  if (has_castlemusic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->castlemusic(), output);
  }

  // optional uint32 bossmusic = 23;
  if (has_bossmusic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->bossmusic(), output);
  }

  // optional float map_scroll_speed = 24;
  if (has_map_scroll_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->map_scroll_speed(), output);
  }

  // optional uint32 skill_allow = 25;
  if (has_skill_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->skill_allow(), output);
  }

  // optional uint32 partner_allow = 26;
  if (has_partner_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->partner_allow(), output);
  }

  // optional float assist_drop_rate = 27;
  if (has_assist_drop_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->assist_drop_rate(), output);
  }

  // repeated .jynetwork.proto.sCastleDrop item_drop = 28;
  for (int i = 0; i < this->item_drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->item_drop(i), output);
  }

  // optional uint32 difficult = 29;
  if (has_difficult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->difficult(), output);
  }

  // optional uint32 faction = 30;
  if (has_faction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->faction(), output);
  }

  // optional uint32 item_drop_id = 31;
  if (has_item_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->item_drop_id(), output);
  }

  // optional uint32 fatigue = 32;
  if (has_fatigue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->fatigue(), output);
  }

  // optional uint32 castle_type = 33;
  if (has_castle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->castle_type(), output);
  }

  // optional uint32 castle_catlog = 34;
  if (has_castle_catlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->castle_catlog(), output);
  }

  // optional uint32 map_color_r = 35;
  if (has_map_color_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->map_color_r(), output);
  }

  // optional uint32 map_color_g = 36;
  if (has_map_color_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->map_color_g(), output);
  }

  // optional uint32 map_color_b = 37;
  if (has_map_color_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->map_color_b(), output);
  }

  // optional uint32 cloud_color_r = 38;
  if (has_cloud_color_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->cloud_color_r(), output);
  }

  // optional uint32 cloud_color_g = 39;
  if (has_cloud_color_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->cloud_color_g(), output);
  }

  // optional uint32 cloud_color_b = 40;
  if (has_cloud_color_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->cloud_color_b(), output);
  }

  // optional uint32 body_color_r = 41;
  if (has_body_color_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->body_color_r(), output);
  }

  // optional uint32 body_color_g = 42;
  if (has_body_color_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->body_color_g(), output);
  }

  // optional uint32 body_color_b = 43;
  if (has_body_color_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->body_color_b(), output);
  }

  // optional float star_hp = 44;
  if (has_star_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->star_hp(), output);
  }

  // optional float star_time = 45;
  if (has_star_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->star_time(), output);
  }

  // optional float star_score = 46;
  if (has_star_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->star_score(), output);
  }

  // optional float recommond_attack = 47;
  if (has_recommond_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->recommond_attack(), output);
  }

  // optional uint32 win_condition = 48;
  if (has_win_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->win_condition(), output);
  }

  // optional float time_limit = 49;
  if (has_time_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(49, this->time_limit(), output);
  }

  // optional float enemy_enhance_time = 50;
  if (has_enemy_enhance_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->enemy_enhance_time(), output);
  }

  // optional float enemy_enhance = 51;
  if (has_enemy_enhance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->enemy_enhance(), output);
  }

  // optional uint32 description = 52;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->description(), output);
  }

  // optional uint32 boss_name = 53;
  if (has_boss_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->boss_name(), output);
  }

  // optional string boss_model = 54;
  if (has_boss_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      54, this->boss_model(), output);
  }

  // optional float boss_scale = 55;
  if (has_boss_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->boss_scale(), output);
  }

  // optional float boss_x = 56;
  if (has_boss_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->boss_x(), output);
  }

  // optional float boss_y = 57;
  if (has_boss_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->boss_y(), output);
  }

  // optional uint32 open_condition_desc = 58;
  if (has_open_condition_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->open_condition_desc(), output);
  }

  // optional uint32 stage_id = 59;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->stage_id(), output);
  }

  // optional uint32 stage_group_id = 60;
  if (has_stage_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->stage_group_id(), output);
  }

  // optional uint32 stage_detail_id = 61;
  if (has_stage_detail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->stage_detail_id(), output);
  }

  // optional string dive_cloud = 62;
  if (has_dive_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      62, this->dive_cloud(), output);
  }

  // optional string dive_bottom = 63;
  if (has_dive_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      63, this->dive_bottom(), output);
  }

  // optional string result_bg = 64;
  if (has_result_bg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      64, this->result_bg(), output);
  }

  // repeated .jynetwork.proto.sChaosStats chaos = 65;
  for (int i = 0; i < this->chaos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      65, this->chaos(i), output);
  }

  // optional uint32 after_drop_id = 66;
  if (has_after_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->after_drop_id(), output);
  }

  // optional uint32 percent = 67;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->percent(), output);
  }

  // repeated uint32 chaos_group = 68;
  for (int i = 0; i < this->chaos_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      68, this->chaos_group(i), output);
  }

  // optional .jynetwork.proto.eRoleType role = 69;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      69, this->role(), output);
  }

  // optional uint32 first_drop = 70;
  if (has_first_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->first_drop(), output);
  }

  // repeated uint32 first_pass_drop = 71;
  for (int i = 0; i < this->first_pass_drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      71, this->first_pass_drop(i), output);
  }

  // optional uint32 joblimit = 72;
  if (has_joblimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->joblimit(), output);
  }

  // repeated uint32 first_drop_show_type = 73;
  for (int i = 0; i < this->first_drop_show_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      73, this->first_drop_show_type(i), output);
  }

  // repeated float difficult_percent = 74;
  for (int i = 0; i < this->difficult_percent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      74, this->difficult_percent(i), output);
  }

  // repeated uint32 difficult_tc = 75;
  for (int i = 0; i < this->difficult_tc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      75, this->difficult_tc(i), output);
  }

  // optional uint32 mvp_drop = 76;
  if (has_mvp_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->mvp_drop(), output);
  }

  // repeated uint32 drop_show = 77;
  for (int i = 0; i < this->drop_show_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      77, this->drop_show(i), output);
  }

  // repeated uint32 drop_show_type = 78;
  for (int i = 0; i < this->drop_show_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      78, this->drop_show_type(i), output);
  }

  // repeated string load_tips = 79;
  for (int i = 0; i < this->load_tips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      79, this->load_tips(i), output);
  }

  // optional uint32 can_well_over = 80;
  if (has_can_well_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->can_well_over(), output);
  }

  // repeated float pmattack = 81;
  for (int i = 0; i < this->pmattack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      81, this->pmattack(i), output);
  }

}

int sCastleStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 castlename = 2;
    if (has_castlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castlename());
    }

    // optional string castlemap = 3;
    if (has_castlemap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->castlemap());
    }

    // optional string castlebossmap = 4;
    if (has_castlebossmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->castlebossmap());
    }

    // optional uint32 numlimit = 5;
    if (has_numlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numlimit());
    }

    // optional uint32 levellimit = 6;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levellimit());
    }

    // optional uint32 ranklimit = 7;
    if (has_ranklimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranklimit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed32 day_begintime = 9;
    if (has_day_begintime()) {
      total_size += 1 + 4;
    }

    // optional fixed32 day_endtime = 10;
    if (has_day_endtime()) {
      total_size += 1 + 4;
    }

    // optional uint32 frontcastle = 11;
    if (has_frontcastle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frontcastle());
    }

    // optional float bossmap_scroll = 13;
    if (has_bossmap_scroll()) {
      total_size += 1 + 4;
    }

    // optional uint32 wateref = 14;
    if (has_wateref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wateref());
    }

    // optional uint32 map_effect = 15;
    if (has_map_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_effect());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional uint32 enter_effect = 20;
    if (has_enter_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enter_effect());
    }

    // optional uint32 dive_effect = 21;
    if (has_dive_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dive_effect());
    }

    // optional uint32 castlemusic = 22;
    if (has_castlemusic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castlemusic());
    }

    // optional uint32 bossmusic = 23;
    if (has_bossmusic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossmusic());
    }

    // optional float map_scroll_speed = 24;
    if (has_map_scroll_speed()) {
      total_size += 2 + 4;
    }

    // optional uint32 skill_allow = 25;
    if (has_skill_allow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_allow());
    }

    // optional uint32 partner_allow = 26;
    if (has_partner_allow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_allow());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float assist_drop_rate = 27;
    if (has_assist_drop_rate()) {
      total_size += 2 + 4;
    }

    // optional uint32 difficult = 29;
    if (has_difficult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficult());
    }

    // optional uint32 faction = 30;
    if (has_faction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction());
    }

    // optional uint32 item_drop_id = 31;
    if (has_item_drop_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_drop_id());
    }

    // optional uint32 fatigue = 32;
    if (has_fatigue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fatigue());
    }

    // optional uint32 castle_type = 33;
    if (has_castle_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castle_type());
    }

    // optional uint32 castle_catlog = 34;
    if (has_castle_catlog()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castle_catlog());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 map_color_r = 35;
    if (has_map_color_r()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_color_r());
    }

    // optional uint32 map_color_g = 36;
    if (has_map_color_g()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_color_g());
    }

    // optional uint32 map_color_b = 37;
    if (has_map_color_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_color_b());
    }

    // optional uint32 cloud_color_r = 38;
    if (has_cloud_color_r()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloud_color_r());
    }

    // optional uint32 cloud_color_g = 39;
    if (has_cloud_color_g()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloud_color_g());
    }

    // optional uint32 cloud_color_b = 40;
    if (has_cloud_color_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloud_color_b());
    }

    // optional uint32 body_color_r = 41;
    if (has_body_color_r()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body_color_r());
    }

    // optional uint32 body_color_g = 42;
    if (has_body_color_g()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body_color_g());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 body_color_b = 43;
    if (has_body_color_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body_color_b());
    }

    // optional float star_hp = 44;
    if (has_star_hp()) {
      total_size += 2 + 4;
    }

    // optional float star_time = 45;
    if (has_star_time()) {
      total_size += 2 + 4;
    }

    // optional float star_score = 46;
    if (has_star_score()) {
      total_size += 2 + 4;
    }

    // optional float recommond_attack = 47;
    if (has_recommond_attack()) {
      total_size += 2 + 4;
    }

    // optional uint32 win_condition = 48;
    if (has_win_condition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_condition());
    }

    // optional float time_limit = 49;
    if (has_time_limit()) {
      total_size += 2 + 4;
    }

    // optional float enemy_enhance_time = 50;
    if (has_enemy_enhance_time()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional float enemy_enhance = 51;
    if (has_enemy_enhance()) {
      total_size += 2 + 4;
    }

    // optional uint32 description = 52;
    if (has_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->description());
    }

    // optional uint32 boss_name = 53;
    if (has_boss_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_name());
    }

    // optional string boss_model = 54;
    if (has_boss_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boss_model());
    }

    // optional float boss_scale = 55;
    if (has_boss_scale()) {
      total_size += 2 + 4;
    }

    // optional float boss_x = 56;
    if (has_boss_x()) {
      total_size += 2 + 4;
    }

    // optional float boss_y = 57;
    if (has_boss_y()) {
      total_size += 2 + 4;
    }

    // optional uint32 open_condition_desc = 58;
    if (has_open_condition_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_condition_desc());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 stage_id = 59;
    if (has_stage_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_id());
    }

    // optional uint32 stage_group_id = 60;
    if (has_stage_group_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_group_id());
    }

    // optional uint32 stage_detail_id = 61;
    if (has_stage_detail_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_detail_id());
    }

    // optional string dive_cloud = 62;
    if (has_dive_cloud()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dive_cloud());
    }

    // optional string dive_bottom = 63;
    if (has_dive_bottom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dive_bottom());
    }

    // optional string result_bg = 64;
    if (has_result_bg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_bg());
    }

    // optional uint32 after_drop_id = 66;
    if (has_after_drop_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->after_drop_id());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint32 percent = 67;
    if (has_percent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->percent());
    }

    // optional .jynetwork.proto.eRoleType role = 69;
    if (has_role()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }

    // optional uint32 first_drop = 70;
    if (has_first_drop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_drop());
    }

    // optional uint32 joblimit = 72;
    if (has_joblimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joblimit());
    }

  }
  if (_has_bits_[73 / 32] & (0xffu << (73 % 32))) {
    // optional uint32 mvp_drop = 76;
    if (has_mvp_drop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mvp_drop());
    }

    // optional uint32 can_well_over = 80;
    if (has_can_well_over()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_well_over());
    }

  }
  // repeated uint32 weekdaylimit = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->weekdaylimit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->weekdaylimit(i));
    }
    total_size += 1 * this->weekdaylimit_size() + data_size;
  }

  // repeated .jynetwork.proto.sMonsterRefreshGroup groups = 12;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  // repeated .jynetwork.proto.sCastleBlock block_mo = 16;
  total_size += 2 * this->block_mo_size();
  for (int i = 0; i < this->block_mo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block_mo(i));
  }

  // repeated uint32 assist_drop = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->assist_drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->assist_drop(i));
    }
    total_size += 2 * this->assist_drop_size() + data_size;
  }

  // repeated .jynetwork.proto.sCastleDrop item_drop = 28;
  total_size += 2 * this->item_drop_size();
  for (int i = 0; i < this->item_drop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_drop(i));
  }

  // repeated .jynetwork.proto.sChaosStats chaos = 65;
  total_size += 2 * this->chaos_size();
  for (int i = 0; i < this->chaos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chaos(i));
  }

  // repeated uint32 chaos_group = 68;
  {
    int data_size = 0;
    for (int i = 0; i < this->chaos_group_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chaos_group(i));
    }
    total_size += 2 * this->chaos_group_size() + data_size;
  }

  // repeated uint32 first_pass_drop = 71;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_pass_drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->first_pass_drop(i));
    }
    total_size += 2 * this->first_pass_drop_size() + data_size;
  }

  // repeated uint32 first_drop_show_type = 73;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_drop_show_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->first_drop_show_type(i));
    }
    total_size += 2 * this->first_drop_show_type_size() + data_size;
  }

  // repeated float difficult_percent = 74;
  {
    int data_size = 0;
    data_size = 4 * this->difficult_percent_size();
    total_size += 2 * this->difficult_percent_size() + data_size;
  }

  // repeated uint32 difficult_tc = 75;
  {
    int data_size = 0;
    for (int i = 0; i < this->difficult_tc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->difficult_tc(i));
    }
    total_size += 2 * this->difficult_tc_size() + data_size;
  }

  // repeated uint32 drop_show = 77;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_show_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->drop_show(i));
    }
    total_size += 2 * this->drop_show_size() + data_size;
  }

  // repeated uint32 drop_show_type = 78;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_show_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->drop_show_type(i));
    }
    total_size += 2 * this->drop_show_type_size() + data_size;
  }

  // repeated string load_tips = 79;
  total_size += 2 * this->load_tips_size();
  for (int i = 0; i < this->load_tips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->load_tips(i));
  }

  // repeated float pmattack = 81;
  {
    int data_size = 0;
    data_size = 4 * this->pmattack_size();
    total_size += 2 * this->pmattack_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCastleStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCastleStats*>(&from));
}

void sCastleStats::MergeFrom(const sCastleStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  weekdaylimit_.MergeFrom(from.weekdaylimit_);
  groups_.MergeFrom(from.groups_);
  block_mo_.MergeFrom(from.block_mo_);
  assist_drop_.MergeFrom(from.assist_drop_);
  item_drop_.MergeFrom(from.item_drop_);
  chaos_.MergeFrom(from.chaos_);
  chaos_group_.MergeFrom(from.chaos_group_);
  first_pass_drop_.MergeFrom(from.first_pass_drop_);
  first_drop_show_type_.MergeFrom(from.first_drop_show_type_);
  difficult_percent_.MergeFrom(from.difficult_percent_);
  difficult_tc_.MergeFrom(from.difficult_tc_);
  drop_show_.MergeFrom(from.drop_show_);
  drop_show_type_.MergeFrom(from.drop_show_type_);
  load_tips_.MergeFrom(from.load_tips_);
  pmattack_.MergeFrom(from.pmattack_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_castlename()) {
      set_castlename(from.castlename());
    }
    if (from.has_castlemap()) {
      set_castlemap(from.castlemap());
    }
    if (from.has_castlebossmap()) {
      set_castlebossmap(from.castlebossmap());
    }
    if (from.has_numlimit()) {
      set_numlimit(from.numlimit());
    }
    if (from.has_levellimit()) {
      set_levellimit(from.levellimit());
    }
    if (from.has_ranklimit()) {
      set_ranklimit(from.ranklimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_day_begintime()) {
      set_day_begintime(from.day_begintime());
    }
    if (from.has_day_endtime()) {
      set_day_endtime(from.day_endtime());
    }
    if (from.has_frontcastle()) {
      set_frontcastle(from.frontcastle());
    }
    if (from.has_bossmap_scroll()) {
      set_bossmap_scroll(from.bossmap_scroll());
    }
    if (from.has_wateref()) {
      set_wateref(from.wateref());
    }
    if (from.has_map_effect()) {
      set_map_effect(from.map_effect());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_enter_effect()) {
      set_enter_effect(from.enter_effect());
    }
    if (from.has_dive_effect()) {
      set_dive_effect(from.dive_effect());
    }
    if (from.has_castlemusic()) {
      set_castlemusic(from.castlemusic());
    }
    if (from.has_bossmusic()) {
      set_bossmusic(from.bossmusic());
    }
    if (from.has_map_scroll_speed()) {
      set_map_scroll_speed(from.map_scroll_speed());
    }
    if (from.has_skill_allow()) {
      set_skill_allow(from.skill_allow());
    }
    if (from.has_partner_allow()) {
      set_partner_allow(from.partner_allow());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_assist_drop_rate()) {
      set_assist_drop_rate(from.assist_drop_rate());
    }
    if (from.has_difficult()) {
      set_difficult(from.difficult());
    }
    if (from.has_faction()) {
      set_faction(from.faction());
    }
    if (from.has_item_drop_id()) {
      set_item_drop_id(from.item_drop_id());
    }
    if (from.has_fatigue()) {
      set_fatigue(from.fatigue());
    }
    if (from.has_castle_type()) {
      set_castle_type(from.castle_type());
    }
    if (from.has_castle_catlog()) {
      set_castle_catlog(from.castle_catlog());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_map_color_r()) {
      set_map_color_r(from.map_color_r());
    }
    if (from.has_map_color_g()) {
      set_map_color_g(from.map_color_g());
    }
    if (from.has_map_color_b()) {
      set_map_color_b(from.map_color_b());
    }
    if (from.has_cloud_color_r()) {
      set_cloud_color_r(from.cloud_color_r());
    }
    if (from.has_cloud_color_g()) {
      set_cloud_color_g(from.cloud_color_g());
    }
    if (from.has_cloud_color_b()) {
      set_cloud_color_b(from.cloud_color_b());
    }
    if (from.has_body_color_r()) {
      set_body_color_r(from.body_color_r());
    }
    if (from.has_body_color_g()) {
      set_body_color_g(from.body_color_g());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_body_color_b()) {
      set_body_color_b(from.body_color_b());
    }
    if (from.has_star_hp()) {
      set_star_hp(from.star_hp());
    }
    if (from.has_star_time()) {
      set_star_time(from.star_time());
    }
    if (from.has_star_score()) {
      set_star_score(from.star_score());
    }
    if (from.has_recommond_attack()) {
      set_recommond_attack(from.recommond_attack());
    }
    if (from.has_win_condition()) {
      set_win_condition(from.win_condition());
    }
    if (from.has_time_limit()) {
      set_time_limit(from.time_limit());
    }
    if (from.has_enemy_enhance_time()) {
      set_enemy_enhance_time(from.enemy_enhance_time());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_enemy_enhance()) {
      set_enemy_enhance(from.enemy_enhance());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_boss_name()) {
      set_boss_name(from.boss_name());
    }
    if (from.has_boss_model()) {
      set_boss_model(from.boss_model());
    }
    if (from.has_boss_scale()) {
      set_boss_scale(from.boss_scale());
    }
    if (from.has_boss_x()) {
      set_boss_x(from.boss_x());
    }
    if (from.has_boss_y()) {
      set_boss_y(from.boss_y());
    }
    if (from.has_open_condition_desc()) {
      set_open_condition_desc(from.open_condition_desc());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_stage_group_id()) {
      set_stage_group_id(from.stage_group_id());
    }
    if (from.has_stage_detail_id()) {
      set_stage_detail_id(from.stage_detail_id());
    }
    if (from.has_dive_cloud()) {
      set_dive_cloud(from.dive_cloud());
    }
    if (from.has_dive_bottom()) {
      set_dive_bottom(from.dive_bottom());
    }
    if (from.has_result_bg()) {
      set_result_bg(from.result_bg());
    }
    if (from.has_after_drop_id()) {
      set_after_drop_id(from.after_drop_id());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_percent()) {
      set_percent(from.percent());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_first_drop()) {
      set_first_drop(from.first_drop());
    }
    if (from.has_joblimit()) {
      set_joblimit(from.joblimit());
    }
  }
  if (from._has_bits_[73 / 32] & (0xffu << (73 % 32))) {
    if (from.has_mvp_drop()) {
      set_mvp_drop(from.mvp_drop());
    }
    if (from.has_can_well_over()) {
      set_can_well_over(from.can_well_over());
    }
  }
}

void sCastleStats::CopyFrom(const sCastleStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCastleStats::IsInitialized() const {

  return true;
}

void sCastleStats::Swap(sCastleStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(castlename_, other->castlename_);
    std::swap(castlemap_, other->castlemap_);
    std::swap(castlebossmap_, other->castlebossmap_);
    std::swap(numlimit_, other->numlimit_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(ranklimit_, other->ranklimit_);
    weekdaylimit_.Swap(&other->weekdaylimit_);
    std::swap(day_begintime_, other->day_begintime_);
    std::swap(day_endtime_, other->day_endtime_);
    std::swap(frontcastle_, other->frontcastle_);
    groups_.Swap(&other->groups_);
    std::swap(bossmap_scroll_, other->bossmap_scroll_);
    std::swap(wateref_, other->wateref_);
    std::swap(map_effect_, other->map_effect_);
    block_mo_.Swap(&other->block_mo_);
    assist_drop_.Swap(&other->assist_drop_);
    std::swap(enter_effect_, other->enter_effect_);
    std::swap(dive_effect_, other->dive_effect_);
    std::swap(castlemusic_, other->castlemusic_);
    std::swap(bossmusic_, other->bossmusic_);
    std::swap(map_scroll_speed_, other->map_scroll_speed_);
    std::swap(skill_allow_, other->skill_allow_);
    std::swap(partner_allow_, other->partner_allow_);
    std::swap(assist_drop_rate_, other->assist_drop_rate_);
    item_drop_.Swap(&other->item_drop_);
    std::swap(difficult_, other->difficult_);
    std::swap(faction_, other->faction_);
    std::swap(item_drop_id_, other->item_drop_id_);
    std::swap(fatigue_, other->fatigue_);
    std::swap(castle_type_, other->castle_type_);
    std::swap(castle_catlog_, other->castle_catlog_);
    std::swap(map_color_r_, other->map_color_r_);
    std::swap(map_color_g_, other->map_color_g_);
    std::swap(map_color_b_, other->map_color_b_);
    std::swap(cloud_color_r_, other->cloud_color_r_);
    std::swap(cloud_color_g_, other->cloud_color_g_);
    std::swap(cloud_color_b_, other->cloud_color_b_);
    std::swap(body_color_r_, other->body_color_r_);
    std::swap(body_color_g_, other->body_color_g_);
    std::swap(body_color_b_, other->body_color_b_);
    std::swap(star_hp_, other->star_hp_);
    std::swap(star_time_, other->star_time_);
    std::swap(star_score_, other->star_score_);
    std::swap(recommond_attack_, other->recommond_attack_);
    std::swap(win_condition_, other->win_condition_);
    std::swap(time_limit_, other->time_limit_);
    std::swap(enemy_enhance_time_, other->enemy_enhance_time_);
    std::swap(enemy_enhance_, other->enemy_enhance_);
    std::swap(description_, other->description_);
    std::swap(boss_name_, other->boss_name_);
    std::swap(boss_model_, other->boss_model_);
    std::swap(boss_scale_, other->boss_scale_);
    std::swap(boss_x_, other->boss_x_);
    std::swap(boss_y_, other->boss_y_);
    std::swap(open_condition_desc_, other->open_condition_desc_);
    std::swap(stage_id_, other->stage_id_);
    std::swap(stage_group_id_, other->stage_group_id_);
    std::swap(stage_detail_id_, other->stage_detail_id_);
    std::swap(dive_cloud_, other->dive_cloud_);
    std::swap(dive_bottom_, other->dive_bottom_);
    std::swap(result_bg_, other->result_bg_);
    chaos_.Swap(&other->chaos_);
    std::swap(after_drop_id_, other->after_drop_id_);
    std::swap(percent_, other->percent_);
    chaos_group_.Swap(&other->chaos_group_);
    std::swap(role_, other->role_);
    std::swap(first_drop_, other->first_drop_);
    first_pass_drop_.Swap(&other->first_pass_drop_);
    std::swap(joblimit_, other->joblimit_);
    first_drop_show_type_.Swap(&other->first_drop_show_type_);
    difficult_percent_.Swap(&other->difficult_percent_);
    difficult_tc_.Swap(&other->difficult_tc_);
    std::swap(mvp_drop_, other->mvp_drop_);
    drop_show_.Swap(&other->drop_show_);
    drop_show_type_.Swap(&other->drop_show_type_);
    load_tips_.Swap(&other->load_tips_);
    std::swap(can_well_over_, other->can_well_over_);
    pmattack_.Swap(&other->pmattack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCastleStats::GetTypeName() const {
  return "jynetwork.proto.sCastleStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sSoundStats::kUidFieldNumber;
const int sSoundStats::kSoundNameFieldNumber;
const int sSoundStats::kIsMp3FieldNumber;
const int sSoundStats::kWwiseNameFieldNumber;
const int sSoundStats::kWwiseStopNameFieldNumber;
#endif  // !_MSC_VER

sSoundStats::sSoundStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sSoundStats::InitAsDefaultInstance() {
}

sSoundStats::sSoundStats(const sSoundStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sSoundStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  sound_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_mp3_ = 0u;
  wwise_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wwise_stop_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sSoundStats::~sSoundStats() {
  SharedDtor();
}

void sSoundStats::SharedDtor() {
  if (sound_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sound_name_;
  }
  if (wwise_name_ != &::google::protobuf::internal::kEmptyString) {
    delete wwise_name_;
  }
  if (wwise_stop_name_ != &::google::protobuf::internal::kEmptyString) {
    delete wwise_stop_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sSoundStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sSoundStats& sSoundStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sSoundStats* sSoundStats::default_instance_ = NULL;

sSoundStats* sSoundStats::New() const {
  return new sSoundStats;
}

void sSoundStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_sound_name()) {
      if (sound_name_ != &::google::protobuf::internal::kEmptyString) {
        sound_name_->clear();
      }
    }
    is_mp3_ = 0u;
    if (has_wwise_name()) {
      if (wwise_name_ != &::google::protobuf::internal::kEmptyString) {
        wwise_name_->clear();
      }
    }
    if (has_wwise_stop_name()) {
      if (wwise_stop_name_ != &::google::protobuf::internal::kEmptyString) {
        wwise_stop_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sSoundStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sound_name;
        break;
      }

      // optional string sound_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sound_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sound_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_mp3;
        break;
      }

      // optional uint32 is_mp3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_mp3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_mp3_)));
          set_has_is_mp3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_wwise_name;
        break;
      }

      // optional string wwise_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wwise_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wwise_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_wwise_stop_name;
        break;
      }

      // optional string wwise_stop_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wwise_stop_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wwise_stop_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sSoundStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string sound_name = 2;
  if (has_sound_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sound_name(), output);
  }

  // optional uint32 is_mp3 = 3;
  if (has_is_mp3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_mp3(), output);
  }

  // optional string wwise_name = 4;
  if (has_wwise_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->wwise_name(), output);
  }

  // optional string wwise_stop_name = 5;
  if (has_wwise_stop_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->wwise_stop_name(), output);
  }

}

int sSoundStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string sound_name = 2;
    if (has_sound_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sound_name());
    }

    // optional uint32 is_mp3 = 3;
    if (has_is_mp3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_mp3());
    }

    // optional string wwise_name = 4;
    if (has_wwise_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wwise_name());
    }

    // optional string wwise_stop_name = 5;
    if (has_wwise_stop_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wwise_stop_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sSoundStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sSoundStats*>(&from));
}

void sSoundStats::MergeFrom(const sSoundStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sound_name()) {
      set_sound_name(from.sound_name());
    }
    if (from.has_is_mp3()) {
      set_is_mp3(from.is_mp3());
    }
    if (from.has_wwise_name()) {
      set_wwise_name(from.wwise_name());
    }
    if (from.has_wwise_stop_name()) {
      set_wwise_stop_name(from.wwise_stop_name());
    }
  }
}

void sSoundStats::CopyFrom(const sSoundStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sSoundStats::IsInitialized() const {

  return true;
}

void sSoundStats::Swap(sSoundStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(sound_name_, other->sound_name_);
    std::swap(is_mp3_, other->is_mp3_);
    std::swap(wwise_name_, other->wwise_name_);
    std::swap(wwise_stop_name_, other->wwise_stop_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sSoundStats::GetTypeName() const {
  return "jynetwork.proto.sSoundStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sSoundTable::kUidFieldNumber;
const int sSoundTable::kSoundidFieldNumber;
#endif  // !_MSC_VER

sSoundTable::sSoundTable()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sSoundTable::InitAsDefaultInstance() {
}

sSoundTable::sSoundTable(const sSoundTable& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sSoundTable::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  soundid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sSoundTable::~sSoundTable() {
  SharedDtor();
}

void sSoundTable::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sSoundTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sSoundTable& sSoundTable::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sSoundTable* sSoundTable::default_instance_ = NULL;

sSoundTable* sSoundTable::New() const {
  return new sSoundTable;
}

void sSoundTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    soundid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sSoundTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_soundid;
        break;
      }

      // optional uint32 soundid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soundid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soundid_)));
          set_has_soundid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sSoundTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 soundid = 2;
  if (has_soundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->soundid(), output);
  }

}

int sSoundTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 soundid = 2;
    if (has_soundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soundid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sSoundTable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sSoundTable*>(&from));
}

void sSoundTable::MergeFrom(const sSoundTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_soundid()) {
      set_soundid(from.soundid());
    }
  }
}

void sSoundTable::CopyFrom(const sSoundTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sSoundTable::IsInitialized() const {

  return true;
}

void sSoundTable::Swap(sSoundTable* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(soundid_, other->soundid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sSoundTable::GetTypeName() const {
  return "jynetwork.proto.sSoundTable";
}


// ===================================================================

#ifndef _MSC_VER
const int sEffectStats::kUidFieldNumber;
const int sEffectStats::kResourcesFieldNumber;
const int sEffectStats::kParticleFieldNumber;
const int sEffectStats::kParticleNameFieldNumber;
const int sEffectStats::kParticleAutoRemoveFieldNumber;
const int sEffectStats::kTotalframesFieldNumber;
const int sEffectStats::kAnimatenameFieldNumber;
const int sEffectStats::kAdditiveFieldNumber;
const int sEffectStats::kScaleFieldNumber;
const int sEffectStats::kPoolsizeFieldNumber;
const int sEffectStats::kNotframeFieldNumber;
const int sEffectStats::kPuMaterialFieldNumber;
const int sEffectStats::kPuLifeTimeFieldNumber;
const int sEffectStats::kCcbiFieldNumber;
#endif  // !_MSC_VER

sEffectStats::sEffectStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEffectStats::InitAsDefaultInstance() {
}

sEffectStats::sEffectStats(const sEffectStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEffectStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  resources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  particle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  particle_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  particle_auto_remove_ = 0u;
  totalframes_ = 0u;
  animatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  additive_ = 0u;
  scale_ = 0;
  poolsize_ = 0u;
  notframe_ = 0u;
  pu_material_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pu_life_time_ = 0;
  ccbi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEffectStats::~sEffectStats() {
  SharedDtor();
}

void sEffectStats::SharedDtor() {
  if (resources_ != &::google::protobuf::internal::kEmptyString) {
    delete resources_;
  }
  if (particle_ != &::google::protobuf::internal::kEmptyString) {
    delete particle_;
  }
  if (particle_name_ != &::google::protobuf::internal::kEmptyString) {
    delete particle_name_;
  }
  if (animatename_ != &::google::protobuf::internal::kEmptyString) {
    delete animatename_;
  }
  if (pu_material_ != &::google::protobuf::internal::kEmptyString) {
    delete pu_material_;
  }
  if (ccbi_ != &::google::protobuf::internal::kEmptyString) {
    delete ccbi_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEffectStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEffectStats& sEffectStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sEffectStats* sEffectStats::default_instance_ = NULL;

sEffectStats* sEffectStats::New() const {
  return new sEffectStats;
}

void sEffectStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_resources()) {
      if (resources_ != &::google::protobuf::internal::kEmptyString) {
        resources_->clear();
      }
    }
    if (has_particle()) {
      if (particle_ != &::google::protobuf::internal::kEmptyString) {
        particle_->clear();
      }
    }
    if (has_particle_name()) {
      if (particle_name_ != &::google::protobuf::internal::kEmptyString) {
        particle_name_->clear();
      }
    }
    particle_auto_remove_ = 0u;
    totalframes_ = 0u;
    if (has_animatename()) {
      if (animatename_ != &::google::protobuf::internal::kEmptyString) {
        animatename_->clear();
      }
    }
    additive_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    scale_ = 0;
    poolsize_ = 0u;
    notframe_ = 0u;
    if (has_pu_material()) {
      if (pu_material_ != &::google::protobuf::internal::kEmptyString) {
        pu_material_->clear();
      }
    }
    pu_life_time_ = 0;
    if (has_ccbi()) {
      if (ccbi_ != &::google::protobuf::internal::kEmptyString) {
        ccbi_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEffectStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        break;
      }

      // optional string resources = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_particle;
        break;
      }

      // optional string particle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_particle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_particle_name;
        break;
      }

      // optional string particle_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_particle_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_particle_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_particle_auto_remove;
        break;
      }

      // optional uint32 particle_auto_remove = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_particle_auto_remove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &particle_auto_remove_)));
          set_has_particle_auto_remove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalframes;
        break;
      }

      // optional uint32 totalframes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalframes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalframes_)));
          set_has_totalframes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_animatename;
        break;
      }

      // optional string animatename = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_animatename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animatename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_additive;
        break;
      }

      // optional uint32 additive = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_additive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additive_)));
          set_has_additive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_scale;
        break;
      }

      // optional float scale = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_poolsize;
        break;
      }

      // optional uint32 poolsize = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poolsize_)));
          set_has_poolsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_notframe;
        break;
      }

      // optional uint32 notframe = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notframe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notframe_)));
          set_has_notframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pu_material;
        break;
      }

      // optional string pu_material = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pu_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pu_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_pu_life_time;
        break;
      }

      // optional float pu_life_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pu_life_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pu_life_time_)));
          set_has_pu_life_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ccbi;
        break;
      }

      // optional string ccbi = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ccbi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ccbi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEffectStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string resources = 2;
  if (has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resources(), output);
  }

  // optional string particle = 3;
  if (has_particle()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->particle(), output);
  }

  // optional string particle_name = 4;
  if (has_particle_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->particle_name(), output);
  }

  // optional uint32 particle_auto_remove = 5;
  if (has_particle_auto_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->particle_auto_remove(), output);
  }

  // optional uint32 totalframes = 6;
  if (has_totalframes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->totalframes(), output);
  }

  // optional string animatename = 7;
  if (has_animatename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->animatename(), output);
  }

  // optional uint32 additive = 8;
  if (has_additive()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->additive(), output);
  }

  // optional float scale = 9;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->scale(), output);
  }

  // optional uint32 poolsize = 10;
  if (has_poolsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->poolsize(), output);
  }

  // optional uint32 notframe = 11;
  if (has_notframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->notframe(), output);
  }

  // optional string pu_material = 12;
  if (has_pu_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->pu_material(), output);
  }

  // optional float pu_life_time = 13;
  if (has_pu_life_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->pu_life_time(), output);
  }

  // optional string ccbi = 14;
  if (has_ccbi()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->ccbi(), output);
  }

}

int sEffectStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string resources = 2;
    if (has_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resources());
    }

    // optional string particle = 3;
    if (has_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->particle());
    }

    // optional string particle_name = 4;
    if (has_particle_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->particle_name());
    }

    // optional uint32 particle_auto_remove = 5;
    if (has_particle_auto_remove()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->particle_auto_remove());
    }

    // optional uint32 totalframes = 6;
    if (has_totalframes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalframes());
    }

    // optional string animatename = 7;
    if (has_animatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animatename());
    }

    // optional uint32 additive = 8;
    if (has_additive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->additive());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float scale = 9;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional uint32 poolsize = 10;
    if (has_poolsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poolsize());
    }

    // optional uint32 notframe = 11;
    if (has_notframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notframe());
    }

    // optional string pu_material = 12;
    if (has_pu_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pu_material());
    }

    // optional float pu_life_time = 13;
    if (has_pu_life_time()) {
      total_size += 1 + 4;
    }

    // optional string ccbi = 14;
    if (has_ccbi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ccbi());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEffectStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEffectStats*>(&from));
}

void sEffectStats::MergeFrom(const sEffectStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_resources()) {
      set_resources(from.resources());
    }
    if (from.has_particle()) {
      set_particle(from.particle());
    }
    if (from.has_particle_name()) {
      set_particle_name(from.particle_name());
    }
    if (from.has_particle_auto_remove()) {
      set_particle_auto_remove(from.particle_auto_remove());
    }
    if (from.has_totalframes()) {
      set_totalframes(from.totalframes());
    }
    if (from.has_animatename()) {
      set_animatename(from.animatename());
    }
    if (from.has_additive()) {
      set_additive(from.additive());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_poolsize()) {
      set_poolsize(from.poolsize());
    }
    if (from.has_notframe()) {
      set_notframe(from.notframe());
    }
    if (from.has_pu_material()) {
      set_pu_material(from.pu_material());
    }
    if (from.has_pu_life_time()) {
      set_pu_life_time(from.pu_life_time());
    }
    if (from.has_ccbi()) {
      set_ccbi(from.ccbi());
    }
  }
}

void sEffectStats::CopyFrom(const sEffectStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEffectStats::IsInitialized() const {

  return true;
}

void sEffectStats::Swap(sEffectStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(resources_, other->resources_);
    std::swap(particle_, other->particle_);
    std::swap(particle_name_, other->particle_name_);
    std::swap(particle_auto_remove_, other->particle_auto_remove_);
    std::swap(totalframes_, other->totalframes_);
    std::swap(animatename_, other->animatename_);
    std::swap(additive_, other->additive_);
    std::swap(scale_, other->scale_);
    std::swap(poolsize_, other->poolsize_);
    std::swap(notframe_, other->notframe_);
    std::swap(pu_material_, other->pu_material_);
    std::swap(pu_life_time_, other->pu_life_time_);
    std::swap(ccbi_, other->ccbi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEffectStats::GetTypeName() const {
  return "jynetwork.proto.sEffectStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sEffect::kUidFieldNumber;
const int sEffect::kXFieldNumber;
const int sEffect::kYFieldNumber;
const int sEffect::kZFieldNumber;
const int sEffect::kScaleFieldNumber;
const int sEffect::kScaleyFieldNumber;
const int sEffect::kPlayspeedFieldNumber;
const int sEffect::kPlayloopFieldNumber;
const int sEffect::kFadeoutFieldNumber;
const int sEffect::kFadeinFieldNumber;
const int sEffect::kFadeoutBlinkFieldNumber;
const int sEffect::kFadeinBlinkFieldNumber;
#endif  // !_MSC_VER

sEffect::sEffect()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEffect::InitAsDefaultInstance() {
}

sEffect::sEffect(const sEffect& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEffect::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  scale_ = 0;
  scaley_ = 0;
  playspeed_ = 0;
  playloop_ = 0;
  fadeout_ = 0;
  fadein_ = 0;
  fadeout_blink_ = 0u;
  fadein_blink_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEffect::~sEffect() {
  SharedDtor();
}

void sEffect::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEffect& sEffect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sEffect* sEffect::default_instance_ = NULL;

sEffect* sEffect::New() const {
  return new sEffect;
}

void sEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    x_ = 0;
    y_ = 0;
    z_ = 0;
    scale_ = 0;
    scaley_ = 0;
    playspeed_ = 0;
    playloop_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fadeout_ = 0;
    fadein_ = 0;
    fadeout_blink_ = 0u;
    fadein_blink_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // optional float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // optional float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_z;
        break;
      }

      // optional float z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_scale;
        break;
      }

      // optional float scale = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_scaley;
        break;
      }

      // optional float scaley = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaley:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaley_)));
          set_has_scaley();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_playspeed;
        break;
      }

      // optional float playspeed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_playspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &playspeed_)));
          set_has_playspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_playloop;
        break;
      }

      // optional float playloop = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_playloop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &playloop_)));
          set_has_playloop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_fadeout;
        break;
      }

      // optional float fadeout = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fadeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fadeout_)));
          set_has_fadeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_fadein;
        break;
      }

      // optional float fadein = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fadein:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fadein_)));
          set_has_fadein();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fadeout_blink;
        break;
      }

      // optional uint32 fadeout_blink = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fadeout_blink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fadeout_blink_)));
          set_has_fadeout_blink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fadein_blink;
        break;
      }

      // optional uint32 fadein_blink = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fadein_blink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fadein_blink_)));
          set_has_fadein_blink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional float z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // optional float scale = 5;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->scale(), output);
  }

  // optional float scaley = 6;
  if (has_scaley()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->scaley(), output);
  }

  // optional float playspeed = 7;
  if (has_playspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->playspeed(), output);
  }

  // optional float playloop = 8;
  if (has_playloop()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->playloop(), output);
  }

  // optional float fadeout = 9;
  if (has_fadeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fadeout(), output);
  }

  // optional float fadein = 10;
  if (has_fadein()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fadein(), output);
  }

  // optional uint32 fadeout_blink = 11;
  if (has_fadeout_blink()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->fadeout_blink(), output);
  }

  // optional uint32 fadein_blink = 12;
  if (has_fadein_blink()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->fadein_blink(), output);
  }

}

int sEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 4;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float scale = 5;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float scaley = 6;
    if (has_scaley()) {
      total_size += 1 + 4;
    }

    // optional float playspeed = 7;
    if (has_playspeed()) {
      total_size += 1 + 4;
    }

    // optional float playloop = 8;
    if (has_playloop()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float fadeout = 9;
    if (has_fadeout()) {
      total_size += 1 + 4;
    }

    // optional float fadein = 10;
    if (has_fadein()) {
      total_size += 1 + 4;
    }

    // optional uint32 fadeout_blink = 11;
    if (has_fadeout_blink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fadeout_blink());
    }

    // optional uint32 fadein_blink = 12;
    if (has_fadein_blink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fadein_blink());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEffect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEffect*>(&from));
}

void sEffect::MergeFrom(const sEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_scaley()) {
      set_scaley(from.scaley());
    }
    if (from.has_playspeed()) {
      set_playspeed(from.playspeed());
    }
    if (from.has_playloop()) {
      set_playloop(from.playloop());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fadeout()) {
      set_fadeout(from.fadeout());
    }
    if (from.has_fadein()) {
      set_fadein(from.fadein());
    }
    if (from.has_fadeout_blink()) {
      set_fadeout_blink(from.fadeout_blink());
    }
    if (from.has_fadein_blink()) {
      set_fadein_blink(from.fadein_blink());
    }
  }
}

void sEffect::CopyFrom(const sEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEffect::IsInitialized() const {

  return true;
}

void sEffect::Swap(sEffect* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(scale_, other->scale_);
    std::swap(scaley_, other->scaley_);
    std::swap(playspeed_, other->playspeed_);
    std::swap(playloop_, other->playloop_);
    std::swap(fadeout_, other->fadeout_);
    std::swap(fadein_, other->fadein_);
    std::swap(fadeout_blink_, other->fadeout_blink_);
    std::swap(fadein_blink_, other->fadein_blink_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEffect::GetTypeName() const {
  return "jynetwork.proto.sEffect";
}


// ===================================================================

#ifndef _MSC_VER
const int sSubEffects::kUidFieldNumber;
const int sSubEffects::kXFieldNumber;
const int sSubEffects::kYFieldNumber;
const int sSubEffects::kZFieldNumber;
const int sSubEffects::kDirrotateFieldNumber;
const int sSubEffects::kScaleFieldNumber;
const int sSubEffects::kScaleyFieldNumber;
#endif  // !_MSC_VER

sSubEffects::sSubEffects()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sSubEffects::InitAsDefaultInstance() {
}

sSubEffects::sSubEffects(const sSubEffects& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sSubEffects::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  dirrotate_ = 0;
  scale_ = 0;
  scaley_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sSubEffects::~sSubEffects() {
  SharedDtor();
}

void sSubEffects::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sSubEffects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sSubEffects& sSubEffects::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sSubEffects* sSubEffects::default_instance_ = NULL;

sSubEffects* sSubEffects::New() const {
  return new sSubEffects;
}

void sSubEffects::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    x_ = 0;
    y_ = 0;
    z_ = 0;
    dirrotate_ = 0;
    scale_ = 0;
    scaley_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sSubEffects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // optional float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // optional float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_z;
        break;
      }

      // optional float z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_dirrotate;
        break;
      }

      // optional float dirrotate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dirrotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dirrotate_)));
          set_has_dirrotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_scale;
        break;
      }

      // optional float scale = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_scaley;
        break;
      }

      // optional float scaley = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaley:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaley_)));
          set_has_scaley();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sSubEffects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional float z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // optional float dirrotate = 5;
  if (has_dirrotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dirrotate(), output);
  }

  // optional float scale = 6;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->scale(), output);
  }

  // optional float scaley = 7;
  if (has_scaley()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->scaley(), output);
  }

}

int sSubEffects::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 4;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float dirrotate = 5;
    if (has_dirrotate()) {
      total_size += 1 + 4;
    }

    // optional float scale = 6;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float scaley = 7;
    if (has_scaley()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sSubEffects::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sSubEffects*>(&from));
}

void sSubEffects::MergeFrom(const sSubEffects& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_dirrotate()) {
      set_dirrotate(from.dirrotate());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_scaley()) {
      set_scaley(from.scaley());
    }
  }
}

void sSubEffects::CopyFrom(const sSubEffects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sSubEffects::IsInitialized() const {

  return true;
}

void sSubEffects::Swap(sSubEffects* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(dirrotate_, other->dirrotate_);
    std::swap(scale_, other->scale_);
    std::swap(scaley_, other->scaley_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sSubEffects::GetTypeName() const {
  return "jynetwork.proto.sSubEffects";
}


// ===================================================================

#ifndef _MSC_VER
const int sEffectSound::kSoundDelayFieldNumber;
const int sEffectSound::kSoundNameFieldNumber;
#endif  // !_MSC_VER

sEffectSound::sEffectSound()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEffectSound::InitAsDefaultInstance() {
}

sEffectSound::sEffectSound(const sEffectSound& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEffectSound::SharedCtor() {
  _cached_size_ = 0;
  sound_delay_ = 0;
  sound_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEffectSound::~sEffectSound() {
  SharedDtor();
}

void sEffectSound::SharedDtor() {
  if (sound_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sound_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEffectSound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEffectSound& sEffectSound::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sEffectSound* sEffectSound::default_instance_ = NULL;

sEffectSound* sEffectSound::New() const {
  return new sEffectSound;
}

void sEffectSound::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sound_delay_ = 0;
    if (has_sound_name()) {
      if (sound_name_ != &::google::protobuf::internal::kEmptyString) {
        sound_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEffectSound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float sound_delay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sound_delay_)));
          set_has_sound_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sound_name;
        break;
      }

      // optional string sound_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sound_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sound_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEffectSound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float sound_delay = 1;
  if (has_sound_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sound_delay(), output);
  }

  // optional string sound_name = 2;
  if (has_sound_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sound_name(), output);
  }

}

int sEffectSound::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float sound_delay = 1;
    if (has_sound_delay()) {
      total_size += 1 + 4;
    }

    // optional string sound_name = 2;
    if (has_sound_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sound_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEffectSound::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEffectSound*>(&from));
}

void sEffectSound::MergeFrom(const sEffectSound& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sound_delay()) {
      set_sound_delay(from.sound_delay());
    }
    if (from.has_sound_name()) {
      set_sound_name(from.sound_name());
    }
  }
}

void sEffectSound::CopyFrom(const sEffectSound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEffectSound::IsInitialized() const {

  return true;
}

void sEffectSound::Swap(sEffectSound* other) {
  if (other != this) {
    std::swap(sound_delay_, other->sound_delay_);
    std::swap(sound_name_, other->sound_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEffectSound::GetTypeName() const {
  return "jynetwork.proto.sEffectSound";
}


// ===================================================================

#ifndef _MSC_VER
const int sEffects::kUidFieldNumber;
const int sEffects::kSubeffectsFieldNumber;
const int sEffects::kEffectsFieldNumber;
const int sEffects::kDirrotateFieldNumber;
const int sEffects::kPostypeFieldNumber;
const int sEffects::kInterruptableFieldNumber;
const int sEffects::kNextidFieldNumber;
const int sEffects::kEfftypeFieldNumber;
const int sEffects::kPhynameFieldNumber;
const int sEffects::kPhysequnceFieldNumber;
const int sEffects::kBindparentFieldNumber;
const int sEffects::kGamestatsFieldNumber;
const int sEffects::kHiteffectFieldNumber;
const int sEffects::kBulletSpeedFieldNumber;
const int sEffects::kAccelFieldNumber;
const int sEffects::kTurnrateFieldNumber;
const int sEffects::kYrotspeedFieldNumber;
const int sEffects::kDestructibleFieldNumber;
const int sEffects::kImmunebulletFieldNumber;
const int sEffects::kLifetimeFieldNumber;
const int sEffects::kAttackTimespanFieldNumber;
const int sEffects::kSpawnEffectFieldNumber;
const int sEffects::kZorderFieldNumber;
const int sEffects::kSkipRotateFieldNumber;
const int sEffects::kDestructEffFieldNumber;
const int sEffects::kSwingtimeFieldNumber;
const int sEffects::kSoundFieldNumber;
const int sEffects::kNoTargetFieldNumber;
const int sEffects::kPhyRadiusFieldNumber;
const int sEffects::kAssistTypeFieldNumber;
const int sEffects::kScreenTypeFieldNumber;
const int sEffects::kScreenSpeedFieldNumber;
const int sEffects::kScreenDurationFieldNumber;
const int sEffects::kScreenColorrFieldNumber;
const int sEffects::kScreenColorgFieldNumber;
const int sEffects::kScreenColorbFieldNumber;
const int sEffects::kScreenColoraFieldNumber;
const int sEffects::kCameraMoveTypeFieldNumber;
const int sEffects::kCameraMoveTimeFieldNumber;
const int sEffects::kCameraReturnTimeFieldNumber;
const int sEffects::kCameraOffsetxFieldNumber;
const int sEffects::kCameraOffsetyFieldNumber;
const int sEffects::kCameraOffsetzFieldNumber;
const int sEffects::kSelfRotateFieldNumber;
const int sEffects::kRender3DFieldNumber;
const int sEffects::kGamestateLvlFieldNumber;
const int sEffects::kIsFullscreenFieldNumber;
const int sEffects::kPhyRectwFieldNumber;
const int sEffects::kPhyRecthFieldNumber;
const int sEffects::kPhyRectaxFieldNumber;
const int sEffects::kPhyRectayFieldNumber;
const int sEffects::kStartDelayFieldNumber;
const int sEffects::kAoffsetxFieldNumber;
const int sEffects::kAoffsetyFieldNumber;
const int sEffects::kFantasyFuncFieldNumber;
const int sEffects::kFantasyBullectFieldNumber;
const int sEffects::kFantasyPerCountFieldNumber;
const int sEffects::kFantasyPerAddcountFieldNumber;
const int sEffects::kFantasyParam1FieldNumber;
const int sEffects::kFantasyParam2FieldNumber;
const int sEffects::kFantasyParam3FieldNumber;
const int sEffects::kFantasyParam4FieldNumber;
const int sEffects::kFantasyParam5FieldNumber;
const int sEffects::kFantasyParam6FieldNumber;
const int sEffects::kFantasyParam7FieldNumber;
const int sEffects::kFantasyParam8FieldNumber;
const int sEffects::kFantasyParam9FieldNumber;
const int sEffects::kFantasyParam10FieldNumber;
const int sEffects::kFantasyParam11FieldNumber;
const int sEffects::kFantasyParam12FieldNumber;
const int sEffects::kStreakFadeFieldNumber;
const int sEffects::kStreakMinsegFieldNumber;
const int sEffects::kStreakStrokeFieldNumber;
const int sEffects::kStreakDispearFieldNumber;
const int sEffects::kStreakColorrFieldNumber;
const int sEffects::kStreakColorgFieldNumber;
const int sEffects::kStreakColorbFieldNumber;
const int sEffects::kStreakNameFieldNumber;
const int sEffects::kDesturctByCreatorFieldNumber;
const int sEffects::kEffectSoundFieldNumber;
const int sEffects::kRandRotateFieldNumber;
const int sEffects::kNoOutEraseFieldNumber;
const int sEffects::kRetargetFieldNumber;
const int sEffects::kFuncMoveFieldNumber;
const int sEffects::kLaserTurnrateFieldNumber;
const int sEffects::kIsEndRemoveFieldNumber;
const int sEffects::kRetargetStartTimeFieldNumber;
const int sEffects::kRetargetEndTimeFieldNumber;
const int sEffects::kIsNotShowDamageFieldNumber;
const int sEffects::kHurtCatlogFieldNumber;
const int sEffects::kLaserHalfWidthFieldNumber;
const int sEffects::kAlertRadiusFieldNumber;
#endif  // !_MSC_VER

sEffects::sEffects()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEffects::InitAsDefaultInstance() {
}

sEffects::sEffects(const sEffects& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEffects::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  dirrotate_ = 0;
  postype_ = 0;
  interruptable_ = 0u;
  nextid_ = 0u;
  efftype_ = 1;
  phyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  physequnce_ = 0u;
  bindparent_ = 0u;
  gamestats_ = 0u;
  hiteffect_ = 0u;
  bullet_speed_ = 0;
  accel_ = 0;
  turnrate_ = 0;
  yrotspeed_ = 0;
  destructible_ = 0u;
  immunebullet_ = 0u;
  lifetime_ = 0;
  attack_timespan_ = 0;
  spawn_effect_ = 0u;
  zorder_ = 0;
  skip_rotate_ = 0u;
  destruct_eff_ = 0u;
  sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  no_target_ = 0u;
  phy_radius_ = 0;
  assist_type_ = 0;
  screen_type_ = 0;
  screen_speed_ = 0;
  screen_duration_ = 0;
  screen_colorr_ = 0u;
  screen_colorg_ = 0u;
  screen_colorb_ = 0u;
  screen_colora_ = 0u;
  camera_move_type_ = 0;
  camera_move_time_ = 0;
  camera_return_time_ = 0;
  camera_offsetx_ = 0;
  camera_offsety_ = 0;
  camera_offsetz_ = 0;
  self_rotate_ = 0;
  render3d_ = 0u;
  gamestate_lvl_ = 0u;
  is_fullscreen_ = 0u;
  phy_rectw_ = 0;
  phy_recth_ = 0;
  phy_rectax_ = 0;
  phy_rectay_ = 0;
  start_delay_ = 0;
  aoffsetx_ = 0;
  aoffsety_ = 0;
  fantasy_func_ = 0u;
  fantasy_bullect_ = 0u;
  fantasy_per_count_ = 0u;
  fantasy_per_addcount_ = 0u;
  fantasy_param1_ = 0;
  fantasy_param2_ = 0;
  fantasy_param3_ = 0;
  fantasy_param4_ = 0;
  fantasy_param5_ = 0;
  fantasy_param6_ = 0;
  fantasy_param7_ = 0;
  fantasy_param8_ = 0;
  fantasy_param9_ = 0;
  fantasy_param10_ = 0;
  fantasy_param11_ = 0;
  fantasy_param12_ = 0;
  streak_fade_ = 0;
  streak_minseg_ = 0;
  streak_stroke_ = 0;
  streak_dispear_ = 0;
  streak_colorr_ = 0u;
  streak_colorg_ = 0u;
  streak_colorb_ = 0u;
  streak_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desturct_by_creator_ = 0u;
  rand_rotate_ = 0u;
  no_out_erase_ = 0u;
  retarget_ = 0u;
  func_move_ = 0u;
  laser_turnrate_ = 0u;
  is_end_remove_ = 0u;
  retarget_start_time_ = 0;
  retarget_end_time_ = 0;
  is_not_show_damage_ = 0u;
  hurt_catlog_ = 0u;
  laser_half_width_ = 0;
  alert_radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEffects::~sEffects() {
  SharedDtor();
}

void sEffects::SharedDtor() {
  if (phyname_ != &::google::protobuf::internal::kEmptyString) {
    delete phyname_;
  }
  if (sound_ != &::google::protobuf::internal::kEmptyString) {
    delete sound_;
  }
  if (streak_name_ != &::google::protobuf::internal::kEmptyString) {
    delete streak_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEffects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEffects& sEffects::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sEffects* sEffects::default_instance_ = NULL;

sEffects* sEffects::New() const {
  return new sEffects;
}

void sEffects::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    dirrotate_ = 0;
    postype_ = 0;
    interruptable_ = 0u;
    nextid_ = 0u;
    efftype_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_phyname()) {
      if (phyname_ != &::google::protobuf::internal::kEmptyString) {
        phyname_->clear();
      }
    }
    physequnce_ = 0u;
    bindparent_ = 0u;
    gamestats_ = 0u;
    hiteffect_ = 0u;
    bullet_speed_ = 0;
    accel_ = 0;
    turnrate_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    yrotspeed_ = 0;
    destructible_ = 0u;
    immunebullet_ = 0u;
    lifetime_ = 0;
    attack_timespan_ = 0;
    spawn_effect_ = 0u;
    zorder_ = 0;
    skip_rotate_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    destruct_eff_ = 0u;
    if (has_sound()) {
      if (sound_ != &::google::protobuf::internal::kEmptyString) {
        sound_->clear();
      }
    }
    no_target_ = 0u;
    phy_radius_ = 0;
    assist_type_ = 0;
    screen_type_ = 0;
    screen_speed_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    screen_duration_ = 0;
    screen_colorr_ = 0u;
    screen_colorg_ = 0u;
    screen_colorb_ = 0u;
    screen_colora_ = 0u;
    camera_move_type_ = 0;
    camera_move_time_ = 0;
    camera_return_time_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    camera_offsetx_ = 0;
    camera_offsety_ = 0;
    camera_offsetz_ = 0;
    self_rotate_ = 0;
    render3d_ = 0u;
    gamestate_lvl_ = 0u;
    is_fullscreen_ = 0u;
    phy_rectw_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    phy_recth_ = 0;
    phy_rectax_ = 0;
    phy_rectay_ = 0;
    start_delay_ = 0;
    aoffsetx_ = 0;
    aoffsety_ = 0;
    fantasy_func_ = 0u;
    fantasy_bullect_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    fantasy_per_count_ = 0u;
    fantasy_per_addcount_ = 0u;
    fantasy_param1_ = 0;
    fantasy_param2_ = 0;
    fantasy_param3_ = 0;
    fantasy_param4_ = 0;
    fantasy_param5_ = 0;
    fantasy_param6_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    fantasy_param7_ = 0;
    fantasy_param8_ = 0;
    fantasy_param9_ = 0;
    fantasy_param10_ = 0;
    fantasy_param11_ = 0;
    fantasy_param12_ = 0;
    streak_fade_ = 0;
    streak_minseg_ = 0;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    streak_stroke_ = 0;
    streak_dispear_ = 0;
    streak_colorr_ = 0u;
    streak_colorg_ = 0u;
    streak_colorb_ = 0u;
    if (has_streak_name()) {
      if (streak_name_ != &::google::protobuf::internal::kEmptyString) {
        streak_name_->clear();
      }
    }
    desturct_by_creator_ = 0u;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    rand_rotate_ = 0u;
    no_out_erase_ = 0u;
    retarget_ = 0u;
    func_move_ = 0u;
    laser_turnrate_ = 0u;
    is_end_remove_ = 0u;
    retarget_start_time_ = 0;
    retarget_end_time_ = 0;
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    is_not_show_damage_ = 0u;
    hurt_catlog_ = 0u;
    laser_half_width_ = 0;
    alert_radius_ = 0;
  }
  subeffects_.Clear();
  effects_.Clear();
  swingtime_.Clear();
  effect_sound_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEffects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subeffects;
        break;
      }

      // repeated .jynetwork.proto.sSubEffects subeffects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subeffects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subeffects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subeffects;
        if (input->ExpectTag(26)) goto parse_effects;
        break;
      }

      // repeated .jynetwork.proto.sEffect effects = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effects;
        if (input->ExpectTag(37)) goto parse_dirrotate;
        break;
      }

      // optional float dirrotate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dirrotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dirrotate_)));
          set_has_dirrotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_postype;
        break;
      }

      // optional .jynetwork.proto.eEffectPosType postype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_postype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eEffectPosType_IsValid(value)) {
            set_postype(static_cast< ::jynetwork::proto::eEffectPosType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_interruptable;
        break;
      }

      // optional uint32 interruptable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interruptable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interruptable_)));
          set_has_interruptable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nextid;
        break;
      }

      // optional uint32 nextid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextid_)));
          set_has_nextid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_efftype;
        break;
      }

      // optional .jynetwork.proto.eEffectType efftype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_efftype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eEffectType_IsValid(value)) {
            set_efftype(static_cast< ::jynetwork::proto::eEffectType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_phyname;
        break;
      }

      // optional string phyname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phyname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_physequnce;
        break;
      }

      // optional uint32 physequnce = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physequnce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physequnce_)));
          set_has_physequnce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bindparent;
        break;
      }

      // optional uint32 bindparent = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindparent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bindparent_)));
          set_has_bindparent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gamestats;
        break;
      }

      // optional uint32 gamestats = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamestats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestats_)));
          set_has_gamestats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hiteffect;
        break;
      }

      // optional uint32 hiteffect = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hiteffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hiteffect_)));
          set_has_hiteffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_bullet_speed;
        break;
      }

      // optional float bullet_speed = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bullet_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bullet_speed_)));
          set_has_bullet_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_accel;
        break;
      }

      // optional float accel = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_accel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_)));
          set_has_accel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_turnrate;
        break;
      }

      // optional float turnrate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_turnrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnrate_)));
          set_has_turnrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_yrotspeed;
        break;
      }

      // optional float yrotspeed = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yrotspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yrotspeed_)));
          set_has_yrotspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_destructible;
        break;
      }

      // optional uint32 destructible = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destructible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destructible_)));
          set_has_destructible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_immunebullet;
        break;
      }

      // optional uint32 immunebullet = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_immunebullet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &immunebullet_)));
          set_has_immunebullet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_lifetime;
        break;
      }

      // optional float lifetime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lifetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_attack_timespan;
        break;
      }

      // optional float attack_timespan = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_attack_timespan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attack_timespan_)));
          set_has_attack_timespan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_spawn_effect;
        break;
      }

      // optional uint32 spawn_effect = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spawn_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawn_effect_)));
          set_has_spawn_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_zorder;
        break;
      }

      // optional float zorder = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zorder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zorder_)));
          set_has_zorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_skip_rotate;
        break;
      }

      // optional uint32 skip_rotate = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skip_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skip_rotate_)));
          set_has_skip_rotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_destruct_eff;
        break;
      }

      // optional uint32 destruct_eff = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destruct_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destruct_eff_)));
          set_has_destruct_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_swingtime;
        break;
      }

      // repeated float swingtime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_swingtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 213, input, this->mutable_swingtime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_swingtime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_swingtime;
        if (input->ExpectTag(218)) goto parse_sound;
        break;
      }

      // optional string sound = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_no_target;
        break;
      }

      // optional uint32 no_target = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &no_target_)));
          set_has_no_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_phy_radius;
        break;
      }

      // optional float phy_radius = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phy_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phy_radius_)));
          set_has_phy_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_assist_type;
        break;
      }

      // optional .jynetwork.proto.eAssitType assist_type = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assist_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eAssitType_IsValid(value)) {
            set_assist_type(static_cast< ::jynetwork::proto::eAssitType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_screen_type;
        break;
      }

      // optional .jynetwork.proto.eEffectScreenType screen_type = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eEffectScreenType_IsValid(value)) {
            set_screen_type(static_cast< ::jynetwork::proto::eEffectScreenType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_screen_speed;
        break;
      }

      // optional float screen_speed = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_screen_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &screen_speed_)));
          set_has_screen_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_screen_duration;
        break;
      }

      // optional float screen_duration = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_screen_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &screen_duration_)));
          set_has_screen_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_screen_colorr;
        break;
      }

      // optional uint32 screen_colorr = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_colorr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_colorr_)));
          set_has_screen_colorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_screen_colorg;
        break;
      }

      // optional uint32 screen_colorg = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_colorg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_colorg_)));
          set_has_screen_colorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_screen_colorb;
        break;
      }

      // optional uint32 screen_colorb = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_colorb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_colorb_)));
          set_has_screen_colorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_screen_colora;
        break;
      }

      // optional uint32 screen_colora = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_colora:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_colora_)));
          set_has_screen_colora();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_camera_move_type;
        break;
      }

      // optional .jynetwork.proto.eCameraMoveType camera_move_type = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camera_move_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eCameraMoveType_IsValid(value)) {
            set_camera_move_type(static_cast< ::jynetwork::proto::eCameraMoveType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(317)) goto parse_camera_move_time;
        break;
      }

      // optional float camera_move_time = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_camera_move_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_move_time_)));
          set_has_camera_move_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(325)) goto parse_camera_return_time;
        break;
      }

      // optional float camera_return_time = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_camera_return_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_return_time_)));
          set_has_camera_return_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(333)) goto parse_camera_offsetx;
        break;
      }

      // optional float camera_offsetx = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_camera_offsetx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_offsetx_)));
          set_has_camera_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(341)) goto parse_camera_offsety;
        break;
      }

      // optional float camera_offsety = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_camera_offsety:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_offsety_)));
          set_has_camera_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(349)) goto parse_camera_offsetz;
        break;
      }

      // optional float camera_offsetz = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_camera_offsetz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_offsetz_)));
          set_has_camera_offsetz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(357)) goto parse_self_rotate;
        break;
      }

      // optional float self_rotate = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_self_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &self_rotate_)));
          set_has_self_rotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_render3d;
        break;
      }

      // optional uint32 render3d = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_render3d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &render3d_)));
          set_has_render3d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_gamestate_lvl;
        break;
      }

      // optional uint32 gamestate_lvl = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamestate_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestate_lvl_)));
          set_has_gamestate_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_is_fullscreen;
        break;
      }

      // optional uint32 is_fullscreen = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fullscreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_fullscreen_)));
          set_has_is_fullscreen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(389)) goto parse_phy_rectw;
        break;
      }

      // optional float phy_rectw = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phy_rectw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phy_rectw_)));
          set_has_phy_rectw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(397)) goto parse_phy_recth;
        break;
      }

      // optional float phy_recth = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phy_recth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phy_recth_)));
          set_has_phy_recth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(405)) goto parse_phy_rectax;
        break;
      }

      // optional float phy_rectax = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phy_rectax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phy_rectax_)));
          set_has_phy_rectax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(413)) goto parse_phy_rectay;
        break;
      }

      // optional float phy_rectay = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phy_rectay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phy_rectay_)));
          set_has_phy_rectay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(421)) goto parse_start_delay;
        break;
      }

      // optional float start_delay = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_delay_)));
          set_has_start_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(429)) goto parse_aoffsetx;
        break;
      }

      // optional float aoffsetx = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_aoffsetx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aoffsetx_)));
          set_has_aoffsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(437)) goto parse_aoffsety;
        break;
      }

      // optional float aoffsety = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_aoffsety:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aoffsety_)));
          set_has_aoffsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_fantasy_func;
        break;
      }

      // optional uint32 fantasy_func = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_func:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_func_)));
          set_has_fantasy_func();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_fantasy_bullect;
        break;
      }

      // optional uint32 fantasy_bullect = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_bullect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_bullect_)));
          set_has_fantasy_bullect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_fantasy_per_count;
        break;
      }

      // optional uint32 fantasy_per_count = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_per_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_per_count_)));
          set_has_fantasy_per_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_fantasy_per_addcount;
        break;
      }

      // optional uint32 fantasy_per_addcount = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_per_addcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_per_addcount_)));
          set_has_fantasy_per_addcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(477)) goto parse_fantasy_param1;
        break;
      }

      // optional float fantasy_param1 = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fantasy_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_param1_)));
          set_has_fantasy_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(485)) goto parse_fantasy_param2;
        break;
      }

      // optional float fantasy_param2 = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fantasy_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_param2_)));
          set_has_fantasy_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(493)) goto parse_fantasy_param3;
        break;
      }

      // optional float fantasy_param3 = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fantasy_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_param3_)));
          set_has_fantasy_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(501)) goto parse_fantasy_param4;
        break;
      }

      // optional float fantasy_param4 = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fantasy_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_param4_)));
          set_has_fantasy_param4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(509)) goto parse_fantasy_param5;
        break;
      }

      // optional float fantasy_param5 = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fantasy_param5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_param5_)));
          set_has_fantasy_param5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(517)) goto parse_fantasy_param6;
        break;
      }

      // optional float fantasy_param6 = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fantasy_param6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_param6_)));
          set_has_fantasy_param6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(525)) goto parse_fantasy_param7;
        break;
      }

      // optional float fantasy_param7 = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fantasy_param7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_param7_)));
          set_has_fantasy_param7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(533)) goto parse_fantasy_param8;
        break;
      }

      // optional float fantasy_param8 = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fantasy_param8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_param8_)));
          set_has_fantasy_param8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(541)) goto parse_fantasy_param9;
        break;
      }

      // optional float fantasy_param9 = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fantasy_param9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_param9_)));
          set_has_fantasy_param9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(549)) goto parse_fantasy_param10;
        break;
      }

      // optional float fantasy_param10 = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fantasy_param10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_param10_)));
          set_has_fantasy_param10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(557)) goto parse_fantasy_param11;
        break;
      }

      // optional float fantasy_param11 = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fantasy_param11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_param11_)));
          set_has_fantasy_param11();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(565)) goto parse_fantasy_param12;
        break;
      }

      // optional float fantasy_param12 = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fantasy_param12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_param12_)));
          set_has_fantasy_param12();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(573)) goto parse_streak_fade;
        break;
      }

      // optional float streak_fade = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_streak_fade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &streak_fade_)));
          set_has_streak_fade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(581)) goto parse_streak_minseg;
        break;
      }

      // optional float streak_minseg = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_streak_minseg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &streak_minseg_)));
          set_has_streak_minseg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(589)) goto parse_streak_stroke;
        break;
      }

      // optional float streak_stroke = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_streak_stroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &streak_stroke_)));
          set_has_streak_stroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_streak_colorr;
        break;
      }

      // optional uint32 streak_colorr = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_streak_colorr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streak_colorr_)));
          set_has_streak_colorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_streak_colorg;
        break;
      }

      // optional uint32 streak_colorg = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_streak_colorg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streak_colorg_)));
          set_has_streak_colorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_streak_colorb;
        break;
      }

      // optional uint32 streak_colorb = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_streak_colorb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streak_colorb_)));
          set_has_streak_colorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(618)) goto parse_streak_name;
        break;
      }

      // optional string streak_name = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_streak_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streak_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_desturct_by_creator;
        break;
      }

      // optional uint32 desturct_by_creator = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desturct_by_creator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desturct_by_creator_)));
          set_has_desturct_by_creator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(634)) goto parse_effect_sound;
        break;
      }

      // repeated .jynetwork.proto.sEffectSound effect_sound = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_sound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effect_sound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(634)) goto parse_effect_sound;
        if (input->ExpectTag(640)) goto parse_rand_rotate;
        break;
      }

      // optional uint32 rand_rotate = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_rotate_)));
          set_has_rand_rotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(653)) goto parse_streak_dispear;
        break;
      }

      // optional float streak_dispear = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_streak_dispear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &streak_dispear_)));
          set_has_streak_dispear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_no_out_erase;
        break;
      }

      // optional uint32 no_out_erase = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_out_erase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &no_out_erase_)));
          set_has_no_out_erase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_retarget;
        break;
      }

      // optional uint32 retarget = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retarget_)));
          set_has_retarget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(672)) goto parse_func_move;
        break;
      }

      // optional uint32 func_move = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_func_move:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &func_move_)));
          set_has_func_move();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(680)) goto parse_laser_turnrate;
        break;
      }

      // optional uint32 laser_turnrate = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laser_turnrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &laser_turnrate_)));
          set_has_laser_turnrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(688)) goto parse_is_end_remove;
        break;
      }

      // optional uint32 is_end_remove = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_end_remove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_end_remove_)));
          set_has_is_end_remove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(701)) goto parse_retarget_start_time;
        break;
      }

      // optional float retarget_start_time = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_retarget_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &retarget_start_time_)));
          set_has_retarget_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(709)) goto parse_retarget_end_time;
        break;
      }

      // optional float retarget_end_time = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_retarget_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &retarget_end_time_)));
          set_has_retarget_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(712)) goto parse_is_not_show_damage;
        break;
      }

      // optional uint32 is_not_show_damage = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_not_show_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_not_show_damage_)));
          set_has_is_not_show_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_hurt_catlog;
        break;
      }

      // optional uint32 hurt_catlog = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt_catlog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_catlog_)));
          set_has_hurt_catlog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(733)) goto parse_laser_half_width;
        break;
      }

      // optional float laser_half_width = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_laser_half_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laser_half_width_)));
          set_has_laser_half_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(741)) goto parse_alert_radius;
        break;
      }

      // optional float alert_radius = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alert_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alert_radius_)));
          set_has_alert_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEffects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // repeated .jynetwork.proto.sSubEffects subeffects = 2;
  for (int i = 0; i < this->subeffects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->subeffects(i), output);
  }

  // repeated .jynetwork.proto.sEffect effects = 3;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->effects(i), output);
  }

  // optional float dirrotate = 4;
  if (has_dirrotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dirrotate(), output);
  }

  // optional .jynetwork.proto.eEffectPosType postype = 5;
  if (has_postype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->postype(), output);
  }

  // optional uint32 interruptable = 6;
  if (has_interruptable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->interruptable(), output);
  }

  // optional uint32 nextid = 7;
  if (has_nextid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nextid(), output);
  }

  // optional .jynetwork.proto.eEffectType efftype = 8;
  if (has_efftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->efftype(), output);
  }

  // optional string phyname = 9;
  if (has_phyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->phyname(), output);
  }

  // optional uint32 physequnce = 10;
  if (has_physequnce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->physequnce(), output);
  }

  // optional uint32 bindparent = 11;
  if (has_bindparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->bindparent(), output);
  }

  // optional uint32 gamestats = 12;
  if (has_gamestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gamestats(), output);
  }

  // optional uint32 hiteffect = 13;
  if (has_hiteffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->hiteffect(), output);
  }

  // optional float bullet_speed = 14;
  if (has_bullet_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->bullet_speed(), output);
  }

  // optional float accel = 15;
  if (has_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->accel(), output);
  }

  // optional float turnrate = 16;
  if (has_turnrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->turnrate(), output);
  }

  // optional float yrotspeed = 17;
  if (has_yrotspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->yrotspeed(), output);
  }

  // optional uint32 destructible = 18;
  if (has_destructible()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->destructible(), output);
  }

  // optional uint32 immunebullet = 19;
  if (has_immunebullet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->immunebullet(), output);
  }

  // optional float lifetime = 20;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->lifetime(), output);
  }

  // optional float attack_timespan = 21;
  if (has_attack_timespan()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->attack_timespan(), output);
  }

  // optional uint32 spawn_effect = 22;
  if (has_spawn_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->spawn_effect(), output);
  }

  // optional float zorder = 23;
  if (has_zorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->zorder(), output);
  }

  // optional uint32 skip_rotate = 24;
  if (has_skip_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->skip_rotate(), output);
  }

  // optional uint32 destruct_eff = 25;
  if (has_destruct_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->destruct_eff(), output);
  }

  // repeated float swingtime = 26;
  for (int i = 0; i < this->swingtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      26, this->swingtime(i), output);
  }

  // optional string sound = 27;
  if (has_sound()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->sound(), output);
  }

  // optional uint32 no_target = 28;
  if (has_no_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->no_target(), output);
  }

  // optional float phy_radius = 29;
  if (has_phy_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->phy_radius(), output);
  }

  // optional .jynetwork.proto.eAssitType assist_type = 30;
  if (has_assist_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->assist_type(), output);
  }

  // optional .jynetwork.proto.eEffectScreenType screen_type = 31;
  if (has_screen_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->screen_type(), output);
  }

  // optional float screen_speed = 32;
  if (has_screen_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->screen_speed(), output);
  }

  // optional float screen_duration = 33;
  if (has_screen_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->screen_duration(), output);
  }

  // optional uint32 screen_colorr = 34;
  if (has_screen_colorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->screen_colorr(), output);
  }

  // optional uint32 screen_colorg = 35;
  if (has_screen_colorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->screen_colorg(), output);
  }

  // optional uint32 screen_colorb = 36;
  if (has_screen_colorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->screen_colorb(), output);
  }

  // optional uint32 screen_colora = 37;
  if (has_screen_colora()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->screen_colora(), output);
  }

  // optional .jynetwork.proto.eCameraMoveType camera_move_type = 38;
  if (has_camera_move_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      38, this->camera_move_type(), output);
  }

  // optional float camera_move_time = 39;
  if (has_camera_move_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->camera_move_time(), output);
  }

  // optional float camera_return_time = 40;
  if (has_camera_return_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->camera_return_time(), output);
  }

  // optional float camera_offsetx = 41;
  if (has_camera_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->camera_offsetx(), output);
  }

  // optional float camera_offsety = 42;
  if (has_camera_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->camera_offsety(), output);
  }

  // optional float camera_offsetz = 43;
  if (has_camera_offsetz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->camera_offsetz(), output);
  }

  // optional float self_rotate = 44;
  if (has_self_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->self_rotate(), output);
  }

  // optional uint32 render3d = 45;
  if (has_render3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->render3d(), output);
  }

  // optional uint32 gamestate_lvl = 46;
  if (has_gamestate_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->gamestate_lvl(), output);
  }

  // optional uint32 is_fullscreen = 47;
  if (has_is_fullscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->is_fullscreen(), output);
  }

  // optional float phy_rectw = 48;
  if (has_phy_rectw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->phy_rectw(), output);
  }

  // optional float phy_recth = 49;
  if (has_phy_recth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(49, this->phy_recth(), output);
  }

  // optional float phy_rectax = 50;
  if (has_phy_rectax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->phy_rectax(), output);
  }

  // optional float phy_rectay = 51;
  if (has_phy_rectay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->phy_rectay(), output);
  }

  // optional float start_delay = 52;
  if (has_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(52, this->start_delay(), output);
  }

  // optional float aoffsetx = 53;
  if (has_aoffsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(53, this->aoffsetx(), output);
  }

  // optional float aoffsety = 54;
  if (has_aoffsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->aoffsety(), output);
  }

  // optional uint32 fantasy_func = 55;
  if (has_fantasy_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->fantasy_func(), output);
  }

  // optional uint32 fantasy_bullect = 56;
  if (has_fantasy_bullect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->fantasy_bullect(), output);
  }

  // optional uint32 fantasy_per_count = 57;
  if (has_fantasy_per_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->fantasy_per_count(), output);
  }

  // optional uint32 fantasy_per_addcount = 58;
  if (has_fantasy_per_addcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->fantasy_per_addcount(), output);
  }

  // optional float fantasy_param1 = 59;
  if (has_fantasy_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(59, this->fantasy_param1(), output);
  }

  // optional float fantasy_param2 = 60;
  if (has_fantasy_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(60, this->fantasy_param2(), output);
  }

  // optional float fantasy_param3 = 61;
  if (has_fantasy_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(61, this->fantasy_param3(), output);
  }

  // optional float fantasy_param4 = 62;
  if (has_fantasy_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(62, this->fantasy_param4(), output);
  }

  // optional float fantasy_param5 = 63;
  if (has_fantasy_param5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->fantasy_param5(), output);
  }

  // optional float fantasy_param6 = 64;
  if (has_fantasy_param6()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(64, this->fantasy_param6(), output);
  }

  // optional float fantasy_param7 = 65;
  if (has_fantasy_param7()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(65, this->fantasy_param7(), output);
  }

  // optional float fantasy_param8 = 66;
  if (has_fantasy_param8()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(66, this->fantasy_param8(), output);
  }

  // optional float fantasy_param9 = 67;
  if (has_fantasy_param9()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(67, this->fantasy_param9(), output);
  }

  // optional float fantasy_param10 = 68;
  if (has_fantasy_param10()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(68, this->fantasy_param10(), output);
  }

  // optional float fantasy_param11 = 69;
  if (has_fantasy_param11()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(69, this->fantasy_param11(), output);
  }

  // optional float fantasy_param12 = 70;
  if (has_fantasy_param12()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->fantasy_param12(), output);
  }

  // optional float streak_fade = 71;
  if (has_streak_fade()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->streak_fade(), output);
  }

  // optional float streak_minseg = 72;
  if (has_streak_minseg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(72, this->streak_minseg(), output);
  }

  // optional float streak_stroke = 73;
  if (has_streak_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(73, this->streak_stroke(), output);
  }

  // optional uint32 streak_colorr = 74;
  if (has_streak_colorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->streak_colorr(), output);
  }

  // optional uint32 streak_colorg = 75;
  if (has_streak_colorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->streak_colorg(), output);
  }

  // optional uint32 streak_colorb = 76;
  if (has_streak_colorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->streak_colorb(), output);
  }

  // optional string streak_name = 77;
  if (has_streak_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      77, this->streak_name(), output);
  }

  // optional uint32 desturct_by_creator = 78;
  if (has_desturct_by_creator()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->desturct_by_creator(), output);
  }

  // repeated .jynetwork.proto.sEffectSound effect_sound = 79;
  for (int i = 0; i < this->effect_sound_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      79, this->effect_sound(i), output);
  }

  // optional uint32 rand_rotate = 80;
  if (has_rand_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->rand_rotate(), output);
  }

  // optional float streak_dispear = 81;
  if (has_streak_dispear()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(81, this->streak_dispear(), output);
  }

  // optional uint32 no_out_erase = 82;
  if (has_no_out_erase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->no_out_erase(), output);
  }

  // optional uint32 retarget = 83;
  if (has_retarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(83, this->retarget(), output);
  }

  // optional uint32 func_move = 84;
  if (has_func_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(84, this->func_move(), output);
  }

  // optional uint32 laser_turnrate = 85;
  if (has_laser_turnrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(85, this->laser_turnrate(), output);
  }

  // optional uint32 is_end_remove = 86;
  if (has_is_end_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->is_end_remove(), output);
  }

  // optional float retarget_start_time = 87;
  if (has_retarget_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(87, this->retarget_start_time(), output);
  }

  // optional float retarget_end_time = 88;
  if (has_retarget_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(88, this->retarget_end_time(), output);
  }

  // optional uint32 is_not_show_damage = 89;
  if (has_is_not_show_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(89, this->is_not_show_damage(), output);
  }

  // optional uint32 hurt_catlog = 90;
  if (has_hurt_catlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->hurt_catlog(), output);
  }

  // optional float laser_half_width = 91;
  if (has_laser_half_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(91, this->laser_half_width(), output);
  }

  // optional float alert_radius = 92;
  if (has_alert_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(92, this->alert_radius(), output);
  }

}

int sEffects::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional float dirrotate = 4;
    if (has_dirrotate()) {
      total_size += 1 + 4;
    }

    // optional .jynetwork.proto.eEffectPosType postype = 5;
    if (has_postype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->postype());
    }

    // optional uint32 interruptable = 6;
    if (has_interruptable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interruptable());
    }

    // optional uint32 nextid = 7;
    if (has_nextid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextid());
    }

    // optional .jynetwork.proto.eEffectType efftype = 8;
    if (has_efftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->efftype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string phyname = 9;
    if (has_phyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phyname());
    }

    // optional uint32 physequnce = 10;
    if (has_physequnce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physequnce());
    }

    // optional uint32 bindparent = 11;
    if (has_bindparent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bindparent());
    }

    // optional uint32 gamestats = 12;
    if (has_gamestats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestats());
    }

    // optional uint32 hiteffect = 13;
    if (has_hiteffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hiteffect());
    }

    // optional float bullet_speed = 14;
    if (has_bullet_speed()) {
      total_size += 1 + 4;
    }

    // optional float accel = 15;
    if (has_accel()) {
      total_size += 1 + 4;
    }

    // optional float turnrate = 16;
    if (has_turnrate()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float yrotspeed = 17;
    if (has_yrotspeed()) {
      total_size += 2 + 4;
    }

    // optional uint32 destructible = 18;
    if (has_destructible()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destructible());
    }

    // optional uint32 immunebullet = 19;
    if (has_immunebullet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->immunebullet());
    }

    // optional float lifetime = 20;
    if (has_lifetime()) {
      total_size += 2 + 4;
    }

    // optional float attack_timespan = 21;
    if (has_attack_timespan()) {
      total_size += 2 + 4;
    }

    // optional uint32 spawn_effect = 22;
    if (has_spawn_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawn_effect());
    }

    // optional float zorder = 23;
    if (has_zorder()) {
      total_size += 2 + 4;
    }

    // optional uint32 skip_rotate = 24;
    if (has_skip_rotate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skip_rotate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 destruct_eff = 25;
    if (has_destruct_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destruct_eff());
    }

    // optional string sound = 27;
    if (has_sound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sound());
    }

    // optional uint32 no_target = 28;
    if (has_no_target()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->no_target());
    }

    // optional float phy_radius = 29;
    if (has_phy_radius()) {
      total_size += 2 + 4;
    }

    // optional .jynetwork.proto.eAssitType assist_type = 30;
    if (has_assist_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->assist_type());
    }

    // optional .jynetwork.proto.eEffectScreenType screen_type = 31;
    if (has_screen_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->screen_type());
    }

    // optional float screen_speed = 32;
    if (has_screen_speed()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float screen_duration = 33;
    if (has_screen_duration()) {
      total_size += 2 + 4;
    }

    // optional uint32 screen_colorr = 34;
    if (has_screen_colorr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screen_colorr());
    }

    // optional uint32 screen_colorg = 35;
    if (has_screen_colorg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screen_colorg());
    }

    // optional uint32 screen_colorb = 36;
    if (has_screen_colorb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screen_colorb());
    }

    // optional uint32 screen_colora = 37;
    if (has_screen_colora()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screen_colora());
    }

    // optional .jynetwork.proto.eCameraMoveType camera_move_type = 38;
    if (has_camera_move_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_move_type());
    }

    // optional float camera_move_time = 39;
    if (has_camera_move_time()) {
      total_size += 2 + 4;
    }

    // optional float camera_return_time = 40;
    if (has_camera_return_time()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional float camera_offsetx = 41;
    if (has_camera_offsetx()) {
      total_size += 2 + 4;
    }

    // optional float camera_offsety = 42;
    if (has_camera_offsety()) {
      total_size += 2 + 4;
    }

    // optional float camera_offsetz = 43;
    if (has_camera_offsetz()) {
      total_size += 2 + 4;
    }

    // optional float self_rotate = 44;
    if (has_self_rotate()) {
      total_size += 2 + 4;
    }

    // optional uint32 render3d = 45;
    if (has_render3d()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->render3d());
    }

    // optional uint32 gamestate_lvl = 46;
    if (has_gamestate_lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestate_lvl());
    }

    // optional uint32 is_fullscreen = 47;
    if (has_is_fullscreen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_fullscreen());
    }

    // optional float phy_rectw = 48;
    if (has_phy_rectw()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional float phy_recth = 49;
    if (has_phy_recth()) {
      total_size += 2 + 4;
    }

    // optional float phy_rectax = 50;
    if (has_phy_rectax()) {
      total_size += 2 + 4;
    }

    // optional float phy_rectay = 51;
    if (has_phy_rectay()) {
      total_size += 2 + 4;
    }

    // optional float start_delay = 52;
    if (has_start_delay()) {
      total_size += 2 + 4;
    }

    // optional float aoffsetx = 53;
    if (has_aoffsetx()) {
      total_size += 2 + 4;
    }

    // optional float aoffsety = 54;
    if (has_aoffsety()) {
      total_size += 2 + 4;
    }

    // optional uint32 fantasy_func = 55;
    if (has_fantasy_func()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_func());
    }

    // optional uint32 fantasy_bullect = 56;
    if (has_fantasy_bullect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_bullect());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 fantasy_per_count = 57;
    if (has_fantasy_per_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_per_count());
    }

    // optional uint32 fantasy_per_addcount = 58;
    if (has_fantasy_per_addcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_per_addcount());
    }

    // optional float fantasy_param1 = 59;
    if (has_fantasy_param1()) {
      total_size += 2 + 4;
    }

    // optional float fantasy_param2 = 60;
    if (has_fantasy_param2()) {
      total_size += 2 + 4;
    }

    // optional float fantasy_param3 = 61;
    if (has_fantasy_param3()) {
      total_size += 2 + 4;
    }

    // optional float fantasy_param4 = 62;
    if (has_fantasy_param4()) {
      total_size += 2 + 4;
    }

    // optional float fantasy_param5 = 63;
    if (has_fantasy_param5()) {
      total_size += 2 + 4;
    }

    // optional float fantasy_param6 = 64;
    if (has_fantasy_param6()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional float fantasy_param7 = 65;
    if (has_fantasy_param7()) {
      total_size += 2 + 4;
    }

    // optional float fantasy_param8 = 66;
    if (has_fantasy_param8()) {
      total_size += 2 + 4;
    }

    // optional float fantasy_param9 = 67;
    if (has_fantasy_param9()) {
      total_size += 2 + 4;
    }

    // optional float fantasy_param10 = 68;
    if (has_fantasy_param10()) {
      total_size += 2 + 4;
    }

    // optional float fantasy_param11 = 69;
    if (has_fantasy_param11()) {
      total_size += 2 + 4;
    }

    // optional float fantasy_param12 = 70;
    if (has_fantasy_param12()) {
      total_size += 2 + 4;
    }

    // optional float streak_fade = 71;
    if (has_streak_fade()) {
      total_size += 2 + 4;
    }

    // optional float streak_minseg = 72;
    if (has_streak_minseg()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional float streak_stroke = 73;
    if (has_streak_stroke()) {
      total_size += 2 + 4;
    }

    // optional float streak_dispear = 81;
    if (has_streak_dispear()) {
      total_size += 2 + 4;
    }

    // optional uint32 streak_colorr = 74;
    if (has_streak_colorr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streak_colorr());
    }

    // optional uint32 streak_colorg = 75;
    if (has_streak_colorg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streak_colorg());
    }

    // optional uint32 streak_colorb = 76;
    if (has_streak_colorb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streak_colorb());
    }

    // optional string streak_name = 77;
    if (has_streak_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streak_name());
    }

    // optional uint32 desturct_by_creator = 78;
    if (has_desturct_by_creator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desturct_by_creator());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional uint32 rand_rotate = 80;
    if (has_rand_rotate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_rotate());
    }

    // optional uint32 no_out_erase = 82;
    if (has_no_out_erase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->no_out_erase());
    }

    // optional uint32 retarget = 83;
    if (has_retarget()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retarget());
    }

    // optional uint32 func_move = 84;
    if (has_func_move()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->func_move());
    }

    // optional uint32 laser_turnrate = 85;
    if (has_laser_turnrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->laser_turnrate());
    }

    // optional uint32 is_end_remove = 86;
    if (has_is_end_remove()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_end_remove());
    }

    // optional float retarget_start_time = 87;
    if (has_retarget_start_time()) {
      total_size += 2 + 4;
    }

    // optional float retarget_end_time = 88;
    if (has_retarget_end_time()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional uint32 is_not_show_damage = 89;
    if (has_is_not_show_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_not_show_damage());
    }

    // optional uint32 hurt_catlog = 90;
    if (has_hurt_catlog()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt_catlog());
    }

    // optional float laser_half_width = 91;
    if (has_laser_half_width()) {
      total_size += 2 + 4;
    }

    // optional float alert_radius = 92;
    if (has_alert_radius()) {
      total_size += 2 + 4;
    }

  }
  // repeated .jynetwork.proto.sSubEffects subeffects = 2;
  total_size += 1 * this->subeffects_size();
  for (int i = 0; i < this->subeffects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subeffects(i));
  }

  // repeated .jynetwork.proto.sEffect effects = 3;
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }

  // repeated float swingtime = 26;
  {
    int data_size = 0;
    data_size = 4 * this->swingtime_size();
    total_size += 2 * this->swingtime_size() + data_size;
  }

  // repeated .jynetwork.proto.sEffectSound effect_sound = 79;
  total_size += 2 * this->effect_sound_size();
  for (int i = 0; i < this->effect_sound_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect_sound(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEffects::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEffects*>(&from));
}

void sEffects::MergeFrom(const sEffects& from) {
  GOOGLE_CHECK_NE(&from, this);
  subeffects_.MergeFrom(from.subeffects_);
  effects_.MergeFrom(from.effects_);
  swingtime_.MergeFrom(from.swingtime_);
  effect_sound_.MergeFrom(from.effect_sound_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_dirrotate()) {
      set_dirrotate(from.dirrotate());
    }
    if (from.has_postype()) {
      set_postype(from.postype());
    }
    if (from.has_interruptable()) {
      set_interruptable(from.interruptable());
    }
    if (from.has_nextid()) {
      set_nextid(from.nextid());
    }
    if (from.has_efftype()) {
      set_efftype(from.efftype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phyname()) {
      set_phyname(from.phyname());
    }
    if (from.has_physequnce()) {
      set_physequnce(from.physequnce());
    }
    if (from.has_bindparent()) {
      set_bindparent(from.bindparent());
    }
    if (from.has_gamestats()) {
      set_gamestats(from.gamestats());
    }
    if (from.has_hiteffect()) {
      set_hiteffect(from.hiteffect());
    }
    if (from.has_bullet_speed()) {
      set_bullet_speed(from.bullet_speed());
    }
    if (from.has_accel()) {
      set_accel(from.accel());
    }
    if (from.has_turnrate()) {
      set_turnrate(from.turnrate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_yrotspeed()) {
      set_yrotspeed(from.yrotspeed());
    }
    if (from.has_destructible()) {
      set_destructible(from.destructible());
    }
    if (from.has_immunebullet()) {
      set_immunebullet(from.immunebullet());
    }
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
    if (from.has_attack_timespan()) {
      set_attack_timespan(from.attack_timespan());
    }
    if (from.has_spawn_effect()) {
      set_spawn_effect(from.spawn_effect());
    }
    if (from.has_zorder()) {
      set_zorder(from.zorder());
    }
    if (from.has_skip_rotate()) {
      set_skip_rotate(from.skip_rotate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_destruct_eff()) {
      set_destruct_eff(from.destruct_eff());
    }
    if (from.has_sound()) {
      set_sound(from.sound());
    }
    if (from.has_no_target()) {
      set_no_target(from.no_target());
    }
    if (from.has_phy_radius()) {
      set_phy_radius(from.phy_radius());
    }
    if (from.has_assist_type()) {
      set_assist_type(from.assist_type());
    }
    if (from.has_screen_type()) {
      set_screen_type(from.screen_type());
    }
    if (from.has_screen_speed()) {
      set_screen_speed(from.screen_speed());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_screen_duration()) {
      set_screen_duration(from.screen_duration());
    }
    if (from.has_screen_colorr()) {
      set_screen_colorr(from.screen_colorr());
    }
    if (from.has_screen_colorg()) {
      set_screen_colorg(from.screen_colorg());
    }
    if (from.has_screen_colorb()) {
      set_screen_colorb(from.screen_colorb());
    }
    if (from.has_screen_colora()) {
      set_screen_colora(from.screen_colora());
    }
    if (from.has_camera_move_type()) {
      set_camera_move_type(from.camera_move_type());
    }
    if (from.has_camera_move_time()) {
      set_camera_move_time(from.camera_move_time());
    }
    if (from.has_camera_return_time()) {
      set_camera_return_time(from.camera_return_time());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_camera_offsetx()) {
      set_camera_offsetx(from.camera_offsetx());
    }
    if (from.has_camera_offsety()) {
      set_camera_offsety(from.camera_offsety());
    }
    if (from.has_camera_offsetz()) {
      set_camera_offsetz(from.camera_offsetz());
    }
    if (from.has_self_rotate()) {
      set_self_rotate(from.self_rotate());
    }
    if (from.has_render3d()) {
      set_render3d(from.render3d());
    }
    if (from.has_gamestate_lvl()) {
      set_gamestate_lvl(from.gamestate_lvl());
    }
    if (from.has_is_fullscreen()) {
      set_is_fullscreen(from.is_fullscreen());
    }
    if (from.has_phy_rectw()) {
      set_phy_rectw(from.phy_rectw());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_phy_recth()) {
      set_phy_recth(from.phy_recth());
    }
    if (from.has_phy_rectax()) {
      set_phy_rectax(from.phy_rectax());
    }
    if (from.has_phy_rectay()) {
      set_phy_rectay(from.phy_rectay());
    }
    if (from.has_start_delay()) {
      set_start_delay(from.start_delay());
    }
    if (from.has_aoffsetx()) {
      set_aoffsetx(from.aoffsetx());
    }
    if (from.has_aoffsety()) {
      set_aoffsety(from.aoffsety());
    }
    if (from.has_fantasy_func()) {
      set_fantasy_func(from.fantasy_func());
    }
    if (from.has_fantasy_bullect()) {
      set_fantasy_bullect(from.fantasy_bullect());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_fantasy_per_count()) {
      set_fantasy_per_count(from.fantasy_per_count());
    }
    if (from.has_fantasy_per_addcount()) {
      set_fantasy_per_addcount(from.fantasy_per_addcount());
    }
    if (from.has_fantasy_param1()) {
      set_fantasy_param1(from.fantasy_param1());
    }
    if (from.has_fantasy_param2()) {
      set_fantasy_param2(from.fantasy_param2());
    }
    if (from.has_fantasy_param3()) {
      set_fantasy_param3(from.fantasy_param3());
    }
    if (from.has_fantasy_param4()) {
      set_fantasy_param4(from.fantasy_param4());
    }
    if (from.has_fantasy_param5()) {
      set_fantasy_param5(from.fantasy_param5());
    }
    if (from.has_fantasy_param6()) {
      set_fantasy_param6(from.fantasy_param6());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_fantasy_param7()) {
      set_fantasy_param7(from.fantasy_param7());
    }
    if (from.has_fantasy_param8()) {
      set_fantasy_param8(from.fantasy_param8());
    }
    if (from.has_fantasy_param9()) {
      set_fantasy_param9(from.fantasy_param9());
    }
    if (from.has_fantasy_param10()) {
      set_fantasy_param10(from.fantasy_param10());
    }
    if (from.has_fantasy_param11()) {
      set_fantasy_param11(from.fantasy_param11());
    }
    if (from.has_fantasy_param12()) {
      set_fantasy_param12(from.fantasy_param12());
    }
    if (from.has_streak_fade()) {
      set_streak_fade(from.streak_fade());
    }
    if (from.has_streak_minseg()) {
      set_streak_minseg(from.streak_minseg());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_streak_stroke()) {
      set_streak_stroke(from.streak_stroke());
    }
    if (from.has_streak_dispear()) {
      set_streak_dispear(from.streak_dispear());
    }
    if (from.has_streak_colorr()) {
      set_streak_colorr(from.streak_colorr());
    }
    if (from.has_streak_colorg()) {
      set_streak_colorg(from.streak_colorg());
    }
    if (from.has_streak_colorb()) {
      set_streak_colorb(from.streak_colorb());
    }
    if (from.has_streak_name()) {
      set_streak_name(from.streak_name());
    }
    if (from.has_desturct_by_creator()) {
      set_desturct_by_creator(from.desturct_by_creator());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_rand_rotate()) {
      set_rand_rotate(from.rand_rotate());
    }
    if (from.has_no_out_erase()) {
      set_no_out_erase(from.no_out_erase());
    }
    if (from.has_retarget()) {
      set_retarget(from.retarget());
    }
    if (from.has_func_move()) {
      set_func_move(from.func_move());
    }
    if (from.has_laser_turnrate()) {
      set_laser_turnrate(from.laser_turnrate());
    }
    if (from.has_is_end_remove()) {
      set_is_end_remove(from.is_end_remove());
    }
    if (from.has_retarget_start_time()) {
      set_retarget_start_time(from.retarget_start_time());
    }
    if (from.has_retarget_end_time()) {
      set_retarget_end_time(from.retarget_end_time());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_is_not_show_damage()) {
      set_is_not_show_damage(from.is_not_show_damage());
    }
    if (from.has_hurt_catlog()) {
      set_hurt_catlog(from.hurt_catlog());
    }
    if (from.has_laser_half_width()) {
      set_laser_half_width(from.laser_half_width());
    }
    if (from.has_alert_radius()) {
      set_alert_radius(from.alert_radius());
    }
  }
}

void sEffects::CopyFrom(const sEffects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEffects::IsInitialized() const {

  return true;
}

void sEffects::Swap(sEffects* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    subeffects_.Swap(&other->subeffects_);
    effects_.Swap(&other->effects_);
    std::swap(dirrotate_, other->dirrotate_);
    std::swap(postype_, other->postype_);
    std::swap(interruptable_, other->interruptable_);
    std::swap(nextid_, other->nextid_);
    std::swap(efftype_, other->efftype_);
    std::swap(phyname_, other->phyname_);
    std::swap(physequnce_, other->physequnce_);
    std::swap(bindparent_, other->bindparent_);
    std::swap(gamestats_, other->gamestats_);
    std::swap(hiteffect_, other->hiteffect_);
    std::swap(bullet_speed_, other->bullet_speed_);
    std::swap(accel_, other->accel_);
    std::swap(turnrate_, other->turnrate_);
    std::swap(yrotspeed_, other->yrotspeed_);
    std::swap(destructible_, other->destructible_);
    std::swap(immunebullet_, other->immunebullet_);
    std::swap(lifetime_, other->lifetime_);
    std::swap(attack_timespan_, other->attack_timespan_);
    std::swap(spawn_effect_, other->spawn_effect_);
    std::swap(zorder_, other->zorder_);
    std::swap(skip_rotate_, other->skip_rotate_);
    std::swap(destruct_eff_, other->destruct_eff_);
    swingtime_.Swap(&other->swingtime_);
    std::swap(sound_, other->sound_);
    std::swap(no_target_, other->no_target_);
    std::swap(phy_radius_, other->phy_radius_);
    std::swap(assist_type_, other->assist_type_);
    std::swap(screen_type_, other->screen_type_);
    std::swap(screen_speed_, other->screen_speed_);
    std::swap(screen_duration_, other->screen_duration_);
    std::swap(screen_colorr_, other->screen_colorr_);
    std::swap(screen_colorg_, other->screen_colorg_);
    std::swap(screen_colorb_, other->screen_colorb_);
    std::swap(screen_colora_, other->screen_colora_);
    std::swap(camera_move_type_, other->camera_move_type_);
    std::swap(camera_move_time_, other->camera_move_time_);
    std::swap(camera_return_time_, other->camera_return_time_);
    std::swap(camera_offsetx_, other->camera_offsetx_);
    std::swap(camera_offsety_, other->camera_offsety_);
    std::swap(camera_offsetz_, other->camera_offsetz_);
    std::swap(self_rotate_, other->self_rotate_);
    std::swap(render3d_, other->render3d_);
    std::swap(gamestate_lvl_, other->gamestate_lvl_);
    std::swap(is_fullscreen_, other->is_fullscreen_);
    std::swap(phy_rectw_, other->phy_rectw_);
    std::swap(phy_recth_, other->phy_recth_);
    std::swap(phy_rectax_, other->phy_rectax_);
    std::swap(phy_rectay_, other->phy_rectay_);
    std::swap(start_delay_, other->start_delay_);
    std::swap(aoffsetx_, other->aoffsetx_);
    std::swap(aoffsety_, other->aoffsety_);
    std::swap(fantasy_func_, other->fantasy_func_);
    std::swap(fantasy_bullect_, other->fantasy_bullect_);
    std::swap(fantasy_per_count_, other->fantasy_per_count_);
    std::swap(fantasy_per_addcount_, other->fantasy_per_addcount_);
    std::swap(fantasy_param1_, other->fantasy_param1_);
    std::swap(fantasy_param2_, other->fantasy_param2_);
    std::swap(fantasy_param3_, other->fantasy_param3_);
    std::swap(fantasy_param4_, other->fantasy_param4_);
    std::swap(fantasy_param5_, other->fantasy_param5_);
    std::swap(fantasy_param6_, other->fantasy_param6_);
    std::swap(fantasy_param7_, other->fantasy_param7_);
    std::swap(fantasy_param8_, other->fantasy_param8_);
    std::swap(fantasy_param9_, other->fantasy_param9_);
    std::swap(fantasy_param10_, other->fantasy_param10_);
    std::swap(fantasy_param11_, other->fantasy_param11_);
    std::swap(fantasy_param12_, other->fantasy_param12_);
    std::swap(streak_fade_, other->streak_fade_);
    std::swap(streak_minseg_, other->streak_minseg_);
    std::swap(streak_stroke_, other->streak_stroke_);
    std::swap(streak_dispear_, other->streak_dispear_);
    std::swap(streak_colorr_, other->streak_colorr_);
    std::swap(streak_colorg_, other->streak_colorg_);
    std::swap(streak_colorb_, other->streak_colorb_);
    std::swap(streak_name_, other->streak_name_);
    std::swap(desturct_by_creator_, other->desturct_by_creator_);
    effect_sound_.Swap(&other->effect_sound_);
    std::swap(rand_rotate_, other->rand_rotate_);
    std::swap(no_out_erase_, other->no_out_erase_);
    std::swap(retarget_, other->retarget_);
    std::swap(func_move_, other->func_move_);
    std::swap(laser_turnrate_, other->laser_turnrate_);
    std::swap(is_end_remove_, other->is_end_remove_);
    std::swap(retarget_start_time_, other->retarget_start_time_);
    std::swap(retarget_end_time_, other->retarget_end_time_);
    std::swap(is_not_show_damage_, other->is_not_show_damage_);
    std::swap(hurt_catlog_, other->hurt_catlog_);
    std::swap(laser_half_width_, other->laser_half_width_);
    std::swap(alert_radius_, other->alert_radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEffects::GetTypeName() const {
  return "jynetwork.proto.sEffects";
}


// ===================================================================

#ifndef _MSC_VER
const int sEffectMove::kUidFieldNumber;
const int sEffectMove::kFuncIdFieldNumber;
const int sEffectMove::kParam1FieldNumber;
const int sEffectMove::kParam2FieldNumber;
const int sEffectMove::kParam3FieldNumber;
const int sEffectMove::kParam4FieldNumber;
const int sEffectMove::kParam5FieldNumber;
const int sEffectMove::kParam6FieldNumber;
const int sEffectMove::kParam7FieldNumber;
const int sEffectMove::kParam8FieldNumber;
const int sEffectMove::kParam9FieldNumber;
const int sEffectMove::kParam10FieldNumber;
const int sEffectMove::kParam11FieldNumber;
const int sEffectMove::kParam12FieldNumber;
#endif  // !_MSC_VER

sEffectMove::sEffectMove()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEffectMove::InitAsDefaultInstance() {
}

sEffectMove::sEffectMove(const sEffectMove& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEffectMove::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  func_id_ = 0u;
  param1_ = 0;
  param2_ = 0;
  param3_ = 0;
  param4_ = 0;
  param5_ = 0;
  param6_ = 0;
  param7_ = 0;
  param8_ = 0;
  param9_ = 0;
  param10_ = 0;
  param11_ = 0;
  param12_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEffectMove::~sEffectMove() {
  SharedDtor();
}

void sEffectMove::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEffectMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEffectMove& sEffectMove::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sEffectMove* sEffectMove::default_instance_ = NULL;

sEffectMove* sEffectMove::New() const {
  return new sEffectMove;
}

void sEffectMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    func_id_ = 0u;
    param1_ = 0;
    param2_ = 0;
    param3_ = 0;
    param4_ = 0;
    param5_ = 0;
    param6_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    param7_ = 0;
    param8_ = 0;
    param9_ = 0;
    param10_ = 0;
    param11_ = 0;
    param12_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEffectMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_func_id;
        break;
      }

      // optional uint32 func_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_func_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &func_id_)));
          set_has_func_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_param1;
        break;
      }

      // optional float param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_param2;
        break;
      }

      // optional float param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_param3;
        break;
      }

      // optional float param3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_param4;
        break;
      }

      // optional float param4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param4_)));
          set_has_param4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_param5;
        break;
      }

      // optional float param5 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param5_)));
          set_has_param5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_param6;
        break;
      }

      // optional float param6 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param6_)));
          set_has_param6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_param7;
        break;
      }

      // optional float param7 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param7_)));
          set_has_param7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_param8;
        break;
      }

      // optional float param8 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param8_)));
          set_has_param8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_param9;
        break;
      }

      // optional float param9 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param9_)));
          set_has_param9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_param10;
        break;
      }

      // optional float param10 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param10_)));
          set_has_param10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_param11;
        break;
      }

      // optional float param11 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param11_)));
          set_has_param11();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_param12;
        break;
      }

      // optional float param12 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param12_)));
          set_has_param12();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEffectMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 func_id = 2;
  if (has_func_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->func_id(), output);
  }

  // optional float param1 = 3;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->param1(), output);
  }

  // optional float param2 = 4;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->param2(), output);
  }

  // optional float param3 = 5;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->param3(), output);
  }

  // optional float param4 = 6;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->param4(), output);
  }

  // optional float param5 = 7;
  if (has_param5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->param5(), output);
  }

  // optional float param6 = 8;
  if (has_param6()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->param6(), output);
  }

  // optional float param7 = 9;
  if (has_param7()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->param7(), output);
  }

  // optional float param8 = 10;
  if (has_param8()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->param8(), output);
  }

  // optional float param9 = 11;
  if (has_param9()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->param9(), output);
  }

  // optional float param10 = 12;
  if (has_param10()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->param10(), output);
  }

  // optional float param11 = 13;
  if (has_param11()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->param11(), output);
  }

  // optional float param12 = 14;
  if (has_param12()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->param12(), output);
  }

}

int sEffectMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 func_id = 2;
    if (has_func_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->func_id());
    }

    // optional float param1 = 3;
    if (has_param1()) {
      total_size += 1 + 4;
    }

    // optional float param2 = 4;
    if (has_param2()) {
      total_size += 1 + 4;
    }

    // optional float param3 = 5;
    if (has_param3()) {
      total_size += 1 + 4;
    }

    // optional float param4 = 6;
    if (has_param4()) {
      total_size += 1 + 4;
    }

    // optional float param5 = 7;
    if (has_param5()) {
      total_size += 1 + 4;
    }

    // optional float param6 = 8;
    if (has_param6()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float param7 = 9;
    if (has_param7()) {
      total_size += 1 + 4;
    }

    // optional float param8 = 10;
    if (has_param8()) {
      total_size += 1 + 4;
    }

    // optional float param9 = 11;
    if (has_param9()) {
      total_size += 1 + 4;
    }

    // optional float param10 = 12;
    if (has_param10()) {
      total_size += 1 + 4;
    }

    // optional float param11 = 13;
    if (has_param11()) {
      total_size += 1 + 4;
    }

    // optional float param12 = 14;
    if (has_param12()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEffectMove::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEffectMove*>(&from));
}

void sEffectMove::MergeFrom(const sEffectMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_func_id()) {
      set_func_id(from.func_id());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
    if (from.has_param5()) {
      set_param5(from.param5());
    }
    if (from.has_param6()) {
      set_param6(from.param6());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_param7()) {
      set_param7(from.param7());
    }
    if (from.has_param8()) {
      set_param8(from.param8());
    }
    if (from.has_param9()) {
      set_param9(from.param9());
    }
    if (from.has_param10()) {
      set_param10(from.param10());
    }
    if (from.has_param11()) {
      set_param11(from.param11());
    }
    if (from.has_param12()) {
      set_param12(from.param12());
    }
  }
}

void sEffectMove::CopyFrom(const sEffectMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEffectMove::IsInitialized() const {

  return true;
}

void sEffectMove::Swap(sEffectMove* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(func_id_, other->func_id_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(param5_, other->param5_);
    std::swap(param6_, other->param6_);
    std::swap(param7_, other->param7_);
    std::swap(param8_, other->param8_);
    std::swap(param9_, other->param9_);
    std::swap(param10_, other->param10_);
    std::swap(param11_, other->param11_);
    std::swap(param12_, other->param12_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEffectMove::GetTypeName() const {
  return "jynetwork.proto.sEffectMove";
}


// ===================================================================

#ifndef _MSC_VER
const int sEffectTable::kUidFieldNumber;
const int sEffectTable::kEffectsidFieldNumber;
#endif  // !_MSC_VER

sEffectTable::sEffectTable()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEffectTable::InitAsDefaultInstance() {
}

sEffectTable::sEffectTable(const sEffectTable& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEffectTable::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  effectsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEffectTable::~sEffectTable() {
  SharedDtor();
}

void sEffectTable::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEffectTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEffectTable& sEffectTable::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sEffectTable* sEffectTable::default_instance_ = NULL;

sEffectTable* sEffectTable::New() const {
  return new sEffectTable;
}

void sEffectTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    effectsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEffectTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effectsid;
        break;
      }

      // optional uint32 effectsid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectsid_)));
          set_has_effectsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEffectTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 effectsid = 2;
  if (has_effectsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->effectsid(), output);
  }

}

int sEffectTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 effectsid = 2;
    if (has_effectsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectsid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEffectTable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEffectTable*>(&from));
}

void sEffectTable::MergeFrom(const sEffectTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_effectsid()) {
      set_effectsid(from.effectsid());
    }
  }
}

void sEffectTable::CopyFrom(const sEffectTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEffectTable::IsInitialized() const {

  return true;
}

void sEffectTable::Swap(sEffectTable* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(effectsid_, other->effectsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEffectTable::GetTypeName() const {
  return "jynetwork.proto.sEffectTable";
}


// ===================================================================

#ifndef _MSC_VER
const int sModelAction::kUidFieldNumber;
const int sModelAction::kResourcesFieldNumber;
const int sModelAction::kHoldSFieldNumber;
const int sModelAction::kHoldEFieldNumber;
const int sModelAction::kHoldEffFieldNumber;
const int sModelAction::kMoveleftSFieldNumber;
const int sModelAction::kMoveleftEFieldNumber;
const int sModelAction::kMoveleftEffFieldNumber;
const int sModelAction::kMoveleftstopSFieldNumber;
const int sModelAction::kMoveleftstopEFieldNumber;
const int sModelAction::kMoveleftstopEffFieldNumber;
const int sModelAction::kMoveleftturnSFieldNumber;
const int sModelAction::kMoveleftturnEFieldNumber;
const int sModelAction::kMoveleftturnEffFieldNumber;
const int sModelAction::kMoverightSFieldNumber;
const int sModelAction::kMoverightEFieldNumber;
const int sModelAction::kMoverightEffFieldNumber;
const int sModelAction::kMoverightstopSFieldNumber;
const int sModelAction::kMoverightstopEFieldNumber;
const int sModelAction::kMoverightstopEffFieldNumber;
const int sModelAction::kMoverightturnSFieldNumber;
const int sModelAction::kMoverightturnEFieldNumber;
const int sModelAction::kMoverightturnEffFieldNumber;
const int sModelAction::kAttackSFieldNumber;
const int sModelAction::kAttackEFieldNumber;
const int sModelAction::kAttackEffFieldNumber;
const int sModelAction::kSkillnormalSFieldNumber;
const int sModelAction::kSkillnormalEFieldNumber;
const int sModelAction::kSkillnormalEffFieldNumber;
const int sModelAction::kSkillsuperSFieldNumber;
const int sModelAction::kSkillsuperEFieldNumber;
const int sModelAction::kSkillsuperEffFieldNumber;
const int sModelAction::kSkill25SFieldNumber;
const int sModelAction::kSkill25EFieldNumber;
const int sModelAction::kSkill25EffFieldNumber;
const int sModelAction::kSkill50SFieldNumber;
const int sModelAction::kSkill50EFieldNumber;
const int sModelAction::kSkill50EffFieldNumber;
const int sModelAction::kSkill75SFieldNumber;
const int sModelAction::kSkill75EFieldNumber;
const int sModelAction::kSkill75EffFieldNumber;
const int sModelAction::kSkill100SFieldNumber;
const int sModelAction::kSkill100EFieldNumber;
const int sModelAction::kSkill100EffFieldNumber;
const int sModelAction::kDeadSFieldNumber;
const int sModelAction::kDeadEFieldNumber;
const int sModelAction::kDeadEffFieldNumber;
const int sModelAction::kTurninSFieldNumber;
const int sModelAction::kTurninEFieldNumber;
const int sModelAction::kTurninEffFieldNumber;
const int sModelAction::kTurninScaleFieldNumber;
const int sModelAction::kMainSFieldNumber;
const int sModelAction::kMainEFieldNumber;
const int sModelAction::kMainEffFieldNumber;
const int sModelAction::kMain2SFieldNumber;
const int sModelAction::kMain2EFieldNumber;
const int sModelAction::kMain2EffFieldNumber;
const int sModelAction::kModelScaleFieldNumber;
const int sModelAction::kMonsterLeftSFieldNumber;
const int sModelAction::kMonsterLeftEFieldNumber;
const int sModelAction::kMonsterRightSFieldNumber;
const int sModelAction::kMonsterRightEFieldNumber;
const int sModelAction::kBossTurninSFieldNumber;
const int sModelAction::kBossTurninEFieldNumber;
const int sModelAction::kMonsterSkill1SFieldNumber;
const int sModelAction::kMonsterSkill1EFieldNumber;
const int sModelAction::kMonsterSkill2SFieldNumber;
const int sModelAction::kMonsterSkill2EFieldNumber;
const int sModelAction::kMonsterSkill3SFieldNumber;
const int sModelAction::kMonsterSkill3EFieldNumber;
const int sModelAction::kMonsterSkill4SFieldNumber;
const int sModelAction::kMonsterSkill4EFieldNumber;
const int sModelAction::kActorEffFieldNumber;
const int sModelAction::kLevelupSFieldNumber;
const int sModelAction::kLevelupEFieldNumber;
const int sModelAction::kLevelupEffFieldNumber;
const int sModelAction::kAholdSFieldNumber;
const int sModelAction::kAholdEFieldNumber;
const int sModelAction::kAholdEffFieldNumber;
const int sModelAction::kAmoveleftSFieldNumber;
const int sModelAction::kAmoveleftEFieldNumber;
const int sModelAction::kAmoveleftEffFieldNumber;
const int sModelAction::kAmoveleftstopSFieldNumber;
const int sModelAction::kAmoveleftstopEFieldNumber;
const int sModelAction::kAmoveleftstopEffFieldNumber;
const int sModelAction::kAmoveleftturnSFieldNumber;
const int sModelAction::kAmoveleftturnEFieldNumber;
const int sModelAction::kAmoveleftturnEffFieldNumber;
const int sModelAction::kAmoverightSFieldNumber;
const int sModelAction::kAmoverightEFieldNumber;
const int sModelAction::kAmoverightEffFieldNumber;
const int sModelAction::kAmoverightstopSFieldNumber;
const int sModelAction::kAmoverightstopEFieldNumber;
const int sModelAction::kAmoverightstopEffFieldNumber;
const int sModelAction::kAmoverightturnSFieldNumber;
const int sModelAction::kAmoverightturnEFieldNumber;
const int sModelAction::kAmoverightturnEffFieldNumber;
const int sModelAction::kTurnoutSFieldNumber;
const int sModelAction::kTurnoutEFieldNumber;
const int sModelAction::kTurnoutEffFieldNumber;
const int sModelAction::kTurnoutScaleFieldNumber;
const int sModelAction::kTurnoutDelayFieldNumber;
const int sModelAction::kAttack2SFieldNumber;
const int sModelAction::kAttack2EFieldNumber;
const int sModelAction::kVictorySFieldNumber;
const int sModelAction::kVictoryEFieldNumber;
const int sModelAction::kVictory2SFieldNumber;
const int sModelAction::kVictory2EFieldNumber;
const int sModelAction::kVictoryScaleFieldNumber;
#endif  // !_MSC_VER

sModelAction::sModelAction()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sModelAction::InitAsDefaultInstance() {
}

sModelAction::sModelAction(const sModelAction& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sModelAction::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  resources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hold_s_ = 0u;
  hold_e_ = 0u;
  hold_eff_ = 0u;
  moveleft_s_ = 0u;
  moveleft_e_ = 0u;
  moveleft_eff_ = 0u;
  moveleftstop_s_ = 0u;
  moveleftstop_e_ = 0u;
  moveleftstop_eff_ = 0u;
  moveleftturn_s_ = 0u;
  moveleftturn_e_ = 0u;
  moveleftturn_eff_ = 0u;
  moveright_s_ = 0u;
  moveright_e_ = 0u;
  moveright_eff_ = 0u;
  moverightstop_s_ = 0u;
  moverightstop_e_ = 0u;
  moverightstop_eff_ = 0u;
  moverightturn_s_ = 0u;
  moverightturn_e_ = 0u;
  moverightturn_eff_ = 0u;
  attack_s_ = 0u;
  attack_e_ = 0u;
  attack_eff_ = 0u;
  skillnormal_s_ = 0u;
  skillnormal_e_ = 0u;
  skillnormal_eff_ = 0u;
  skillsuper_s_ = 0u;
  skillsuper_e_ = 0u;
  skillsuper_eff_ = 0u;
  skill25_s_ = 0u;
  skill25_e_ = 0u;
  skill25_eff_ = 0u;
  skill50_s_ = 0u;
  skill50_e_ = 0u;
  skill50_eff_ = 0u;
  skill75_s_ = 0u;
  skill75_e_ = 0u;
  skill75_eff_ = 0u;
  skill100_s_ = 0u;
  skill100_e_ = 0u;
  skill100_eff_ = 0u;
  dead_s_ = 0u;
  dead_e_ = 0u;
  dead_eff_ = 0u;
  turnin_s_ = 0u;
  turnin_e_ = 0u;
  turnin_eff_ = 0u;
  turnin_scale_ = 0;
  main_s_ = 0u;
  main_e_ = 0u;
  main_eff_ = 0u;
  main2_s_ = 0u;
  main2_e_ = 0u;
  main2_eff_ = 0u;
  model_scale_ = 0;
  monster_left_s_ = 0u;
  monster_left_e_ = 0u;
  monster_right_s_ = 0u;
  monster_right_e_ = 0u;
  boss_turnin_s_ = 0u;
  boss_turnin_e_ = 0u;
  monster_skill1_s_ = 0u;
  monster_skill1_e_ = 0u;
  monster_skill2_s_ = 0u;
  monster_skill2_e_ = 0u;
  monster_skill3_s_ = 0u;
  monster_skill3_e_ = 0u;
  monster_skill4_s_ = 0u;
  monster_skill4_e_ = 0u;
  actor_eff_ = 0u;
  levelup_s_ = 0u;
  levelup_e_ = 0u;
  levelup_eff_ = 0u;
  ahold_s_ = 0u;
  ahold_e_ = 0u;
  ahold_eff_ = 0u;
  amoveleft_s_ = 0u;
  amoveleft_e_ = 0u;
  amoveleft_eff_ = 0u;
  amoveleftstop_s_ = 0u;
  amoveleftstop_e_ = 0u;
  amoveleftstop_eff_ = 0u;
  amoveleftturn_s_ = 0u;
  amoveleftturn_e_ = 0u;
  amoveleftturn_eff_ = 0u;
  amoveright_s_ = 0u;
  amoveright_e_ = 0u;
  amoveright_eff_ = 0u;
  amoverightstop_s_ = 0u;
  amoverightstop_e_ = 0u;
  amoverightstop_eff_ = 0u;
  amoverightturn_s_ = 0u;
  amoverightturn_e_ = 0u;
  amoverightturn_eff_ = 0u;
  turnout_s_ = 0u;
  turnout_e_ = 0u;
  turnout_eff_ = 0u;
  turnout_scale_ = 0;
  turnout_delay_ = 0;
  attack2_s_ = 0u;
  attack2_e_ = 0u;
  victory_s_ = 0u;
  victory_e_ = 0u;
  victory2_s_ = 0u;
  victory2_e_ = 0u;
  victory_scale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sModelAction::~sModelAction() {
  SharedDtor();
}

void sModelAction::SharedDtor() {
  if (resources_ != &::google::protobuf::internal::kEmptyString) {
    delete resources_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sModelAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sModelAction& sModelAction::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sModelAction* sModelAction::default_instance_ = NULL;

sModelAction* sModelAction::New() const {
  return new sModelAction;
}

void sModelAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_resources()) {
      if (resources_ != &::google::protobuf::internal::kEmptyString) {
        resources_->clear();
      }
    }
    hold_s_ = 0u;
    hold_e_ = 0u;
    hold_eff_ = 0u;
    moveleft_s_ = 0u;
    moveleft_e_ = 0u;
    moveleft_eff_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    moveleftstop_s_ = 0u;
    moveleftstop_e_ = 0u;
    moveleftstop_eff_ = 0u;
    moveleftturn_s_ = 0u;
    moveleftturn_e_ = 0u;
    moveleftturn_eff_ = 0u;
    moveright_s_ = 0u;
    moveright_e_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    moveright_eff_ = 0u;
    moverightstop_s_ = 0u;
    moverightstop_e_ = 0u;
    moverightstop_eff_ = 0u;
    moverightturn_s_ = 0u;
    moverightturn_e_ = 0u;
    moverightturn_eff_ = 0u;
    attack_s_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    attack_e_ = 0u;
    attack_eff_ = 0u;
    skillnormal_s_ = 0u;
    skillnormal_e_ = 0u;
    skillnormal_eff_ = 0u;
    skillsuper_s_ = 0u;
    skillsuper_e_ = 0u;
    skillsuper_eff_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    skill25_s_ = 0u;
    skill25_e_ = 0u;
    skill25_eff_ = 0u;
    skill50_s_ = 0u;
    skill50_e_ = 0u;
    skill50_eff_ = 0u;
    skill75_s_ = 0u;
    skill75_e_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    skill75_eff_ = 0u;
    skill100_s_ = 0u;
    skill100_e_ = 0u;
    skill100_eff_ = 0u;
    dead_s_ = 0u;
    dead_e_ = 0u;
    dead_eff_ = 0u;
    turnin_s_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    turnin_e_ = 0u;
    turnin_eff_ = 0u;
    turnin_scale_ = 0;
    main_s_ = 0u;
    main_e_ = 0u;
    main_eff_ = 0u;
    main2_s_ = 0u;
    main2_e_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    main2_eff_ = 0u;
    model_scale_ = 0;
    monster_left_s_ = 0u;
    monster_left_e_ = 0u;
    monster_right_s_ = 0u;
    monster_right_e_ = 0u;
    boss_turnin_s_ = 0u;
    boss_turnin_e_ = 0u;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    monster_skill1_s_ = 0u;
    monster_skill1_e_ = 0u;
    monster_skill2_s_ = 0u;
    monster_skill2_e_ = 0u;
    monster_skill3_s_ = 0u;
    monster_skill3_e_ = 0u;
    monster_skill4_s_ = 0u;
    monster_skill4_e_ = 0u;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    actor_eff_ = 0u;
    levelup_s_ = 0u;
    levelup_e_ = 0u;
    levelup_eff_ = 0u;
    ahold_s_ = 0u;
    ahold_e_ = 0u;
    ahold_eff_ = 0u;
    amoveleft_s_ = 0u;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    amoveleft_e_ = 0u;
    amoveleft_eff_ = 0u;
    amoveleftstop_s_ = 0u;
    amoveleftstop_e_ = 0u;
    amoveleftstop_eff_ = 0u;
    amoveleftturn_s_ = 0u;
    amoveleftturn_e_ = 0u;
    amoveleftturn_eff_ = 0u;
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    amoveright_s_ = 0u;
    amoveright_e_ = 0u;
    amoveright_eff_ = 0u;
    amoverightstop_s_ = 0u;
    amoverightstop_e_ = 0u;
    amoverightstop_eff_ = 0u;
    amoverightturn_s_ = 0u;
    amoverightturn_e_ = 0u;
  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    amoverightturn_eff_ = 0u;
    turnout_s_ = 0u;
    turnout_e_ = 0u;
    turnout_eff_ = 0u;
    turnout_scale_ = 0;
    turnout_delay_ = 0;
    attack2_s_ = 0u;
    attack2_e_ = 0u;
  }
  if (_has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    victory_s_ = 0u;
    victory_e_ = 0u;
    victory2_s_ = 0u;
    victory2_e_ = 0u;
    victory_scale_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sModelAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        break;
      }

      // optional string resources = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hold_s;
        break;
      }

      // optional uint32 hold_s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hold_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hold_s_)));
          set_has_hold_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hold_e;
        break;
      }

      // optional uint32 hold_e = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hold_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hold_e_)));
          set_has_hold_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hold_eff;
        break;
      }

      // optional uint32 hold_eff = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hold_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hold_eff_)));
          set_has_hold_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_moveleft_s;
        break;
      }

      // optional uint32 moveleft_s = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveleft_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveleft_s_)));
          set_has_moveleft_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_moveleft_e;
        break;
      }

      // optional uint32 moveleft_e = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveleft_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveleft_e_)));
          set_has_moveleft_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_moveleft_eff;
        break;
      }

      // optional uint32 moveleft_eff = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveleft_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveleft_eff_)));
          set_has_moveleft_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_moveleftstop_s;
        break;
      }

      // optional uint32 moveleftstop_s = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveleftstop_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveleftstop_s_)));
          set_has_moveleftstop_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_moveleftstop_e;
        break;
      }

      // optional uint32 moveleftstop_e = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveleftstop_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveleftstop_e_)));
          set_has_moveleftstop_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_moveleftstop_eff;
        break;
      }

      // optional uint32 moveleftstop_eff = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveleftstop_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveleftstop_eff_)));
          set_has_moveleftstop_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_moveleftturn_s;
        break;
      }

      // optional uint32 moveleftturn_s = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveleftturn_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveleftturn_s_)));
          set_has_moveleftturn_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_moveleftturn_e;
        break;
      }

      // optional uint32 moveleftturn_e = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveleftturn_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveleftturn_e_)));
          set_has_moveleftturn_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_moveleftturn_eff;
        break;
      }

      // optional uint32 moveleftturn_eff = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveleftturn_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveleftturn_eff_)));
          set_has_moveleftturn_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_moveright_s;
        break;
      }

      // optional uint32 moveright_s = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveright_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveright_s_)));
          set_has_moveright_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_moveright_e;
        break;
      }

      // optional uint32 moveright_e = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveright_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveright_e_)));
          set_has_moveright_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_moveright_eff;
        break;
      }

      // optional uint32 moveright_eff = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveright_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moveright_eff_)));
          set_has_moveright_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_moverightstop_s;
        break;
      }

      // optional uint32 moverightstop_s = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moverightstop_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moverightstop_s_)));
          set_has_moverightstop_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_moverightstop_e;
        break;
      }

      // optional uint32 moverightstop_e = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moverightstop_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moverightstop_e_)));
          set_has_moverightstop_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_moverightstop_eff;
        break;
      }

      // optional uint32 moverightstop_eff = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moverightstop_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moverightstop_eff_)));
          set_has_moverightstop_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_moverightturn_s;
        break;
      }

      // optional uint32 moverightturn_s = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moverightturn_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moverightturn_s_)));
          set_has_moverightturn_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_moverightturn_e;
        break;
      }

      // optional uint32 moverightturn_e = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moverightturn_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moverightturn_e_)));
          set_has_moverightturn_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_moverightturn_eff;
        break;
      }

      // optional uint32 moverightturn_eff = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moverightturn_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moverightturn_eff_)));
          set_has_moverightturn_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_attack_s;
        break;
      }

      // optional uint32 attack_s = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_s_)));
          set_has_attack_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_attack_e;
        break;
      }

      // optional uint32 attack_e = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_e_)));
          set_has_attack_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_attack_eff;
        break;
      }

      // optional uint32 attack_eff = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_eff_)));
          set_has_attack_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_skillnormal_s;
        break;
      }

      // optional uint32 skillnormal_s = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillnormal_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillnormal_s_)));
          set_has_skillnormal_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_skillnormal_e;
        break;
      }

      // optional uint32 skillnormal_e = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillnormal_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillnormal_e_)));
          set_has_skillnormal_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_skillnormal_eff;
        break;
      }

      // optional uint32 skillnormal_eff = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillnormal_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillnormal_eff_)));
          set_has_skillnormal_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_skillsuper_s;
        break;
      }

      // optional uint32 skillsuper_s = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillsuper_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillsuper_s_)));
          set_has_skillsuper_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_skillsuper_e;
        break;
      }

      // optional uint32 skillsuper_e = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillsuper_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillsuper_e_)));
          set_has_skillsuper_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_skillsuper_eff;
        break;
      }

      // optional uint32 skillsuper_eff = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillsuper_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillsuper_eff_)));
          set_has_skillsuper_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_skill25_s;
        break;
      }

      // optional uint32 skill25_s = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill25_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill25_s_)));
          set_has_skill25_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_skill25_e;
        break;
      }

      // optional uint32 skill25_e = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill25_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill25_e_)));
          set_has_skill25_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_skill25_eff;
        break;
      }

      // optional uint32 skill25_eff = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill25_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill25_eff_)));
          set_has_skill25_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_skill50_s;
        break;
      }

      // optional uint32 skill50_s = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill50_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill50_s_)));
          set_has_skill50_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_skill50_e;
        break;
      }

      // optional uint32 skill50_e = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill50_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill50_e_)));
          set_has_skill50_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_skill50_eff;
        break;
      }

      // optional uint32 skill50_eff = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill50_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill50_eff_)));
          set_has_skill50_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_skill75_s;
        break;
      }

      // optional uint32 skill75_s = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill75_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill75_s_)));
          set_has_skill75_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_skill75_e;
        break;
      }

      // optional uint32 skill75_e = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill75_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill75_e_)));
          set_has_skill75_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_skill75_eff;
        break;
      }

      // optional uint32 skill75_eff = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill75_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill75_eff_)));
          set_has_skill75_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_skill100_s;
        break;
      }

      // optional uint32 skill100_s = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill100_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill100_s_)));
          set_has_skill100_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_skill100_e;
        break;
      }

      // optional uint32 skill100_e = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill100_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill100_e_)));
          set_has_skill100_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_skill100_eff;
        break;
      }

      // optional uint32 skill100_eff = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill100_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill100_eff_)));
          set_has_skill100_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_dead_s;
        break;
      }

      // optional uint32 dead_s = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_s_)));
          set_has_dead_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_dead_e;
        break;
      }

      // optional uint32 dead_e = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_e_)));
          set_has_dead_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_dead_eff;
        break;
      }

      // optional uint32 dead_eff = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_eff_)));
          set_has_dead_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_turnin_s;
        break;
      }

      // optional uint32 turnin_s = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnin_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turnin_s_)));
          set_has_turnin_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_turnin_e;
        break;
      }

      // optional uint32 turnin_e = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnin_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turnin_e_)));
          set_has_turnin_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_turnin_eff;
        break;
      }

      // optional uint32 turnin_eff = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnin_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turnin_eff_)));
          set_has_turnin_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(413)) goto parse_turnin_scale;
        break;
      }

      // optional float turnin_scale = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_turnin_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnin_scale_)));
          set_has_turnin_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_main_s;
        break;
      }

      // optional uint32 main_s = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main_s_)));
          set_has_main_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_main_e;
        break;
      }

      // optional uint32 main_e = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main_e_)));
          set_has_main_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_main_eff;
        break;
      }

      // optional uint32 main_eff = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main_eff_)));
          set_has_main_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_main2_s;
        break;
      }

      // optional uint32 main2_s = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main2_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main2_s_)));
          set_has_main2_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_main2_e;
        break;
      }

      // optional uint32 main2_e = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main2_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main2_e_)));
          set_has_main2_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_main2_eff;
        break;
      }

      // optional uint32 main2_eff = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main2_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main2_eff_)));
          set_has_main2_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(469)) goto parse_model_scale;
        break;
      }

      // optional float model_scale = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_model_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &model_scale_)));
          set_has_model_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_monster_left_s;
        break;
      }

      // optional uint32 monster_left_s = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_left_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_left_s_)));
          set_has_monster_left_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_monster_left_e;
        break;
      }

      // optional uint32 monster_left_e = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_left_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_left_e_)));
          set_has_monster_left_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_monster_right_s;
        break;
      }

      // optional uint32 monster_right_s = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_right_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_right_s_)));
          set_has_monster_right_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_monster_right_e;
        break;
      }

      // optional uint32 monster_right_e = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_right_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_right_e_)));
          set_has_monster_right_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_boss_turnin_s;
        break;
      }

      // optional uint32 boss_turnin_s = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_turnin_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_turnin_s_)));
          set_has_boss_turnin_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_boss_turnin_e;
        break;
      }

      // optional uint32 boss_turnin_e = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_turnin_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_turnin_e_)));
          set_has_boss_turnin_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_monster_skill1_s;
        break;
      }

      // optional uint32 monster_skill1_s = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_skill1_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_skill1_s_)));
          set_has_monster_skill1_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_monster_skill1_e;
        break;
      }

      // optional uint32 monster_skill1_e = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_skill1_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_skill1_e_)));
          set_has_monster_skill1_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_monster_skill2_s;
        break;
      }

      // optional uint32 monster_skill2_s = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_skill2_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_skill2_s_)));
          set_has_monster_skill2_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_monster_skill2_e;
        break;
      }

      // optional uint32 monster_skill2_e = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_skill2_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_skill2_e_)));
          set_has_monster_skill2_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_monster_skill3_s;
        break;
      }

      // optional uint32 monster_skill3_s = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_skill3_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_skill3_s_)));
          set_has_monster_skill3_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_monster_skill3_e;
        break;
      }

      // optional uint32 monster_skill3_e = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_skill3_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_skill3_e_)));
          set_has_monster_skill3_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_actor_eff;
        break;
      }

      // optional uint32 actor_eff = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actor_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actor_eff_)));
          set_has_actor_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_levelup_s;
        break;
      }

      // optional uint32 levelup_s = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelup_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelup_s_)));
          set_has_levelup_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_levelup_e;
        break;
      }

      // optional uint32 levelup_e = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelup_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelup_e_)));
          set_has_levelup_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_levelup_eff;
        break;
      }

      // optional uint32 levelup_eff = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelup_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelup_eff_)));
          set_has_levelup_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_ahold_s;
        break;
      }

      // optional uint32 ahold_s = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ahold_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ahold_s_)));
          set_has_ahold_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_ahold_e;
        break;
      }

      // optional uint32 ahold_e = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ahold_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ahold_e_)));
          set_has_ahold_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_ahold_eff;
        break;
      }

      // optional uint32 ahold_eff = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ahold_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ahold_eff_)));
          set_has_ahold_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_amoveleft_s;
        break;
      }

      // optional uint32 amoveleft_s = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoveleft_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoveleft_s_)));
          set_has_amoveleft_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(632)) goto parse_amoveleft_e;
        break;
      }

      // optional uint32 amoveleft_e = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoveleft_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoveleft_e_)));
          set_has_amoveleft_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_amoveleft_eff;
        break;
      }

      // optional uint32 amoveleft_eff = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoveleft_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoveleft_eff_)));
          set_has_amoveleft_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_amoveleftstop_s;
        break;
      }

      // optional uint32 amoveleftstop_s = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoveleftstop_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoveleftstop_s_)));
          set_has_amoveleftstop_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_amoveleftstop_e;
        break;
      }

      // optional uint32 amoveleftstop_e = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoveleftstop_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoveleftstop_e_)));
          set_has_amoveleftstop_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_amoveleftstop_eff;
        break;
      }

      // optional uint32 amoveleftstop_eff = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoveleftstop_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoveleftstop_eff_)));
          set_has_amoveleftstop_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(672)) goto parse_amoveleftturn_s;
        break;
      }

      // optional uint32 amoveleftturn_s = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoveleftturn_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoveleftturn_s_)));
          set_has_amoveleftturn_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(680)) goto parse_amoveleftturn_e;
        break;
      }

      // optional uint32 amoveleftturn_e = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoveleftturn_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoveleftturn_e_)));
          set_has_amoveleftturn_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(688)) goto parse_amoveleftturn_eff;
        break;
      }

      // optional uint32 amoveleftturn_eff = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoveleftturn_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoveleftturn_eff_)));
          set_has_amoveleftturn_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(696)) goto parse_amoveright_s;
        break;
      }

      // optional uint32 amoveright_s = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoveright_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoveright_s_)));
          set_has_amoveright_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(704)) goto parse_amoveright_e;
        break;
      }

      // optional uint32 amoveright_e = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoveright_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoveright_e_)));
          set_has_amoveright_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(712)) goto parse_amoveright_eff;
        break;
      }

      // optional uint32 amoveright_eff = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoveright_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoveright_eff_)));
          set_has_amoveright_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_amoverightstop_s;
        break;
      }

      // optional uint32 amoverightstop_s = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoverightstop_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoverightstop_s_)));
          set_has_amoverightstop_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(728)) goto parse_amoverightstop_e;
        break;
      }

      // optional uint32 amoverightstop_e = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoverightstop_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoverightstop_e_)));
          set_has_amoverightstop_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(736)) goto parse_amoverightstop_eff;
        break;
      }

      // optional uint32 amoverightstop_eff = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoverightstop_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoverightstop_eff_)));
          set_has_amoverightstop_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(744)) goto parse_amoverightturn_s;
        break;
      }

      // optional uint32 amoverightturn_s = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoverightturn_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoverightturn_s_)));
          set_has_amoverightturn_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(752)) goto parse_amoverightturn_e;
        break;
      }

      // optional uint32 amoverightturn_e = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoverightturn_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoverightturn_e_)));
          set_has_amoverightturn_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(760)) goto parse_amoverightturn_eff;
        break;
      }

      // optional uint32 amoverightturn_eff = 95;
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amoverightturn_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amoverightturn_eff_)));
          set_has_amoverightturn_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(768)) goto parse_monster_skill4_s;
        break;
      }

      // optional uint32 monster_skill4_s = 96;
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_skill4_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_skill4_s_)));
          set_has_monster_skill4_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(776)) goto parse_monster_skill4_e;
        break;
      }

      // optional uint32 monster_skill4_e = 97;
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_skill4_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_skill4_e_)));
          set_has_monster_skill4_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(784)) goto parse_turnout_s;
        break;
      }

      // optional uint32 turnout_s = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnout_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turnout_s_)));
          set_has_turnout_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(792)) goto parse_turnout_e;
        break;
      }

      // optional uint32 turnout_e = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnout_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turnout_e_)));
          set_has_turnout_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_turnout_eff;
        break;
      }

      // optional uint32 turnout_eff = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnout_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turnout_eff_)));
          set_has_turnout_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(813)) goto parse_turnout_scale;
        break;
      }

      // optional float turnout_scale = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_turnout_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnout_scale_)));
          set_has_turnout_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(821)) goto parse_turnout_delay;
        break;
      }

      // optional float turnout_delay = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_turnout_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnout_delay_)));
          set_has_turnout_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_attack2_s;
        break;
      }

      // optional uint32 attack2_s = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack2_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack2_s_)));
          set_has_attack2_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(832)) goto parse_attack2_e;
        break;
      }

      // optional uint32 attack2_e = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack2_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack2_e_)));
          set_has_attack2_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(840)) goto parse_victory_s;
        break;
      }

      // optional uint32 victory_s = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victory_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victory_s_)));
          set_has_victory_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(848)) goto parse_victory_e;
        break;
      }

      // optional uint32 victory_e = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victory_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victory_e_)));
          set_has_victory_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(856)) goto parse_victory2_s;
        break;
      }

      // optional uint32 victory2_s = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victory2_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victory2_s_)));
          set_has_victory2_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(864)) goto parse_victory2_e;
        break;
      }

      // optional uint32 victory2_e = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victory2_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victory2_e_)));
          set_has_victory2_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(877)) goto parse_victory_scale;
        break;
      }

      // optional float victory_scale = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_victory_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &victory_scale_)));
          set_has_victory_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sModelAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string resources = 2;
  if (has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resources(), output);
  }

  // optional uint32 hold_s = 3;
  if (has_hold_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hold_s(), output);
  }

  // optional uint32 hold_e = 4;
  if (has_hold_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hold_e(), output);
  }

  // optional uint32 hold_eff = 5;
  if (has_hold_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hold_eff(), output);
  }

  // optional uint32 moveleft_s = 6;
  if (has_moveleft_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->moveleft_s(), output);
  }

  // optional uint32 moveleft_e = 7;
  if (has_moveleft_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->moveleft_e(), output);
  }

  // optional uint32 moveleft_eff = 8;
  if (has_moveleft_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->moveleft_eff(), output);
  }

  // optional uint32 moveleftstop_s = 9;
  if (has_moveleftstop_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->moveleftstop_s(), output);
  }

  // optional uint32 moveleftstop_e = 10;
  if (has_moveleftstop_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->moveleftstop_e(), output);
  }

  // optional uint32 moveleftstop_eff = 11;
  if (has_moveleftstop_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->moveleftstop_eff(), output);
  }

  // optional uint32 moveleftturn_s = 12;
  if (has_moveleftturn_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->moveleftturn_s(), output);
  }

  // optional uint32 moveleftturn_e = 13;
  if (has_moveleftturn_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->moveleftturn_e(), output);
  }

  // optional uint32 moveleftturn_eff = 14;
  if (has_moveleftturn_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->moveleftturn_eff(), output);
  }

  // optional uint32 moveright_s = 15;
  if (has_moveright_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->moveright_s(), output);
  }

  // optional uint32 moveright_e = 16;
  if (has_moveright_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->moveright_e(), output);
  }

  // optional uint32 moveright_eff = 17;
  if (has_moveright_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->moveright_eff(), output);
  }

  // optional uint32 moverightstop_s = 18;
  if (has_moverightstop_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->moverightstop_s(), output);
  }

  // optional uint32 moverightstop_e = 19;
  if (has_moverightstop_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->moverightstop_e(), output);
  }

  // optional uint32 moverightstop_eff = 20;
  if (has_moverightstop_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->moverightstop_eff(), output);
  }

  // optional uint32 moverightturn_s = 21;
  if (has_moverightturn_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->moverightturn_s(), output);
  }

  // optional uint32 moverightturn_e = 22;
  if (has_moverightturn_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->moverightturn_e(), output);
  }

  // optional uint32 moverightturn_eff = 23;
  if (has_moverightturn_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->moverightturn_eff(), output);
  }

  // optional uint32 attack_s = 24;
  if (has_attack_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->attack_s(), output);
  }

  // optional uint32 attack_e = 25;
  if (has_attack_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->attack_e(), output);
  }

  // optional uint32 attack_eff = 26;
  if (has_attack_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->attack_eff(), output);
  }

  // optional uint32 skillnormal_s = 27;
  if (has_skillnormal_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->skillnormal_s(), output);
  }

  // optional uint32 skillnormal_e = 28;
  if (has_skillnormal_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->skillnormal_e(), output);
  }

  // optional uint32 skillnormal_eff = 29;
  if (has_skillnormal_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->skillnormal_eff(), output);
  }

  // optional uint32 skillsuper_s = 30;
  if (has_skillsuper_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->skillsuper_s(), output);
  }

  // optional uint32 skillsuper_e = 31;
  if (has_skillsuper_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->skillsuper_e(), output);
  }

  // optional uint32 skillsuper_eff = 32;
  if (has_skillsuper_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->skillsuper_eff(), output);
  }

  // optional uint32 skill25_s = 33;
  if (has_skill25_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->skill25_s(), output);
  }

  // optional uint32 skill25_e = 34;
  if (has_skill25_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->skill25_e(), output);
  }

  // optional uint32 skill25_eff = 35;
  if (has_skill25_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->skill25_eff(), output);
  }

  // optional uint32 skill50_s = 36;
  if (has_skill50_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->skill50_s(), output);
  }

  // optional uint32 skill50_e = 37;
  if (has_skill50_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->skill50_e(), output);
  }

  // optional uint32 skill50_eff = 38;
  if (has_skill50_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->skill50_eff(), output);
  }

  // optional uint32 skill75_s = 39;
  if (has_skill75_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->skill75_s(), output);
  }

  // optional uint32 skill75_e = 40;
  if (has_skill75_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->skill75_e(), output);
  }

  // optional uint32 skill75_eff = 41;
  if (has_skill75_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->skill75_eff(), output);
  }

  // optional uint32 skill100_s = 42;
  if (has_skill100_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->skill100_s(), output);
  }

  // optional uint32 skill100_e = 43;
  if (has_skill100_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->skill100_e(), output);
  }

  // optional uint32 skill100_eff = 44;
  if (has_skill100_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->skill100_eff(), output);
  }

  // optional uint32 dead_s = 45;
  if (has_dead_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->dead_s(), output);
  }

  // optional uint32 dead_e = 46;
  if (has_dead_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->dead_e(), output);
  }

  // optional uint32 dead_eff = 47;
  if (has_dead_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->dead_eff(), output);
  }

  // optional uint32 turnin_s = 48;
  if (has_turnin_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->turnin_s(), output);
  }

  // optional uint32 turnin_e = 49;
  if (has_turnin_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->turnin_e(), output);
  }

  // optional uint32 turnin_eff = 50;
  if (has_turnin_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->turnin_eff(), output);
  }

  // optional float turnin_scale = 51;
  if (has_turnin_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->turnin_scale(), output);
  }

  // optional uint32 main_s = 52;
  if (has_main_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->main_s(), output);
  }

  // optional uint32 main_e = 53;
  if (has_main_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->main_e(), output);
  }

  // optional uint32 main_eff = 54;
  if (has_main_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->main_eff(), output);
  }

  // optional uint32 main2_s = 55;
  if (has_main2_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->main2_s(), output);
  }

  // optional uint32 main2_e = 56;
  if (has_main2_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->main2_e(), output);
  }

  // optional uint32 main2_eff = 57;
  if (has_main2_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->main2_eff(), output);
  }

  // optional float model_scale = 58;
  if (has_model_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(58, this->model_scale(), output);
  }

  // optional uint32 monster_left_s = 59;
  if (has_monster_left_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->monster_left_s(), output);
  }

  // optional uint32 monster_left_e = 60;
  if (has_monster_left_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->monster_left_e(), output);
  }

  // optional uint32 monster_right_s = 61;
  if (has_monster_right_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->monster_right_s(), output);
  }

  // optional uint32 monster_right_e = 62;
  if (has_monster_right_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->monster_right_e(), output);
  }

  // optional uint32 boss_turnin_s = 63;
  if (has_boss_turnin_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->boss_turnin_s(), output);
  }

  // optional uint32 boss_turnin_e = 64;
  if (has_boss_turnin_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->boss_turnin_e(), output);
  }

  // optional uint32 monster_skill1_s = 65;
  if (has_monster_skill1_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->monster_skill1_s(), output);
  }

  // optional uint32 monster_skill1_e = 66;
  if (has_monster_skill1_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->monster_skill1_e(), output);
  }

  // optional uint32 monster_skill2_s = 67;
  if (has_monster_skill2_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->monster_skill2_s(), output);
  }

  // optional uint32 monster_skill2_e = 68;
  if (has_monster_skill2_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->monster_skill2_e(), output);
  }

  // optional uint32 monster_skill3_s = 69;
  if (has_monster_skill3_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(69, this->monster_skill3_s(), output);
  }

  // optional uint32 monster_skill3_e = 70;
  if (has_monster_skill3_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->monster_skill3_e(), output);
  }

  // optional uint32 actor_eff = 71;
  if (has_actor_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->actor_eff(), output);
  }

  // optional uint32 levelup_s = 72;
  if (has_levelup_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->levelup_s(), output);
  }

  // optional uint32 levelup_e = 73;
  if (has_levelup_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(73, this->levelup_e(), output);
  }

  // optional uint32 levelup_eff = 74;
  if (has_levelup_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->levelup_eff(), output);
  }

  // optional uint32 ahold_s = 75;
  if (has_ahold_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->ahold_s(), output);
  }

  // optional uint32 ahold_e = 76;
  if (has_ahold_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->ahold_e(), output);
  }

  // optional uint32 ahold_eff = 77;
  if (has_ahold_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(77, this->ahold_eff(), output);
  }

  // optional uint32 amoveleft_s = 78;
  if (has_amoveleft_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->amoveleft_s(), output);
  }

  // optional uint32 amoveleft_e = 79;
  if (has_amoveleft_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->amoveleft_e(), output);
  }

  // optional uint32 amoveleft_eff = 80;
  if (has_amoveleft_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->amoveleft_eff(), output);
  }

  // optional uint32 amoveleftstop_s = 81;
  if (has_amoveleftstop_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(81, this->amoveleftstop_s(), output);
  }

  // optional uint32 amoveleftstop_e = 82;
  if (has_amoveleftstop_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->amoveleftstop_e(), output);
  }

  // optional uint32 amoveleftstop_eff = 83;
  if (has_amoveleftstop_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(83, this->amoveleftstop_eff(), output);
  }

  // optional uint32 amoveleftturn_s = 84;
  if (has_amoveleftturn_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(84, this->amoveleftturn_s(), output);
  }

  // optional uint32 amoveleftturn_e = 85;
  if (has_amoveleftturn_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(85, this->amoveleftturn_e(), output);
  }

  // optional uint32 amoveleftturn_eff = 86;
  if (has_amoveleftturn_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->amoveleftturn_eff(), output);
  }

  // optional uint32 amoveright_s = 87;
  if (has_amoveright_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(87, this->amoveright_s(), output);
  }

  // optional uint32 amoveright_e = 88;
  if (has_amoveright_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(88, this->amoveright_e(), output);
  }

  // optional uint32 amoveright_eff = 89;
  if (has_amoveright_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(89, this->amoveright_eff(), output);
  }

  // optional uint32 amoverightstop_s = 90;
  if (has_amoverightstop_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->amoverightstop_s(), output);
  }

  // optional uint32 amoverightstop_e = 91;
  if (has_amoverightstop_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(91, this->amoverightstop_e(), output);
  }

  // optional uint32 amoverightstop_eff = 92;
  if (has_amoverightstop_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(92, this->amoverightstop_eff(), output);
  }

  // optional uint32 amoverightturn_s = 93;
  if (has_amoverightturn_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(93, this->amoverightturn_s(), output);
  }

  // optional uint32 amoverightturn_e = 94;
  if (has_amoverightturn_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(94, this->amoverightturn_e(), output);
  }

  // optional uint32 amoverightturn_eff = 95;
  if (has_amoverightturn_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(95, this->amoverightturn_eff(), output);
  }

  // optional uint32 monster_skill4_s = 96;
  if (has_monster_skill4_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(96, this->monster_skill4_s(), output);
  }

  // optional uint32 monster_skill4_e = 97;
  if (has_monster_skill4_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(97, this->monster_skill4_e(), output);
  }

  // optional uint32 turnout_s = 98;
  if (has_turnout_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(98, this->turnout_s(), output);
  }

  // optional uint32 turnout_e = 99;
  if (has_turnout_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(99, this->turnout_e(), output);
  }

  // optional uint32 turnout_eff = 100;
  if (has_turnout_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(100, this->turnout_eff(), output);
  }

  // optional float turnout_scale = 101;
  if (has_turnout_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(101, this->turnout_scale(), output);
  }

  // optional float turnout_delay = 102;
  if (has_turnout_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(102, this->turnout_delay(), output);
  }

  // optional uint32 attack2_s = 103;
  if (has_attack2_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(103, this->attack2_s(), output);
  }

  // optional uint32 attack2_e = 104;
  if (has_attack2_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(104, this->attack2_e(), output);
  }

  // optional uint32 victory_s = 105;
  if (has_victory_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(105, this->victory_s(), output);
  }

  // optional uint32 victory_e = 106;
  if (has_victory_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(106, this->victory_e(), output);
  }

  // optional uint32 victory2_s = 107;
  if (has_victory2_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(107, this->victory2_s(), output);
  }

  // optional uint32 victory2_e = 108;
  if (has_victory2_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(108, this->victory2_e(), output);
  }

  // optional float victory_scale = 109;
  if (has_victory_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(109, this->victory_scale(), output);
  }

}

int sModelAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string resources = 2;
    if (has_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resources());
    }

    // optional uint32 hold_s = 3;
    if (has_hold_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hold_s());
    }

    // optional uint32 hold_e = 4;
    if (has_hold_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hold_e());
    }

    // optional uint32 hold_eff = 5;
    if (has_hold_eff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hold_eff());
    }

    // optional uint32 moveleft_s = 6;
    if (has_moveleft_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveleft_s());
    }

    // optional uint32 moveleft_e = 7;
    if (has_moveleft_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveleft_e());
    }

    // optional uint32 moveleft_eff = 8;
    if (has_moveleft_eff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveleft_eff());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 moveleftstop_s = 9;
    if (has_moveleftstop_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveleftstop_s());
    }

    // optional uint32 moveleftstop_e = 10;
    if (has_moveleftstop_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveleftstop_e());
    }

    // optional uint32 moveleftstop_eff = 11;
    if (has_moveleftstop_eff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveleftstop_eff());
    }

    // optional uint32 moveleftturn_s = 12;
    if (has_moveleftturn_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveleftturn_s());
    }

    // optional uint32 moveleftturn_e = 13;
    if (has_moveleftturn_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveleftturn_e());
    }

    // optional uint32 moveleftturn_eff = 14;
    if (has_moveleftturn_eff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveleftturn_eff());
    }

    // optional uint32 moveright_s = 15;
    if (has_moveright_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveright_s());
    }

    // optional uint32 moveright_e = 16;
    if (has_moveright_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveright_e());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 moveright_eff = 17;
    if (has_moveright_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moveright_eff());
    }

    // optional uint32 moverightstop_s = 18;
    if (has_moverightstop_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moverightstop_s());
    }

    // optional uint32 moverightstop_e = 19;
    if (has_moverightstop_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moverightstop_e());
    }

    // optional uint32 moverightstop_eff = 20;
    if (has_moverightstop_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moverightstop_eff());
    }

    // optional uint32 moverightturn_s = 21;
    if (has_moverightturn_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moverightturn_s());
    }

    // optional uint32 moverightturn_e = 22;
    if (has_moverightturn_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moverightturn_e());
    }

    // optional uint32 moverightturn_eff = 23;
    if (has_moverightturn_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moverightturn_eff());
    }

    // optional uint32 attack_s = 24;
    if (has_attack_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_s());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 attack_e = 25;
    if (has_attack_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_e());
    }

    // optional uint32 attack_eff = 26;
    if (has_attack_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_eff());
    }

    // optional uint32 skillnormal_s = 27;
    if (has_skillnormal_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillnormal_s());
    }

    // optional uint32 skillnormal_e = 28;
    if (has_skillnormal_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillnormal_e());
    }

    // optional uint32 skillnormal_eff = 29;
    if (has_skillnormal_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillnormal_eff());
    }

    // optional uint32 skillsuper_s = 30;
    if (has_skillsuper_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillsuper_s());
    }

    // optional uint32 skillsuper_e = 31;
    if (has_skillsuper_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillsuper_e());
    }

    // optional uint32 skillsuper_eff = 32;
    if (has_skillsuper_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillsuper_eff());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 skill25_s = 33;
    if (has_skill25_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill25_s());
    }

    // optional uint32 skill25_e = 34;
    if (has_skill25_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill25_e());
    }

    // optional uint32 skill25_eff = 35;
    if (has_skill25_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill25_eff());
    }

    // optional uint32 skill50_s = 36;
    if (has_skill50_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill50_s());
    }

    // optional uint32 skill50_e = 37;
    if (has_skill50_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill50_e());
    }

    // optional uint32 skill50_eff = 38;
    if (has_skill50_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill50_eff());
    }

    // optional uint32 skill75_s = 39;
    if (has_skill75_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill75_s());
    }

    // optional uint32 skill75_e = 40;
    if (has_skill75_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill75_e());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 skill75_eff = 41;
    if (has_skill75_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill75_eff());
    }

    // optional uint32 skill100_s = 42;
    if (has_skill100_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill100_s());
    }

    // optional uint32 skill100_e = 43;
    if (has_skill100_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill100_e());
    }

    // optional uint32 skill100_eff = 44;
    if (has_skill100_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill100_eff());
    }

    // optional uint32 dead_s = 45;
    if (has_dead_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_s());
    }

    // optional uint32 dead_e = 46;
    if (has_dead_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_e());
    }

    // optional uint32 dead_eff = 47;
    if (has_dead_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_eff());
    }

    // optional uint32 turnin_s = 48;
    if (has_turnin_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turnin_s());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 turnin_e = 49;
    if (has_turnin_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turnin_e());
    }

    // optional uint32 turnin_eff = 50;
    if (has_turnin_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turnin_eff());
    }

    // optional float turnin_scale = 51;
    if (has_turnin_scale()) {
      total_size += 2 + 4;
    }

    // optional uint32 main_s = 52;
    if (has_main_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main_s());
    }

    // optional uint32 main_e = 53;
    if (has_main_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main_e());
    }

    // optional uint32 main_eff = 54;
    if (has_main_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main_eff());
    }

    // optional uint32 main2_s = 55;
    if (has_main2_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main2_s());
    }

    // optional uint32 main2_e = 56;
    if (has_main2_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main2_e());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 main2_eff = 57;
    if (has_main2_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main2_eff());
    }

    // optional float model_scale = 58;
    if (has_model_scale()) {
      total_size += 2 + 4;
    }

    // optional uint32 monster_left_s = 59;
    if (has_monster_left_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_left_s());
    }

    // optional uint32 monster_left_e = 60;
    if (has_monster_left_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_left_e());
    }

    // optional uint32 monster_right_s = 61;
    if (has_monster_right_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_right_s());
    }

    // optional uint32 monster_right_e = 62;
    if (has_monster_right_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_right_e());
    }

    // optional uint32 boss_turnin_s = 63;
    if (has_boss_turnin_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_turnin_s());
    }

    // optional uint32 boss_turnin_e = 64;
    if (has_boss_turnin_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_turnin_e());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint32 monster_skill1_s = 65;
    if (has_monster_skill1_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_skill1_s());
    }

    // optional uint32 monster_skill1_e = 66;
    if (has_monster_skill1_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_skill1_e());
    }

    // optional uint32 monster_skill2_s = 67;
    if (has_monster_skill2_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_skill2_s());
    }

    // optional uint32 monster_skill2_e = 68;
    if (has_monster_skill2_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_skill2_e());
    }

    // optional uint32 monster_skill3_s = 69;
    if (has_monster_skill3_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_skill3_s());
    }

    // optional uint32 monster_skill3_e = 70;
    if (has_monster_skill3_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_skill3_e());
    }

    // optional uint32 monster_skill4_s = 96;
    if (has_monster_skill4_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_skill4_s());
    }

    // optional uint32 monster_skill4_e = 97;
    if (has_monster_skill4_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_skill4_e());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional uint32 actor_eff = 71;
    if (has_actor_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actor_eff());
    }

    // optional uint32 levelup_s = 72;
    if (has_levelup_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelup_s());
    }

    // optional uint32 levelup_e = 73;
    if (has_levelup_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelup_e());
    }

    // optional uint32 levelup_eff = 74;
    if (has_levelup_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelup_eff());
    }

    // optional uint32 ahold_s = 75;
    if (has_ahold_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ahold_s());
    }

    // optional uint32 ahold_e = 76;
    if (has_ahold_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ahold_e());
    }

    // optional uint32 ahold_eff = 77;
    if (has_ahold_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ahold_eff());
    }

    // optional uint32 amoveleft_s = 78;
    if (has_amoveleft_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoveleft_s());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional uint32 amoveleft_e = 79;
    if (has_amoveleft_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoveleft_e());
    }

    // optional uint32 amoveleft_eff = 80;
    if (has_amoveleft_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoveleft_eff());
    }

    // optional uint32 amoveleftstop_s = 81;
    if (has_amoveleftstop_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoveleftstop_s());
    }

    // optional uint32 amoveleftstop_e = 82;
    if (has_amoveleftstop_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoveleftstop_e());
    }

    // optional uint32 amoveleftstop_eff = 83;
    if (has_amoveleftstop_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoveleftstop_eff());
    }

    // optional uint32 amoveleftturn_s = 84;
    if (has_amoveleftturn_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoveleftturn_s());
    }

    // optional uint32 amoveleftturn_e = 85;
    if (has_amoveleftturn_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoveleftturn_e());
    }

    // optional uint32 amoveleftturn_eff = 86;
    if (has_amoveleftturn_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoveleftturn_eff());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional uint32 amoveright_s = 87;
    if (has_amoveright_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoveright_s());
    }

    // optional uint32 amoveright_e = 88;
    if (has_amoveright_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoveright_e());
    }

    // optional uint32 amoveright_eff = 89;
    if (has_amoveright_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoveright_eff());
    }

    // optional uint32 amoverightstop_s = 90;
    if (has_amoverightstop_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoverightstop_s());
    }

    // optional uint32 amoverightstop_e = 91;
    if (has_amoverightstop_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoverightstop_e());
    }

    // optional uint32 amoverightstop_eff = 92;
    if (has_amoverightstop_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoverightstop_eff());
    }

    // optional uint32 amoverightturn_s = 93;
    if (has_amoverightturn_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoverightturn_s());
    }

    // optional uint32 amoverightturn_e = 94;
    if (has_amoverightturn_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoverightturn_e());
    }

  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    // optional uint32 amoverightturn_eff = 95;
    if (has_amoverightturn_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amoverightturn_eff());
    }

    // optional uint32 turnout_s = 98;
    if (has_turnout_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turnout_s());
    }

    // optional uint32 turnout_e = 99;
    if (has_turnout_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turnout_e());
    }

    // optional uint32 turnout_eff = 100;
    if (has_turnout_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turnout_eff());
    }

    // optional float turnout_scale = 101;
    if (has_turnout_scale()) {
      total_size += 2 + 4;
    }

    // optional float turnout_delay = 102;
    if (has_turnout_delay()) {
      total_size += 2 + 4;
    }

    // optional uint32 attack2_s = 103;
    if (has_attack2_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack2_s());
    }

    // optional uint32 attack2_e = 104;
    if (has_attack2_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack2_e());
    }

  }
  if (_has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    // optional uint32 victory_s = 105;
    if (has_victory_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victory_s());
    }

    // optional uint32 victory_e = 106;
    if (has_victory_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victory_e());
    }

    // optional uint32 victory2_s = 107;
    if (has_victory2_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victory2_s());
    }

    // optional uint32 victory2_e = 108;
    if (has_victory2_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victory2_e());
    }

    // optional float victory_scale = 109;
    if (has_victory_scale()) {
      total_size += 2 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sModelAction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sModelAction*>(&from));
}

void sModelAction::MergeFrom(const sModelAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_resources()) {
      set_resources(from.resources());
    }
    if (from.has_hold_s()) {
      set_hold_s(from.hold_s());
    }
    if (from.has_hold_e()) {
      set_hold_e(from.hold_e());
    }
    if (from.has_hold_eff()) {
      set_hold_eff(from.hold_eff());
    }
    if (from.has_moveleft_s()) {
      set_moveleft_s(from.moveleft_s());
    }
    if (from.has_moveleft_e()) {
      set_moveleft_e(from.moveleft_e());
    }
    if (from.has_moveleft_eff()) {
      set_moveleft_eff(from.moveleft_eff());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_moveleftstop_s()) {
      set_moveleftstop_s(from.moveleftstop_s());
    }
    if (from.has_moveleftstop_e()) {
      set_moveleftstop_e(from.moveleftstop_e());
    }
    if (from.has_moveleftstop_eff()) {
      set_moveleftstop_eff(from.moveleftstop_eff());
    }
    if (from.has_moveleftturn_s()) {
      set_moveleftturn_s(from.moveleftturn_s());
    }
    if (from.has_moveleftturn_e()) {
      set_moveleftturn_e(from.moveleftturn_e());
    }
    if (from.has_moveleftturn_eff()) {
      set_moveleftturn_eff(from.moveleftturn_eff());
    }
    if (from.has_moveright_s()) {
      set_moveright_s(from.moveright_s());
    }
    if (from.has_moveright_e()) {
      set_moveright_e(from.moveright_e());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_moveright_eff()) {
      set_moveright_eff(from.moveright_eff());
    }
    if (from.has_moverightstop_s()) {
      set_moverightstop_s(from.moverightstop_s());
    }
    if (from.has_moverightstop_e()) {
      set_moverightstop_e(from.moverightstop_e());
    }
    if (from.has_moverightstop_eff()) {
      set_moverightstop_eff(from.moverightstop_eff());
    }
    if (from.has_moverightturn_s()) {
      set_moverightturn_s(from.moverightturn_s());
    }
    if (from.has_moverightturn_e()) {
      set_moverightturn_e(from.moverightturn_e());
    }
    if (from.has_moverightturn_eff()) {
      set_moverightturn_eff(from.moverightturn_eff());
    }
    if (from.has_attack_s()) {
      set_attack_s(from.attack_s());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_attack_e()) {
      set_attack_e(from.attack_e());
    }
    if (from.has_attack_eff()) {
      set_attack_eff(from.attack_eff());
    }
    if (from.has_skillnormal_s()) {
      set_skillnormal_s(from.skillnormal_s());
    }
    if (from.has_skillnormal_e()) {
      set_skillnormal_e(from.skillnormal_e());
    }
    if (from.has_skillnormal_eff()) {
      set_skillnormal_eff(from.skillnormal_eff());
    }
    if (from.has_skillsuper_s()) {
      set_skillsuper_s(from.skillsuper_s());
    }
    if (from.has_skillsuper_e()) {
      set_skillsuper_e(from.skillsuper_e());
    }
    if (from.has_skillsuper_eff()) {
      set_skillsuper_eff(from.skillsuper_eff());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_skill25_s()) {
      set_skill25_s(from.skill25_s());
    }
    if (from.has_skill25_e()) {
      set_skill25_e(from.skill25_e());
    }
    if (from.has_skill25_eff()) {
      set_skill25_eff(from.skill25_eff());
    }
    if (from.has_skill50_s()) {
      set_skill50_s(from.skill50_s());
    }
    if (from.has_skill50_e()) {
      set_skill50_e(from.skill50_e());
    }
    if (from.has_skill50_eff()) {
      set_skill50_eff(from.skill50_eff());
    }
    if (from.has_skill75_s()) {
      set_skill75_s(from.skill75_s());
    }
    if (from.has_skill75_e()) {
      set_skill75_e(from.skill75_e());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_skill75_eff()) {
      set_skill75_eff(from.skill75_eff());
    }
    if (from.has_skill100_s()) {
      set_skill100_s(from.skill100_s());
    }
    if (from.has_skill100_e()) {
      set_skill100_e(from.skill100_e());
    }
    if (from.has_skill100_eff()) {
      set_skill100_eff(from.skill100_eff());
    }
    if (from.has_dead_s()) {
      set_dead_s(from.dead_s());
    }
    if (from.has_dead_e()) {
      set_dead_e(from.dead_e());
    }
    if (from.has_dead_eff()) {
      set_dead_eff(from.dead_eff());
    }
    if (from.has_turnin_s()) {
      set_turnin_s(from.turnin_s());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_turnin_e()) {
      set_turnin_e(from.turnin_e());
    }
    if (from.has_turnin_eff()) {
      set_turnin_eff(from.turnin_eff());
    }
    if (from.has_turnin_scale()) {
      set_turnin_scale(from.turnin_scale());
    }
    if (from.has_main_s()) {
      set_main_s(from.main_s());
    }
    if (from.has_main_e()) {
      set_main_e(from.main_e());
    }
    if (from.has_main_eff()) {
      set_main_eff(from.main_eff());
    }
    if (from.has_main2_s()) {
      set_main2_s(from.main2_s());
    }
    if (from.has_main2_e()) {
      set_main2_e(from.main2_e());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_main2_eff()) {
      set_main2_eff(from.main2_eff());
    }
    if (from.has_model_scale()) {
      set_model_scale(from.model_scale());
    }
    if (from.has_monster_left_s()) {
      set_monster_left_s(from.monster_left_s());
    }
    if (from.has_monster_left_e()) {
      set_monster_left_e(from.monster_left_e());
    }
    if (from.has_monster_right_s()) {
      set_monster_right_s(from.monster_right_s());
    }
    if (from.has_monster_right_e()) {
      set_monster_right_e(from.monster_right_e());
    }
    if (from.has_boss_turnin_s()) {
      set_boss_turnin_s(from.boss_turnin_s());
    }
    if (from.has_boss_turnin_e()) {
      set_boss_turnin_e(from.boss_turnin_e());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_monster_skill1_s()) {
      set_monster_skill1_s(from.monster_skill1_s());
    }
    if (from.has_monster_skill1_e()) {
      set_monster_skill1_e(from.monster_skill1_e());
    }
    if (from.has_monster_skill2_s()) {
      set_monster_skill2_s(from.monster_skill2_s());
    }
    if (from.has_monster_skill2_e()) {
      set_monster_skill2_e(from.monster_skill2_e());
    }
    if (from.has_monster_skill3_s()) {
      set_monster_skill3_s(from.monster_skill3_s());
    }
    if (from.has_monster_skill3_e()) {
      set_monster_skill3_e(from.monster_skill3_e());
    }
    if (from.has_monster_skill4_s()) {
      set_monster_skill4_s(from.monster_skill4_s());
    }
    if (from.has_monster_skill4_e()) {
      set_monster_skill4_e(from.monster_skill4_e());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_actor_eff()) {
      set_actor_eff(from.actor_eff());
    }
    if (from.has_levelup_s()) {
      set_levelup_s(from.levelup_s());
    }
    if (from.has_levelup_e()) {
      set_levelup_e(from.levelup_e());
    }
    if (from.has_levelup_eff()) {
      set_levelup_eff(from.levelup_eff());
    }
    if (from.has_ahold_s()) {
      set_ahold_s(from.ahold_s());
    }
    if (from.has_ahold_e()) {
      set_ahold_e(from.ahold_e());
    }
    if (from.has_ahold_eff()) {
      set_ahold_eff(from.ahold_eff());
    }
    if (from.has_amoveleft_s()) {
      set_amoveleft_s(from.amoveleft_s());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_amoveleft_e()) {
      set_amoveleft_e(from.amoveleft_e());
    }
    if (from.has_amoveleft_eff()) {
      set_amoveleft_eff(from.amoveleft_eff());
    }
    if (from.has_amoveleftstop_s()) {
      set_amoveleftstop_s(from.amoveleftstop_s());
    }
    if (from.has_amoveleftstop_e()) {
      set_amoveleftstop_e(from.amoveleftstop_e());
    }
    if (from.has_amoveleftstop_eff()) {
      set_amoveleftstop_eff(from.amoveleftstop_eff());
    }
    if (from.has_amoveleftturn_s()) {
      set_amoveleftturn_s(from.amoveleftturn_s());
    }
    if (from.has_amoveleftturn_e()) {
      set_amoveleftturn_e(from.amoveleftturn_e());
    }
    if (from.has_amoveleftturn_eff()) {
      set_amoveleftturn_eff(from.amoveleftturn_eff());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_amoveright_s()) {
      set_amoveright_s(from.amoveright_s());
    }
    if (from.has_amoveright_e()) {
      set_amoveright_e(from.amoveright_e());
    }
    if (from.has_amoveright_eff()) {
      set_amoveright_eff(from.amoveright_eff());
    }
    if (from.has_amoverightstop_s()) {
      set_amoverightstop_s(from.amoverightstop_s());
    }
    if (from.has_amoverightstop_e()) {
      set_amoverightstop_e(from.amoverightstop_e());
    }
    if (from.has_amoverightstop_eff()) {
      set_amoverightstop_eff(from.amoverightstop_eff());
    }
    if (from.has_amoverightturn_s()) {
      set_amoverightturn_s(from.amoverightturn_s());
    }
    if (from.has_amoverightturn_e()) {
      set_amoverightturn_e(from.amoverightturn_e());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from.has_amoverightturn_eff()) {
      set_amoverightturn_eff(from.amoverightturn_eff());
    }
    if (from.has_turnout_s()) {
      set_turnout_s(from.turnout_s());
    }
    if (from.has_turnout_e()) {
      set_turnout_e(from.turnout_e());
    }
    if (from.has_turnout_eff()) {
      set_turnout_eff(from.turnout_eff());
    }
    if (from.has_turnout_scale()) {
      set_turnout_scale(from.turnout_scale());
    }
    if (from.has_turnout_delay()) {
      set_turnout_delay(from.turnout_delay());
    }
    if (from.has_attack2_s()) {
      set_attack2_s(from.attack2_s());
    }
    if (from.has_attack2_e()) {
      set_attack2_e(from.attack2_e());
    }
  }
  if (from._has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    if (from.has_victory_s()) {
      set_victory_s(from.victory_s());
    }
    if (from.has_victory_e()) {
      set_victory_e(from.victory_e());
    }
    if (from.has_victory2_s()) {
      set_victory2_s(from.victory2_s());
    }
    if (from.has_victory2_e()) {
      set_victory2_e(from.victory2_e());
    }
    if (from.has_victory_scale()) {
      set_victory_scale(from.victory_scale());
    }
  }
}

void sModelAction::CopyFrom(const sModelAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sModelAction::IsInitialized() const {

  return true;
}

void sModelAction::Swap(sModelAction* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(resources_, other->resources_);
    std::swap(hold_s_, other->hold_s_);
    std::swap(hold_e_, other->hold_e_);
    std::swap(hold_eff_, other->hold_eff_);
    std::swap(moveleft_s_, other->moveleft_s_);
    std::swap(moveleft_e_, other->moveleft_e_);
    std::swap(moveleft_eff_, other->moveleft_eff_);
    std::swap(moveleftstop_s_, other->moveleftstop_s_);
    std::swap(moveleftstop_e_, other->moveleftstop_e_);
    std::swap(moveleftstop_eff_, other->moveleftstop_eff_);
    std::swap(moveleftturn_s_, other->moveleftturn_s_);
    std::swap(moveleftturn_e_, other->moveleftturn_e_);
    std::swap(moveleftturn_eff_, other->moveleftturn_eff_);
    std::swap(moveright_s_, other->moveright_s_);
    std::swap(moveright_e_, other->moveright_e_);
    std::swap(moveright_eff_, other->moveright_eff_);
    std::swap(moverightstop_s_, other->moverightstop_s_);
    std::swap(moverightstop_e_, other->moverightstop_e_);
    std::swap(moverightstop_eff_, other->moverightstop_eff_);
    std::swap(moverightturn_s_, other->moverightturn_s_);
    std::swap(moverightturn_e_, other->moverightturn_e_);
    std::swap(moverightturn_eff_, other->moverightturn_eff_);
    std::swap(attack_s_, other->attack_s_);
    std::swap(attack_e_, other->attack_e_);
    std::swap(attack_eff_, other->attack_eff_);
    std::swap(skillnormal_s_, other->skillnormal_s_);
    std::swap(skillnormal_e_, other->skillnormal_e_);
    std::swap(skillnormal_eff_, other->skillnormal_eff_);
    std::swap(skillsuper_s_, other->skillsuper_s_);
    std::swap(skillsuper_e_, other->skillsuper_e_);
    std::swap(skillsuper_eff_, other->skillsuper_eff_);
    std::swap(skill25_s_, other->skill25_s_);
    std::swap(skill25_e_, other->skill25_e_);
    std::swap(skill25_eff_, other->skill25_eff_);
    std::swap(skill50_s_, other->skill50_s_);
    std::swap(skill50_e_, other->skill50_e_);
    std::swap(skill50_eff_, other->skill50_eff_);
    std::swap(skill75_s_, other->skill75_s_);
    std::swap(skill75_e_, other->skill75_e_);
    std::swap(skill75_eff_, other->skill75_eff_);
    std::swap(skill100_s_, other->skill100_s_);
    std::swap(skill100_e_, other->skill100_e_);
    std::swap(skill100_eff_, other->skill100_eff_);
    std::swap(dead_s_, other->dead_s_);
    std::swap(dead_e_, other->dead_e_);
    std::swap(dead_eff_, other->dead_eff_);
    std::swap(turnin_s_, other->turnin_s_);
    std::swap(turnin_e_, other->turnin_e_);
    std::swap(turnin_eff_, other->turnin_eff_);
    std::swap(turnin_scale_, other->turnin_scale_);
    std::swap(main_s_, other->main_s_);
    std::swap(main_e_, other->main_e_);
    std::swap(main_eff_, other->main_eff_);
    std::swap(main2_s_, other->main2_s_);
    std::swap(main2_e_, other->main2_e_);
    std::swap(main2_eff_, other->main2_eff_);
    std::swap(model_scale_, other->model_scale_);
    std::swap(monster_left_s_, other->monster_left_s_);
    std::swap(monster_left_e_, other->monster_left_e_);
    std::swap(monster_right_s_, other->monster_right_s_);
    std::swap(monster_right_e_, other->monster_right_e_);
    std::swap(boss_turnin_s_, other->boss_turnin_s_);
    std::swap(boss_turnin_e_, other->boss_turnin_e_);
    std::swap(monster_skill1_s_, other->monster_skill1_s_);
    std::swap(monster_skill1_e_, other->monster_skill1_e_);
    std::swap(monster_skill2_s_, other->monster_skill2_s_);
    std::swap(monster_skill2_e_, other->monster_skill2_e_);
    std::swap(monster_skill3_s_, other->monster_skill3_s_);
    std::swap(monster_skill3_e_, other->monster_skill3_e_);
    std::swap(monster_skill4_s_, other->monster_skill4_s_);
    std::swap(monster_skill4_e_, other->monster_skill4_e_);
    std::swap(actor_eff_, other->actor_eff_);
    std::swap(levelup_s_, other->levelup_s_);
    std::swap(levelup_e_, other->levelup_e_);
    std::swap(levelup_eff_, other->levelup_eff_);
    std::swap(ahold_s_, other->ahold_s_);
    std::swap(ahold_e_, other->ahold_e_);
    std::swap(ahold_eff_, other->ahold_eff_);
    std::swap(amoveleft_s_, other->amoveleft_s_);
    std::swap(amoveleft_e_, other->amoveleft_e_);
    std::swap(amoveleft_eff_, other->amoveleft_eff_);
    std::swap(amoveleftstop_s_, other->amoveleftstop_s_);
    std::swap(amoveleftstop_e_, other->amoveleftstop_e_);
    std::swap(amoveleftstop_eff_, other->amoveleftstop_eff_);
    std::swap(amoveleftturn_s_, other->amoveleftturn_s_);
    std::swap(amoveleftturn_e_, other->amoveleftturn_e_);
    std::swap(amoveleftturn_eff_, other->amoveleftturn_eff_);
    std::swap(amoveright_s_, other->amoveright_s_);
    std::swap(amoveright_e_, other->amoveright_e_);
    std::swap(amoveright_eff_, other->amoveright_eff_);
    std::swap(amoverightstop_s_, other->amoverightstop_s_);
    std::swap(amoverightstop_e_, other->amoverightstop_e_);
    std::swap(amoverightstop_eff_, other->amoverightstop_eff_);
    std::swap(amoverightturn_s_, other->amoverightturn_s_);
    std::swap(amoverightturn_e_, other->amoverightturn_e_);
    std::swap(amoverightturn_eff_, other->amoverightturn_eff_);
    std::swap(turnout_s_, other->turnout_s_);
    std::swap(turnout_e_, other->turnout_e_);
    std::swap(turnout_eff_, other->turnout_eff_);
    std::swap(turnout_scale_, other->turnout_scale_);
    std::swap(turnout_delay_, other->turnout_delay_);
    std::swap(attack2_s_, other->attack2_s_);
    std::swap(attack2_e_, other->attack2_e_);
    std::swap(victory_s_, other->victory_s_);
    std::swap(victory_e_, other->victory_e_);
    std::swap(victory2_s_, other->victory2_s_);
    std::swap(victory2_e_, other->victory2_e_);
    std::swap(victory_scale_, other->victory_scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sModelAction::GetTypeName() const {
  return "jynetwork.proto.sModelAction";
}


// ===================================================================

#ifndef _MSC_VER
const int sStageLine::kStageidFieldNumber;
const int sStageLine::kPosxFieldNumber;
const int sStageLine::kPosyFieldNumber;
const int sStageLine::kFlipxFieldNumber;
const int sStageLine::kFlipyFieldNumber;
const int sStageLine::kRotateFieldNumber;
#endif  // !_MSC_VER

sStageLine::sStageLine()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sStageLine::InitAsDefaultInstance() {
}

sStageLine::sStageLine(const sStageLine& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sStageLine::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  flipx_ = 0u;
  flipy_ = 0u;
  rotate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sStageLine::~sStageLine() {
  SharedDtor();
}

void sStageLine::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sStageLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sStageLine& sStageLine::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sStageLine* sStageLine::default_instance_ = NULL;

sStageLine* sStageLine::New() const {
  return new sStageLine;
}

void sStageLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0u;
    posx_ = 0;
    posy_ = 0;
    flipx_ = 0u;
    flipy_ = 0u;
    rotate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sStageLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_posx;
        break;
      }

      // optional float posx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_posy;
        break;
      }

      // optional float posy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flipx;
        break;
      }

      // optional uint32 flipx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flipx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flipx_)));
          set_has_flipx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flipy;
        break;
      }

      // optional uint32 flipy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flipy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flipy_)));
          set_has_flipy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_rotate;
        break;
      }

      // optional float rotate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotate_)));
          set_has_rotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sStageLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stageid = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stageid(), output);
  }

  // optional float posx = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posx(), output);
  }

  // optional float posy = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posy(), output);
  }

  // optional uint32 flipx = 4;
  if (has_flipx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flipx(), output);
  }

  // optional uint32 flipy = 5;
  if (has_flipy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flipy(), output);
  }

  // optional float rotate = 6;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rotate(), output);
  }

}

int sStageLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stageid = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional float posx = 2;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // optional float posy = 3;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // optional uint32 flipx = 4;
    if (has_flipx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flipx());
    }

    // optional uint32 flipy = 5;
    if (has_flipy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flipy());
    }

    // optional float rotate = 6;
    if (has_rotate()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sStageLine::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sStageLine*>(&from));
}

void sStageLine::MergeFrom(const sStageLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_flipx()) {
      set_flipx(from.flipx());
    }
    if (from.has_flipy()) {
      set_flipy(from.flipy());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
  }
}

void sStageLine::CopyFrom(const sStageLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sStageLine::IsInitialized() const {

  return true;
}

void sStageLine::Swap(sStageLine* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(flipx_, other->flipx_);
    std::swap(flipy_, other->flipy_);
    std::swap(rotate_, other->rotate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sStageLine::GetTypeName() const {
  return "jynetwork.proto.sStageLine";
}


// ===================================================================

#ifndef _MSC_VER
const int sStageProp::kStageidFieldNumber;
const int sStageProp::kNlocalenameFieldNumber;
const int sStageProp::kPropflagFieldNumber;
const int sStageProp::kSpicFieldNumber;
const int sStageProp::kPosxFieldNumber;
const int sStageProp::kPosyFieldNumber;
const int sStageProp::kLineFieldNumber;
#endif  // !_MSC_VER

sStageProp::sStageProp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sStageProp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  line_ = const_cast< ::jynetwork::proto::sStageLine*>(
      ::jynetwork::proto::sStageLine::internal_default_instance());
#else
  line_ = const_cast< ::jynetwork::proto::sStageLine*>(&::jynetwork::proto::sStageLine::default_instance());
#endif
}

sStageProp::sStageProp(const sStageProp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sStageProp::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  nlocalename_ = 0u;
  propflag_ = 0u;
  spic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  posx_ = 0;
  posy_ = 0;
  line_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sStageProp::~sStageProp() {
  SharedDtor();
}

void sStageProp::SharedDtor() {
  if (spic_ != &::google::protobuf::internal::kEmptyString) {
    delete spic_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete line_;
  }
}

void sStageProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sStageProp& sStageProp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sStageProp* sStageProp::default_instance_ = NULL;

sStageProp* sStageProp::New() const {
  return new sStageProp;
}

void sStageProp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0u;
    nlocalename_ = 0u;
    propflag_ = 0u;
    if (has_spic()) {
      if (spic_ != &::google::protobuf::internal::kEmptyString) {
        spic_->clear();
      }
    }
    posx_ = 0;
    posy_ = 0;
    if (has_line()) {
      if (line_ != NULL) line_->::jynetwork::proto::sStageLine::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sStageProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nlocalename;
        break;
      }

      // optional uint32 nlocalename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nlocalename:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlocalename_)));
          set_has_nlocalename();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_propflag;
        break;
      }

      // optional uint32 propflag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propflag_)));
          set_has_propflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_spic;
        break;
      }

      // optional string spic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posx;
        break;
      }

      // optional float posx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_posy;
        break;
      }

      // optional float posy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_line;
        break;
      }

      // optional .jynetwork.proto.sStageLine line = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sStageProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stageid = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stageid(), output);
  }

  // optional uint32 nlocalename = 2;
  if (has_nlocalename()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nlocalename(), output);
  }

  // optional uint32 propflag = 3;
  if (has_propflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->propflag(), output);
  }

  // optional string spic = 4;
  if (has_spic()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->spic(), output);
  }

  // optional float posx = 5;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->posx(), output);
  }

  // optional float posy = 6;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->posy(), output);
  }

  // optional .jynetwork.proto.sStageLine line = 7;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->line(), output);
  }

}

int sStageProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stageid = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 nlocalename = 2;
    if (has_nlocalename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nlocalename());
    }

    // optional uint32 propflag = 3;
    if (has_propflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propflag());
    }

    // optional string spic = 4;
    if (has_spic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spic());
    }

    // optional float posx = 5;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // optional float posy = 6;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // optional .jynetwork.proto.sStageLine line = 7;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sStageProp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sStageProp*>(&from));
}

void sStageProp::MergeFrom(const sStageProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_nlocalename()) {
      set_nlocalename(from.nlocalename());
    }
    if (from.has_propflag()) {
      set_propflag(from.propflag());
    }
    if (from.has_spic()) {
      set_spic(from.spic());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_line()) {
      mutable_line()->::jynetwork::proto::sStageLine::MergeFrom(from.line());
    }
  }
}

void sStageProp::CopyFrom(const sStageProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sStageProp::IsInitialized() const {

  return true;
}

void sStageProp::Swap(sStageProp* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(nlocalename_, other->nlocalename_);
    std::swap(propflag_, other->propflag_);
    std::swap(spic_, other->spic_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(line_, other->line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sStageProp::GetTypeName() const {
  return "jynetwork.proto.sStageProp";
}


// ===================================================================

#ifndef _MSC_VER
const int sDebugSpawnBullet::kNtypeFieldNumber;
const int sDebugSpawnBullet::kBulletFieldNumber;
const int sDebugSpawnBullet::kFuncNameFieldNumber;
const int sDebugSpawnBullet::kXFieldNumber;
const int sDebugSpawnBullet::kYFieldNumber;
#endif  // !_MSC_VER

sDebugSpawnBullet::sDebugSpawnBullet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sDebugSpawnBullet::InitAsDefaultInstance() {
}

sDebugSpawnBullet::sDebugSpawnBullet(const sDebugSpawnBullet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sDebugSpawnBullet::SharedCtor() {
  _cached_size_ = 0;
  ntype_ = 0u;
  bullet_ = GOOGLE_ULONGLONG(0);
  func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sDebugSpawnBullet::~sDebugSpawnBullet() {
  SharedDtor();
}

void sDebugSpawnBullet::SharedDtor() {
  if (func_name_ != &::google::protobuf::internal::kEmptyString) {
    delete func_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sDebugSpawnBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sDebugSpawnBullet& sDebugSpawnBullet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sDebugSpawnBullet* sDebugSpawnBullet::default_instance_ = NULL;

sDebugSpawnBullet* sDebugSpawnBullet::New() const {
  return new sDebugSpawnBullet;
}

void sDebugSpawnBullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntype_ = 0u;
    bullet_ = GOOGLE_ULONGLONG(0);
    if (has_func_name()) {
      if (func_name_ != &::google::protobuf::internal::kEmptyString) {
        func_name_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sDebugSpawnBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ntype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_bullet;
        break;
      }

      // optional fixed64 bullet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bullet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &bullet_)));
          set_has_bullet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_func_name;
        break;
      }

      // optional string func_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_func_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_x;
        break;
      }

      // optional float x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_y;
        break;
      }

      // optional float y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sDebugSpawnBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ntype = 1;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ntype(), output);
  }

  // optional fixed64 bullet = 2;
  if (has_bullet()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->bullet(), output);
  }

  // optional string func_name = 3;
  if (has_func_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->func_name(), output);
  }

  // optional float x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

}

int sDebugSpawnBullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ntype = 1;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntype());
    }

    // optional fixed64 bullet = 2;
    if (has_bullet()) {
      total_size += 1 + 8;
    }

    // optional string func_name = 3;
    if (has_func_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->func_name());
    }

    // optional float x = 4;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 5;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sDebugSpawnBullet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sDebugSpawnBullet*>(&from));
}

void sDebugSpawnBullet::MergeFrom(const sDebugSpawnBullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
    if (from.has_bullet()) {
      set_bullet(from.bullet());
    }
    if (from.has_func_name()) {
      set_func_name(from.func_name());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void sDebugSpawnBullet::CopyFrom(const sDebugSpawnBullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sDebugSpawnBullet::IsInitialized() const {

  return true;
}

void sDebugSpawnBullet::Swap(sDebugSpawnBullet* other) {
  if (other != this) {
    std::swap(ntype_, other->ntype_);
    std::swap(bullet_, other->bullet_);
    std::swap(func_name_, other->func_name_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sDebugSpawnBullet::GetTypeName() const {
  return "jynetwork.proto.sDebugSpawnBullet";
}


// ===================================================================

#ifndef _MSC_VER
const int sDebugEraseBullet::kBulletFieldNumber;
const int sDebugEraseBullet::kFuncNameFieldNumber;
const int sDebugEraseBullet::kXFieldNumber;
const int sDebugEraseBullet::kYFieldNumber;
#endif  // !_MSC_VER

sDebugEraseBullet::sDebugEraseBullet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sDebugEraseBullet::InitAsDefaultInstance() {
}

sDebugEraseBullet::sDebugEraseBullet(const sDebugEraseBullet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sDebugEraseBullet::SharedCtor() {
  _cached_size_ = 0;
  bullet_ = GOOGLE_ULONGLONG(0);
  func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sDebugEraseBullet::~sDebugEraseBullet() {
  SharedDtor();
}

void sDebugEraseBullet::SharedDtor() {
  if (func_name_ != &::google::protobuf::internal::kEmptyString) {
    delete func_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sDebugEraseBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sDebugEraseBullet& sDebugEraseBullet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sDebugEraseBullet* sDebugEraseBullet::default_instance_ = NULL;

sDebugEraseBullet* sDebugEraseBullet::New() const {
  return new sDebugEraseBullet;
}

void sDebugEraseBullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bullet_ = GOOGLE_ULONGLONG(0);
    if (has_func_name()) {
      if (func_name_ != &::google::protobuf::internal::kEmptyString) {
        func_name_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sDebugEraseBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 bullet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &bullet_)));
          set_has_bullet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_func_name;
        break;
      }

      // optional string func_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_func_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_x;
        break;
      }

      // optional float x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_y;
        break;
      }

      // optional float y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sDebugEraseBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 bullet = 2;
  if (has_bullet()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->bullet(), output);
  }

  // optional string func_name = 3;
  if (has_func_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->func_name(), output);
  }

  // optional float x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

}

int sDebugEraseBullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 bullet = 2;
    if (has_bullet()) {
      total_size += 1 + 8;
    }

    // optional string func_name = 3;
    if (has_func_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->func_name());
    }

    // optional float x = 4;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 5;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sDebugEraseBullet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sDebugEraseBullet*>(&from));
}

void sDebugEraseBullet::MergeFrom(const sDebugEraseBullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bullet()) {
      set_bullet(from.bullet());
    }
    if (from.has_func_name()) {
      set_func_name(from.func_name());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void sDebugEraseBullet::CopyFrom(const sDebugEraseBullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sDebugEraseBullet::IsInitialized() const {

  return true;
}

void sDebugEraseBullet::Swap(sDebugEraseBullet* other) {
  if (other != this) {
    std::swap(bullet_, other->bullet_);
    std::swap(func_name_, other->func_name_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sDebugEraseBullet::GetTypeName() const {
  return "jynetwork.proto.sDebugEraseBullet";
}


// ===================================================================

#ifndef _MSC_VER
const int sAISetting::kAidFieldNumber;
const int sAISetting::kAmoveFieldNumber;
const int sAISetting::kAttackFieldNumber;
const int sAISetting::kNormalFieldNumber;
const int sAISetting::kSuperFieldNumber;
const int sAISetting::kExtrasFieldNumber;
#endif  // !_MSC_VER

sAISetting::sAISetting()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sAISetting::InitAsDefaultInstance() {
}

sAISetting::sAISetting(const sAISetting& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sAISetting::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  amove_ = 0u;
  attack_ = 0u;
  normal_ = 0u;
  super_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sAISetting::~sAISetting() {
  SharedDtor();
}

void sAISetting::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sAISetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sAISetting& sAISetting::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sAISetting* sAISetting::default_instance_ = NULL;

sAISetting* sAISetting::New() const {
  return new sAISetting;
}

void sAISetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aid_ = 0u;
    amove_ = 0u;
    attack_ = 0u;
    normal_ = 0u;
    super_ = 0u;
  }
  extras_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sAISetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 aid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amove;
        break;
      }

      // optional uint32 amove = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amove_)));
          set_has_amove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attack;
        break;
      }

      // optional uint32 attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_normal;
        break;
      }

      // optional uint32 normal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_)));
          set_has_normal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_super;
        break;
      }

      // optional uint32 super = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &super_)));
          set_has_super();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_extras;
        break;
      }

      // repeated uint32 extras = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extras:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_extras())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_extras())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_extras;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sAISetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // optional uint32 amove = 2;
  if (has_amove()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->amove(), output);
  }

  // optional uint32 attack = 3;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attack(), output);
  }

  // optional uint32 normal = 4;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->normal(), output);
  }

  // optional uint32 super = 5;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->super(), output);
  }

  // repeated uint32 extras = 6;
  for (int i = 0; i < this->extras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->extras(i), output);
  }

}

int sAISetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // optional uint32 amove = 2;
    if (has_amove()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amove());
    }

    // optional uint32 attack = 3;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack());
    }

    // optional uint32 normal = 4;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal());
    }

    // optional uint32 super = 5;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->super());
    }

  }
  // repeated uint32 extras = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->extras_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->extras(i));
    }
    total_size += 1 * this->extras_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sAISetting::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sAISetting*>(&from));
}

void sAISetting::MergeFrom(const sAISetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  extras_.MergeFrom(from.extras_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_amove()) {
      set_amove(from.amove());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_normal()) {
      set_normal(from.normal());
    }
    if (from.has_super()) {
      set_super(from.super());
    }
  }
}

void sAISetting::CopyFrom(const sAISetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sAISetting::IsInitialized() const {

  return true;
}

void sAISetting::Swap(sAISetting* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(amove_, other->amove_);
    std::swap(attack_, other->attack_);
    std::swap(normal_, other->normal_);
    std::swap(super_, other->super_);
    extras_.Swap(&other->extras_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sAISetting::GetTypeName() const {
  return "jynetwork.proto.sAISetting";
}


// ===================================================================

#ifndef _MSC_VER
const int sActionEff3d::kBindEffectStatusFieldNumber;
const int sActionEff3d::kBindSkeletonFieldNumber;
const int sActionEff3d::kDelayTimeFieldNumber;
const int sActionEff3d::kLifeTimeFieldNumber;
const int sActionEff3d::kEffectStatusScaleFieldNumber;
const int sActionEff3d::kEffectStatusXFieldNumber;
const int sActionEff3d::kEffectStatusYFieldNumber;
const int sActionEff3d::kEffectStatusZFieldNumber;
const int sActionEff3d::kEffectStatusDegreexFieldNumber;
const int sActionEff3d::kEffectStatusDegreeyFieldNumber;
const int sActionEff3d::kEffectStatusDegreezFieldNumber;
#endif  // !_MSC_VER

sActionEff3d::sActionEff3d()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sActionEff3d::InitAsDefaultInstance() {
}

sActionEff3d::sActionEff3d(const sActionEff3d& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sActionEff3d::SharedCtor() {
  _cached_size_ = 0;
  bind_effect_status_ = 0u;
  bind_skeleton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delay_time_ = 0;
  life_time_ = 0;
  effect_status_scale_ = 0;
  effect_status_x_ = 0;
  effect_status_y_ = 0;
  effect_status_z_ = 0;
  effect_status_degreex_ = 0;
  effect_status_degreey_ = 0;
  effect_status_degreez_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sActionEff3d::~sActionEff3d() {
  SharedDtor();
}

void sActionEff3d::SharedDtor() {
  if (bind_skeleton_ != &::google::protobuf::internal::kEmptyString) {
    delete bind_skeleton_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sActionEff3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sActionEff3d& sActionEff3d::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sActionEff3d* sActionEff3d::default_instance_ = NULL;

sActionEff3d* sActionEff3d::New() const {
  return new sActionEff3d;
}

void sActionEff3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bind_effect_status_ = 0u;
    if (has_bind_skeleton()) {
      if (bind_skeleton_ != &::google::protobuf::internal::kEmptyString) {
        bind_skeleton_->clear();
      }
    }
    delay_time_ = 0;
    life_time_ = 0;
    effect_status_scale_ = 0;
    effect_status_x_ = 0;
    effect_status_y_ = 0;
    effect_status_z_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    effect_status_degreex_ = 0;
    effect_status_degreey_ = 0;
    effect_status_degreez_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sActionEff3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bind_effect_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_effect_status_)));
          set_has_bind_effect_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bind_skeleton;
        break;
      }

      // optional string bind_skeleton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bind_skeleton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bind_skeleton()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_delay_time;
        break;
      }

      // optional float delay_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_delay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_time_)));
          set_has_delay_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_life_time;
        break;
      }

      // optional float life_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_life_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &life_time_)));
          set_has_life_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_effect_status_scale;
        break;
      }

      // optional float effect_status_scale = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_scale_)));
          set_has_effect_status_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_effect_status_x;
        break;
      }

      // optional float effect_status_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_x_)));
          set_has_effect_status_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_effect_status_y;
        break;
      }

      // optional float effect_status_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_y_)));
          set_has_effect_status_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_effect_status_z;
        break;
      }

      // optional float effect_status_z = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_z_)));
          set_has_effect_status_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_effect_status_degreex;
        break;
      }

      // optional float effect_status_degreex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_degreex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_degreex_)));
          set_has_effect_status_degreex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_effect_status_degreey;
        break;
      }

      // optional float effect_status_degreey = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_degreey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_degreey_)));
          set_has_effect_status_degreey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_effect_status_degreez;
        break;
      }

      // optional float effect_status_degreez = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_degreez:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_degreez_)));
          set_has_effect_status_degreez();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sActionEff3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bind_effect_status = 1;
  if (has_bind_effect_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bind_effect_status(), output);
  }

  // optional string bind_skeleton = 2;
  if (has_bind_skeleton()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bind_skeleton(), output);
  }

  // optional float delay_time = 3;
  if (has_delay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->delay_time(), output);
  }

  // optional float life_time = 4;
  if (has_life_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->life_time(), output);
  }

  // optional float effect_status_scale = 5;
  if (has_effect_status_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->effect_status_scale(), output);
  }

  // optional float effect_status_x = 6;
  if (has_effect_status_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->effect_status_x(), output);
  }

  // optional float effect_status_y = 7;
  if (has_effect_status_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->effect_status_y(), output);
  }

  // optional float effect_status_z = 8;
  if (has_effect_status_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->effect_status_z(), output);
  }

  // optional float effect_status_degreex = 9;
  if (has_effect_status_degreex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->effect_status_degreex(), output);
  }

  // optional float effect_status_degreey = 10;
  if (has_effect_status_degreey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->effect_status_degreey(), output);
  }

  // optional float effect_status_degreez = 11;
  if (has_effect_status_degreez()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->effect_status_degreez(), output);
  }

}

int sActionEff3d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bind_effect_status = 1;
    if (has_bind_effect_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind_effect_status());
    }

    // optional string bind_skeleton = 2;
    if (has_bind_skeleton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bind_skeleton());
    }

    // optional float delay_time = 3;
    if (has_delay_time()) {
      total_size += 1 + 4;
    }

    // optional float life_time = 4;
    if (has_life_time()) {
      total_size += 1 + 4;
    }

    // optional float effect_status_scale = 5;
    if (has_effect_status_scale()) {
      total_size += 1 + 4;
    }

    // optional float effect_status_x = 6;
    if (has_effect_status_x()) {
      total_size += 1 + 4;
    }

    // optional float effect_status_y = 7;
    if (has_effect_status_y()) {
      total_size += 1 + 4;
    }

    // optional float effect_status_z = 8;
    if (has_effect_status_z()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float effect_status_degreex = 9;
    if (has_effect_status_degreex()) {
      total_size += 1 + 4;
    }

    // optional float effect_status_degreey = 10;
    if (has_effect_status_degreey()) {
      total_size += 1 + 4;
    }

    // optional float effect_status_degreez = 11;
    if (has_effect_status_degreez()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sActionEff3d::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sActionEff3d*>(&from));
}

void sActionEff3d::MergeFrom(const sActionEff3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bind_effect_status()) {
      set_bind_effect_status(from.bind_effect_status());
    }
    if (from.has_bind_skeleton()) {
      set_bind_skeleton(from.bind_skeleton());
    }
    if (from.has_delay_time()) {
      set_delay_time(from.delay_time());
    }
    if (from.has_life_time()) {
      set_life_time(from.life_time());
    }
    if (from.has_effect_status_scale()) {
      set_effect_status_scale(from.effect_status_scale());
    }
    if (from.has_effect_status_x()) {
      set_effect_status_x(from.effect_status_x());
    }
    if (from.has_effect_status_y()) {
      set_effect_status_y(from.effect_status_y());
    }
    if (from.has_effect_status_z()) {
      set_effect_status_z(from.effect_status_z());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_effect_status_degreex()) {
      set_effect_status_degreex(from.effect_status_degreex());
    }
    if (from.has_effect_status_degreey()) {
      set_effect_status_degreey(from.effect_status_degreey());
    }
    if (from.has_effect_status_degreez()) {
      set_effect_status_degreez(from.effect_status_degreez());
    }
  }
}

void sActionEff3d::CopyFrom(const sActionEff3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sActionEff3d::IsInitialized() const {

  return true;
}

void sActionEff3d::Swap(sActionEff3d* other) {
  if (other != this) {
    std::swap(bind_effect_status_, other->bind_effect_status_);
    std::swap(bind_skeleton_, other->bind_skeleton_);
    std::swap(delay_time_, other->delay_time_);
    std::swap(life_time_, other->life_time_);
    std::swap(effect_status_scale_, other->effect_status_scale_);
    std::swap(effect_status_x_, other->effect_status_x_);
    std::swap(effect_status_y_, other->effect_status_y_);
    std::swap(effect_status_z_, other->effect_status_z_);
    std::swap(effect_status_degreex_, other->effect_status_degreex_);
    std::swap(effect_status_degreey_, other->effect_status_degreey_);
    std::swap(effect_status_degreez_, other->effect_status_degreez_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sActionEff3d::GetTypeName() const {
  return "jynetwork.proto.sActionEff3d";
}


// ===================================================================

#ifndef _MSC_VER
const int sActionEffect::kGroupidFieldNumber;
const int sActionEffect::kEquipIdsFieldNumber;
const int sActionEffect::kActorIdsFieldNumber;
const int sActionEffect::kActionIdFieldNumber;
const int sActionEffect::kEffsFieldNumber;
#endif  // !_MSC_VER

sActionEffect::sActionEffect()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sActionEffect::InitAsDefaultInstance() {
}

sActionEffect::sActionEffect(const sActionEffect& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sActionEffect::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sActionEffect::~sActionEffect() {
  SharedDtor();
}

void sActionEffect::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sActionEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sActionEffect& sActionEffect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sActionEffect* sActionEffect::default_instance_ = NULL;

sActionEffect* sActionEffect::New() const {
  return new sActionEffect;
}

void sActionEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0u;
    action_id_ = 0u;
  }
  equip_ids_.Clear();
  actor_ids_.Clear();
  effs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sActionEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_ids;
        break;
      }

      // repeated uint32 equip_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_equip_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equip_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_ids;
        if (input->ExpectTag(24)) goto parse_actor_ids;
        break;
      }

      // repeated uint32 actor_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actor_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_actor_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_actor_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_actor_ids;
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }

      // optional uint32 action_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_effs;
        break;
      }

      // repeated .jynetwork.proto.sActionEff3d effs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_effs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sActionEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // repeated uint32 equip_ids = 2;
  for (int i = 0; i < this->equip_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->equip_ids(i), output);
  }

  // repeated uint32 actor_ids = 3;
  for (int i = 0; i < this->actor_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->actor_ids(i), output);
  }

  // optional uint32 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }

  // repeated .jynetwork.proto.sActionEff3d effs = 6;
  for (int i = 0; i < this->effs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->effs(i), output);
  }

}

int sActionEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

  }
  // repeated uint32 equip_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->equip_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equip_ids(i));
    }
    total_size += 1 * this->equip_ids_size() + data_size;
  }

  // repeated uint32 actor_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->actor_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->actor_ids(i));
    }
    total_size += 1 * this->actor_ids_size() + data_size;
  }

  // repeated .jynetwork.proto.sActionEff3d effs = 6;
  total_size += 1 * this->effs_size();
  for (int i = 0; i < this->effs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sActionEffect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sActionEffect*>(&from));
}

void sActionEffect::MergeFrom(const sActionEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_ids_.MergeFrom(from.equip_ids_);
  actor_ids_.MergeFrom(from.actor_ids_);
  effs_.MergeFrom(from.effs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
}

void sActionEffect::CopyFrom(const sActionEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sActionEffect::IsInitialized() const {

  return true;
}

void sActionEffect::Swap(sActionEffect* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    equip_ids_.Swap(&other->equip_ids_);
    actor_ids_.Swap(&other->actor_ids_);
    std::swap(action_id_, other->action_id_);
    effs_.Swap(&other->effs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sActionEffect::GetTypeName() const {
  return "jynetwork.proto.sActionEffect";
}


// ===================================================================

#ifndef _MSC_VER
const int sPPLConstant::kEliteEnergyFieldNumber;
const int sPPLConstant::kBallEnergyFieldNumber;
const int sPPLConstant::kBossEnergyFieldNumber;
const int sPPLConstant::kLv1SkillConsumeFieldNumber;
const int sPPLConstant::kLv2SkillConsumeFieldNumber;
const int sPPLConstant::kLv3SkillConsumeFieldNumber;
const int sPPLConstant::kLv1HpLossFieldNumber;
const int sPPLConstant::kLv2HpLossFieldNumber;
const int sPPLConstant::kLv3HpLossFieldNumber;
const int sPPLConstant::kLv4HpLossFieldNumber;
const int sPPLConstant::kLv5HpLossFieldNumber;
const int sPPLConstant::kRandomCostFieldNumber;
const int sPPLConstant::kRandomIncrementFieldNumber;
const int sPPLConstant::kNormalEnergyFieldNumber;
#endif  // !_MSC_VER

sPPLConstant::sPPLConstant()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPPLConstant::InitAsDefaultInstance() {
}

sPPLConstant::sPPLConstant(const sPPLConstant& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPPLConstant::SharedCtor() {
  _cached_size_ = 0;
  elite_energy_ = 0u;
  ball_energy_ = 0u;
  boss_energy_ = 0u;
  lv1_skill_consume_ = 0u;
  lv2_skill_consume_ = 0u;
  lv3_skill_consume_ = 0u;
  lv1_hp_loss_ = 0u;
  lv2_hp_loss_ = 0u;
  lv3_hp_loss_ = 0u;
  lv4_hp_loss_ = 0u;
  lv5_hp_loss_ = 0u;
  random_cost_ = 0u;
  random_increment_ = 0u;
  normal_energy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPPLConstant::~sPPLConstant() {
  SharedDtor();
}

void sPPLConstant::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sPPLConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPPLConstant& sPPLConstant::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sPPLConstant* sPPLConstant::default_instance_ = NULL;

sPPLConstant* sPPLConstant::New() const {
  return new sPPLConstant;
}

void sPPLConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elite_energy_ = 0u;
    ball_energy_ = 0u;
    boss_energy_ = 0u;
    lv1_skill_consume_ = 0u;
    lv2_skill_consume_ = 0u;
    lv3_skill_consume_ = 0u;
    lv1_hp_loss_ = 0u;
    lv2_hp_loss_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lv3_hp_loss_ = 0u;
    lv4_hp_loss_ = 0u;
    lv5_hp_loss_ = 0u;
    random_cost_ = 0u;
    random_increment_ = 0u;
    normal_energy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPPLConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 elite_energy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_energy_)));
          set_has_elite_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ball_energy;
        break;
      }

      // optional uint32 ball_energy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ball_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ball_energy_)));
          set_has_ball_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boss_energy;
        break;
      }

      // optional uint32 boss_energy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_energy_)));
          set_has_boss_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv1_skill_consume;
        break;
      }

      // optional uint32 lv1_skill_consume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv1_skill_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv1_skill_consume_)));
          set_has_lv1_skill_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv2_skill_consume;
        break;
      }

      // optional uint32 lv2_skill_consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv2_skill_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv2_skill_consume_)));
          set_has_lv2_skill_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lv3_skill_consume;
        break;
      }

      // optional uint32 lv3_skill_consume = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv3_skill_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv3_skill_consume_)));
          set_has_lv3_skill_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lv1_hp_loss;
        break;
      }

      // optional uint32 lv1_hp_loss = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv1_hp_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv1_hp_loss_)));
          set_has_lv1_hp_loss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lv2_hp_loss;
        break;
      }

      // optional uint32 lv2_hp_loss = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv2_hp_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv2_hp_loss_)));
          set_has_lv2_hp_loss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lv3_hp_loss;
        break;
      }

      // optional uint32 lv3_hp_loss = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv3_hp_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv3_hp_loss_)));
          set_has_lv3_hp_loss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lv4_hp_loss;
        break;
      }

      // optional uint32 lv4_hp_loss = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv4_hp_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv4_hp_loss_)));
          set_has_lv4_hp_loss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lv5_hp_loss;
        break;
      }

      // optional uint32 lv5_hp_loss = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv5_hp_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv5_hp_loss_)));
          set_has_lv5_hp_loss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_random_cost;
        break;
      }

      // optional uint32 random_cost = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_cost_)));
          set_has_random_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_random_increment;
        break;
      }

      // optional uint32 random_increment = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_increment_)));
          set_has_random_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_normal_energy;
        break;
      }

      // optional uint32 normal_energy = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_energy_)));
          set_has_normal_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPPLConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 elite_energy = 1;
  if (has_elite_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elite_energy(), output);
  }

  // optional uint32 ball_energy = 2;
  if (has_ball_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ball_energy(), output);
  }

  // optional uint32 boss_energy = 3;
  if (has_boss_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->boss_energy(), output);
  }

  // optional uint32 lv1_skill_consume = 4;
  if (has_lv1_skill_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv1_skill_consume(), output);
  }

  // optional uint32 lv2_skill_consume = 5;
  if (has_lv2_skill_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv2_skill_consume(), output);
  }

  // optional uint32 lv3_skill_consume = 6;
  if (has_lv3_skill_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lv3_skill_consume(), output);
  }

  // optional uint32 lv1_hp_loss = 7;
  if (has_lv1_hp_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lv1_hp_loss(), output);
  }

  // optional uint32 lv2_hp_loss = 8;
  if (has_lv2_hp_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lv2_hp_loss(), output);
  }

  // optional uint32 lv3_hp_loss = 9;
  if (has_lv3_hp_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->lv3_hp_loss(), output);
  }

  // optional uint32 lv4_hp_loss = 10;
  if (has_lv4_hp_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->lv4_hp_loss(), output);
  }

  // optional uint32 lv5_hp_loss = 11;
  if (has_lv5_hp_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lv5_hp_loss(), output);
  }

  // optional uint32 random_cost = 12;
  if (has_random_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->random_cost(), output);
  }

  // optional uint32 random_increment = 13;
  if (has_random_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->random_increment(), output);
  }

  // optional uint32 normal_energy = 14;
  if (has_normal_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->normal_energy(), output);
  }

}

int sPPLConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 elite_energy = 1;
    if (has_elite_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_energy());
    }

    // optional uint32 ball_energy = 2;
    if (has_ball_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ball_energy());
    }

    // optional uint32 boss_energy = 3;
    if (has_boss_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_energy());
    }

    // optional uint32 lv1_skill_consume = 4;
    if (has_lv1_skill_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv1_skill_consume());
    }

    // optional uint32 lv2_skill_consume = 5;
    if (has_lv2_skill_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv2_skill_consume());
    }

    // optional uint32 lv3_skill_consume = 6;
    if (has_lv3_skill_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv3_skill_consume());
    }

    // optional uint32 lv1_hp_loss = 7;
    if (has_lv1_hp_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv1_hp_loss());
    }

    // optional uint32 lv2_hp_loss = 8;
    if (has_lv2_hp_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv2_hp_loss());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 lv3_hp_loss = 9;
    if (has_lv3_hp_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv3_hp_loss());
    }

    // optional uint32 lv4_hp_loss = 10;
    if (has_lv4_hp_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv4_hp_loss());
    }

    // optional uint32 lv5_hp_loss = 11;
    if (has_lv5_hp_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv5_hp_loss());
    }

    // optional uint32 random_cost = 12;
    if (has_random_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_cost());
    }

    // optional uint32 random_increment = 13;
    if (has_random_increment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_increment());
    }

    // optional uint32 normal_energy = 14;
    if (has_normal_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_energy());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPPLConstant::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPPLConstant*>(&from));
}

void sPPLConstant::MergeFrom(const sPPLConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elite_energy()) {
      set_elite_energy(from.elite_energy());
    }
    if (from.has_ball_energy()) {
      set_ball_energy(from.ball_energy());
    }
    if (from.has_boss_energy()) {
      set_boss_energy(from.boss_energy());
    }
    if (from.has_lv1_skill_consume()) {
      set_lv1_skill_consume(from.lv1_skill_consume());
    }
    if (from.has_lv2_skill_consume()) {
      set_lv2_skill_consume(from.lv2_skill_consume());
    }
    if (from.has_lv3_skill_consume()) {
      set_lv3_skill_consume(from.lv3_skill_consume());
    }
    if (from.has_lv1_hp_loss()) {
      set_lv1_hp_loss(from.lv1_hp_loss());
    }
    if (from.has_lv2_hp_loss()) {
      set_lv2_hp_loss(from.lv2_hp_loss());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lv3_hp_loss()) {
      set_lv3_hp_loss(from.lv3_hp_loss());
    }
    if (from.has_lv4_hp_loss()) {
      set_lv4_hp_loss(from.lv4_hp_loss());
    }
    if (from.has_lv5_hp_loss()) {
      set_lv5_hp_loss(from.lv5_hp_loss());
    }
    if (from.has_random_cost()) {
      set_random_cost(from.random_cost());
    }
    if (from.has_random_increment()) {
      set_random_increment(from.random_increment());
    }
    if (from.has_normal_energy()) {
      set_normal_energy(from.normal_energy());
    }
  }
}

void sPPLConstant::CopyFrom(const sPPLConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPPLConstant::IsInitialized() const {

  return true;
}

void sPPLConstant::Swap(sPPLConstant* other) {
  if (other != this) {
    std::swap(elite_energy_, other->elite_energy_);
    std::swap(ball_energy_, other->ball_energy_);
    std::swap(boss_energy_, other->boss_energy_);
    std::swap(lv1_skill_consume_, other->lv1_skill_consume_);
    std::swap(lv2_skill_consume_, other->lv2_skill_consume_);
    std::swap(lv3_skill_consume_, other->lv3_skill_consume_);
    std::swap(lv1_hp_loss_, other->lv1_hp_loss_);
    std::swap(lv2_hp_loss_, other->lv2_hp_loss_);
    std::swap(lv3_hp_loss_, other->lv3_hp_loss_);
    std::swap(lv4_hp_loss_, other->lv4_hp_loss_);
    std::swap(lv5_hp_loss_, other->lv5_hp_loss_);
    std::swap(random_cost_, other->random_cost_);
    std::swap(random_increment_, other->random_increment_);
    std::swap(normal_energy_, other->normal_energy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPPLConstant::GetTypeName() const {
  return "jynetwork.proto.sPPLConstant";
}


// ===================================================================

#ifndef _MSC_VER
const int sPersistDB::kNversionFieldNumber;
const int sPersistDB::kItemstatsFieldNumber;
const int sPersistDB::kGamestatsFieldNumber;
const int sPersistDB::kEquipstatsFieldNumber;
const int sPersistDB::kSkillstatsFieldNumber;
const int sPersistDB::kCardstatsFieldNumber;
const int sPersistDB::kBuffstatsFieldNumber;
const int sPersistDB::kCastlestatsFieldNumber;
const int sPersistDB::kStagepropsFieldNumber;
const int sPersistDB::kEffectstatsFieldNumber;
const int sPersistDB::kEffectsFieldNumber;
const int sPersistDB::kModelactionsFieldNumber;
const int sPersistDB::kMonsterrefreshFieldNumber;
const int sPersistDB::kDropstatsFieldNumber;
const int sPersistDB::kCharactorstatsFieldNumber;
const int sPersistDB::kEffecttableFieldNumber;
const int sPersistDB::kAisFieldNumber;
const int sPersistDB::kSoundstatsFieldNumber;
const int sPersistDB::kSoundtableFieldNumber;
const int sPersistDB::kShopstatsFieldNumber;
const int sPersistDB::kCharSkillLevelupFieldNumber;
const int sPersistDB::kCharExpFieldNumber;
const int sPersistDB::kCharLevelupFieldNumber;
const int sPersistDB::kCharChangeJobFieldNumber;
const int sPersistDB::kCardIntensifyFieldNumber;
const int sPersistDB::kCardLevelupFieldNumber;
const int sPersistDB::kCardStarupFieldNumber;
const int sPersistDB::kDropStatsFieldNumber;
const int sPersistDB::kEquipIntensifyFieldNumber;
const int sPersistDB::kEquipLevelupFieldNumber;
const int sPersistDB::kEquipStarupFieldNumber;
const int sPersistDB::kTaskstatsFieldNumber;
const int sPersistDB::kBuyStaminaFieldNumber;
const int sPersistDB::kBuyGoldFieldNumber;
const int sPersistDB::kBnksFieldNumber;
const int sPersistDB::kPrefixStatsFieldNumber;
const int sPersistDB::kActionEffectFieldNumber;
const int sPersistDB::kDecomStatsFieldNumber;
const int sPersistDB::kPplConstantFieldNumber;
const int sPersistDB::kWeekStatsFieldNumber;
const int sPersistDB::kPartnerstatsFieldNumber;
const int sPersistDB::kPartnerLvUpStatsFieldNumber;
const int sPersistDB::kPartnerIntensifyStatsFieldNumber;
const int sPersistDB::kPartnerStarStatsFieldNumber;
const int sPersistDB::kActivityStatsFieldNumber;
const int sPersistDB::kResourseStatsFieldNumber;
const int sPersistDB::kHomeBgStatsFieldNumber;
const int sPersistDB::kBattleMapGuideFieldNumber;
const int sPersistDB::kEquipRecommendStatsFieldNumber;
const int sPersistDB::kSoundEffectFieldNumber;
const int sPersistDB::kMusicEffectFieldNumber;
const int sPersistDB::kEquipIdentifyFieldNumber;
const int sPersistDB::kAttributeBaseFieldNumber;
const int sPersistDB::kCropsLevelFieldNumber;
const int sPersistDB::kEffectMoveFieldNumber;
const int sPersistDB::kVipStatsFieldNumber;
const int sPersistDB::kEliteResetFieldNumber;
const int sPersistDB::kShopResetFieldNumber;
const int sPersistDB::kWorldbossResetFieldNumber;
const int sPersistDB::kEquipGroupStatsFieldNumber;
const int sPersistDB::kConstantGroupStatsFieldNumber;
const int sPersistDB::kMusicEventFieldNumber;
const int sPersistDB::kCastleErFieldNumber;
const int sPersistDB::kBossMapStatsFieldNumber;
const int sPersistDB::kColdResetFieldNumber;
const int sPersistDB::kBattleLoadingsFieldNumber;
const int sPersistDB::kDoubleFightResetFieldNumber;
#endif  // !_MSC_VER

sPersistDB::sPersistDB()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPersistDB::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ppl_constant_ = const_cast< ::jynetwork::proto::sPPLConstant*>(
      ::jynetwork::proto::sPPLConstant::internal_default_instance());
#else
  ppl_constant_ = const_cast< ::jynetwork::proto::sPPLConstant*>(&::jynetwork::proto::sPPLConstant::default_instance());
#endif
}

sPersistDB::sPersistDB(const sPersistDB& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPersistDB::SharedCtor() {
  _cached_size_ = 0;
  nversion_ = 0u;
  ppl_constant_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPersistDB::~sPersistDB() {
  SharedDtor();
}

void sPersistDB::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ppl_constant_;
  }
}

void sPersistDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPersistDB& sPersistDB::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sPersistDB* sPersistDB::default_instance_ = NULL;

sPersistDB* sPersistDB::New() const {
  return new sPersistDB;
}

void sPersistDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nversion_ = 0u;
  }
  if (_has_bits_[38 / 32] & (0xffu << (38 % 32))) {
    if (has_ppl_constant()) {
      if (ppl_constant_ != NULL) ppl_constant_->::jynetwork::proto::sPPLConstant::Clear();
    }
  }
  itemstats_.Clear();
  gamestats_.Clear();
  equipstats_.Clear();
  skillstats_.Clear();
  cardstats_.Clear();
  buffstats_.Clear();
  castlestats_.Clear();
  stageprops_.Clear();
  effectstats_.Clear();
  effects_.Clear();
  modelactions_.Clear();
  monsterrefresh_.Clear();
  dropstats_.Clear();
  charactorstats_.Clear();
  effecttable_.Clear();
  ais_.Clear();
  soundstats_.Clear();
  soundtable_.Clear();
  shopstats_.Clear();
  char_skill_levelup_.Clear();
  char_exp_.Clear();
  char_levelup_.Clear();
  char_change_job_.Clear();
  card_intensify_.Clear();
  card_levelup_.Clear();
  card_starup_.Clear();
  drop_stats_.Clear();
  equip_intensify_.Clear();
  equip_levelup_.Clear();
  equip_starup_.Clear();
  taskstats_.Clear();
  buy_stamina_.Clear();
  buy_gold_.Clear();
  bnks_.Clear();
  prefix_stats_.Clear();
  action_effect_.Clear();
  decom_stats_.Clear();
  week_stats_.Clear();
  partnerstats_.Clear();
  partner_lv_up_stats_.Clear();
  partner_intensify_stats_.Clear();
  partner_star_stats_.Clear();
  activity_stats_.Clear();
  resourse_stats_.Clear();
  home_bg_stats_.Clear();
  battle_map_guide_.Clear();
  equip_recommend_stats_.Clear();
  sound_effect_.Clear();
  music_effect_.Clear();
  equip_identify_.Clear();
  attribute_base_.Clear();
  crops_level_.Clear();
  effect_move_.Clear();
  vip_stats_.Clear();
  elite_reset_.Clear();
  shop_reset_.Clear();
  worldboss_reset_.Clear();
  equip_group_stats_.Clear();
  constant_group_stats_.Clear();
  music_event_.Clear();
  castle_er_.Clear();
  bossmapstats_.Clear();
  cold_reset_.Clear();
  battle_loadings_.Clear();
  double_fight_reset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPersistDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nversion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nversion_)));
          set_has_nversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemstats;
        break;
      }

      // repeated .jynetwork.proto.sItemStats itemstats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemstats;
        if (input->ExpectTag(26)) goto parse_gamestats;
        break;
      }

      // repeated .jynetwork.proto.sGameStats gamestats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamestats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamestats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gamestats;
        if (input->ExpectTag(34)) goto parse_equipstats;
        break;
      }

      // repeated .jynetwork.proto.sEquipStats equipstats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equipstats;
        if (input->ExpectTag(42)) goto parse_skillstats;
        break;
      }

      // repeated .jynetwork.proto.sSkillStats skillstats = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skillstats;
        if (input->ExpectTag(50)) goto parse_cardstats;
        break;
      }

      // repeated .jynetwork.proto.sCardStats cardstats = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cardstats;
        if (input->ExpectTag(58)) goto parse_buffstats;
        break;
      }

      // repeated .jynetwork.proto.sBuffStats buffstats = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_buffstats;
        if (input->ExpectTag(66)) goto parse_castlestats;
        break;
      }

      // repeated .jynetwork.proto.sCastleStats castlestats = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_castlestats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_castlestats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_castlestats;
        if (input->ExpectTag(74)) goto parse_stageprops;
        break;
      }

      // repeated .jynetwork.proto.sStageProp stageprops = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stageprops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stageprops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stageprops;
        if (input->ExpectTag(82)) goto parse_effectstats;
        break;
      }

      // repeated .jynetwork.proto.sEffectStats effectstats = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effectstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effectstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_effectstats;
        if (input->ExpectTag(90)) goto parse_effects;
        break;
      }

      // repeated .jynetwork.proto.sEffects effects = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_effects;
        if (input->ExpectTag(98)) goto parse_modelactions;
        break;
      }

      // repeated .jynetwork.proto.sModelAction modelactions = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelactions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modelactions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_modelactions;
        if (input->ExpectTag(106)) goto parse_monsterrefresh;
        break;
      }

      // repeated .jynetwork.proto.sMonsterRefresh monsterrefresh = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterrefresh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterrefresh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_monsterrefresh;
        if (input->ExpectTag(114)) goto parse_dropstats;
        break;
      }

      // repeated .jynetwork.proto.sDropStats dropstats = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dropstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_dropstats;
        if (input->ExpectTag(122)) goto parse_charactorstats;
        break;
      }

      // repeated .jynetwork.proto.sCharactorStats charactorstats = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charactorstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charactorstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_charactorstats;
        if (input->ExpectTag(130)) goto parse_effecttable;
        break;
      }

      // repeated .jynetwork.proto.sEffectTable effecttable = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effecttable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effecttable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_effecttable;
        if (input->ExpectTag(138)) goto parse_ais;
        break;
      }

      // repeated .jynetwork.proto.sAISetting ais = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ais:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ais()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_ais;
        if (input->ExpectTag(146)) goto parse_soundstats;
        break;
      }

      // repeated .jynetwork.proto.sSoundStats soundstats = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soundstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soundstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_soundstats;
        if (input->ExpectTag(154)) goto parse_soundtable;
        break;
      }

      // repeated .jynetwork.proto.sSoundTable soundtable = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soundtable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soundtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_soundtable;
        if (input->ExpectTag(162)) goto parse_shopstats;
        break;
      }

      // repeated .jynetwork.proto.sShopItem shopstats = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shopstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shopstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_shopstats;
        if (input->ExpectTag(170)) goto parse_char_skill_levelup;
        break;
      }

      // repeated .jynetwork.proto.sCharSkillLevelUp char_skill_levelup = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_skill_levelup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_char_skill_levelup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_char_skill_levelup;
        if (input->ExpectTag(178)) goto parse_char_exp;
        break;
      }

      // repeated .jynetwork.proto.sCharExp char_exp = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_exp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_char_exp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_char_exp;
        if (input->ExpectTag(186)) goto parse_char_levelup;
        break;
      }

      // repeated .jynetwork.proto.sCharLevelUp char_levelup = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_levelup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_char_levelup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_char_levelup;
        if (input->ExpectTag(194)) goto parse_char_change_job;
        break;
      }

      // repeated .jynetwork.proto.sCharChangeJob char_change_job = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_change_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_char_change_job()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_char_change_job;
        if (input->ExpectTag(202)) goto parse_card_intensify;
        break;
      }

      // repeated .jynetwork.proto.sCardIntensify card_intensify = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_intensify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_intensify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_card_intensify;
        if (input->ExpectTag(210)) goto parse_card_levelup;
        break;
      }

      // repeated .jynetwork.proto.sCardLevelUp card_levelup = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_levelup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_levelup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_card_levelup;
        if (input->ExpectTag(218)) goto parse_card_starup;
        break;
      }

      // repeated .jynetwork.proto.sCardStarUp card_starup = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_starup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_starup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_card_starup;
        if (input->ExpectTag(226)) goto parse_drop_stats;
        break;
      }

      // repeated .jynetwork.proto.sDropStats drop_stats = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drop_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_drop_stats;
        if (input->ExpectTag(234)) goto parse_equip_intensify;
        break;
      }

      // repeated .jynetwork.proto.sEquipIntensify equip_intensify = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_intensify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_intensify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_equip_intensify;
        if (input->ExpectTag(242)) goto parse_equip_levelup;
        break;
      }

      // repeated .jynetwork.proto.sEquipLevelUp equip_levelup = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_levelup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_levelup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_equip_levelup;
        if (input->ExpectTag(250)) goto parse_equip_starup;
        break;
      }

      // repeated .jynetwork.proto.sEquipStarUp equip_starup = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_starup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_starup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_equip_starup;
        if (input->ExpectTag(258)) goto parse_taskstats;
        break;
      }

      // repeated .jynetwork.proto.sTaskStats taskstats = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_taskstats;
        if (input->ExpectTag(266)) goto parse_buy_stamina;
        break;
      }

      // repeated .jynetwork.proto.sBuyStaminaStats buy_stamina = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_stamina:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_stamina()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_buy_stamina;
        if (input->ExpectTag(274)) goto parse_buy_gold;
        break;
      }

      // repeated .jynetwork.proto.sBuyGoldStats buy_gold = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_gold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_gold()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_buy_gold;
        if (input->ExpectTag(282)) goto parse_bnks;
        break;
      }

      // repeated string bnks = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bnks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bnks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_bnks;
        if (input->ExpectTag(290)) goto parse_prefix_stats;
        break;
      }

      // repeated .jynetwork.proto.sPrefixStats prefix_stats = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefix_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prefix_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_prefix_stats;
        if (input->ExpectTag(298)) goto parse_action_effect;
        break;
      }

      // repeated .jynetwork.proto.sActionEffect action_effect = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action_effect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_action_effect;
        if (input->ExpectTag(306)) goto parse_decom_stats;
        break;
      }

      // repeated .jynetwork.proto.sDecomStats decom_stats = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_decom_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_decom_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_decom_stats;
        if (input->ExpectTag(314)) goto parse_ppl_constant;
        break;
      }

      // optional .jynetwork.proto.sPPLConstant ppl_constant = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ppl_constant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ppl_constant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_week_stats;
        break;
      }

      // repeated .jynetwork.proto.sWeekStats week_stats = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_week_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_week_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_week_stats;
        if (input->ExpectTag(330)) goto parse_partnerstats;
        break;
      }

      // repeated .jynetwork.proto.sPartnerStats partnerstats = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partnerstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_partnerstats;
        if (input->ExpectTag(338)) goto parse_partner_lv_up_stats;
        break;
      }

      // repeated .jynetwork.proto.sPartnerLvUpStats partner_lv_up_stats = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_lv_up_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partner_lv_up_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_partner_lv_up_stats;
        if (input->ExpectTag(346)) goto parse_partner_intensify_stats;
        break;
      }

      // repeated .jynetwork.proto.sPartnerIntensifyStats partner_intensify_stats = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_intensify_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partner_intensify_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_partner_intensify_stats;
        if (input->ExpectTag(354)) goto parse_partner_star_stats;
        break;
      }

      // repeated .jynetwork.proto.sPartnerStarStats partner_star_stats = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_star_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partner_star_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_partner_star_stats;
        if (input->ExpectTag(362)) goto parse_activity_stats;
        break;
      }

      // repeated .jynetwork.proto.sActivityStats activity_stats = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_activity_stats;
        if (input->ExpectTag(370)) goto parse_resourse_stats;
        break;
      }

      // repeated .jynetwork.proto.sResourseStats resourse_stats = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resourse_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_resourse_stats;
        if (input->ExpectTag(378)) goto parse_home_bg_stats;
        break;
      }

      // repeated .jynetwork.proto.sHomeBackground home_bg_stats = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_home_bg_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_home_bg_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_home_bg_stats;
        if (input->ExpectTag(386)) goto parse_battle_map_guide;
        break;
      }

      // repeated .jynetwork.proto.sBattleMapGuide battle_map_guide = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_map_guide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_map_guide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_battle_map_guide;
        if (input->ExpectTag(394)) goto parse_equip_recommend_stats;
        break;
      }

      // repeated .jynetwork.proto.sEquipRecommend equip_recommend_stats = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_recommend_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_recommend_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_equip_recommend_stats;
        if (input->ExpectTag(402)) goto parse_sound_effect;
        break;
      }

      // repeated .jynetwork.proto.sSoundEffectWav sound_effect = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sound_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sound_effect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_sound_effect;
        if (input->ExpectTag(410)) goto parse_music_effect;
        break;
      }

      // repeated .jynetwork.proto.sSoundEffectMusic music_effect = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_music_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_music_effect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_music_effect;
        if (input->ExpectTag(418)) goto parse_equip_identify;
        break;
      }

      // repeated .jynetwork.proto.sEquipIdentify equip_identify = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_identify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_identify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_equip_identify;
        if (input->ExpectTag(426)) goto parse_attribute_base;
        break;
      }

      // repeated .jynetwork.proto.sAttributeBase attribute_base = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_attribute_base;
        if (input->ExpectTag(434)) goto parse_crops_level;
        break;
      }

      // repeated .jynetwork.proto.sCorpsLevel crops_level = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crops_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crops_level()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_crops_level;
        if (input->ExpectTag(442)) goto parse_effect_move;
        break;
      }

      // repeated .jynetwork.proto.sEffectMove effect_move = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effect_move()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_effect_move;
        if (input->ExpectTag(450)) goto parse_vip_stats;
        break;
      }

      // repeated .jynetwork.proto.sVipStats vip_stats = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vip_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_vip_stats;
        if (input->ExpectTag(458)) goto parse_elite_reset;
        break;
      }

      // repeated .jynetwork.proto.sVipCostStats elite_reset = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elite_reset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elite_reset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_elite_reset;
        if (input->ExpectTag(466)) goto parse_shop_reset;
        break;
      }

      // repeated .jynetwork.proto.sVipCostStats shop_reset = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_reset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop_reset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_shop_reset;
        if (input->ExpectTag(474)) goto parse_worldboss_reset;
        break;
      }

      // repeated .jynetwork.proto.sVipCostStats worldboss_reset = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldboss_reset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worldboss_reset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_worldboss_reset;
        if (input->ExpectTag(482)) goto parse_equip_group_stats;
        break;
      }

      // repeated .jynetwork.proto.sEquipGroupStats equip_group_stats = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_group_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_group_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_equip_group_stats;
        if (input->ExpectTag(490)) goto parse_constant_group_stats;
        break;
      }

      // repeated .jynetwork.proto.sConstantsStats constant_group_stats = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_constant_group_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constant_group_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_constant_group_stats;
        if (input->ExpectTag(498)) goto parse_music_event;
        break;
      }

      // repeated .jynetwork.proto.sMusiceEventTable music_event = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_music_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_music_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_music_event;
        if (input->ExpectTag(506)) goto parse_castle_er;
        break;
      }

      // repeated .jynetwork.proto.sCastleEndlessRelation castle_er = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_castle_er:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_castle_er()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_castle_er;
        if (input->ExpectTag(514)) goto parse_bossMapStats;
        break;
      }

      // repeated .jynetwork.proto.CorpsBossMapStats bossMapStats = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossMapStats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossmapstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_bossMapStats;
        if (input->ExpectTag(522)) goto parse_cold_reset;
        break;
      }

      // repeated .jynetwork.proto.sVipCostStats cold_reset = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cold_reset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cold_reset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_cold_reset;
        if (input->ExpectTag(530)) goto parse_battle_loadings;
        break;
      }

      // repeated string battle_loadings = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_loadings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_battle_loadings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse_battle_loadings;
        if (input->ExpectTag(538)) goto parse_double_fight_reset;
        break;
      }

      // repeated .jynetwork.proto.sVipCostStats double_fight_reset = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_double_fight_reset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_double_fight_reset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(538)) goto parse_double_fight_reset;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPersistDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nversion = 1;
  if (has_nversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nversion(), output);
  }

  // repeated .jynetwork.proto.sItemStats itemstats = 2;
  for (int i = 0; i < this->itemstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->itemstats(i), output);
  }

  // repeated .jynetwork.proto.sGameStats gamestats = 3;
  for (int i = 0; i < this->gamestats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->gamestats(i), output);
  }

  // repeated .jynetwork.proto.sEquipStats equipstats = 4;
  for (int i = 0; i < this->equipstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->equipstats(i), output);
  }

  // repeated .jynetwork.proto.sSkillStats skillstats = 5;
  for (int i = 0; i < this->skillstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->skillstats(i), output);
  }

  // repeated .jynetwork.proto.sCardStats cardstats = 6;
  for (int i = 0; i < this->cardstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->cardstats(i), output);
  }

  // repeated .jynetwork.proto.sBuffStats buffstats = 7;
  for (int i = 0; i < this->buffstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->buffstats(i), output);
  }

  // repeated .jynetwork.proto.sCastleStats castlestats = 8;
  for (int i = 0; i < this->castlestats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->castlestats(i), output);
  }

  // repeated .jynetwork.proto.sStageProp stageprops = 9;
  for (int i = 0; i < this->stageprops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->stageprops(i), output);
  }

  // repeated .jynetwork.proto.sEffectStats effectstats = 10;
  for (int i = 0; i < this->effectstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->effectstats(i), output);
  }

  // repeated .jynetwork.proto.sEffects effects = 11;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->effects(i), output);
  }

  // repeated .jynetwork.proto.sModelAction modelactions = 12;
  for (int i = 0; i < this->modelactions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->modelactions(i), output);
  }

  // repeated .jynetwork.proto.sMonsterRefresh monsterrefresh = 13;
  for (int i = 0; i < this->monsterrefresh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->monsterrefresh(i), output);
  }

  // repeated .jynetwork.proto.sDropStats dropstats = 14;
  for (int i = 0; i < this->dropstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->dropstats(i), output);
  }

  // repeated .jynetwork.proto.sCharactorStats charactorstats = 15;
  for (int i = 0; i < this->charactorstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->charactorstats(i), output);
  }

  // repeated .jynetwork.proto.sEffectTable effecttable = 16;
  for (int i = 0; i < this->effecttable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->effecttable(i), output);
  }

  // repeated .jynetwork.proto.sAISetting ais = 17;
  for (int i = 0; i < this->ais_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->ais(i), output);
  }

  // repeated .jynetwork.proto.sSoundStats soundstats = 18;
  for (int i = 0; i < this->soundstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->soundstats(i), output);
  }

  // repeated .jynetwork.proto.sSoundTable soundtable = 19;
  for (int i = 0; i < this->soundtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->soundtable(i), output);
  }

  // repeated .jynetwork.proto.sShopItem shopstats = 20;
  for (int i = 0; i < this->shopstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->shopstats(i), output);
  }

  // repeated .jynetwork.proto.sCharSkillLevelUp char_skill_levelup = 21;
  for (int i = 0; i < this->char_skill_levelup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->char_skill_levelup(i), output);
  }

  // repeated .jynetwork.proto.sCharExp char_exp = 22;
  for (int i = 0; i < this->char_exp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->char_exp(i), output);
  }

  // repeated .jynetwork.proto.sCharLevelUp char_levelup = 23;
  for (int i = 0; i < this->char_levelup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->char_levelup(i), output);
  }

  // repeated .jynetwork.proto.sCharChangeJob char_change_job = 24;
  for (int i = 0; i < this->char_change_job_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->char_change_job(i), output);
  }

  // repeated .jynetwork.proto.sCardIntensify card_intensify = 25;
  for (int i = 0; i < this->card_intensify_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->card_intensify(i), output);
  }

  // repeated .jynetwork.proto.sCardLevelUp card_levelup = 26;
  for (int i = 0; i < this->card_levelup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->card_levelup(i), output);
  }

  // repeated .jynetwork.proto.sCardStarUp card_starup = 27;
  for (int i = 0; i < this->card_starup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->card_starup(i), output);
  }

  // repeated .jynetwork.proto.sDropStats drop_stats = 28;
  for (int i = 0; i < this->drop_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->drop_stats(i), output);
  }

  // repeated .jynetwork.proto.sEquipIntensify equip_intensify = 29;
  for (int i = 0; i < this->equip_intensify_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->equip_intensify(i), output);
  }

  // repeated .jynetwork.proto.sEquipLevelUp equip_levelup = 30;
  for (int i = 0; i < this->equip_levelup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->equip_levelup(i), output);
  }

  // repeated .jynetwork.proto.sEquipStarUp equip_starup = 31;
  for (int i = 0; i < this->equip_starup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->equip_starup(i), output);
  }

  // repeated .jynetwork.proto.sTaskStats taskstats = 32;
  for (int i = 0; i < this->taskstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->taskstats(i), output);
  }

  // repeated .jynetwork.proto.sBuyStaminaStats buy_stamina = 33;
  for (int i = 0; i < this->buy_stamina_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->buy_stamina(i), output);
  }

  // repeated .jynetwork.proto.sBuyGoldStats buy_gold = 34;
  for (int i = 0; i < this->buy_gold_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->buy_gold(i), output);
  }

  // repeated string bnks = 35;
  for (int i = 0; i < this->bnks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->bnks(i), output);
  }

  // repeated .jynetwork.proto.sPrefixStats prefix_stats = 36;
  for (int i = 0; i < this->prefix_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, this->prefix_stats(i), output);
  }

  // repeated .jynetwork.proto.sActionEffect action_effect = 37;
  for (int i = 0; i < this->action_effect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, this->action_effect(i), output);
  }

  // repeated .jynetwork.proto.sDecomStats decom_stats = 38;
  for (int i = 0; i < this->decom_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, this->decom_stats(i), output);
  }

  // optional .jynetwork.proto.sPPLConstant ppl_constant = 39;
  if (has_ppl_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      39, this->ppl_constant(), output);
  }

  // repeated .jynetwork.proto.sWeekStats week_stats = 40;
  for (int i = 0; i < this->week_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, this->week_stats(i), output);
  }

  // repeated .jynetwork.proto.sPartnerStats partnerstats = 41;
  for (int i = 0; i < this->partnerstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41, this->partnerstats(i), output);
  }

  // repeated .jynetwork.proto.sPartnerLvUpStats partner_lv_up_stats = 42;
  for (int i = 0; i < this->partner_lv_up_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      42, this->partner_lv_up_stats(i), output);
  }

  // repeated .jynetwork.proto.sPartnerIntensifyStats partner_intensify_stats = 43;
  for (int i = 0; i < this->partner_intensify_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      43, this->partner_intensify_stats(i), output);
  }

  // repeated .jynetwork.proto.sPartnerStarStats partner_star_stats = 44;
  for (int i = 0; i < this->partner_star_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      44, this->partner_star_stats(i), output);
  }

  // repeated .jynetwork.proto.sActivityStats activity_stats = 45;
  for (int i = 0; i < this->activity_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45, this->activity_stats(i), output);
  }

  // repeated .jynetwork.proto.sResourseStats resourse_stats = 46;
  for (int i = 0; i < this->resourse_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->resourse_stats(i), output);
  }

  // repeated .jynetwork.proto.sHomeBackground home_bg_stats = 47;
  for (int i = 0; i < this->home_bg_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, this->home_bg_stats(i), output);
  }

  // repeated .jynetwork.proto.sBattleMapGuide battle_map_guide = 48;
  for (int i = 0; i < this->battle_map_guide_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48, this->battle_map_guide(i), output);
  }

  // repeated .jynetwork.proto.sEquipRecommend equip_recommend_stats = 49;
  for (int i = 0; i < this->equip_recommend_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, this->equip_recommend_stats(i), output);
  }

  // repeated .jynetwork.proto.sSoundEffectWav sound_effect = 50;
  for (int i = 0; i < this->sound_effect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      50, this->sound_effect(i), output);
  }

  // repeated .jynetwork.proto.sSoundEffectMusic music_effect = 51;
  for (int i = 0; i < this->music_effect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      51, this->music_effect(i), output);
  }

  // repeated .jynetwork.proto.sEquipIdentify equip_identify = 52;
  for (int i = 0; i < this->equip_identify_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      52, this->equip_identify(i), output);
  }

  // repeated .jynetwork.proto.sAttributeBase attribute_base = 53;
  for (int i = 0; i < this->attribute_base_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      53, this->attribute_base(i), output);
  }

  // repeated .jynetwork.proto.sCorpsLevel crops_level = 54;
  for (int i = 0; i < this->crops_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      54, this->crops_level(i), output);
  }

  // repeated .jynetwork.proto.sEffectMove effect_move = 55;
  for (int i = 0; i < this->effect_move_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      55, this->effect_move(i), output);
  }

  // repeated .jynetwork.proto.sVipStats vip_stats = 56;
  for (int i = 0; i < this->vip_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      56, this->vip_stats(i), output);
  }

  // repeated .jynetwork.proto.sVipCostStats elite_reset = 57;
  for (int i = 0; i < this->elite_reset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      57, this->elite_reset(i), output);
  }

  // repeated .jynetwork.proto.sVipCostStats shop_reset = 58;
  for (int i = 0; i < this->shop_reset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      58, this->shop_reset(i), output);
  }

  // repeated .jynetwork.proto.sVipCostStats worldboss_reset = 59;
  for (int i = 0; i < this->worldboss_reset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      59, this->worldboss_reset(i), output);
  }

  // repeated .jynetwork.proto.sEquipGroupStats equip_group_stats = 60;
  for (int i = 0; i < this->equip_group_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      60, this->equip_group_stats(i), output);
  }

  // repeated .jynetwork.proto.sConstantsStats constant_group_stats = 61;
  for (int i = 0; i < this->constant_group_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      61, this->constant_group_stats(i), output);
  }

  // repeated .jynetwork.proto.sMusiceEventTable music_event = 62;
  for (int i = 0; i < this->music_event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      62, this->music_event(i), output);
  }

  // repeated .jynetwork.proto.sCastleEndlessRelation castle_er = 63;
  for (int i = 0; i < this->castle_er_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      63, this->castle_er(i), output);
  }

  // repeated .jynetwork.proto.CorpsBossMapStats bossMapStats = 64;
  for (int i = 0; i < this->bossmapstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      64, this->bossmapstats(i), output);
  }

  // repeated .jynetwork.proto.sVipCostStats cold_reset = 65;
  for (int i = 0; i < this->cold_reset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      65, this->cold_reset(i), output);
  }

  // repeated string battle_loadings = 66;
  for (int i = 0; i < this->battle_loadings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      66, this->battle_loadings(i), output);
  }

  // repeated .jynetwork.proto.sVipCostStats double_fight_reset = 67;
  for (int i = 0; i < this->double_fight_reset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      67, this->double_fight_reset(i), output);
  }

}

int sPersistDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nversion = 1;
    if (has_nversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nversion());
    }

  }
  if (_has_bits_[38 / 32] & (0xffu << (38 % 32))) {
    // optional .jynetwork.proto.sPPLConstant ppl_constant = 39;
    if (has_ppl_constant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ppl_constant());
    }

  }
  // repeated .jynetwork.proto.sItemStats itemstats = 2;
  total_size += 1 * this->itemstats_size();
  for (int i = 0; i < this->itemstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemstats(i));
  }

  // repeated .jynetwork.proto.sGameStats gamestats = 3;
  total_size += 1 * this->gamestats_size();
  for (int i = 0; i < this->gamestats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamestats(i));
  }

  // repeated .jynetwork.proto.sEquipStats equipstats = 4;
  total_size += 1 * this->equipstats_size();
  for (int i = 0; i < this->equipstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipstats(i));
  }

  // repeated .jynetwork.proto.sSkillStats skillstats = 5;
  total_size += 1 * this->skillstats_size();
  for (int i = 0; i < this->skillstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillstats(i));
  }

  // repeated .jynetwork.proto.sCardStats cardstats = 6;
  total_size += 1 * this->cardstats_size();
  for (int i = 0; i < this->cardstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardstats(i));
  }

  // repeated .jynetwork.proto.sBuffStats buffstats = 7;
  total_size += 1 * this->buffstats_size();
  for (int i = 0; i < this->buffstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffstats(i));
  }

  // repeated .jynetwork.proto.sCastleStats castlestats = 8;
  total_size += 1 * this->castlestats_size();
  for (int i = 0; i < this->castlestats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->castlestats(i));
  }

  // repeated .jynetwork.proto.sStageProp stageprops = 9;
  total_size += 1 * this->stageprops_size();
  for (int i = 0; i < this->stageprops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stageprops(i));
  }

  // repeated .jynetwork.proto.sEffectStats effectstats = 10;
  total_size += 1 * this->effectstats_size();
  for (int i = 0; i < this->effectstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effectstats(i));
  }

  // repeated .jynetwork.proto.sEffects effects = 11;
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }

  // repeated .jynetwork.proto.sModelAction modelactions = 12;
  total_size += 1 * this->modelactions_size();
  for (int i = 0; i < this->modelactions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->modelactions(i));
  }

  // repeated .jynetwork.proto.sMonsterRefresh monsterrefresh = 13;
  total_size += 1 * this->monsterrefresh_size();
  for (int i = 0; i < this->monsterrefresh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterrefresh(i));
  }

  // repeated .jynetwork.proto.sDropStats dropstats = 14;
  total_size += 1 * this->dropstats_size();
  for (int i = 0; i < this->dropstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dropstats(i));
  }

  // repeated .jynetwork.proto.sCharactorStats charactorstats = 15;
  total_size += 1 * this->charactorstats_size();
  for (int i = 0; i < this->charactorstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charactorstats(i));
  }

  // repeated .jynetwork.proto.sEffectTable effecttable = 16;
  total_size += 2 * this->effecttable_size();
  for (int i = 0; i < this->effecttable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effecttable(i));
  }

  // repeated .jynetwork.proto.sAISetting ais = 17;
  total_size += 2 * this->ais_size();
  for (int i = 0; i < this->ais_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ais(i));
  }

  // repeated .jynetwork.proto.sSoundStats soundstats = 18;
  total_size += 2 * this->soundstats_size();
  for (int i = 0; i < this->soundstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soundstats(i));
  }

  // repeated .jynetwork.proto.sSoundTable soundtable = 19;
  total_size += 2 * this->soundtable_size();
  for (int i = 0; i < this->soundtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soundtable(i));
  }

  // repeated .jynetwork.proto.sShopItem shopstats = 20;
  total_size += 2 * this->shopstats_size();
  for (int i = 0; i < this->shopstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shopstats(i));
  }

  // repeated .jynetwork.proto.sCharSkillLevelUp char_skill_levelup = 21;
  total_size += 2 * this->char_skill_levelup_size();
  for (int i = 0; i < this->char_skill_levelup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->char_skill_levelup(i));
  }

  // repeated .jynetwork.proto.sCharExp char_exp = 22;
  total_size += 2 * this->char_exp_size();
  for (int i = 0; i < this->char_exp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->char_exp(i));
  }

  // repeated .jynetwork.proto.sCharLevelUp char_levelup = 23;
  total_size += 2 * this->char_levelup_size();
  for (int i = 0; i < this->char_levelup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->char_levelup(i));
  }

  // repeated .jynetwork.proto.sCharChangeJob char_change_job = 24;
  total_size += 2 * this->char_change_job_size();
  for (int i = 0; i < this->char_change_job_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->char_change_job(i));
  }

  // repeated .jynetwork.proto.sCardIntensify card_intensify = 25;
  total_size += 2 * this->card_intensify_size();
  for (int i = 0; i < this->card_intensify_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_intensify(i));
  }

  // repeated .jynetwork.proto.sCardLevelUp card_levelup = 26;
  total_size += 2 * this->card_levelup_size();
  for (int i = 0; i < this->card_levelup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_levelup(i));
  }

  // repeated .jynetwork.proto.sCardStarUp card_starup = 27;
  total_size += 2 * this->card_starup_size();
  for (int i = 0; i < this->card_starup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_starup(i));
  }

  // repeated .jynetwork.proto.sDropStats drop_stats = 28;
  total_size += 2 * this->drop_stats_size();
  for (int i = 0; i < this->drop_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drop_stats(i));
  }

  // repeated .jynetwork.proto.sEquipIntensify equip_intensify = 29;
  total_size += 2 * this->equip_intensify_size();
  for (int i = 0; i < this->equip_intensify_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_intensify(i));
  }

  // repeated .jynetwork.proto.sEquipLevelUp equip_levelup = 30;
  total_size += 2 * this->equip_levelup_size();
  for (int i = 0; i < this->equip_levelup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_levelup(i));
  }

  // repeated .jynetwork.proto.sEquipStarUp equip_starup = 31;
  total_size += 2 * this->equip_starup_size();
  for (int i = 0; i < this->equip_starup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_starup(i));
  }

  // repeated .jynetwork.proto.sTaskStats taskstats = 32;
  total_size += 2 * this->taskstats_size();
  for (int i = 0; i < this->taskstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskstats(i));
  }

  // repeated .jynetwork.proto.sBuyStaminaStats buy_stamina = 33;
  total_size += 2 * this->buy_stamina_size();
  for (int i = 0; i < this->buy_stamina_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_stamina(i));
  }

  // repeated .jynetwork.proto.sBuyGoldStats buy_gold = 34;
  total_size += 2 * this->buy_gold_size();
  for (int i = 0; i < this->buy_gold_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_gold(i));
  }

  // repeated string bnks = 35;
  total_size += 2 * this->bnks_size();
  for (int i = 0; i < this->bnks_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bnks(i));
  }

  // repeated .jynetwork.proto.sPrefixStats prefix_stats = 36;
  total_size += 2 * this->prefix_stats_size();
  for (int i = 0; i < this->prefix_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prefix_stats(i));
  }

  // repeated .jynetwork.proto.sActionEffect action_effect = 37;
  total_size += 2 * this->action_effect_size();
  for (int i = 0; i < this->action_effect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action_effect(i));
  }

  // repeated .jynetwork.proto.sDecomStats decom_stats = 38;
  total_size += 2 * this->decom_stats_size();
  for (int i = 0; i < this->decom_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->decom_stats(i));
  }

  // repeated .jynetwork.proto.sWeekStats week_stats = 40;
  total_size += 2 * this->week_stats_size();
  for (int i = 0; i < this->week_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->week_stats(i));
  }

  // repeated .jynetwork.proto.sPartnerStats partnerstats = 41;
  total_size += 2 * this->partnerstats_size();
  for (int i = 0; i < this->partnerstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partnerstats(i));
  }

  // repeated .jynetwork.proto.sPartnerLvUpStats partner_lv_up_stats = 42;
  total_size += 2 * this->partner_lv_up_stats_size();
  for (int i = 0; i < this->partner_lv_up_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partner_lv_up_stats(i));
  }

  // repeated .jynetwork.proto.sPartnerIntensifyStats partner_intensify_stats = 43;
  total_size += 2 * this->partner_intensify_stats_size();
  for (int i = 0; i < this->partner_intensify_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partner_intensify_stats(i));
  }

  // repeated .jynetwork.proto.sPartnerStarStats partner_star_stats = 44;
  total_size += 2 * this->partner_star_stats_size();
  for (int i = 0; i < this->partner_star_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partner_star_stats(i));
  }

  // repeated .jynetwork.proto.sActivityStats activity_stats = 45;
  total_size += 2 * this->activity_stats_size();
  for (int i = 0; i < this->activity_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity_stats(i));
  }

  // repeated .jynetwork.proto.sResourseStats resourse_stats = 46;
  total_size += 2 * this->resourse_stats_size();
  for (int i = 0; i < this->resourse_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resourse_stats(i));
  }

  // repeated .jynetwork.proto.sHomeBackground home_bg_stats = 47;
  total_size += 2 * this->home_bg_stats_size();
  for (int i = 0; i < this->home_bg_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->home_bg_stats(i));
  }

  // repeated .jynetwork.proto.sBattleMapGuide battle_map_guide = 48;
  total_size += 2 * this->battle_map_guide_size();
  for (int i = 0; i < this->battle_map_guide_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_map_guide(i));
  }

  // repeated .jynetwork.proto.sEquipRecommend equip_recommend_stats = 49;
  total_size += 2 * this->equip_recommend_stats_size();
  for (int i = 0; i < this->equip_recommend_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_recommend_stats(i));
  }

  // repeated .jynetwork.proto.sSoundEffectWav sound_effect = 50;
  total_size += 2 * this->sound_effect_size();
  for (int i = 0; i < this->sound_effect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sound_effect(i));
  }

  // repeated .jynetwork.proto.sSoundEffectMusic music_effect = 51;
  total_size += 2 * this->music_effect_size();
  for (int i = 0; i < this->music_effect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->music_effect(i));
  }

  // repeated .jynetwork.proto.sEquipIdentify equip_identify = 52;
  total_size += 2 * this->equip_identify_size();
  for (int i = 0; i < this->equip_identify_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_identify(i));
  }

  // repeated .jynetwork.proto.sAttributeBase attribute_base = 53;
  total_size += 2 * this->attribute_base_size();
  for (int i = 0; i < this->attribute_base_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute_base(i));
  }

  // repeated .jynetwork.proto.sCorpsLevel crops_level = 54;
  total_size += 2 * this->crops_level_size();
  for (int i = 0; i < this->crops_level_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crops_level(i));
  }

  // repeated .jynetwork.proto.sEffectMove effect_move = 55;
  total_size += 2 * this->effect_move_size();
  for (int i = 0; i < this->effect_move_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect_move(i));
  }

  // repeated .jynetwork.proto.sVipStats vip_stats = 56;
  total_size += 2 * this->vip_stats_size();
  for (int i = 0; i < this->vip_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vip_stats(i));
  }

  // repeated .jynetwork.proto.sVipCostStats elite_reset = 57;
  total_size += 2 * this->elite_reset_size();
  for (int i = 0; i < this->elite_reset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elite_reset(i));
  }

  // repeated .jynetwork.proto.sVipCostStats shop_reset = 58;
  total_size += 2 * this->shop_reset_size();
  for (int i = 0; i < this->shop_reset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop_reset(i));
  }

  // repeated .jynetwork.proto.sVipCostStats worldboss_reset = 59;
  total_size += 2 * this->worldboss_reset_size();
  for (int i = 0; i < this->worldboss_reset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldboss_reset(i));
  }

  // repeated .jynetwork.proto.sEquipGroupStats equip_group_stats = 60;
  total_size += 2 * this->equip_group_stats_size();
  for (int i = 0; i < this->equip_group_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_group_stats(i));
  }

  // repeated .jynetwork.proto.sConstantsStats constant_group_stats = 61;
  total_size += 2 * this->constant_group_stats_size();
  for (int i = 0; i < this->constant_group_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constant_group_stats(i));
  }

  // repeated .jynetwork.proto.sMusiceEventTable music_event = 62;
  total_size += 2 * this->music_event_size();
  for (int i = 0; i < this->music_event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->music_event(i));
  }

  // repeated .jynetwork.proto.sCastleEndlessRelation castle_er = 63;
  total_size += 2 * this->castle_er_size();
  for (int i = 0; i < this->castle_er_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->castle_er(i));
  }

  // repeated .jynetwork.proto.CorpsBossMapStats bossMapStats = 64;
  total_size += 2 * this->bossmapstats_size();
  for (int i = 0; i < this->bossmapstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossmapstats(i));
  }

  // repeated .jynetwork.proto.sVipCostStats cold_reset = 65;
  total_size += 2 * this->cold_reset_size();
  for (int i = 0; i < this->cold_reset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cold_reset(i));
  }

  // repeated string battle_loadings = 66;
  total_size += 2 * this->battle_loadings_size();
  for (int i = 0; i < this->battle_loadings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->battle_loadings(i));
  }

  // repeated .jynetwork.proto.sVipCostStats double_fight_reset = 67;
  total_size += 2 * this->double_fight_reset_size();
  for (int i = 0; i < this->double_fight_reset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->double_fight_reset(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPersistDB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPersistDB*>(&from));
}

void sPersistDB::MergeFrom(const sPersistDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemstats_.MergeFrom(from.itemstats_);
  gamestats_.MergeFrom(from.gamestats_);
  equipstats_.MergeFrom(from.equipstats_);
  skillstats_.MergeFrom(from.skillstats_);
  cardstats_.MergeFrom(from.cardstats_);
  buffstats_.MergeFrom(from.buffstats_);
  castlestats_.MergeFrom(from.castlestats_);
  stageprops_.MergeFrom(from.stageprops_);
  effectstats_.MergeFrom(from.effectstats_);
  effects_.MergeFrom(from.effects_);
  modelactions_.MergeFrom(from.modelactions_);
  monsterrefresh_.MergeFrom(from.monsterrefresh_);
  dropstats_.MergeFrom(from.dropstats_);
  charactorstats_.MergeFrom(from.charactorstats_);
  effecttable_.MergeFrom(from.effecttable_);
  ais_.MergeFrom(from.ais_);
  soundstats_.MergeFrom(from.soundstats_);
  soundtable_.MergeFrom(from.soundtable_);
  shopstats_.MergeFrom(from.shopstats_);
  char_skill_levelup_.MergeFrom(from.char_skill_levelup_);
  char_exp_.MergeFrom(from.char_exp_);
  char_levelup_.MergeFrom(from.char_levelup_);
  char_change_job_.MergeFrom(from.char_change_job_);
  card_intensify_.MergeFrom(from.card_intensify_);
  card_levelup_.MergeFrom(from.card_levelup_);
  card_starup_.MergeFrom(from.card_starup_);
  drop_stats_.MergeFrom(from.drop_stats_);
  equip_intensify_.MergeFrom(from.equip_intensify_);
  equip_levelup_.MergeFrom(from.equip_levelup_);
  equip_starup_.MergeFrom(from.equip_starup_);
  taskstats_.MergeFrom(from.taskstats_);
  buy_stamina_.MergeFrom(from.buy_stamina_);
  buy_gold_.MergeFrom(from.buy_gold_);
  bnks_.MergeFrom(from.bnks_);
  prefix_stats_.MergeFrom(from.prefix_stats_);
  action_effect_.MergeFrom(from.action_effect_);
  decom_stats_.MergeFrom(from.decom_stats_);
  week_stats_.MergeFrom(from.week_stats_);
  partnerstats_.MergeFrom(from.partnerstats_);
  partner_lv_up_stats_.MergeFrom(from.partner_lv_up_stats_);
  partner_intensify_stats_.MergeFrom(from.partner_intensify_stats_);
  partner_star_stats_.MergeFrom(from.partner_star_stats_);
  activity_stats_.MergeFrom(from.activity_stats_);
  resourse_stats_.MergeFrom(from.resourse_stats_);
  home_bg_stats_.MergeFrom(from.home_bg_stats_);
  battle_map_guide_.MergeFrom(from.battle_map_guide_);
  equip_recommend_stats_.MergeFrom(from.equip_recommend_stats_);
  sound_effect_.MergeFrom(from.sound_effect_);
  music_effect_.MergeFrom(from.music_effect_);
  equip_identify_.MergeFrom(from.equip_identify_);
  attribute_base_.MergeFrom(from.attribute_base_);
  crops_level_.MergeFrom(from.crops_level_);
  effect_move_.MergeFrom(from.effect_move_);
  vip_stats_.MergeFrom(from.vip_stats_);
  elite_reset_.MergeFrom(from.elite_reset_);
  shop_reset_.MergeFrom(from.shop_reset_);
  worldboss_reset_.MergeFrom(from.worldboss_reset_);
  equip_group_stats_.MergeFrom(from.equip_group_stats_);
  constant_group_stats_.MergeFrom(from.constant_group_stats_);
  music_event_.MergeFrom(from.music_event_);
  castle_er_.MergeFrom(from.castle_er_);
  bossmapstats_.MergeFrom(from.bossmapstats_);
  cold_reset_.MergeFrom(from.cold_reset_);
  battle_loadings_.MergeFrom(from.battle_loadings_);
  double_fight_reset_.MergeFrom(from.double_fight_reset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nversion()) {
      set_nversion(from.nversion());
    }
  }
  if (from._has_bits_[38 / 32] & (0xffu << (38 % 32))) {
    if (from.has_ppl_constant()) {
      mutable_ppl_constant()->::jynetwork::proto::sPPLConstant::MergeFrom(from.ppl_constant());
    }
  }
}

void sPersistDB::CopyFrom(const sPersistDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPersistDB::IsInitialized() const {

  return true;
}

void sPersistDB::Swap(sPersistDB* other) {
  if (other != this) {
    std::swap(nversion_, other->nversion_);
    itemstats_.Swap(&other->itemstats_);
    gamestats_.Swap(&other->gamestats_);
    equipstats_.Swap(&other->equipstats_);
    skillstats_.Swap(&other->skillstats_);
    cardstats_.Swap(&other->cardstats_);
    buffstats_.Swap(&other->buffstats_);
    castlestats_.Swap(&other->castlestats_);
    stageprops_.Swap(&other->stageprops_);
    effectstats_.Swap(&other->effectstats_);
    effects_.Swap(&other->effects_);
    modelactions_.Swap(&other->modelactions_);
    monsterrefresh_.Swap(&other->monsterrefresh_);
    dropstats_.Swap(&other->dropstats_);
    charactorstats_.Swap(&other->charactorstats_);
    effecttable_.Swap(&other->effecttable_);
    ais_.Swap(&other->ais_);
    soundstats_.Swap(&other->soundstats_);
    soundtable_.Swap(&other->soundtable_);
    shopstats_.Swap(&other->shopstats_);
    char_skill_levelup_.Swap(&other->char_skill_levelup_);
    char_exp_.Swap(&other->char_exp_);
    char_levelup_.Swap(&other->char_levelup_);
    char_change_job_.Swap(&other->char_change_job_);
    card_intensify_.Swap(&other->card_intensify_);
    card_levelup_.Swap(&other->card_levelup_);
    card_starup_.Swap(&other->card_starup_);
    drop_stats_.Swap(&other->drop_stats_);
    equip_intensify_.Swap(&other->equip_intensify_);
    equip_levelup_.Swap(&other->equip_levelup_);
    equip_starup_.Swap(&other->equip_starup_);
    taskstats_.Swap(&other->taskstats_);
    buy_stamina_.Swap(&other->buy_stamina_);
    buy_gold_.Swap(&other->buy_gold_);
    bnks_.Swap(&other->bnks_);
    prefix_stats_.Swap(&other->prefix_stats_);
    action_effect_.Swap(&other->action_effect_);
    decom_stats_.Swap(&other->decom_stats_);
    std::swap(ppl_constant_, other->ppl_constant_);
    week_stats_.Swap(&other->week_stats_);
    partnerstats_.Swap(&other->partnerstats_);
    partner_lv_up_stats_.Swap(&other->partner_lv_up_stats_);
    partner_intensify_stats_.Swap(&other->partner_intensify_stats_);
    partner_star_stats_.Swap(&other->partner_star_stats_);
    activity_stats_.Swap(&other->activity_stats_);
    resourse_stats_.Swap(&other->resourse_stats_);
    home_bg_stats_.Swap(&other->home_bg_stats_);
    battle_map_guide_.Swap(&other->battle_map_guide_);
    equip_recommend_stats_.Swap(&other->equip_recommend_stats_);
    sound_effect_.Swap(&other->sound_effect_);
    music_effect_.Swap(&other->music_effect_);
    equip_identify_.Swap(&other->equip_identify_);
    attribute_base_.Swap(&other->attribute_base_);
    crops_level_.Swap(&other->crops_level_);
    effect_move_.Swap(&other->effect_move_);
    vip_stats_.Swap(&other->vip_stats_);
    elite_reset_.Swap(&other->elite_reset_);
    shop_reset_.Swap(&other->shop_reset_);
    worldboss_reset_.Swap(&other->worldboss_reset_);
    equip_group_stats_.Swap(&other->equip_group_stats_);
    constant_group_stats_.Swap(&other->constant_group_stats_);
    music_event_.Swap(&other->music_event_);
    castle_er_.Swap(&other->castle_er_);
    bossmapstats_.Swap(&other->bossmapstats_);
    cold_reset_.Swap(&other->cold_reset_);
    battle_loadings_.Swap(&other->battle_loadings_);
    double_fight_reset_.Swap(&other->double_fight_reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPersistDB::GetTypeName() const {
  return "jynetwork.proto.sPersistDB";
}


// ===================================================================

#ifndef _MSC_VER
const int sMusicSetting::kBgmOpenFieldNumber;
const int sMusicSetting::kSeOpenFieldNumber;
const int sMusicSetting::kBgmVolFieldNumber;
const int sMusicSetting::kSeVolFieldNumber;
#endif  // !_MSC_VER

sMusicSetting::sMusicSetting()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sMusicSetting::InitAsDefaultInstance() {
}

sMusicSetting::sMusicSetting(const sMusicSetting& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sMusicSetting::SharedCtor() {
  _cached_size_ = 0;
  bgm_open_ = 0u;
  se_open_ = 0u;
  bgm_vol_ = 0;
  se_vol_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sMusicSetting::~sMusicSetting() {
  SharedDtor();
}

void sMusicSetting::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sMusicSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sMusicSetting& sMusicSetting::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sMusicSetting* sMusicSetting::default_instance_ = NULL;

sMusicSetting* sMusicSetting::New() const {
  return new sMusicSetting;
}

void sMusicSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bgm_open_ = 0u;
    se_open_ = 0u;
    bgm_vol_ = 0;
    se_vol_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sMusicSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bgm_open = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bgm_open_)));
          set_has_bgm_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_se_open;
        break;
      }

      // optional uint32 se_open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_se_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &se_open_)));
          set_has_se_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_bgm_vol;
        break;
      }

      // optional float bgm_vol = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bgm_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bgm_vol_)));
          set_has_bgm_vol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_se_vol;
        break;
      }

      // optional float se_vol = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_se_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &se_vol_)));
          set_has_se_vol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sMusicSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bgm_open = 1;
  if (has_bgm_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bgm_open(), output);
  }

  // optional uint32 se_open = 2;
  if (has_se_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->se_open(), output);
  }

  // optional float bgm_vol = 3;
  if (has_bgm_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bgm_vol(), output);
  }

  // optional float se_vol = 4;
  if (has_se_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->se_vol(), output);
  }

}

int sMusicSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bgm_open = 1;
    if (has_bgm_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bgm_open());
    }

    // optional uint32 se_open = 2;
    if (has_se_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->se_open());
    }

    // optional float bgm_vol = 3;
    if (has_bgm_vol()) {
      total_size += 1 + 4;
    }

    // optional float se_vol = 4;
    if (has_se_vol()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sMusicSetting::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sMusicSetting*>(&from));
}

void sMusicSetting::MergeFrom(const sMusicSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bgm_open()) {
      set_bgm_open(from.bgm_open());
    }
    if (from.has_se_open()) {
      set_se_open(from.se_open());
    }
    if (from.has_bgm_vol()) {
      set_bgm_vol(from.bgm_vol());
    }
    if (from.has_se_vol()) {
      set_se_vol(from.se_vol());
    }
  }
}

void sMusicSetting::CopyFrom(const sMusicSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sMusicSetting::IsInitialized() const {

  return true;
}

void sMusicSetting::Swap(sMusicSetting* other) {
  if (other != this) {
    std::swap(bgm_open_, other->bgm_open_);
    std::swap(se_open_, other->se_open_);
    std::swap(bgm_vol_, other->bgm_vol_);
    std::swap(se_vol_, other->se_vol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sMusicSetting::GetTypeName() const {
  return "jynetwork.proto.sMusicSetting";
}


// ===================================================================

#ifndef _MSC_VER
const int sPlayerSaveExt::kMusicFieldNumber;
const int sPlayerSaveExt::kSkillautoFieldNumber;
const int sPlayerSaveExt::kGuidesFieldNumber;
#endif  // !_MSC_VER

sPlayerSaveExt::sPlayerSaveExt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPlayerSaveExt::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  music_ = const_cast< ::jynetwork::proto::sMusicSetting*>(
      ::jynetwork::proto::sMusicSetting::internal_default_instance());
#else
  music_ = const_cast< ::jynetwork::proto::sMusicSetting*>(&::jynetwork::proto::sMusicSetting::default_instance());
#endif
}

sPlayerSaveExt::sPlayerSaveExt(const sPlayerSaveExt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPlayerSaveExt::SharedCtor() {
  _cached_size_ = 0;
  music_ = NULL;
  skillauto_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPlayerSaveExt::~sPlayerSaveExt() {
  SharedDtor();
}

void sPlayerSaveExt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete music_;
  }
}

void sPlayerSaveExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPlayerSaveExt& sPlayerSaveExt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sPlayerSaveExt* sPlayerSaveExt::default_instance_ = NULL;

sPlayerSaveExt* sPlayerSaveExt::New() const {
  return new sPlayerSaveExt;
}

void sPlayerSaveExt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_music()) {
      if (music_ != NULL) music_->::jynetwork::proto::sMusicSetting::Clear();
    }
    skillauto_ = 0u;
  }
  guides_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPlayerSaveExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jynetwork.proto.sMusicSetting music = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillauto;
        break;
      }

      // optional uint32 skillauto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillauto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillauto_)));
          set_has_skillauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guides;
        break;
      }

      // repeated uint32 guides = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guides:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_guides())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_guides())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guides;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPlayerSaveExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .jynetwork.proto.sMusicSetting music = 1;
  if (has_music()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->music(), output);
  }

  // optional uint32 skillauto = 2;
  if (has_skillauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillauto(), output);
  }

  // repeated uint32 guides = 3;
  for (int i = 0; i < this->guides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->guides(i), output);
  }

}

int sPlayerSaveExt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .jynetwork.proto.sMusicSetting music = 1;
    if (has_music()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->music());
    }

    // optional uint32 skillauto = 2;
    if (has_skillauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillauto());
    }

  }
  // repeated uint32 guides = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->guides_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->guides(i));
    }
    total_size += 1 * this->guides_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPlayerSaveExt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPlayerSaveExt*>(&from));
}

void sPlayerSaveExt::MergeFrom(const sPlayerSaveExt& from) {
  GOOGLE_CHECK_NE(&from, this);
  guides_.MergeFrom(from.guides_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_music()) {
      mutable_music()->::jynetwork::proto::sMusicSetting::MergeFrom(from.music());
    }
    if (from.has_skillauto()) {
      set_skillauto(from.skillauto());
    }
  }
}

void sPlayerSaveExt::CopyFrom(const sPlayerSaveExt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPlayerSaveExt::IsInitialized() const {

  return true;
}

void sPlayerSaveExt::Swap(sPlayerSaveExt* other) {
  if (other != this) {
    std::swap(music_, other->music_);
    std::swap(skillauto_, other->skillauto_);
    guides_.Swap(&other->guides_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPlayerSaveExt::GetTypeName() const {
  return "jynetwork.proto.sPlayerSaveExt";
}


// ===================================================================

#ifndef _MSC_VER
const int sLanguageCell::kUidFieldNumber;
const int sLanguageCell::kLanguageFieldNumber;
#endif  // !_MSC_VER

sLanguageCell::sLanguageCell()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sLanguageCell::InitAsDefaultInstance() {
}

sLanguageCell::sLanguageCell(const sLanguageCell& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sLanguageCell::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sLanguageCell::~sLanguageCell() {
  SharedDtor();
}

void sLanguageCell::SharedDtor() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sLanguageCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sLanguageCell& sLanguageCell::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sLanguageCell* sLanguageCell::default_instance_ = NULL;

sLanguageCell* sLanguageCell::New() const {
  return new sLanguageCell;
}

void sLanguageCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sLanguageCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_language;
        break;
      }

      // optional string language = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sLanguageCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string language = 2;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->language(), output);
  }

}

int sLanguageCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string language = 2;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sLanguageCell::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sLanguageCell*>(&from));
}

void sLanguageCell::MergeFrom(const sLanguageCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
  }
}

void sLanguageCell::CopyFrom(const sLanguageCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sLanguageCell::IsInitialized() const {

  return true;
}

void sLanguageCell::Swap(sLanguageCell* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sLanguageCell::GetTypeName() const {
  return "jynetwork.proto.sLanguageCell";
}


// ===================================================================

#ifndef _MSC_VER
const int sLanguages::kUidFieldNumber;
const int sLanguages::kCellsFieldNumber;
#endif  // !_MSC_VER

sLanguages::sLanguages()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sLanguages::InitAsDefaultInstance() {
}

sLanguages::sLanguages(const sLanguages& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sLanguages::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sLanguages::~sLanguages() {
  SharedDtor();
}

void sLanguages::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sLanguages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sLanguages& sLanguages::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sLanguages* sLanguages::default_instance_ = NULL;

sLanguages* sLanguages::New() const {
  return new sLanguages;
}

void sLanguages::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sLanguages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cells;
        break;
      }

      // repeated .jynetwork.proto.sLanguageCell cells = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cells;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sLanguages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // repeated .jynetwork.proto.sLanguageCell cells = 2;
  for (int i = 0; i < this->cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->cells(i), output);
  }

}

int sLanguages::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  // repeated .jynetwork.proto.sLanguageCell cells = 2;
  total_size += 1 * this->cells_size();
  for (int i = 0; i < this->cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cells(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sLanguages::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sLanguages*>(&from));
}

void sLanguages::MergeFrom(const sLanguages& from) {
  GOOGLE_CHECK_NE(&from, this);
  cells_.MergeFrom(from.cells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
}

void sLanguages::CopyFrom(const sLanguages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sLanguages::IsInitialized() const {

  return true;
}

void sLanguages::Swap(sLanguages* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    cells_.Swap(&other->cells_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sLanguages::GetTypeName() const {
  return "jynetwork.proto.sLanguages";
}


// ===================================================================

#ifndef _MSC_VER
const int sBattleGuide::kWaveFieldNumber;
const int sBattleGuide::kIsInitFieldNumber;
const int sBattleGuide::kDelayFieldNumber;
const int sBattleGuide::kIsPauseFieldNumber;
const int sBattleGuide::kIsContinueFieldNumber;
const int sBattleGuide::kEndToContinueFieldNumber;
const int sBattleGuide::kEndConditionFieldNumber;
const int sBattleGuide::kEcParam1FieldNumber;
const int sBattleGuide::kEcParam2FieldNumber;
const int sBattleGuide::kShowCcbFieldNumber;
const int sBattleGuide::kCcbParamFieldNumber;
const int sBattleGuide::kCcbRightInFieldNumber;
const int sBattleGuide::kCcbCharNameFieldNumber;
const int sBattleGuide::kCcbEndFieldNumber;
const int sBattleGuide::kShowSpeechFieldNumber;
const int sBattleGuide::kTrigerBeforeFieldNumber;
const int sBattleGuide::kTrigerFieldNumber;
const int sBattleGuide::kInXFieldNumber;
const int sBattleGuide::kInYFieldNumber;
const int sBattleGuide::kLostPlayFieldNumber;
const int sBattleGuide::kCcbAnimNameFieldNumber;
const int sBattleGuide::kAnim3DNameFieldNumber;
const int sBattleGuide::kAnim3DNameLoopFieldNumber;
const int sBattleGuide::kSpeechFieldNumber;
const int sBattleGuide::kSpeechTimeFieldNumber;
const int sBattleGuide::kPauseDelayFieldNumber;
#endif  // !_MSC_VER

sBattleGuide::sBattleGuide()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sBattleGuide::InitAsDefaultInstance() {
}

sBattleGuide::sBattleGuide(const sBattleGuide& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sBattleGuide::SharedCtor() {
  _cached_size_ = 0;
  wave_ = 0;
  is_init_ = 0u;
  delay_ = 0;
  is_pause_ = 0u;
  is_continue_ = 0u;
  end_to_continue_ = 0u;
  end_condition_ = 0u;
  ec_param1_ = 0;
  ec_param2_ = 0u;
  show_ccb_ = 0u;
  ccb_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ccb_right_in_ = 0u;
  ccb_char_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ccb_end_ = 0u;
  show_speech_ = 0u;
  triger_before_ = 0u;
  triger_ = 0u;
  in_x_ = 0;
  in_y_ = 0;
  lost_play_ = 0u;
  ccb_anim_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  anim3d_name_ = 0u;
  anim3d_name_loop_ = 0u;
  speech_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speech_time_ = 0;
  pause_delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sBattleGuide::~sBattleGuide() {
  SharedDtor();
}

void sBattleGuide::SharedDtor() {
  if (ccb_param_ != &::google::protobuf::internal::kEmptyString) {
    delete ccb_param_;
  }
  if (ccb_char_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ccb_char_name_;
  }
  if (ccb_anim_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ccb_anim_name_;
  }
  if (speech_ != &::google::protobuf::internal::kEmptyString) {
    delete speech_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sBattleGuide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sBattleGuide& sBattleGuide::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sBattleGuide* sBattleGuide::default_instance_ = NULL;

sBattleGuide* sBattleGuide::New() const {
  return new sBattleGuide;
}

void sBattleGuide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wave_ = 0;
    is_init_ = 0u;
    delay_ = 0;
    is_pause_ = 0u;
    is_continue_ = 0u;
    end_to_continue_ = 0u;
    end_condition_ = 0u;
    ec_param1_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ec_param2_ = 0u;
    show_ccb_ = 0u;
    if (has_ccb_param()) {
      if (ccb_param_ != &::google::protobuf::internal::kEmptyString) {
        ccb_param_->clear();
      }
    }
    ccb_right_in_ = 0u;
    if (has_ccb_char_name()) {
      if (ccb_char_name_ != &::google::protobuf::internal::kEmptyString) {
        ccb_char_name_->clear();
      }
    }
    ccb_end_ = 0u;
    show_speech_ = 0u;
    triger_before_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    triger_ = 0u;
    in_x_ = 0;
    in_y_ = 0;
    lost_play_ = 0u;
    if (has_ccb_anim_name()) {
      if (ccb_anim_name_ != &::google::protobuf::internal::kEmptyString) {
        ccb_anim_name_->clear();
      }
    }
    anim3d_name_ = 0u;
    anim3d_name_loop_ = 0u;
    if (has_speech()) {
      if (speech_ != &::google::protobuf::internal::kEmptyString) {
        speech_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    speech_time_ = 0;
    pause_delay_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sBattleGuide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_init;
        break;
      }

      // optional uint32 is_init = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_init:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_init_)));
          set_has_is_init();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_delay;
        break;
      }

      // optional float delay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_pause;
        break;
      }

      // optional uint32 is_pause = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_pause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_pause_)));
          set_has_is_pause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_continue;
        break;
      }

      // optional uint32 is_continue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_continue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_continue_)));
          set_has_is_continue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_to_continue;
        break;
      }

      // optional uint32 end_to_continue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_to_continue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_to_continue_)));
          set_has_end_to_continue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_condition;
        break;
      }

      // optional uint32 end_condition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_condition_)));
          set_has_end_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_ec_param1;
        break;
      }

      // optional float ec_param1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ec_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ec_param1_)));
          set_has_ec_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ec_param2;
        break;
      }

      // optional uint32 ec_param2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ec_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ec_param2_)));
          set_has_ec_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_show_ccb;
        break;
      }

      // optional uint32 show_ccb = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_ccb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_ccb_)));
          set_has_show_ccb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ccb_param;
        break;
      }

      // optional string ccb_param = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ccb_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ccb_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ccb_right_in;
        break;
      }

      // optional uint32 ccb_right_in = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ccb_right_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ccb_right_in_)));
          set_has_ccb_right_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ccb_char_name;
        break;
      }

      // optional string ccb_char_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ccb_char_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ccb_char_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ccb_end;
        break;
      }

      // optional uint32 ccb_end = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ccb_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ccb_end_)));
          set_has_ccb_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_show_speech;
        break;
      }

      // optional uint32 show_speech = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_speech:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_speech_)));
          set_has_show_speech();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_triger_before;
        break;
      }

      // optional uint32 triger_before = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_triger_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triger_before_)));
          set_has_triger_before();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_triger;
        break;
      }

      // optional uint32 triger = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_triger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triger_)));
          set_has_triger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_in_x;
        break;
      }

      // optional float in_x = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_in_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &in_x_)));
          set_has_in_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_in_y;
        break;
      }

      // optional float in_y = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_in_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &in_y_)));
          set_has_in_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_lost_play;
        break;
      }

      // optional uint32 lost_play = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lost_play:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lost_play_)));
          set_has_lost_play();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ccb_anim_name;
        break;
      }

      // optional string ccb_anim_name = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ccb_anim_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ccb_anim_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_anim3d_name;
        break;
      }

      // optional uint32 anim3d_name = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anim3d_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anim3d_name_)));
          set_has_anim3d_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_anim3d_name_loop;
        break;
      }

      // optional uint32 anim3d_name_loop = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anim3d_name_loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anim3d_name_loop_)));
          set_has_anim3d_name_loop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_speech;
        break;
      }

      // optional string speech = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speech:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speech()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_speech_time;
        break;
      }

      // optional float speech_time = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speech_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speech_time_)));
          set_has_speech_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_pause_delay;
        break;
      }

      // optional float pause_delay = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pause_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pause_delay_)));
          set_has_pause_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sBattleGuide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wave = 1;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wave(), output);
  }

  // optional uint32 is_init = 2;
  if (has_is_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_init(), output);
  }

  // optional float delay = 3;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->delay(), output);
  }

  // optional uint32 is_pause = 4;
  if (has_is_pause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_pause(), output);
  }

  // optional uint32 is_continue = 5;
  if (has_is_continue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_continue(), output);
  }

  // optional uint32 end_to_continue = 6;
  if (has_end_to_continue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->end_to_continue(), output);
  }

  // optional uint32 end_condition = 7;
  if (has_end_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->end_condition(), output);
  }

  // optional float ec_param1 = 8;
  if (has_ec_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ec_param1(), output);
  }

  // optional uint32 ec_param2 = 9;
  if (has_ec_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ec_param2(), output);
  }

  // optional uint32 show_ccb = 10;
  if (has_show_ccb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->show_ccb(), output);
  }

  // optional string ccb_param = 11;
  if (has_ccb_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->ccb_param(), output);
  }

  // optional uint32 ccb_right_in = 12;
  if (has_ccb_right_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ccb_right_in(), output);
  }

  // optional string ccb_char_name = 13;
  if (has_ccb_char_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->ccb_char_name(), output);
  }

  // optional uint32 ccb_end = 14;
  if (has_ccb_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ccb_end(), output);
  }

  // optional uint32 show_speech = 15;
  if (has_show_speech()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->show_speech(), output);
  }

  // optional uint32 triger_before = 16;
  if (has_triger_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->triger_before(), output);
  }

  // optional uint32 triger = 17;
  if (has_triger()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->triger(), output);
  }

  // optional float in_x = 18;
  if (has_in_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->in_x(), output);
  }

  // optional float in_y = 19;
  if (has_in_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->in_y(), output);
  }

  // optional uint32 lost_play = 20;
  if (has_lost_play()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->lost_play(), output);
  }

  // optional string ccb_anim_name = 21;
  if (has_ccb_anim_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->ccb_anim_name(), output);
  }

  // optional uint32 anim3d_name = 22;
  if (has_anim3d_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->anim3d_name(), output);
  }

  // optional uint32 anim3d_name_loop = 23;
  if (has_anim3d_name_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->anim3d_name_loop(), output);
  }

  // optional string speech = 24;
  if (has_speech()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->speech(), output);
  }

  // optional float speech_time = 25;
  if (has_speech_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->speech_time(), output);
  }

  // optional float pause_delay = 26;
  if (has_pause_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->pause_delay(), output);
  }

}

int sBattleGuide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wave = 1;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }

    // optional uint32 is_init = 2;
    if (has_is_init()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_init());
    }

    // optional float delay = 3;
    if (has_delay()) {
      total_size += 1 + 4;
    }

    // optional uint32 is_pause = 4;
    if (has_is_pause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_pause());
    }

    // optional uint32 is_continue = 5;
    if (has_is_continue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_continue());
    }

    // optional uint32 end_to_continue = 6;
    if (has_end_to_continue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_to_continue());
    }

    // optional uint32 end_condition = 7;
    if (has_end_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_condition());
    }

    // optional float ec_param1 = 8;
    if (has_ec_param1()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ec_param2 = 9;
    if (has_ec_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ec_param2());
    }

    // optional uint32 show_ccb = 10;
    if (has_show_ccb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_ccb());
    }

    // optional string ccb_param = 11;
    if (has_ccb_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ccb_param());
    }

    // optional uint32 ccb_right_in = 12;
    if (has_ccb_right_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ccb_right_in());
    }

    // optional string ccb_char_name = 13;
    if (has_ccb_char_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ccb_char_name());
    }

    // optional uint32 ccb_end = 14;
    if (has_ccb_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ccb_end());
    }

    // optional uint32 show_speech = 15;
    if (has_show_speech()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_speech());
    }

    // optional uint32 triger_before = 16;
    if (has_triger_before()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triger_before());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 triger = 17;
    if (has_triger()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triger());
    }

    // optional float in_x = 18;
    if (has_in_x()) {
      total_size += 2 + 4;
    }

    // optional float in_y = 19;
    if (has_in_y()) {
      total_size += 2 + 4;
    }

    // optional uint32 lost_play = 20;
    if (has_lost_play()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lost_play());
    }

    // optional string ccb_anim_name = 21;
    if (has_ccb_anim_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ccb_anim_name());
    }

    // optional uint32 anim3d_name = 22;
    if (has_anim3d_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anim3d_name());
    }

    // optional uint32 anim3d_name_loop = 23;
    if (has_anim3d_name_loop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anim3d_name_loop());
    }

    // optional string speech = 24;
    if (has_speech()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->speech());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float speech_time = 25;
    if (has_speech_time()) {
      total_size += 2 + 4;
    }

    // optional float pause_delay = 26;
    if (has_pause_delay()) {
      total_size += 2 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sBattleGuide::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sBattleGuide*>(&from));
}

void sBattleGuide::MergeFrom(const sBattleGuide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_is_init()) {
      set_is_init(from.is_init());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_is_pause()) {
      set_is_pause(from.is_pause());
    }
    if (from.has_is_continue()) {
      set_is_continue(from.is_continue());
    }
    if (from.has_end_to_continue()) {
      set_end_to_continue(from.end_to_continue());
    }
    if (from.has_end_condition()) {
      set_end_condition(from.end_condition());
    }
    if (from.has_ec_param1()) {
      set_ec_param1(from.ec_param1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ec_param2()) {
      set_ec_param2(from.ec_param2());
    }
    if (from.has_show_ccb()) {
      set_show_ccb(from.show_ccb());
    }
    if (from.has_ccb_param()) {
      set_ccb_param(from.ccb_param());
    }
    if (from.has_ccb_right_in()) {
      set_ccb_right_in(from.ccb_right_in());
    }
    if (from.has_ccb_char_name()) {
      set_ccb_char_name(from.ccb_char_name());
    }
    if (from.has_ccb_end()) {
      set_ccb_end(from.ccb_end());
    }
    if (from.has_show_speech()) {
      set_show_speech(from.show_speech());
    }
    if (from.has_triger_before()) {
      set_triger_before(from.triger_before());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_triger()) {
      set_triger(from.triger());
    }
    if (from.has_in_x()) {
      set_in_x(from.in_x());
    }
    if (from.has_in_y()) {
      set_in_y(from.in_y());
    }
    if (from.has_lost_play()) {
      set_lost_play(from.lost_play());
    }
    if (from.has_ccb_anim_name()) {
      set_ccb_anim_name(from.ccb_anim_name());
    }
    if (from.has_anim3d_name()) {
      set_anim3d_name(from.anim3d_name());
    }
    if (from.has_anim3d_name_loop()) {
      set_anim3d_name_loop(from.anim3d_name_loop());
    }
    if (from.has_speech()) {
      set_speech(from.speech());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_speech_time()) {
      set_speech_time(from.speech_time());
    }
    if (from.has_pause_delay()) {
      set_pause_delay(from.pause_delay());
    }
  }
}

void sBattleGuide::CopyFrom(const sBattleGuide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sBattleGuide::IsInitialized() const {

  return true;
}

void sBattleGuide::Swap(sBattleGuide* other) {
  if (other != this) {
    std::swap(wave_, other->wave_);
    std::swap(is_init_, other->is_init_);
    std::swap(delay_, other->delay_);
    std::swap(is_pause_, other->is_pause_);
    std::swap(is_continue_, other->is_continue_);
    std::swap(end_to_continue_, other->end_to_continue_);
    std::swap(end_condition_, other->end_condition_);
    std::swap(ec_param1_, other->ec_param1_);
    std::swap(ec_param2_, other->ec_param2_);
    std::swap(show_ccb_, other->show_ccb_);
    std::swap(ccb_param_, other->ccb_param_);
    std::swap(ccb_right_in_, other->ccb_right_in_);
    std::swap(ccb_char_name_, other->ccb_char_name_);
    std::swap(ccb_end_, other->ccb_end_);
    std::swap(show_speech_, other->show_speech_);
    std::swap(triger_before_, other->triger_before_);
    std::swap(triger_, other->triger_);
    std::swap(in_x_, other->in_x_);
    std::swap(in_y_, other->in_y_);
    std::swap(lost_play_, other->lost_play_);
    std::swap(ccb_anim_name_, other->ccb_anim_name_);
    std::swap(anim3d_name_, other->anim3d_name_);
    std::swap(anim3d_name_loop_, other->anim3d_name_loop_);
    std::swap(speech_, other->speech_);
    std::swap(speech_time_, other->speech_time_);
    std::swap(pause_delay_, other->pause_delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sBattleGuide::GetTypeName() const {
  return "jynetwork.proto.sBattleGuide";
}


// ===================================================================

#ifndef _MSC_VER
const int sBattleMapGuide::kMapidFieldNumber;
const int sBattleMapGuide::kGuidesFieldNumber;
#endif  // !_MSC_VER

sBattleMapGuide::sBattleMapGuide()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sBattleMapGuide::InitAsDefaultInstance() {
}

sBattleMapGuide::sBattleMapGuide(const sBattleMapGuide& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sBattleMapGuide::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sBattleMapGuide::~sBattleMapGuide() {
  SharedDtor();
}

void sBattleMapGuide::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sBattleMapGuide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sBattleMapGuide& sBattleMapGuide::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sBattleMapGuide* sBattleMapGuide::default_instance_ = NULL;

sBattleMapGuide* sBattleMapGuide::New() const {
  return new sBattleMapGuide;
}

void sBattleMapGuide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
  }
  guides_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sBattleMapGuide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guides;
        break;
      }

      // repeated .jynetwork.proto.sBattleGuide guides = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guides:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guides()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guides;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sBattleMapGuide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // repeated .jynetwork.proto.sBattleGuide guides = 2;
  for (int i = 0; i < this->guides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->guides(i), output);
  }

}

int sBattleMapGuide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  // repeated .jynetwork.proto.sBattleGuide guides = 2;
  total_size += 1 * this->guides_size();
  for (int i = 0; i < this->guides_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guides(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sBattleMapGuide::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sBattleMapGuide*>(&from));
}

void sBattleMapGuide::MergeFrom(const sBattleMapGuide& from) {
  GOOGLE_CHECK_NE(&from, this);
  guides_.MergeFrom(from.guides_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
}

void sBattleMapGuide::CopyFrom(const sBattleMapGuide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sBattleMapGuide::IsInitialized() const {

  return true;
}

void sBattleMapGuide::Swap(sBattleMapGuide* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    guides_.Swap(&other->guides_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sBattleMapGuide::GetTypeName() const {
  return "jynetwork.proto.sBattleMapGuide";
}


// ===================================================================

#ifndef _MSC_VER
const int sSoundEffectWav::kSndNameFieldNumber;
const int sSoundEffectWav::kSndFilesFieldNumber;
const int sSoundEffectWav::kIsMp3FieldNumber;
const int sSoundEffectWav::kDurationFieldNumber;
const int sSoundEffectWav::kMaxCountFieldNumber;
#endif  // !_MSC_VER

sSoundEffectWav::sSoundEffectWav()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sSoundEffectWav::InitAsDefaultInstance() {
}

sSoundEffectWav::sSoundEffectWav(const sSoundEffectWav& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sSoundEffectWav::SharedCtor() {
  _cached_size_ = 0;
  snd_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_mp3_ = 0u;
  duration_ = 0;
  max_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sSoundEffectWav::~sSoundEffectWav() {
  SharedDtor();
}

void sSoundEffectWav::SharedDtor() {
  if (snd_name_ != &::google::protobuf::internal::kEmptyString) {
    delete snd_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sSoundEffectWav::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sSoundEffectWav& sSoundEffectWav::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sSoundEffectWav* sSoundEffectWav::default_instance_ = NULL;

sSoundEffectWav* sSoundEffectWav::New() const {
  return new sSoundEffectWav;
}

void sSoundEffectWav::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snd_name()) {
      if (snd_name_ != &::google::protobuf::internal::kEmptyString) {
        snd_name_->clear();
      }
    }
    is_mp3_ = 0u;
    duration_ = 0;
    max_count_ = 0u;
  }
  snd_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sSoundEffectWav::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string snd_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snd_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snd_files;
        break;
      }

      // repeated string snd_files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snd_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_snd_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snd_files;
        if (input->ExpectTag(24)) goto parse_is_mp3;
        break;
      }

      // optional uint32 is_mp3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_mp3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_mp3_)));
          set_has_is_mp3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_count;
        break;
      }

      // optional uint32 max_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sSoundEffectWav::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string snd_name = 1;
  if (has_snd_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->snd_name(), output);
  }

  // repeated string snd_files = 2;
  for (int i = 0; i < this->snd_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->snd_files(i), output);
  }

  // optional uint32 is_mp3 = 3;
  if (has_is_mp3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_mp3(), output);
  }

  // optional float duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  // optional uint32 max_count = 5;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_count(), output);
  }

}

int sSoundEffectWav::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string snd_name = 1;
    if (has_snd_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snd_name());
    }

    // optional uint32 is_mp3 = 3;
    if (has_is_mp3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_mp3());
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional uint32 max_count = 5;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_count());
    }

  }
  // repeated string snd_files = 2;
  total_size += 1 * this->snd_files_size();
  for (int i = 0; i < this->snd_files_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->snd_files(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sSoundEffectWav::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sSoundEffectWav*>(&from));
}

void sSoundEffectWav::MergeFrom(const sSoundEffectWav& from) {
  GOOGLE_CHECK_NE(&from, this);
  snd_files_.MergeFrom(from.snd_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snd_name()) {
      set_snd_name(from.snd_name());
    }
    if (from.has_is_mp3()) {
      set_is_mp3(from.is_mp3());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
  }
}

void sSoundEffectWav::CopyFrom(const sSoundEffectWav& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sSoundEffectWav::IsInitialized() const {

  return true;
}

void sSoundEffectWav::Swap(sSoundEffectWav* other) {
  if (other != this) {
    std::swap(snd_name_, other->snd_name_);
    snd_files_.Swap(&other->snd_files_);
    std::swap(is_mp3_, other->is_mp3_);
    std::swap(duration_, other->duration_);
    std::swap(max_count_, other->max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sSoundEffectWav::GetTypeName() const {
  return "jynetwork.proto.sSoundEffectWav";
}


// ===================================================================

#ifndef _MSC_VER
const int sSoundEffectMusic::kUidFieldNumber;
const int sSoundEffectMusic::kSndFileFieldNumber;
const int sSoundEffectMusic::kDurationFieldNumber;
const int sSoundEffectMusic::kNextIdFieldNumber;
#endif  // !_MSC_VER

sSoundEffectMusic::sSoundEffectMusic()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sSoundEffectMusic::InitAsDefaultInstance() {
}

sSoundEffectMusic::sSoundEffectMusic(const sSoundEffectMusic& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sSoundEffectMusic::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  snd_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ = 0;
  next_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sSoundEffectMusic::~sSoundEffectMusic() {
  SharedDtor();
}

void sSoundEffectMusic::SharedDtor() {
  if (snd_file_ != &::google::protobuf::internal::kEmptyString) {
    delete snd_file_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sSoundEffectMusic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sSoundEffectMusic& sSoundEffectMusic::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sSoundEffectMusic* sSoundEffectMusic::default_instance_ = NULL;

sSoundEffectMusic* sSoundEffectMusic::New() const {
  return new sSoundEffectMusic;
}

void sSoundEffectMusic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_snd_file()) {
      if (snd_file_ != &::google::protobuf::internal::kEmptyString) {
        snd_file_->clear();
      }
    }
    duration_ = 0;
    next_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sSoundEffectMusic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snd_file;
        break;
      }

      // optional string snd_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snd_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snd_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_duration;
        break;
      }

      // optional float duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_next_id;
        break;
      }

      // optional uint32 next_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_id_)));
          set_has_next_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sSoundEffectMusic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string snd_file = 2;
  if (has_snd_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->snd_file(), output);
  }

  // optional float duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }

  // optional uint32 next_id = 4;
  if (has_next_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->next_id(), output);
  }

}

int sSoundEffectMusic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string snd_file = 2;
    if (has_snd_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snd_file());
    }

    // optional float duration = 3;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional uint32 next_id = 4;
    if (has_next_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sSoundEffectMusic::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sSoundEffectMusic*>(&from));
}

void sSoundEffectMusic::MergeFrom(const sSoundEffectMusic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_snd_file()) {
      set_snd_file(from.snd_file());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_next_id()) {
      set_next_id(from.next_id());
    }
  }
}

void sSoundEffectMusic::CopyFrom(const sSoundEffectMusic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sSoundEffectMusic::IsInitialized() const {

  return true;
}

void sSoundEffectMusic::Swap(sSoundEffectMusic* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(snd_file_, other->snd_file_);
    std::swap(duration_, other->duration_);
    std::swap(next_id_, other->next_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sSoundEffectMusic::GetTypeName() const {
  return "jynetwork.proto.sSoundEffectMusic";
}


// ===================================================================

#ifndef _MSC_VER
const int sMusiceEventTable::kUidFieldNumber;
const int sMusiceEventTable::kMusicidFieldNumber;
#endif  // !_MSC_VER

sMusiceEventTable::sMusiceEventTable()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sMusiceEventTable::InitAsDefaultInstance() {
}

sMusiceEventTable::sMusiceEventTable(const sMusiceEventTable& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sMusiceEventTable::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sMusiceEventTable::~sMusiceEventTable() {
  SharedDtor();
}

void sMusiceEventTable::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sMusiceEventTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sMusiceEventTable& sMusiceEventTable::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoC_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoC_2eproto();
#endif
  return *default_instance_;
}

sMusiceEventTable* sMusiceEventTable::default_instance_ = NULL;

sMusiceEventTable* sMusiceEventTable::New() const {
  return new sMusiceEventTable;
}

void sMusiceEventTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  musicid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sMusiceEventTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_musicid;
        break;
      }

      // repeated uint32 musicid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_musicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_musicid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_musicid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_musicid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sMusiceEventTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // repeated uint32 musicid = 2;
  for (int i = 0; i < this->musicid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->musicid(i), output);
  }

}

int sMusiceEventTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  // repeated uint32 musicid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->musicid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->musicid(i));
    }
    total_size += 1 * this->musicid_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sMusiceEventTable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sMusiceEventTable*>(&from));
}

void sMusiceEventTable::MergeFrom(const sMusiceEventTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  musicid_.MergeFrom(from.musicid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
}

void sMusiceEventTable::CopyFrom(const sMusiceEventTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sMusiceEventTable::IsInitialized() const {

  return true;
}

void sMusiceEventTable::Swap(sMusiceEventTable* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    musicid_.Swap(&other->musicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sMusiceEventTable::GetTypeName() const {
  return "jynetwork.proto.sMusiceEventTable";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace jynetwork

// @@protoc_insertion_point(global_scope)
