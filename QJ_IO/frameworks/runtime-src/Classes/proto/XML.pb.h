// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XML.proto

#ifndef PROTOBUF_XML_2eproto__INCLUDED
#define PROTOBUF_XML_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "scbase.pb.h"
// @@protoc_insertion_point(includes)

namespace jynetwork {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_XML_2eproto();
void protobuf_AssignDesc_XML_2eproto();
void protobuf_ShutdownFile_XML_2eproto();

class sGameStats;
class sItemStats;
class sEquipStats;
class sEquipGroupStats;
class sCharactorStats;
class sSkillCondition;
class sCardStats;
class sPersonCardStats;
class sSkillStats;
class sBuffStats;
class sDropItem;
class sDropStats;
class sMapStats;
class sCharExp;
class sCharChangeJob;
class sCharLevelUp;
class sCharSkillLevelUp;
class sEquipAttr;
class sEquipIntensify;
class sEquipLevelUp;
class sEquipStarUp;
class sCardIntensify;
class sCardLevelUp;
class sCardStarUp;
class sShopItem;
class sTaskStats;
class sBuyStaminaStats;
class sBuyGoldStats;
class sEquipAttrStats;
class sEquipAttrPropStats;
class sPrefixAttr;
class sPrefixStats;
class sWeekStats;
class sDecomStats;
class sMaskWordStats;
class sPartnerStats;
class sPartnerLvUpStats;
class sPartnerIntensifyStats;
class sPartnerStarStats;
class sActivityStats;
class sRouletteStats;
class sResourseDetail;
class sResourseStats;
class sHomeBackground;
class sEquipDetail;
class sEquipRecommend;
class sCastleMonsterInfoStats;
class sConstantsStats;
class NetBattleMove;
class NetCardSkill;
class NetBattleOper;
class sEquipIdentify;
class sAttributeBase;
class sCorpsLevel;
class sVipStats;
class sVipCostStats;
class sServerStats;
class sServerItems;
class CorpsBossRewardStats;
class CorpsBossMapStats;
class sArenaStats;

enum eNetBattleOper {
  eBattle_next_wave = 7,
  eBattle_move = 2,
  eBattle_player_die = 6,
  eBattle_player_relife = 10,
  eBattle_player_score = 11,
  eBattle_player_enter = 12,
  eBattle_player_leave = 13,
  eBattle_skill = 1,
  eBattle_monster_damage = 3,
  eBattle_playerdamage = 4,
  eBattle_monster_die = 5,
  eBattle_card_skill = 8,
  eBattle_monster_remove = 9
};
bool eNetBattleOper_IsValid(int value);
const eNetBattleOper eNetBattleOper_MIN = eBattle_skill;
const eNetBattleOper eNetBattleOper_MAX = eBattle_player_leave;
const int eNetBattleOper_ARRAYSIZE = eNetBattleOper_MAX + 1;

enum eVipOper {
  evip_buy_stamina = 0,
  evip_buy_gold = 1,
  evip_reset_map = 2,
  evip_world_boss = 3,
  evip_refresh_shop = 4,
  evip_buy_endless = 5,
  evip_buy_challage = 6,
  evip_buy_test_map = 7,
  evip_corps_boss = 8,
  evip_vip_shop = 9,
  evip_double_fight = 10,
  evip_buy_arena = 11,
  evip_cold_reset = 999
};
bool eVipOper_IsValid(int value);
const eVipOper eVipOper_MIN = evip_buy_stamina;
const eVipOper eVipOper_MAX = evip_cold_reset;
const int eVipOper_ARRAYSIZE = eVipOper_MAX + 1;

enum eVipFunc {
  evipf_sweep = 0,
  evipf_sweep_ten = 1,
  evipf_decom = 2,
  evipf_roulette = 3,
  evipf_absorb = 4,
  evipf_buy_stone = 5,
  evipf_campaign = 6,
  evipf_endless_score = 7,
  evipf_well_over = 8,
  evipf_vip_shop = 9,
  evipf_challage_drop = 10
};
bool eVipFunc_IsValid(int value);
const eVipFunc eVipFunc_MIN = evipf_sweep;
const eVipFunc eVipFunc_MAX = evipf_challage_drop;
const int eVipFunc_ARRAYSIZE = eVipFunc_MAX + 1;

// ===================================================================

class sGameStats : public ::google::protobuf::MessageLite {
 public:
  sGameStats();
  virtual ~sGameStats();

  sGameStats(const sGameStats& from);

  inline sGameStats& operator=(const sGameStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sGameStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sGameStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sGameStats* other);

  // implements Message ----------------------------------------------

  sGameStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sGameStats& from);
  void MergeFrom(const sGameStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional int32 hp = 2;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional float pdamage = 3;
  inline bool has_pdamage() const;
  inline void clear_pdamage();
  static const int kPdamageFieldNumber = 3;
  inline float pdamage() const;
  inline void set_pdamage(float value);

  // optional float despdamage = 4;
  inline bool has_despdamage() const;
  inline void clear_despdamage();
  static const int kDespdamageFieldNumber = 4;
  inline float despdamage() const;
  inline void set_despdamage(float value);

  // optional float mdamage = 5;
  inline bool has_mdamage() const;
  inline void clear_mdamage();
  static const int kMdamageFieldNumber = 5;
  inline float mdamage() const;
  inline void set_mdamage(float value);

  // optional float desmdamage = 6;
  inline bool has_desmdamage() const;
  inline void clear_desmdamage();
  static const int kDesmdamageFieldNumber = 6;
  inline float desmdamage() const;
  inline void set_desmdamage(float value);

  // optional float strength = 7;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 7;
  inline float strength() const;
  inline void set_strength(float value);

  // optional float dexterity = 8;
  inline bool has_dexterity() const;
  inline void clear_dexterity();
  static const int kDexterityFieldNumber = 8;
  inline float dexterity() const;
  inline void set_dexterity(float value);

  // optional float intelligence = 9;
  inline bool has_intelligence() const;
  inline void clear_intelligence();
  static const int kIntelligenceFieldNumber = 9;
  inline float intelligence() const;
  inline void set_intelligence(float value);

  // optional float stamina = 10;
  inline bool has_stamina() const;
  inline void clear_stamina();
  static const int kStaminaFieldNumber = 10;
  inline float stamina() const;
  inline void set_stamina(float value);

  // optional float speed = 11;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 11;
  inline float speed() const;
  inline void set_speed(float value);

  // optional float atkspeed = 12;
  inline bool has_atkspeed() const;
  inline void clear_atkspeed();
  static const int kAtkspeedFieldNumber = 12;
  inline float atkspeed() const;
  inline void set_atkspeed(float value);

  // optional float crit = 13;
  inline bool has_crit() const;
  inline void clear_crit();
  static const int kCritFieldNumber = 13;
  inline float crit() const;
  inline void set_crit(float value);

  // optional float perfect = 14;
  inline bool has_perfect() const;
  inline void clear_perfect();
  static const int kPerfectFieldNumber = 14;
  inline float perfect() const;
  inline void set_perfect(float value);

  // optional float excellent = 15;
  inline bool has_excellent() const;
  inline void clear_excellent();
  static const int kExcellentFieldNumber = 15;
  inline float excellent() const;
  inline void set_excellent(float value);

  // optional float fire = 37;
  inline bool has_fire() const;
  inline void clear_fire();
  static const int kFireFieldNumber = 37;
  inline float fire() const;
  inline void set_fire(float value);

  // optional float resfire = 38;
  inline bool has_resfire() const;
  inline void clear_resfire();
  static const int kResfireFieldNumber = 38;
  inline float resfire() const;
  inline void set_resfire(float value);

  // optional float water = 39;
  inline bool has_water() const;
  inline void clear_water();
  static const int kWaterFieldNumber = 39;
  inline float water() const;
  inline void set_water(float value);

  // optional float reswater = 40;
  inline bool has_reswater() const;
  inline void clear_reswater();
  static const int kReswaterFieldNumber = 40;
  inline float reswater() const;
  inline void set_reswater(float value);

  // optional float wind = 41;
  inline bool has_wind() const;
  inline void clear_wind();
  static const int kWindFieldNumber = 41;
  inline float wind() const;
  inline void set_wind(float value);

  // optional float reswind = 42;
  inline bool has_reswind() const;
  inline void clear_reswind();
  static const int kReswindFieldNumber = 42;
  inline float reswind() const;
  inline void set_reswind(float value);

  // optional float thunder = 43;
  inline bool has_thunder() const;
  inline void clear_thunder();
  static const int kThunderFieldNumber = 43;
  inline float thunder() const;
  inline void set_thunder(float value);

  // optional float resthunder = 44;
  inline bool has_resthunder() const;
  inline void clear_resthunder();
  static const int kResthunderFieldNumber = 44;
  inline float resthunder() const;
  inline void set_resthunder(float value);

  // optional float bolt = 16;
  inline bool has_bolt() const;
  inline void clear_bolt();
  static const int kBoltFieldNumber = 16;
  inline float bolt() const;
  inline void set_bolt(float value);

  // optional float resbolt = 17;
  inline bool has_resbolt() const;
  inline void clear_resbolt();
  static const int kResboltFieldNumber = 17;
  inline float resbolt() const;
  inline void set_resbolt(float value);

  // optional float dark = 18;
  inline bool has_dark() const;
  inline void clear_dark();
  static const int kDarkFieldNumber = 18;
  inline float dark() const;
  inline void set_dark(float value);

  // optional float resdark = 19;
  inline bool has_resdark() const;
  inline void clear_resdark();
  static const int kResdarkFieldNumber = 19;
  inline float resdark() const;
  inline void set_resdark(float value);

  // optional float poison = 20;
  inline bool has_poison() const;
  inline void clear_poison();
  static const int kPoisonFieldNumber = 20;
  inline float poison() const;
  inline void set_poison(float value);

  // optional float respoison = 21;
  inline bool has_respoison() const;
  inline void clear_respoison();
  static const int kRespoisonFieldNumber = 21;
  inline float respoison() const;
  inline void set_respoison(float value);

  // optional float pickrange = 22;
  inline bool has_pickrange() const;
  inline void clear_pickrange();
  static const int kPickrangeFieldNumber = 22;
  inline float pickrange() const;
  inline void set_pickrange(float value);

  // optional float hprecover = 23;
  inline bool has_hprecover() const;
  inline void clear_hprecover();
  static const int kHprecoverFieldNumber = 23;
  inline float hprecover() const;
  inline void set_hprecover(float value);

  // optional float mprecover = 24;
  inline bool has_mprecover() const;
  inline void clear_mprecover();
  static const int kMprecoverFieldNumber = 24;
  inline float mprecover() const;
  inline void set_mprecover(float value);

  // optional float chaosrate = 25;
  inline bool has_chaosrate() const;
  inline void clear_chaosrate();
  static const int kChaosrateFieldNumber = 25;
  inline float chaosrate() const;
  inline void set_chaosrate(float value);

  // optional float reschaosrate = 26;
  inline bool has_reschaosrate() const;
  inline void clear_reschaosrate();
  static const int kReschaosrateFieldNumber = 26;
  inline float reschaosrate() const;
  inline void set_reschaosrate(float value);

  // optional float sealrate = 27;
  inline bool has_sealrate() const;
  inline void clear_sealrate();
  static const int kSealrateFieldNumber = 27;
  inline float sealrate() const;
  inline void set_sealrate(float value);

  // optional float rescsealrate = 28;
  inline bool has_rescsealrate() const;
  inline void clear_rescsealrate();
  static const int kRescsealrateFieldNumber = 28;
  inline float rescsealrate() const;
  inline void set_rescsealrate(float value);

  // optional float freezerate = 29;
  inline bool has_freezerate() const;
  inline void clear_freezerate();
  static const int kFreezerateFieldNumber = 29;
  inline float freezerate() const;
  inline void set_freezerate(float value);

  // optional float resfreezerate = 30;
  inline bool has_resfreezerate() const;
  inline void clear_resfreezerate();
  static const int kResfreezerateFieldNumber = 30;
  inline float resfreezerate() const;
  inline void set_resfreezerate(float value);

  // optional int32 battle_abilty = 31;
  inline bool has_battle_abilty() const;
  inline void clear_battle_abilty();
  static const int kBattleAbiltyFieldNumber = 31;
  inline ::google::protobuf::int32 battle_abilty() const;
  inline void set_battle_abilty(::google::protobuf::int32 value);

  // optional float mortal = 32;
  inline bool has_mortal() const;
  inline void clear_mortal();
  static const int kMortalFieldNumber = 32;
  inline float mortal() const;
  inline void set_mortal(float value);

  // optional float toughness = 33;
  inline bool has_toughness() const;
  inline void clear_toughness();
  static const int kToughnessFieldNumber = 33;
  inline float toughness() const;
  inline void set_toughness(float value);

  // optional float hppercent = 45;
  inline bool has_hppercent() const;
  inline void clear_hppercent();
  static const int kHppercentFieldNumber = 45;
  inline float hppercent() const;
  inline void set_hppercent(float value);

  // optional float pdamagepercent = 46;
  inline bool has_pdamagepercent() const;
  inline void clear_pdamagepercent();
  static const int kPdamagepercentFieldNumber = 46;
  inline float pdamagepercent() const;
  inline void set_pdamagepercent(float value);

  // optional float despdamagepercent = 47;
  inline bool has_despdamagepercent() const;
  inline void clear_despdamagepercent();
  static const int kDespdamagepercentFieldNumber = 47;
  inline float despdamagepercent() const;
  inline void set_despdamagepercent(float value);

  // optional float mdamagepercent = 48;
  inline bool has_mdamagepercent() const;
  inline void clear_mdamagepercent();
  static const int kMdamagepercentFieldNumber = 48;
  inline float mdamagepercent() const;
  inline void set_mdamagepercent(float value);

  // optional float desmdamagepercent = 49;
  inline bool has_desmdamagepercent() const;
  inline void clear_desmdamagepercent();
  static const int kDesmdamagepercentFieldNumber = 49;
  inline float desmdamagepercent() const;
  inline void set_desmdamagepercent(float value);

  // optional float mortalpercent = 50;
  inline bool has_mortalpercent() const;
  inline void clear_mortalpercent();
  static const int kMortalpercentFieldNumber = 50;
  inline float mortalpercent() const;
  inline void set_mortalpercent(float value);

  // optional float toughnesspercent = 51;
  inline bool has_toughnesspercent() const;
  inline void clear_toughnesspercent();
  static const int kToughnesspercentFieldNumber = 51;
  inline float toughnesspercent() const;
  inline void set_toughnesspercent(float value);

  // optional float firepercent = 52;
  inline bool has_firepercent() const;
  inline void clear_firepercent();
  static const int kFirepercentFieldNumber = 52;
  inline float firepercent() const;
  inline void set_firepercent(float value);

  // optional float waterpecent = 53;
  inline bool has_waterpecent() const;
  inline void clear_waterpecent();
  static const int kWaterpecentFieldNumber = 53;
  inline float waterpecent() const;
  inline void set_waterpecent(float value);

  // optional float windpercent = 54;
  inline bool has_windpercent() const;
  inline void clear_windpercent();
  static const int kWindpercentFieldNumber = 54;
  inline float windpercent() const;
  inline void set_windpercent(float value);

  // optional float thunderpercent = 55;
  inline bool has_thunderpercent() const;
  inline void clear_thunderpercent();
  static const int kThunderpercentFieldNumber = 55;
  inline float thunderpercent() const;
  inline void set_thunderpercent(float value);

  // optional float boltpercent = 56;
  inline bool has_boltpercent() const;
  inline void clear_boltpercent();
  static const int kBoltpercentFieldNumber = 56;
  inline float boltpercent() const;
  inline void set_boltpercent(float value);

  // optional float darkpercent = 57;
  inline bool has_darkpercent() const;
  inline void clear_darkpercent();
  static const int kDarkpercentFieldNumber = 57;
  inline float darkpercent() const;
  inline void set_darkpercent(float value);

  // optional uint32 attribute_calc = 34;
  inline bool has_attribute_calc() const;
  inline void clear_attribute_calc();
  static const int kAttributeCalcFieldNumber = 34;
  inline ::google::protobuf::uint32 attribute_calc() const;
  inline void set_attribute_calc(::google::protobuf::uint32 value);

  // optional int32 owner_level = 35;
  inline bool has_owner_level() const;
  inline void clear_owner_level();
  static const int kOwnerLevelFieldNumber = 35;
  inline ::google::protobuf::int32 owner_level() const;
  inline void set_owner_level(::google::protobuf::int32 value);

  // optional float percent = 36;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 36;
  inline float percent() const;
  inline void set_percent(float value);

  // optional float card_ability = 58;
  inline bool has_card_ability() const;
  inline void clear_card_ability();
  static const int kCardAbilityFieldNumber = 58;
  inline float card_ability() const;
  inline void set_card_ability(float value);

  // optional float dmg_firepercent = 59;
  inline bool has_dmg_firepercent() const;
  inline void clear_dmg_firepercent();
  static const int kDmgFirepercentFieldNumber = 59;
  inline float dmg_firepercent() const;
  inline void set_dmg_firepercent(float value);

  // optional float dmg_waterpercent = 60;
  inline bool has_dmg_waterpercent() const;
  inline void clear_dmg_waterpercent();
  static const int kDmgWaterpercentFieldNumber = 60;
  inline float dmg_waterpercent() const;
  inline void set_dmg_waterpercent(float value);

  // optional float dmg_windpercent = 61;
  inline bool has_dmg_windpercent() const;
  inline void clear_dmg_windpercent();
  static const int kDmgWindpercentFieldNumber = 61;
  inline float dmg_windpercent() const;
  inline void set_dmg_windpercent(float value);

  // optional float dmg_thunderpercent = 62;
  inline bool has_dmg_thunderpercent() const;
  inline void clear_dmg_thunderpercent();
  static const int kDmgThunderpercentFieldNumber = 62;
  inline float dmg_thunderpercent() const;
  inline void set_dmg_thunderpercent(float value);

  // optional float dmg_boltpercent = 63;
  inline bool has_dmg_boltpercent() const;
  inline void clear_dmg_boltpercent();
  static const int kDmgBoltpercentFieldNumber = 63;
  inline float dmg_boltpercent() const;
  inline void set_dmg_boltpercent(float value);

  // optional float dmg_darkpercent = 64;
  inline bool has_dmg_darkpercent() const;
  inline void clear_dmg_darkpercent();
  static const int kDmgDarkpercentFieldNumber = 64;
  inline float dmg_darkpercent() const;
  inline void set_dmg_darkpercent(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sGameStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_pdamage();
  inline void clear_has_pdamage();
  inline void set_has_despdamage();
  inline void clear_has_despdamage();
  inline void set_has_mdamage();
  inline void clear_has_mdamage();
  inline void set_has_desmdamage();
  inline void clear_has_desmdamage();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_dexterity();
  inline void clear_has_dexterity();
  inline void set_has_intelligence();
  inline void clear_has_intelligence();
  inline void set_has_stamina();
  inline void clear_has_stamina();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_atkspeed();
  inline void clear_has_atkspeed();
  inline void set_has_crit();
  inline void clear_has_crit();
  inline void set_has_perfect();
  inline void clear_has_perfect();
  inline void set_has_excellent();
  inline void clear_has_excellent();
  inline void set_has_fire();
  inline void clear_has_fire();
  inline void set_has_resfire();
  inline void clear_has_resfire();
  inline void set_has_water();
  inline void clear_has_water();
  inline void set_has_reswater();
  inline void clear_has_reswater();
  inline void set_has_wind();
  inline void clear_has_wind();
  inline void set_has_reswind();
  inline void clear_has_reswind();
  inline void set_has_thunder();
  inline void clear_has_thunder();
  inline void set_has_resthunder();
  inline void clear_has_resthunder();
  inline void set_has_bolt();
  inline void clear_has_bolt();
  inline void set_has_resbolt();
  inline void clear_has_resbolt();
  inline void set_has_dark();
  inline void clear_has_dark();
  inline void set_has_resdark();
  inline void clear_has_resdark();
  inline void set_has_poison();
  inline void clear_has_poison();
  inline void set_has_respoison();
  inline void clear_has_respoison();
  inline void set_has_pickrange();
  inline void clear_has_pickrange();
  inline void set_has_hprecover();
  inline void clear_has_hprecover();
  inline void set_has_mprecover();
  inline void clear_has_mprecover();
  inline void set_has_chaosrate();
  inline void clear_has_chaosrate();
  inline void set_has_reschaosrate();
  inline void clear_has_reschaosrate();
  inline void set_has_sealrate();
  inline void clear_has_sealrate();
  inline void set_has_rescsealrate();
  inline void clear_has_rescsealrate();
  inline void set_has_freezerate();
  inline void clear_has_freezerate();
  inline void set_has_resfreezerate();
  inline void clear_has_resfreezerate();
  inline void set_has_battle_abilty();
  inline void clear_has_battle_abilty();
  inline void set_has_mortal();
  inline void clear_has_mortal();
  inline void set_has_toughness();
  inline void clear_has_toughness();
  inline void set_has_hppercent();
  inline void clear_has_hppercent();
  inline void set_has_pdamagepercent();
  inline void clear_has_pdamagepercent();
  inline void set_has_despdamagepercent();
  inline void clear_has_despdamagepercent();
  inline void set_has_mdamagepercent();
  inline void clear_has_mdamagepercent();
  inline void set_has_desmdamagepercent();
  inline void clear_has_desmdamagepercent();
  inline void set_has_mortalpercent();
  inline void clear_has_mortalpercent();
  inline void set_has_toughnesspercent();
  inline void clear_has_toughnesspercent();
  inline void set_has_firepercent();
  inline void clear_has_firepercent();
  inline void set_has_waterpecent();
  inline void clear_has_waterpecent();
  inline void set_has_windpercent();
  inline void clear_has_windpercent();
  inline void set_has_thunderpercent();
  inline void clear_has_thunderpercent();
  inline void set_has_boltpercent();
  inline void clear_has_boltpercent();
  inline void set_has_darkpercent();
  inline void clear_has_darkpercent();
  inline void set_has_attribute_calc();
  inline void clear_has_attribute_calc();
  inline void set_has_owner_level();
  inline void clear_has_owner_level();
  inline void set_has_percent();
  inline void clear_has_percent();
  inline void set_has_card_ability();
  inline void clear_has_card_ability();
  inline void set_has_dmg_firepercent();
  inline void clear_has_dmg_firepercent();
  inline void set_has_dmg_waterpercent();
  inline void clear_has_dmg_waterpercent();
  inline void set_has_dmg_windpercent();
  inline void clear_has_dmg_windpercent();
  inline void set_has_dmg_thunderpercent();
  inline void clear_has_dmg_thunderpercent();
  inline void set_has_dmg_boltpercent();
  inline void clear_has_dmg_boltpercent();
  inline void set_has_dmg_darkpercent();
  inline void clear_has_dmg_darkpercent();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 hp_;
  float pdamage_;
  float despdamage_;
  float mdamage_;
  float desmdamage_;
  float strength_;
  float dexterity_;
  float intelligence_;
  float stamina_;
  float speed_;
  float atkspeed_;
  float crit_;
  float perfect_;
  float excellent_;
  float fire_;
  float resfire_;
  float water_;
  float reswater_;
  float wind_;
  float reswind_;
  float thunder_;
  float resthunder_;
  float bolt_;
  float resbolt_;
  float dark_;
  float resdark_;
  float poison_;
  float respoison_;
  float pickrange_;
  float hprecover_;
  float mprecover_;
  float chaosrate_;
  float reschaosrate_;
  float sealrate_;
  float rescsealrate_;
  float freezerate_;
  float resfreezerate_;
  ::google::protobuf::int32 battle_abilty_;
  float mortal_;
  float toughness_;
  float hppercent_;
  float pdamagepercent_;
  float despdamagepercent_;
  float mdamagepercent_;
  float desmdamagepercent_;
  float mortalpercent_;
  float toughnesspercent_;
  float firepercent_;
  float waterpecent_;
  float windpercent_;
  float thunderpercent_;
  float boltpercent_;
  float darkpercent_;
  ::google::protobuf::uint32 attribute_calc_;
  ::google::protobuf::int32 owner_level_;
  float percent_;
  float card_ability_;
  float dmg_firepercent_;
  float dmg_waterpercent_;
  float dmg_windpercent_;
  float dmg_thunderpercent_;
  float dmg_boltpercent_;
  float dmg_darkpercent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(64 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sGameStats* default_instance_;
};
// -------------------------------------------------------------------

class sItemStats : public ::google::protobuf::MessageLite {
 public:
  sItemStats();
  virtual ~sItemStats();

  sItemStats(const sItemStats& from);

  inline sItemStats& operator=(const sItemStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sItemStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sItemStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sItemStats* other);

  // implements Message ----------------------------------------------

  sItemStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sItemStats& from);
  void MergeFrom(const sItemStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.ePackType packtype = 2;
  inline bool has_packtype() const;
  inline void clear_packtype();
  static const int kPacktypeFieldNumber = 2;
  inline ::jynetwork::proto::ePackType packtype() const;
  inline void set_packtype(::jynetwork::proto::ePackType value);

  // optional .jynetwork.proto.eItemType itemtype = 3;
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemtypeFieldNumber = 3;
  inline ::jynetwork::proto::eItemType itemtype() const;
  inline void set_itemtype(::jynetwork::proto::eItemType value);

  // optional uint32 namelocaleid = 4;
  inline bool has_namelocaleid() const;
  inline void clear_namelocaleid();
  static const int kNamelocaleidFieldNumber = 4;
  inline ::google::protobuf::uint32 namelocaleid() const;
  inline void set_namelocaleid(::google::protobuf::uint32 value);

  // optional string itemicon = 5;
  inline bool has_itemicon() const;
  inline void clear_itemicon();
  static const int kItemiconFieldNumber = 5;
  inline const ::std::string& itemicon() const;
  inline void set_itemicon(const ::std::string& value);
  inline void set_itemicon(const char* value);
  inline void set_itemicon(const char* value, size_t size);
  inline ::std::string* mutable_itemicon();
  inline ::std::string* release_itemicon();
  inline void set_allocated_itemicon(::std::string* itemicon);

  // optional uint32 describelocaleid = 6;
  inline bool has_describelocaleid() const;
  inline void clear_describelocaleid();
  static const int kDescribelocaleidFieldNumber = 6;
  inline ::google::protobuf::uint32 describelocaleid() const;
  inline void set_describelocaleid(::google::protobuf::uint32 value);

  // optional uint32 itemcolor = 7;
  inline bool has_itemcolor() const;
  inline void clear_itemcolor();
  static const int kItemcolorFieldNumber = 7;
  inline ::google::protobuf::uint32 itemcolor() const;
  inline void set_itemcolor(::google::protobuf::uint32 value);

  // optional uint32 stack = 8;
  inline bool has_stack() const;
  inline void clear_stack();
  static const int kStackFieldNumber = 8;
  inline ::google::protobuf::uint32 stack() const;
  inline void set_stack(::google::protobuf::uint32 value);

  // optional uint32 salevalue = 9;
  inline bool has_salevalue() const;
  inline void clear_salevalue();
  static const int kSalevalueFieldNumber = 9;
  inline ::google::protobuf::uint32 salevalue() const;
  inline void set_salevalue(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eItemFuncType effecttype = 10;
  inline bool has_effecttype() const;
  inline void clear_effecttype();
  static const int kEffecttypeFieldNumber = 10;
  inline ::jynetwork::proto::eItemFuncType effecttype() const;
  inline void set_effecttype(::jynetwork::proto::eItemFuncType value);

  // optional uint32 effectvalue = 11;
  inline bool has_effectvalue() const;
  inline void clear_effectvalue();
  static const int kEffectvalueFieldNumber = 11;
  inline ::google::protobuf::uint32 effectvalue() const;
  inline void set_effectvalue(::google::protobuf::uint32 value);

  // optional uint32 lvlimit = 12;
  inline bool has_lvlimit() const;
  inline void clear_lvlimit();
  static const int kLvlimitFieldNumber = 12;
  inline ::google::protobuf::uint32 lvlimit() const;
  inline void set_lvlimit(::google::protobuf::uint32 value);

  // optional uint32 viplimit = 13;
  inline bool has_viplimit() const;
  inline void clear_viplimit();
  static const int kViplimitFieldNumber = 13;
  inline ::google::protobuf::uint32 viplimit() const;
  inline void set_viplimit(::google::protobuf::uint32 value);

  // optional uint32 traceid = 14;
  inline bool has_traceid() const;
  inline void clear_traceid();
  static const int kTraceidFieldNumber = 14;
  inline ::google::protobuf::uint32 traceid() const;
  inline void set_traceid(::google::protobuf::uint32 value);

  // optional uint32 orderid = 15;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 15;
  inline ::google::protobuf::uint32 orderid() const;
  inline void set_orderid(::google::protobuf::uint32 value);

  // optional uint32 itemduang = 16;
  inline bool has_itemduang() const;
  inline void clear_itemduang();
  static const int kItemduangFieldNumber = 16;
  inline ::google::protobuf::uint32 itemduang() const;
  inline void set_itemduang(::google::protobuf::uint32 value);

  // optional uint32 itemTag = 17;
  inline bool has_itemtag() const;
  inline void clear_itemtag();
  static const int kItemTagFieldNumber = 17;
  inline ::google::protobuf::uint32 itemtag() const;
  inline void set_itemtag(::google::protobuf::uint32 value);

  // optional uint32 moneytype = 18;
  inline bool has_moneytype() const;
  inline void clear_moneytype();
  static const int kMoneytypeFieldNumber = 18;
  inline ::google::protobuf::uint32 moneytype() const;
  inline void set_moneytype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sItemStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_packtype();
  inline void clear_has_packtype();
  inline void set_has_itemtype();
  inline void clear_has_itemtype();
  inline void set_has_namelocaleid();
  inline void clear_has_namelocaleid();
  inline void set_has_itemicon();
  inline void clear_has_itemicon();
  inline void set_has_describelocaleid();
  inline void clear_has_describelocaleid();
  inline void set_has_itemcolor();
  inline void clear_has_itemcolor();
  inline void set_has_stack();
  inline void clear_has_stack();
  inline void set_has_salevalue();
  inline void clear_has_salevalue();
  inline void set_has_effecttype();
  inline void clear_has_effecttype();
  inline void set_has_effectvalue();
  inline void clear_has_effectvalue();
  inline void set_has_lvlimit();
  inline void clear_has_lvlimit();
  inline void set_has_viplimit();
  inline void clear_has_viplimit();
  inline void set_has_traceid();
  inline void clear_has_traceid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_itemduang();
  inline void clear_has_itemduang();
  inline void set_has_itemtag();
  inline void clear_has_itemtag();
  inline void set_has_moneytype();
  inline void clear_has_moneytype();

  ::google::protobuf::uint32 uid_;
  int packtype_;
  int itemtype_;
  ::google::protobuf::uint32 namelocaleid_;
  ::std::string* itemicon_;
  ::google::protobuf::uint32 describelocaleid_;
  ::google::protobuf::uint32 itemcolor_;
  ::google::protobuf::uint32 stack_;
  ::google::protobuf::uint32 salevalue_;
  int effecttype_;
  ::google::protobuf::uint32 effectvalue_;
  ::google::protobuf::uint32 lvlimit_;
  ::google::protobuf::uint32 viplimit_;
  ::google::protobuf::uint32 traceid_;
  ::google::protobuf::uint32 orderid_;
  ::google::protobuf::uint32 itemduang_;
  ::google::protobuf::uint32 itemtag_;
  ::google::protobuf::uint32 moneytype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sItemStats* default_instance_;
};
// -------------------------------------------------------------------

class sEquipStats : public ::google::protobuf::MessageLite {
 public:
  sEquipStats();
  virtual ~sEquipStats();

  sEquipStats(const sEquipStats& from);

  inline sEquipStats& operator=(const sEquipStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEquipStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEquipStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEquipStats* other);

  // implements Message ----------------------------------------------

  sEquipStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEquipStats& from);
  void MergeFrom(const sEquipStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 equipname = 3;
  inline bool has_equipname() const;
  inline void clear_equipname();
  static const int kEquipnameFieldNumber = 3;
  inline ::google::protobuf::uint32 equipname() const;
  inline void set_equipname(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eQuipPart equippart = 4;
  inline bool has_equippart() const;
  inline void clear_equippart();
  static const int kEquippartFieldNumber = 4;
  inline ::jynetwork::proto::eQuipPart equippart() const;
  inline void set_equippart(::jynetwork::proto::eQuipPart value);

  // optional string equipicon = 5;
  inline bool has_equipicon() const;
  inline void clear_equipicon();
  static const int kEquipiconFieldNumber = 5;
  inline const ::std::string& equipicon() const;
  inline void set_equipicon(const ::std::string& value);
  inline void set_equipicon(const char* value);
  inline void set_equipicon(const char* value, size_t size);
  inline ::std::string* mutable_equipicon();
  inline ::std::string* release_equipicon();
  inline void set_allocated_equipicon(::std::string* equipicon);

  // optional string equipmodel = 6;
  inline bool has_equipmodel() const;
  inline void clear_equipmodel();
  static const int kEquipmodelFieldNumber = 6;
  inline const ::std::string& equipmodel() const;
  inline void set_equipmodel(const ::std::string& value);
  inline void set_equipmodel(const char* value);
  inline void set_equipmodel(const char* value, size_t size);
  inline ::std::string* mutable_equipmodel();
  inline ::std::string* release_equipmodel();
  inline void set_allocated_equipmodel(::std::string* equipmodel);

  // optional uint32 modeaction = 7;
  inline bool has_modeaction() const;
  inline void clear_modeaction();
  static const int kModeactionFieldNumber = 7;
  inline ::google::protobuf::uint32 modeaction() const;
  inline void set_modeaction(::google::protobuf::uint32 value);

  // optional string equipmodel2 = 8;
  inline bool has_equipmodel2() const;
  inline void clear_equipmodel2();
  static const int kEquipmodel2FieldNumber = 8;
  inline const ::std::string& equipmodel2() const;
  inline void set_equipmodel2(const ::std::string& value);
  inline void set_equipmodel2(const char* value);
  inline void set_equipmodel2(const char* value, size_t size);
  inline ::std::string* mutable_equipmodel2();
  inline ::std::string* release_equipmodel2();
  inline void set_allocated_equipmodel2(::std::string* equipmodel2);

  // optional uint32 modeaction2 = 9;
  inline bool has_modeaction2() const;
  inline void clear_modeaction2();
  static const int kModeaction2FieldNumber = 9;
  inline ::google::protobuf::uint32 modeaction2() const;
  inline void set_modeaction2(::google::protobuf::uint32 value);

  // optional uint64 fragid = 10;
  inline bool has_fragid() const;
  inline void clear_fragid();
  static const int kFragidFieldNumber = 10;
  inline ::google::protobuf::uint64 fragid() const;
  inline void set_fragid(::google::protobuf::uint64 value);

  // optional uint32 gamestats = 11;
  inline bool has_gamestats() const;
  inline void clear_gamestats();
  static const int kGamestatsFieldNumber = 11;
  inline ::google::protobuf::uint32 gamestats() const;
  inline void set_gamestats(::google::protobuf::uint32 value);

  // optional uint32 gamestatslv = 12;
  inline bool has_gamestatslv() const;
  inline void clear_gamestatslv();
  static const int kGamestatslvFieldNumber = 12;
  inline ::google::protobuf::uint32 gamestatslv() const;
  inline void set_gamestatslv(::google::protobuf::uint32 value);

  // optional uint32 role_limit = 13;
  inline bool has_role_limit() const;
  inline void clear_role_limit();
  static const int kRoleLimitFieldNumber = 13;
  inline ::google::protobuf::uint32 role_limit() const;
  inline void set_role_limit(::google::protobuf::uint32 value);

  // optional uint32 degree_limit = 14;
  inline bool has_degree_limit() const;
  inline void clear_degree_limit();
  static const int kDegreeLimitFieldNumber = 14;
  inline ::google::protobuf::uint32 degree_limit() const;
  inline void set_degree_limit(::google::protobuf::uint32 value);

  // optional string suv = 15;
  inline bool has_suv() const;
  inline void clear_suv();
  static const int kSuvFieldNumber = 15;
  inline const ::std::string& suv() const;
  inline void set_suv(const ::std::string& value);
  inline void set_suv(const char* value);
  inline void set_suv(const char* value, size_t size);
  inline ::std::string* mutable_suv();
  inline ::std::string* release_suv();
  inline void set_allocated_suv(::std::string* suv);

  // optional float wavespeed = 16;
  inline bool has_wavespeed() const;
  inline void clear_wavespeed();
  static const int kWavespeedFieldNumber = 16;
  inline float wavespeed() const;
  inline void set_wavespeed(float value);

  // optional uint32 wavedir = 17;
  inline bool has_wavedir() const;
  inline void clear_wavedir();
  static const int kWavedirFieldNumber = 17;
  inline ::google::protobuf::uint32 wavedir() const;
  inline void set_wavedir(::google::protobuf::uint32 value);

  // optional float scale = 18;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 18;
  inline float scale() const;
  inline void set_scale(float value);

  // optional uint32 exp_add = 19;
  inline bool has_exp_add() const;
  inline void clear_exp_add();
  static const int kExpAddFieldNumber = 19;
  inline ::google::protobuf::uint32 exp_add() const;
  inline void set_exp_add(::google::protobuf::uint32 value);

  // optional uint32 startup_id = 20;
  inline bool has_startup_id() const;
  inline void clear_startup_id();
  static const int kStartupIdFieldNumber = 20;
  inline ::google::protobuf::uint32 startup_id() const;
  inline void set_startup_id(::google::protobuf::uint32 value);

  // optional uint32 levelup_id = 21;
  inline bool has_levelup_id() const;
  inline void clear_levelup_id();
  static const int kLevelupIdFieldNumber = 21;
  inline ::google::protobuf::uint32 levelup_id() const;
  inline void set_levelup_id(::google::protobuf::uint32 value);

  // optional uint32 star = 22;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 22;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional string suvalpha = 23;
  inline bool has_suvalpha() const;
  inline void clear_suvalpha();
  static const int kSuvalphaFieldNumber = 23;
  inline const ::std::string& suvalpha() const;
  inline void set_suvalpha(const ::std::string& value);
  inline void set_suvalpha(const char* value);
  inline void set_suvalpha(const char* value, size_t size);
  inline ::std::string* mutable_suvalpha();
  inline ::std::string* release_suvalpha();
  inline void set_allocated_suvalpha(::std::string* suvalpha);

  // optional float mox = 24;
  inline bool has_mox() const;
  inline void clear_mox();
  static const int kMoxFieldNumber = 24;
  inline float mox() const;
  inline void set_mox(float value);

  // optional float moy = 25;
  inline bool has_moy() const;
  inline void clear_moy();
  static const int kMoyFieldNumber = 25;
  inline float moy() const;
  inline void set_moy(float value);

  // optional float moz = 26;
  inline bool has_moz() const;
  inline void clear_moz();
  static const int kMozFieldNumber = 26;
  inline float moz() const;
  inline void set_moz(float value);

  // optional uint32 skill_id = 27;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 27;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // optional string bind_skeleton = 28;
  inline bool has_bind_skeleton() const;
  inline void clear_bind_skeleton();
  static const int kBindSkeletonFieldNumber = 28;
  inline const ::std::string& bind_skeleton() const;
  inline void set_bind_skeleton(const ::std::string& value);
  inline void set_bind_skeleton(const char* value);
  inline void set_bind_skeleton(const char* value, size_t size);
  inline ::std::string* mutable_bind_skeleton();
  inline ::std::string* release_bind_skeleton();
  inline void set_allocated_bind_skeleton(::std::string* bind_skeleton);

  // optional uint32 bind_effect_status = 29;
  inline bool has_bind_effect_status() const;
  inline void clear_bind_effect_status();
  static const int kBindEffectStatusFieldNumber = 29;
  inline ::google::protobuf::uint32 bind_effect_status() const;
  inline void set_bind_effect_status(::google::protobuf::uint32 value);

  // optional float effect_status_scale = 30;
  inline bool has_effect_status_scale() const;
  inline void clear_effect_status_scale();
  static const int kEffectStatusScaleFieldNumber = 30;
  inline float effect_status_scale() const;
  inline void set_effect_status_scale(float value);

  // optional float effect_status_x = 31;
  inline bool has_effect_status_x() const;
  inline void clear_effect_status_x();
  static const int kEffectStatusXFieldNumber = 31;
  inline float effect_status_x() const;
  inline void set_effect_status_x(float value);

  // optional float effect_status_y = 32;
  inline bool has_effect_status_y() const;
  inline void clear_effect_status_y();
  static const int kEffectStatusYFieldNumber = 32;
  inline float effect_status_y() const;
  inline void set_effect_status_y(float value);

  // optional float effect_status_z = 33;
  inline bool has_effect_status_z() const;
  inline void clear_effect_status_z();
  static const int kEffectStatusZFieldNumber = 33;
  inline float effect_status_z() const;
  inline void set_effect_status_z(float value);

  // optional float effect_status_degreex = 34;
  inline bool has_effect_status_degreex() const;
  inline void clear_effect_status_degreex();
  static const int kEffectStatusDegreexFieldNumber = 34;
  inline float effect_status_degreex() const;
  inline void set_effect_status_degreex(float value);

  // optional float effect_status_degreey = 35;
  inline bool has_effect_status_degreey() const;
  inline void clear_effect_status_degreey();
  static const int kEffectStatusDegreeyFieldNumber = 35;
  inline float effect_status_degreey() const;
  inline void set_effect_status_degreey(float value);

  // optional float effect_status_degreez = 36;
  inline bool has_effect_status_degreez() const;
  inline void clear_effect_status_degreez();
  static const int kEffectStatusDegreezFieldNumber = 36;
  inline float effect_status_degreez() const;
  inline void set_effect_status_degreez(float value);

  // optional uint32 attack_type = 37;
  inline bool has_attack_type() const;
  inline void clear_attack_type();
  static const int kAttackTypeFieldNumber = 37;
  inline ::google::protobuf::uint32 attack_type() const;
  inline void set_attack_type(::google::protobuf::uint32 value);

  // optional uint32 mageball_link = 38;
  inline bool has_mageball_link() const;
  inline void clear_mageball_link();
  static const int kMageballLinkFieldNumber = 38;
  inline ::google::protobuf::uint32 mageball_link() const;
  inline void set_mageball_link(::google::protobuf::uint32 value);

  // optional uint32 mageball_eff = 39;
  inline bool has_mageball_eff() const;
  inline void clear_mageball_eff();
  static const int kMageballEffFieldNumber = 39;
  inline ::google::protobuf::uint32 mageball_eff() const;
  inline void set_mageball_eff(::google::protobuf::uint32 value);

  // optional uint32 identify = 40;
  inline bool has_identify() const;
  inline void clear_identify();
  static const int kIdentifyFieldNumber = 40;
  inline ::google::protobuf::uint32 identify() const;
  inline void set_identify(::google::protobuf::uint32 value);

  // optional uint32 equip_group_id = 41;
  inline bool has_equip_group_id() const;
  inline void clear_equip_group_id();
  static const int kEquipGroupIdFieldNumber = 41;
  inline ::google::protobuf::uint32 equip_group_id() const;
  inline void set_equip_group_id(::google::protobuf::uint32 value);

  // optional uint32 equip_group_color = 42;
  inline bool has_equip_group_color() const;
  inline void clear_equip_group_color();
  static const int kEquipGroupColorFieldNumber = 42;
  inline ::google::protobuf::uint32 equip_group_color() const;
  inline void set_equip_group_color(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEquipStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_equipname();
  inline void clear_has_equipname();
  inline void set_has_equippart();
  inline void clear_has_equippart();
  inline void set_has_equipicon();
  inline void clear_has_equipicon();
  inline void set_has_equipmodel();
  inline void clear_has_equipmodel();
  inline void set_has_modeaction();
  inline void clear_has_modeaction();
  inline void set_has_equipmodel2();
  inline void clear_has_equipmodel2();
  inline void set_has_modeaction2();
  inline void clear_has_modeaction2();
  inline void set_has_fragid();
  inline void clear_has_fragid();
  inline void set_has_gamestats();
  inline void clear_has_gamestats();
  inline void set_has_gamestatslv();
  inline void clear_has_gamestatslv();
  inline void set_has_role_limit();
  inline void clear_has_role_limit();
  inline void set_has_degree_limit();
  inline void clear_has_degree_limit();
  inline void set_has_suv();
  inline void clear_has_suv();
  inline void set_has_wavespeed();
  inline void clear_has_wavespeed();
  inline void set_has_wavedir();
  inline void clear_has_wavedir();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_exp_add();
  inline void clear_has_exp_add();
  inline void set_has_startup_id();
  inline void clear_has_startup_id();
  inline void set_has_levelup_id();
  inline void clear_has_levelup_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_suvalpha();
  inline void clear_has_suvalpha();
  inline void set_has_mox();
  inline void clear_has_mox();
  inline void set_has_moy();
  inline void clear_has_moy();
  inline void set_has_moz();
  inline void clear_has_moz();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_bind_skeleton();
  inline void clear_has_bind_skeleton();
  inline void set_has_bind_effect_status();
  inline void clear_has_bind_effect_status();
  inline void set_has_effect_status_scale();
  inline void clear_has_effect_status_scale();
  inline void set_has_effect_status_x();
  inline void clear_has_effect_status_x();
  inline void set_has_effect_status_y();
  inline void clear_has_effect_status_y();
  inline void set_has_effect_status_z();
  inline void clear_has_effect_status_z();
  inline void set_has_effect_status_degreex();
  inline void clear_has_effect_status_degreex();
  inline void set_has_effect_status_degreey();
  inline void clear_has_effect_status_degreey();
  inline void set_has_effect_status_degreez();
  inline void clear_has_effect_status_degreez();
  inline void set_has_attack_type();
  inline void clear_has_attack_type();
  inline void set_has_mageball_link();
  inline void clear_has_mageball_link();
  inline void set_has_mageball_eff();
  inline void clear_has_mageball_eff();
  inline void set_has_identify();
  inline void clear_has_identify();
  inline void set_has_equip_group_id();
  inline void clear_has_equip_group_id();
  inline void set_has_equip_group_color();
  inline void clear_has_equip_group_color();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 equipname_;
  ::std::string* equipicon_;
  int equippart_;
  ::google::protobuf::uint32 modeaction_;
  ::std::string* equipmodel_;
  ::std::string* equipmodel2_;
  ::google::protobuf::uint32 modeaction2_;
  ::google::protobuf::uint32 gamestats_;
  ::google::protobuf::uint64 fragid_;
  ::google::protobuf::uint32 gamestatslv_;
  ::google::protobuf::uint32 role_limit_;
  ::std::string* suv_;
  ::google::protobuf::uint32 degree_limit_;
  float wavespeed_;
  ::google::protobuf::uint32 wavedir_;
  float scale_;
  ::google::protobuf::uint32 exp_add_;
  ::google::protobuf::uint32 startup_id_;
  ::google::protobuf::uint32 levelup_id_;
  ::google::protobuf::uint32 star_;
  ::std::string* suvalpha_;
  float mox_;
  float moy_;
  float moz_;
  ::google::protobuf::uint32 skill_id_;
  ::std::string* bind_skeleton_;
  ::google::protobuf::uint32 bind_effect_status_;
  float effect_status_scale_;
  float effect_status_x_;
  float effect_status_y_;
  float effect_status_z_;
  float effect_status_degreex_;
  float effect_status_degreey_;
  float effect_status_degreez_;
  ::google::protobuf::uint32 attack_type_;
  ::google::protobuf::uint32 mageball_link_;
  ::google::protobuf::uint32 mageball_eff_;
  ::google::protobuf::uint32 identify_;
  ::google::protobuf::uint32 equip_group_id_;
  ::google::protobuf::uint32 equip_group_color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(41 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sEquipStats* default_instance_;
};
// -------------------------------------------------------------------

class sEquipGroupStats : public ::google::protobuf::MessageLite {
 public:
  sEquipGroupStats();
  virtual ~sEquipGroupStats();

  sEquipGroupStats(const sEquipGroupStats& from);

  inline sEquipGroupStats& operator=(const sEquipGroupStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEquipGroupStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEquipGroupStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEquipGroupStats* other);

  // implements Message ----------------------------------------------

  sEquipGroupStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEquipGroupStats& from);
  void MergeFrom(const sEquipGroupStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional uint32 lang_id = 3;
  inline bool has_lang_id() const;
  inline void clear_lang_id();
  static const int kLangIdFieldNumber = 3;
  inline ::google::protobuf::uint32 lang_id() const;
  inline void set_lang_id(::google::protobuf::uint32 value);

  // repeated uint32 attr_2 = 4;
  inline int attr_2_size() const;
  inline void clear_attr_2();
  static const int kAttr2FieldNumber = 4;
  inline ::google::protobuf::uint32 attr_2(int index) const;
  inline void set_attr_2(int index, ::google::protobuf::uint32 value);
  inline void add_attr_2(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attr_2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attr_2();

  // repeated uint32 attr_3 = 5;
  inline int attr_3_size() const;
  inline void clear_attr_3();
  static const int kAttr3FieldNumber = 5;
  inline ::google::protobuf::uint32 attr_3(int index) const;
  inline void set_attr_3(int index, ::google::protobuf::uint32 value);
  inline void add_attr_3(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attr_3() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attr_3();

  // repeated uint32 attr_4 = 6;
  inline int attr_4_size() const;
  inline void clear_attr_4();
  static const int kAttr4FieldNumber = 6;
  inline ::google::protobuf::uint32 attr_4(int index) const;
  inline void set_attr_4(int index, ::google::protobuf::uint32 value);
  inline void add_attr_4(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attr_4() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attr_4();

  // repeated uint32 attr_5 = 7;
  inline int attr_5_size() const;
  inline void clear_attr_5();
  static const int kAttr5FieldNumber = 7;
  inline ::google::protobuf::uint32 attr_5(int index) const;
  inline void set_attr_5(int index, ::google::protobuf::uint32 value);
  inline void add_attr_5(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attr_5() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attr_5();

  // repeated uint32 attr_6 = 9;
  inline int attr_6_size() const;
  inline void clear_attr_6();
  static const int kAttr6FieldNumber = 9;
  inline ::google::protobuf::uint32 attr_6(int index) const;
  inline void set_attr_6(int index, ::google::protobuf::uint32 value);
  inline void add_attr_6(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attr_6() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attr_6();

  // optional uint32 equip_num = 10;
  inline bool has_equip_num() const;
  inline void clear_equip_num();
  static const int kEquipNumFieldNumber = 10;
  inline ::google::protobuf::uint32 equip_num() const;
  inline void set_equip_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEquipGroupStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_lang_id();
  inline void clear_has_lang_id();
  inline void set_has_equip_num();
  inline void clear_has_equip_num();

  ::std::string* desc_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 lang_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attr_2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attr_3_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attr_4_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attr_5_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attr_6_;
  ::google::protobuf::uint32 equip_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sEquipGroupStats* default_instance_;
};
// -------------------------------------------------------------------

class sCharactorStats : public ::google::protobuf::MessageLite {
 public:
  sCharactorStats();
  virtual ~sCharactorStats();

  sCharactorStats(const sCharactorStats& from);

  inline sCharactorStats& operator=(const sCharactorStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCharactorStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCharactorStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCharactorStats* other);

  // implements Message ----------------------------------------------

  sCharactorStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCharactorStats& from);
  void MergeFrom(const sCharactorStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 charactormodel = 2;
  inline bool has_charactormodel() const;
  inline void clear_charactormodel();
  static const int kCharactormodelFieldNumber = 2;
  inline ::google::protobuf::uint32 charactormodel() const;
  inline void set_charactormodel(::google::protobuf::uint32 value);

  // optional uint32 gamestats = 3;
  inline bool has_gamestats() const;
  inline void clear_gamestats();
  static const int kGamestatsFieldNumber = 3;
  inline ::google::protobuf::uint32 gamestats() const;
  inline void set_gamestats(::google::protobuf::uint32 value);

  // optional float scale = 4;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 4;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float radius = 5;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 5;
  inline float radius() const;
  inline void set_radius(float value);

  // optional float turnrate = 6;
  inline bool has_turnrate() const;
  inline void clear_turnrate();
  static const int kTurnrateFieldNumber = 6;
  inline float turnrate() const;
  inline void set_turnrate(float value);

  // optional float lookat_z = 7;
  inline bool has_lookat_z() const;
  inline void clear_lookat_z();
  static const int kLookatZFieldNumber = 7;
  inline float lookat_z() const;
  inline void set_lookat_z(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCharactorStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_charactormodel();
  inline void clear_has_charactormodel();
  inline void set_has_gamestats();
  inline void clear_has_gamestats();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_turnrate();
  inline void clear_has_turnrate();
  inline void set_has_lookat_z();
  inline void clear_has_lookat_z();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 charactormodel_;
  ::google::protobuf::uint32 gamestats_;
  float scale_;
  float radius_;
  float turnrate_;
  float lookat_z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sCharactorStats* default_instance_;
};
// -------------------------------------------------------------------

class sSkillCondition : public ::google::protobuf::MessageLite {
 public:
  sSkillCondition();
  virtual ~sSkillCondition();

  sSkillCondition(const sSkillCondition& from);

  inline sSkillCondition& operator=(const sSkillCondition& from) {
    CopyFrom(from);
    return *this;
  }

  static const sSkillCondition& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sSkillCondition* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sSkillCondition* other);

  // implements Message ----------------------------------------------

  sSkillCondition* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sSkillCondition& from);
  void MergeFrom(const sSkillCondition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 skill = 1;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 1;
  inline ::google::protobuf::uint32 skill() const;
  inline void set_skill(::google::protobuf::uint32 value);

  // optional uint32 skill_cond = 2;
  inline bool has_skill_cond() const;
  inline void clear_skill_cond();
  static const int kSkillCondFieldNumber = 2;
  inline ::google::protobuf::uint32 skill_cond() const;
  inline void set_skill_cond(::google::protobuf::uint32 value);

  // optional uint32 skill_cv = 3;
  inline bool has_skill_cv() const;
  inline void clear_skill_cv();
  static const int kSkillCvFieldNumber = 3;
  inline ::google::protobuf::uint32 skill_cv() const;
  inline void set_skill_cv(::google::protobuf::uint32 value);

  // optional uint32 skill_cd = 4;
  inline bool has_skill_cd() const;
  inline void clear_skill_cd();
  static const int kSkillCdFieldNumber = 4;
  inline ::google::protobuf::uint32 skill_cd() const;
  inline void set_skill_cd(::google::protobuf::uint32 value);

  // optional uint32 skill_action = 5;
  inline bool has_skill_action() const;
  inline void clear_skill_action();
  static const int kSkillActionFieldNumber = 5;
  inline ::google::protobuf::uint32 skill_action() const;
  inline void set_skill_action(::google::protobuf::uint32 value);

  // optional uint32 slot = 6;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 6;
  inline ::google::protobuf::uint32 slot() const;
  inline void set_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sSkillCondition)
 private:
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_skill_cond();
  inline void clear_has_skill_cond();
  inline void set_has_skill_cv();
  inline void clear_has_skill_cv();
  inline void set_has_skill_cd();
  inline void clear_has_skill_cd();
  inline void set_has_skill_action();
  inline void clear_has_skill_action();
  inline void set_has_slot();
  inline void clear_has_slot();

  ::google::protobuf::uint32 skill_;
  ::google::protobuf::uint32 skill_cond_;
  ::google::protobuf::uint32 skill_cv_;
  ::google::protobuf::uint32 skill_cd_;
  ::google::protobuf::uint32 skill_action_;
  ::google::protobuf::uint32 slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sSkillCondition* default_instance_;
};
// -------------------------------------------------------------------

class sCardStats : public ::google::protobuf::MessageLite {
 public:
  sCardStats();
  virtual ~sCardStats();

  sCardStats(const sCardStats& from);

  inline sCardStats& operator=(const sCardStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCardStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCardStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCardStats* other);

  // implements Message ----------------------------------------------

  sCardStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCardStats& from);
  void MergeFrom(const sCardStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eRoleType role = 2;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline ::jynetwork::proto::eRoleType role() const;
  inline void set_role(::jynetwork::proto::eRoleType value);

  // optional uint32 cardname = 3;
  inline bool has_cardname() const;
  inline void clear_cardname();
  static const int kCardnameFieldNumber = 3;
  inline ::google::protobuf::uint32 cardname() const;
  inline void set_cardname(::google::protobuf::uint32 value);

  // optional string cardpic = 4;
  inline bool has_cardpic() const;
  inline void clear_cardpic();
  static const int kCardpicFieldNumber = 4;
  inline const ::std::string& cardpic() const;
  inline void set_cardpic(const ::std::string& value);
  inline void set_cardpic(const char* value);
  inline void set_cardpic(const char* value, size_t size);
  inline ::std::string* mutable_cardpic();
  inline ::std::string* release_cardpic();
  inline void set_allocated_cardpic(::std::string* cardpic);

  // optional uint32 cardmodel = 5;
  inline bool has_cardmodel() const;
  inline void clear_cardmodel();
  static const int kCardmodelFieldNumber = 5;
  inline ::google::protobuf::uint32 cardmodel() const;
  inline void set_cardmodel(::google::protobuf::uint32 value);

  // optional string cardicon = 6;
  inline bool has_cardicon() const;
  inline void clear_cardicon();
  static const int kCardiconFieldNumber = 6;
  inline const ::std::string& cardicon() const;
  inline void set_cardicon(const ::std::string& value);
  inline void set_cardicon(const char* value);
  inline void set_cardicon(const char* value, size_t size);
  inline ::std::string* mutable_cardicon();
  inline ::std::string* release_cardicon();
  inline void set_allocated_cardicon(::std::string* cardicon);

  // optional float scale = 7;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 7;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float radius = 8;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 8;
  inline float radius() const;
  inline void set_radius(float value);

  // optional float turnrate = 9;
  inline bool has_turnrate() const;
  inline void clear_turnrate();
  static const int kTurnrateFieldNumber = 9;
  inline float turnrate() const;
  inline void set_turnrate(float value);

  // optional uint32 attacknormal = 11;
  inline bool has_attacknormal() const;
  inline void clear_attacknormal();
  static const int kAttacknormalFieldNumber = 11;
  inline ::google::protobuf::uint32 attacknormal() const;
  inline void set_attacknormal(::google::protobuf::uint32 value);

  // optional uint32 attacknormal_cd = 34;
  inline bool has_attacknormal_cd() const;
  inline void clear_attacknormal_cd();
  static const int kAttacknormalCdFieldNumber = 34;
  inline ::google::protobuf::uint32 attacknormal_cd() const;
  inline void set_attacknormal_cd(::google::protobuf::uint32 value);

  // optional uint32 skillnormal = 12;
  inline bool has_skillnormal() const;
  inline void clear_skillnormal();
  static const int kSkillnormalFieldNumber = 12;
  inline ::google::protobuf::uint32 skillnormal() const;
  inline void set_skillnormal(::google::protobuf::uint32 value);

  // optional uint32 skillnormal_cd = 28;
  inline bool has_skillnormal_cd() const;
  inline void clear_skillnormal_cd();
  static const int kSkillnormalCdFieldNumber = 28;
  inline ::google::protobuf::uint32 skillnormal_cd() const;
  inline void set_skillnormal_cd(::google::protobuf::uint32 value);

  // optional uint32 skillbig = 13;
  inline bool has_skillbig() const;
  inline void clear_skillbig();
  static const int kSkillbigFieldNumber = 13;
  inline ::google::protobuf::uint32 skillbig() const;
  inline void set_skillbig(::google::protobuf::uint32 value);

  // optional uint32 skillbig_cd = 29;
  inline bool has_skillbig_cd() const;
  inline void clear_skillbig_cd();
  static const int kSkillbigCdFieldNumber = 29;
  inline ::google::protobuf::uint32 skillbig_cd() const;
  inline void set_skillbig_cd(::google::protobuf::uint32 value);

  // optional uint32 skillhero = 14;
  inline bool has_skillhero() const;
  inline void clear_skillhero();
  static const int kSkillheroFieldNumber = 14;
  inline ::google::protobuf::uint32 skillhero() const;
  inline void set_skillhero(::google::protobuf::uint32 value);

  // optional uint32 skillhero_cd = 30;
  inline bool has_skillhero_cd() const;
  inline void clear_skillhero_cd();
  static const int kSkillheroCdFieldNumber = 30;
  inline ::google::protobuf::uint32 skillhero_cd() const;
  inline void set_skillhero_cd(::google::protobuf::uint32 value);

  // optional uint32 skillfriend = 15;
  inline bool has_skillfriend() const;
  inline void clear_skillfriend();
  static const int kSkillfriendFieldNumber = 15;
  inline ::google::protobuf::uint32 skillfriend() const;
  inline void set_skillfriend(::google::protobuf::uint32 value);

  // optional uint32 skillfriend_cd = 31;
  inline bool has_skillfriend_cd() const;
  inline void clear_skillfriend_cd();
  static const int kSkillfriendCdFieldNumber = 31;
  inline ::google::protobuf::uint32 skillfriend_cd() const;
  inline void set_skillfriend_cd(::google::protobuf::uint32 value);

  // optional uint32 aiid = 20;
  inline bool has_aiid() const;
  inline void clear_aiid();
  static const int kAiidFieldNumber = 20;
  inline ::google::protobuf::uint32 aiid() const;
  inline void set_aiid(::google::protobuf::uint32 value);

  // optional uint32 frag = 21;
  inline bool has_frag() const;
  inline void clear_frag();
  static const int kFragFieldNumber = 21;
  inline ::google::protobuf::uint32 frag() const;
  inline void set_frag(::google::protobuf::uint32 value);

  // optional uint32 gamestats = 22;
  inline bool has_gamestats() const;
  inline void clear_gamestats();
  static const int kGamestatsFieldNumber = 22;
  inline ::google::protobuf::uint32 gamestats() const;
  inline void set_gamestats(::google::protobuf::uint32 value);

  // optional string name_pic = 24;
  inline bool has_name_pic() const;
  inline void clear_name_pic();
  static const int kNamePicFieldNumber = 24;
  inline const ::std::string& name_pic() const;
  inline void set_name_pic(const ::std::string& value);
  inline void set_name_pic(const char* value);
  inline void set_name_pic(const char* value, size_t size);
  inline ::std::string* mutable_name_pic();
  inline ::std::string* release_name_pic();
  inline void set_allocated_name_pic(::std::string* name_pic);

  // optional uint32 can_summered = 25;
  inline bool has_can_summered() const;
  inline void clear_can_summered();
  static const int kCanSummeredFieldNumber = 25;
  inline ::google::protobuf::uint32 can_summered() const;
  inline void set_can_summered(::google::protobuf::uint32 value);

  // optional uint32 star = 26;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 26;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 star_gamestat = 27;
  inline bool has_star_gamestat() const;
  inline void clear_star_gamestat();
  static const int kStarGamestatFieldNumber = 27;
  inline ::google::protobuf::uint32 star_gamestat() const;
  inline void set_star_gamestat(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSkillCondition skill_extra = 32;
  inline int skill_extra_size() const;
  inline void clear_skill_extra();
  static const int kSkillExtraFieldNumber = 32;
  inline const ::jynetwork::proto::sSkillCondition& skill_extra(int index) const;
  inline ::jynetwork::proto::sSkillCondition* mutable_skill_extra(int index);
  inline ::jynetwork::proto::sSkillCondition* add_skill_extra();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSkillCondition >&
      skill_extra() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSkillCondition >*
      mutable_skill_extra();

  // optional uint32 ai_uid = 33;
  inline bool has_ai_uid() const;
  inline void clear_ai_uid();
  static const int kAiUidFieldNumber = 33;
  inline ::google::protobuf::uint32 ai_uid() const;
  inline void set_ai_uid(::google::protobuf::uint32 value);

  // optional string collision_name = 35;
  inline bool has_collision_name() const;
  inline void clear_collision_name();
  static const int kCollisionNameFieldNumber = 35;
  inline const ::std::string& collision_name() const;
  inline void set_collision_name(const ::std::string& value);
  inline void set_collision_name(const char* value);
  inline void set_collision_name(const char* value, size_t size);
  inline ::std::string* mutable_collision_name();
  inline ::std::string* release_collision_name();
  inline void set_allocated_collision_name(::std::string* collision_name);

  // repeated uint32 ai_loop = 36;
  inline int ai_loop_size() const;
  inline void clear_ai_loop();
  static const int kAiLoopFieldNumber = 36;
  inline ::google::protobuf::uint32 ai_loop(int index) const;
  inline void set_ai_loop(int index, ::google::protobuf::uint32 value);
  inline void add_ai_loop(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ai_loop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ai_loop();

  // optional string death_sound = 37;
  inline bool has_death_sound() const;
  inline void clear_death_sound();
  static const int kDeathSoundFieldNumber = 37;
  inline const ::std::string& death_sound() const;
  inline void set_death_sound(const ::std::string& value);
  inline void set_death_sound(const char* value);
  inline void set_death_sound(const char* value, size_t size);
  inline ::std::string* mutable_death_sound();
  inline ::std::string* release_death_sound();
  inline void set_allocated_death_sound(::std::string* death_sound);

  // optional uint32 death_eff = 38;
  inline bool has_death_eff() const;
  inline void clear_death_eff();
  static const int kDeathEffFieldNumber = 38;
  inline ::google::protobuf::uint32 death_eff() const;
  inline void set_death_eff(::google::protobuf::uint32 value);

  // optional float buff_scale = 39;
  inline bool has_buff_scale() const;
  inline void clear_buff_scale();
  static const int kBuffScaleFieldNumber = 39;
  inline float buff_scale() const;
  inline void set_buff_scale(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCardStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_cardname();
  inline void clear_has_cardname();
  inline void set_has_cardpic();
  inline void clear_has_cardpic();
  inline void set_has_cardmodel();
  inline void clear_has_cardmodel();
  inline void set_has_cardicon();
  inline void clear_has_cardicon();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_turnrate();
  inline void clear_has_turnrate();
  inline void set_has_attacknormal();
  inline void clear_has_attacknormal();
  inline void set_has_attacknormal_cd();
  inline void clear_has_attacknormal_cd();
  inline void set_has_skillnormal();
  inline void clear_has_skillnormal();
  inline void set_has_skillnormal_cd();
  inline void clear_has_skillnormal_cd();
  inline void set_has_skillbig();
  inline void clear_has_skillbig();
  inline void set_has_skillbig_cd();
  inline void clear_has_skillbig_cd();
  inline void set_has_skillhero();
  inline void clear_has_skillhero();
  inline void set_has_skillhero_cd();
  inline void clear_has_skillhero_cd();
  inline void set_has_skillfriend();
  inline void clear_has_skillfriend();
  inline void set_has_skillfriend_cd();
  inline void clear_has_skillfriend_cd();
  inline void set_has_aiid();
  inline void clear_has_aiid();
  inline void set_has_frag();
  inline void clear_has_frag();
  inline void set_has_gamestats();
  inline void clear_has_gamestats();
  inline void set_has_name_pic();
  inline void clear_has_name_pic();
  inline void set_has_can_summered();
  inline void clear_has_can_summered();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_star_gamestat();
  inline void clear_has_star_gamestat();
  inline void set_has_ai_uid();
  inline void clear_has_ai_uid();
  inline void set_has_collision_name();
  inline void clear_has_collision_name();
  inline void set_has_death_sound();
  inline void clear_has_death_sound();
  inline void set_has_death_eff();
  inline void clear_has_death_eff();
  inline void set_has_buff_scale();
  inline void clear_has_buff_scale();

  ::google::protobuf::uint32 uid_;
  int role_;
  ::std::string* cardpic_;
  ::google::protobuf::uint32 cardname_;
  ::google::protobuf::uint32 cardmodel_;
  ::std::string* cardicon_;
  float scale_;
  float radius_;
  float turnrate_;
  ::google::protobuf::uint32 attacknormal_;
  ::google::protobuf::uint32 attacknormal_cd_;
  ::google::protobuf::uint32 skillnormal_;
  ::google::protobuf::uint32 skillnormal_cd_;
  ::google::protobuf::uint32 skillbig_;
  ::google::protobuf::uint32 skillbig_cd_;
  ::google::protobuf::uint32 skillhero_;
  ::google::protobuf::uint32 skillhero_cd_;
  ::google::protobuf::uint32 skillfriend_;
  ::google::protobuf::uint32 skillfriend_cd_;
  ::google::protobuf::uint32 aiid_;
  ::google::protobuf::uint32 frag_;
  ::google::protobuf::uint32 gamestats_;
  ::std::string* name_pic_;
  ::google::protobuf::uint32 can_summered_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSkillCondition > skill_extra_;
  ::google::protobuf::uint32 star_gamestat_;
  ::google::protobuf::uint32 ai_uid_;
  ::std::string* collision_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ai_loop_;
  ::std::string* death_sound_;
  ::google::protobuf::uint32 death_eff_;
  float buff_scale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(33 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sCardStats* default_instance_;
};
// -------------------------------------------------------------------

class sPersonCardStats : public ::google::protobuf::MessageLite {
 public:
  sPersonCardStats();
  virtual ~sPersonCardStats();

  sPersonCardStats(const sPersonCardStats& from);

  inline sPersonCardStats& operator=(const sPersonCardStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPersonCardStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPersonCardStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPersonCardStats* other);

  // implements Message ----------------------------------------------

  sPersonCardStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPersonCardStats& from);
  void MergeFrom(const sPersonCardStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 partner = 2;
  inline bool has_partner() const;
  inline void clear_partner();
  static const int kPartnerFieldNumber = 2;
  inline ::google::protobuf::uint32 partner() const;
  inline void set_partner(::google::protobuf::uint32 value);

  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 intensify = 5;
  inline bool has_intensify() const;
  inline void clear_intensify();
  static const int kIntensifyFieldNumber = 5;
  inline ::google::protobuf::uint32 intensify() const;
  inline void set_intensify(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.ePersonalOpertionType oper = 6;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 6;
  inline ::jynetwork::proto::ePersonalOpertionType oper() const;
  inline void set_oper(::jynetwork::proto::ePersonalOpertionType value);

  // optional .jynetwork.proto.sGameStats gamestats = 7;
  inline bool has_gamestats() const;
  inline void clear_gamestats();
  static const int kGamestatsFieldNumber = 7;
  inline const ::jynetwork::proto::sGameStats& gamestats() const;
  inline ::jynetwork::proto::sGameStats* mutable_gamestats();
  inline ::jynetwork::proto::sGameStats* release_gamestats();
  inline void set_allocated_gamestats(::jynetwork::proto::sGameStats* gamestats);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPersonCardStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_partner();
  inline void clear_has_partner();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_intensify();
  inline void clear_has_intensify();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_gamestats();
  inline void clear_has_gamestats();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 partner_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 intensify_;
  int oper_;
  ::jynetwork::proto::sGameStats* gamestats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sPersonCardStats* default_instance_;
};
// -------------------------------------------------------------------

class sSkillStats : public ::google::protobuf::MessageLite {
 public:
  sSkillStats();
  virtual ~sSkillStats();

  sSkillStats(const sSkillStats& from);

  inline sSkillStats& operator=(const sSkillStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sSkillStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sSkillStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sSkillStats* other);

  // implements Message ----------------------------------------------

  sSkillStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sSkillStats& from);
  void MergeFrom(const sSkillStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 skillname = 2;
  inline bool has_skillname() const;
  inline void clear_skillname();
  static const int kSkillnameFieldNumber = 2;
  inline ::google::protobuf::uint32 skillname() const;
  inline void set_skillname(::google::protobuf::uint32 value);

  // optional uint32 description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline ::google::protobuf::uint32 description() const;
  inline void set_description(::google::protobuf::uint32 value);

  // optional string icon = 4;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 4;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional uint32 activeenergy = 5;
  inline bool has_activeenergy() const;
  inline void clear_activeenergy();
  static const int kActiveenergyFieldNumber = 5;
  inline ::google::protobuf::uint32 activeenergy() const;
  inline void set_activeenergy(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eTargetType targettype = 6;
  inline bool has_targettype() const;
  inline void clear_targettype();
  static const int kTargettypeFieldNumber = 6;
  inline ::jynetwork::proto::eTargetType targettype() const;
  inline void set_targettype(::jynetwork::proto::eTargetType value);

  // optional uint32 targetlimit = 7;
  inline bool has_targetlimit() const;
  inline void clear_targetlimit();
  static const int kTargetlimitFieldNumber = 7;
  inline ::google::protobuf::uint32 targetlimit() const;
  inline void set_targetlimit(::google::protobuf::uint32 value);

  // optional uint32 targetnum = 8;
  inline bool has_targetnum() const;
  inline void clear_targetnum();
  static const int kTargetnumFieldNumber = 8;
  inline ::google::protobuf::uint32 targetnum() const;
  inline void set_targetnum(::google::protobuf::uint32 value);

  // optional float rangecirclex = 9;
  inline bool has_rangecirclex() const;
  inline void clear_rangecirclex();
  static const int kRangecirclexFieldNumber = 9;
  inline float rangecirclex() const;
  inline void set_rangecirclex(float value);

  // optional float rangecircley = 10;
  inline bool has_rangecircley() const;
  inline void clear_rangecircley();
  static const int kRangecircleyFieldNumber = 10;
  inline float rangecircley() const;
  inline void set_rangecircley(float value);

  // optional float rangelong = 11;
  inline bool has_rangelong() const;
  inline void clear_rangelong();
  static const int kRangelongFieldNumber = 11;
  inline float rangelong() const;
  inline void set_rangelong(float value);

  // optional float rangewide = 12;
  inline bool has_rangewide() const;
  inline void clear_rangewide();
  static const int kRangewideFieldNumber = 12;
  inline float rangewide() const;
  inline void set_rangewide(float value);

  // optional uint32 begineffect = 13;
  inline bool has_begineffect() const;
  inline void clear_begineffect();
  static const int kBegineffectFieldNumber = 13;
  inline ::google::protobuf::uint32 begineffect() const;
  inline void set_begineffect(::google::protobuf::uint32 value);

  // optional uint32 bulleteffect = 14;
  inline bool has_bulleteffect() const;
  inline void clear_bulleteffect();
  static const int kBulleteffectFieldNumber = 14;
  inline ::google::protobuf::uint32 bulleteffect() const;
  inline void set_bulleteffect(::google::protobuf::uint32 value);

  // optional float continuetime = 15;
  inline bool has_continuetime() const;
  inline void clear_continuetime();
  static const int kContinuetimeFieldNumber = 15;
  inline float continuetime() const;
  inline void set_continuetime(float value);

  // optional uint32 frag = 16;
  inline bool has_frag() const;
  inline void clear_frag();
  static const int kFragFieldNumber = 16;
  inline ::google::protobuf::uint32 frag() const;
  inline void set_frag(::google::protobuf::uint32 value);

  // optional uint32 cd = 17;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 17;
  inline ::google::protobuf::uint32 cd() const;
  inline void set_cd(::google::protobuf::uint32 value);

  // optional uint32 unlock_level = 20;
  inline bool has_unlock_level() const;
  inline void clear_unlock_level();
  static const int kUnlockLevelFieldNumber = 20;
  inline ::google::protobuf::uint32 unlock_level() const;
  inline void set_unlock_level(::google::protobuf::uint32 value);

  // optional uint32 role = 21;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 21;
  inline ::google::protobuf::uint32 role() const;
  inline void set_role(::google::protobuf::uint32 value);

  // optional float damage_modify = 22;
  inline bool has_damage_modify() const;
  inline void clear_damage_modify();
  static const int kDamageModifyFieldNumber = 22;
  inline float damage_modify() const;
  inline void set_damage_modify(float value);

  // optional string icon_display = 23;
  inline bool has_icon_display() const;
  inline void clear_icon_display();
  static const int kIconDisplayFieldNumber = 23;
  inline const ::std::string& icon_display() const;
  inline void set_icon_display(const ::std::string& value);
  inline void set_icon_display(const char* value);
  inline void set_icon_display(const char* value, size_t size);
  inline ::std::string* mutable_icon_display();
  inline ::std::string* release_icon_display();
  inline void set_allocated_icon_display(::std::string* icon_display);

  // optional uint32 skill_use_type = 24;
  inline bool has_skill_use_type() const;
  inline void clear_skill_use_type();
  static const int kSkillUseTypeFieldNumber = 24;
  inline ::google::protobuf::uint32 skill_use_type() const;
  inline void set_skill_use_type(::google::protobuf::uint32 value);

  // optional uint32 skill_disp_stat = 25;
  inline bool has_skill_disp_stat() const;
  inline void clear_skill_disp_stat();
  static const int kSkillDispStatFieldNumber = 25;
  inline ::google::protobuf::uint32 skill_disp_stat() const;
  inline void set_skill_disp_stat(::google::protobuf::uint32 value);

  // optional uint32 skill_disp_stat_lv = 26;
  inline bool has_skill_disp_stat_lv() const;
  inline void clear_skill_disp_stat_lv();
  static const int kSkillDispStatLvFieldNumber = 26;
  inline ::google::protobuf::uint32 skill_disp_stat_lv() const;
  inline void set_skill_disp_stat_lv(::google::protobuf::uint32 value);

  // optional float mage_ball_radius = 27;
  inline bool has_mage_ball_radius() const;
  inline void clear_mage_ball_radius();
  static const int kMageBallRadiusFieldNumber = 27;
  inline float mage_ball_radius() const;
  inline void set_mage_ball_radius(float value);

  // optional float mage_ball_dector = 28;
  inline bool has_mage_ball_dector() const;
  inline void clear_mage_ball_dector();
  static const int kMageBallDectorFieldNumber = 28;
  inline float mage_ball_dector() const;
  inline void set_mage_ball_dector(float value);

  // optional uint32 mage_ball_body = 29;
  inline bool has_mage_ball_body() const;
  inline void clear_mage_ball_body();
  static const int kMageBallBodyFieldNumber = 29;
  inline ::google::protobuf::uint32 mage_ball_body() const;
  inline void set_mage_ball_body(::google::protobuf::uint32 value);

  // optional float begineffect_delay = 30;
  inline bool has_begineffect_delay() const;
  inline void clear_begineffect_delay();
  static const int kBegineffectDelayFieldNumber = 30;
  inline float begineffect_delay() const;
  inline void set_begineffect_delay(float value);

  // optional float bulleteffect_delay = 31;
  inline bool has_bulleteffect_delay() const;
  inline void clear_bulleteffect_delay();
  static const int kBulleteffectDelayFieldNumber = 31;
  inline float bulleteffect_delay() const;
  inline void set_bulleteffect_delay(float value);

  // optional uint32 battle_ability = 32;
  inline bool has_battle_ability() const;
  inline void clear_battle_ability();
  static const int kBattleAbilityFieldNumber = 32;
  inline ::google::protobuf::uint32 battle_ability() const;
  inline void set_battle_ability(::google::protobuf::uint32 value);

  // optional string icon_btl_skill = 33;
  inline bool has_icon_btl_skill() const;
  inline void clear_icon_btl_skill();
  static const int kIconBtlSkillFieldNumber = 33;
  inline const ::std::string& icon_btl_skill() const;
  inline void set_icon_btl_skill(const ::std::string& value);
  inline void set_icon_btl_skill(const char* value);
  inline void set_icon_btl_skill(const char* value, size_t size);
  inline ::std::string* mutable_icon_btl_skill();
  inline ::std::string* release_icon_btl_skill();
  inline void set_allocated_icon_btl_skill(::std::string* icon_btl_skill);

  // optional string sound = 34;
  inline bool has_sound() const;
  inline void clear_sound();
  static const int kSoundFieldNumber = 34;
  inline const ::std::string& sound() const;
  inline void set_sound(const ::std::string& value);
  inline void set_sound(const char* value);
  inline void set_sound(const char* value, size_t size);
  inline ::std::string* mutable_sound();
  inline ::std::string* release_sound();
  inline void set_allocated_sound(::std::string* sound);

  // optional uint32 skill_desc = 35;
  inline bool has_skill_desc() const;
  inline void clear_skill_desc();
  static const int kSkillDescFieldNumber = 35;
  inline ::google::protobuf::uint32 skill_desc() const;
  inline void set_skill_desc(::google::protobuf::uint32 value);

  // optional uint32 skill_location = 36;
  inline bool has_skill_location() const;
  inline void clear_skill_location();
  static const int kSkillLocationFieldNumber = 36;
  inline ::google::protobuf::uint32 skill_location() const;
  inline void set_skill_location(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sSkillStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_skillname();
  inline void clear_has_skillname();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_activeenergy();
  inline void clear_has_activeenergy();
  inline void set_has_targettype();
  inline void clear_has_targettype();
  inline void set_has_targetlimit();
  inline void clear_has_targetlimit();
  inline void set_has_targetnum();
  inline void clear_has_targetnum();
  inline void set_has_rangecirclex();
  inline void clear_has_rangecirclex();
  inline void set_has_rangecircley();
  inline void clear_has_rangecircley();
  inline void set_has_rangelong();
  inline void clear_has_rangelong();
  inline void set_has_rangewide();
  inline void clear_has_rangewide();
  inline void set_has_begineffect();
  inline void clear_has_begineffect();
  inline void set_has_bulleteffect();
  inline void clear_has_bulleteffect();
  inline void set_has_continuetime();
  inline void clear_has_continuetime();
  inline void set_has_frag();
  inline void clear_has_frag();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_unlock_level();
  inline void clear_has_unlock_level();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_damage_modify();
  inline void clear_has_damage_modify();
  inline void set_has_icon_display();
  inline void clear_has_icon_display();
  inline void set_has_skill_use_type();
  inline void clear_has_skill_use_type();
  inline void set_has_skill_disp_stat();
  inline void clear_has_skill_disp_stat();
  inline void set_has_skill_disp_stat_lv();
  inline void clear_has_skill_disp_stat_lv();
  inline void set_has_mage_ball_radius();
  inline void clear_has_mage_ball_radius();
  inline void set_has_mage_ball_dector();
  inline void clear_has_mage_ball_dector();
  inline void set_has_mage_ball_body();
  inline void clear_has_mage_ball_body();
  inline void set_has_begineffect_delay();
  inline void clear_has_begineffect_delay();
  inline void set_has_bulleteffect_delay();
  inline void clear_has_bulleteffect_delay();
  inline void set_has_battle_ability();
  inline void clear_has_battle_ability();
  inline void set_has_icon_btl_skill();
  inline void clear_has_icon_btl_skill();
  inline void set_has_sound();
  inline void clear_has_sound();
  inline void set_has_skill_desc();
  inline void clear_has_skill_desc();
  inline void set_has_skill_location();
  inline void clear_has_skill_location();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 skillname_;
  ::std::string* icon_;
  ::google::protobuf::uint32 description_;
  ::google::protobuf::uint32 activeenergy_;
  int targettype_;
  ::google::protobuf::uint32 targetlimit_;
  ::google::protobuf::uint32 targetnum_;
  float rangecirclex_;
  float rangecircley_;
  float rangelong_;
  float rangewide_;
  ::google::protobuf::uint32 begineffect_;
  ::google::protobuf::uint32 bulleteffect_;
  float continuetime_;
  ::google::protobuf::uint32 frag_;
  ::google::protobuf::uint32 cd_;
  ::google::protobuf::uint32 unlock_level_;
  ::google::protobuf::uint32 role_;
  float damage_modify_;
  ::google::protobuf::uint32 skill_use_type_;
  ::std::string* icon_display_;
  ::google::protobuf::uint32 skill_disp_stat_;
  ::google::protobuf::uint32 skill_disp_stat_lv_;
  float mage_ball_radius_;
  float mage_ball_dector_;
  ::google::protobuf::uint32 mage_ball_body_;
  float begineffect_delay_;
  float bulleteffect_delay_;
  ::google::protobuf::uint32 battle_ability_;
  ::std::string* icon_btl_skill_;
  ::std::string* sound_;
  ::google::protobuf::uint32 skill_desc_;
  ::google::protobuf::uint32 skill_location_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(34 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sSkillStats* default_instance_;
};
// -------------------------------------------------------------------

class sBuffStats : public ::google::protobuf::MessageLite {
 public:
  sBuffStats();
  virtual ~sBuffStats();

  sBuffStats(const sBuffStats& from);

  inline sBuffStats& operator=(const sBuffStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sBuffStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sBuffStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sBuffStats* other);

  // implements Message ----------------------------------------------

  sBuffStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sBuffStats& from);
  void MergeFrom(const sBuffStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 buffname = 2;
  inline bool has_buffname() const;
  inline void clear_buffname();
  static const int kBuffnameFieldNumber = 2;
  inline ::google::protobuf::uint32 buffname() const;
  inline void set_buffname(::google::protobuf::uint32 value);

  // optional string bufficon = 3;
  inline bool has_bufficon() const;
  inline void clear_bufficon();
  static const int kBufficonFieldNumber = 3;
  inline const ::std::string& bufficon() const;
  inline void set_bufficon(const ::std::string& value);
  inline void set_bufficon(const char* value);
  inline void set_bufficon(const char* value, size_t size);
  inline ::std::string* mutable_bufficon();
  inline ::std::string* release_bufficon();
  inline void set_allocated_bufficon(::std::string* bufficon);

  // optional fixed32 begintime = 4;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBegintimeFieldNumber = 4;
  inline ::google::protobuf::uint32 begintime() const;
  inline void set_begintime(::google::protobuf::uint32 value);

  // optional fixed32 endtime = 5;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 5;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.sGameStats gamestats = 6;
  inline bool has_gamestats() const;
  inline void clear_gamestats();
  static const int kGamestatsFieldNumber = 6;
  inline const ::jynetwork::proto::sGameStats& gamestats() const;
  inline ::jynetwork::proto::sGameStats* mutable_gamestats();
  inline ::jynetwork::proto::sGameStats* release_gamestats();
  inline void set_allocated_gamestats(::jynetwork::proto::sGameStats* gamestats);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sBuffStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_buffname();
  inline void clear_has_buffname();
  inline void set_has_bufficon();
  inline void clear_has_bufficon();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_gamestats();
  inline void clear_has_gamestats();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 buffname_;
  ::std::string* bufficon_;
  ::google::protobuf::uint32 begintime_;
  ::google::protobuf::uint32 endtime_;
  ::jynetwork::proto::sGameStats* gamestats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sBuffStats* default_instance_;
};
// -------------------------------------------------------------------

class sDropItem : public ::google::protobuf::MessageLite {
 public:
  sDropItem();
  virtual ~sDropItem();

  sDropItem(const sDropItem& from);

  inline sDropItem& operator=(const sDropItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const sDropItem& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sDropItem* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sDropItem* other);

  // implements Message ----------------------------------------------

  sDropItem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sDropItem& from);
  void MergeFrom(const sDropItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional float rate = 2;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 2;
  inline float rate() const;
  inline void set_rate(float value);

  // optional uint32 ispackage = 3;
  inline bool has_ispackage() const;
  inline void clear_ispackage();
  static const int kIspackageFieldNumber = 3;
  inline ::google::protobuf::uint32 ispackage() const;
  inline void set_ispackage(::google::protobuf::uint32 value);

  // optional uint32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 percent = 5;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 5;
  inline ::google::protobuf::uint32 percent() const;
  inline void set_percent(::google::protobuf::uint32 value);

  // optional bytes name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 drop_times = 7;
  inline bool has_drop_times() const;
  inline void clear_drop_times();
  static const int kDropTimesFieldNumber = 7;
  inline ::google::protobuf::uint32 drop_times() const;
  inline void set_drop_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sDropItem)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_ispackage();
  inline void clear_has_ispackage();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_percent();
  inline void clear_has_percent();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_drop_times();
  inline void clear_has_drop_times();

  ::google::protobuf::uint32 uid_;
  float rate_;
  ::google::protobuf::uint32 ispackage_;
  ::google::protobuf::uint32 num_;
  ::std::string* name_;
  ::google::protobuf::uint32 percent_;
  ::google::protobuf::uint32 drop_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sDropItem* default_instance_;
};
// -------------------------------------------------------------------

class sDropStats : public ::google::protobuf::MessageLite {
 public:
  sDropStats();
  virtual ~sDropStats();

  sDropStats(const sDropStats& from);

  inline sDropStats& operator=(const sDropStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sDropStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sDropStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sDropStats* other);

  // implements Message ----------------------------------------------

  sDropStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sDropStats& from);
  void MergeFrom(const sDropStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sDropItem drops = 2;
  inline int drops_size() const;
  inline void clear_drops();
  static const int kDropsFieldNumber = 2;
  inline const ::jynetwork::proto::sDropItem& drops(int index) const;
  inline ::jynetwork::proto::sDropItem* mutable_drops(int index);
  inline ::jynetwork::proto::sDropItem* add_drops();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropItem >&
      drops() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropItem >*
      mutable_drops();

  // optional uint32 minlv = 3;
  inline bool has_minlv() const;
  inline void clear_minlv();
  static const int kMinlvFieldNumber = 3;
  inline ::google::protobuf::uint32 minlv() const;
  inline void set_minlv(::google::protobuf::uint32 value);

  // optional uint32 maxlv = 4;
  inline bool has_maxlv() const;
  inline void clear_maxlv();
  static const int kMaxlvFieldNumber = 4;
  inline ::google::protobuf::uint32 maxlv() const;
  inline void set_maxlv(::google::protobuf::uint32 value);

  // optional uint32 joblimit = 5;
  inline bool has_joblimit() const;
  inline void clear_joblimit();
  static const int kJoblimitFieldNumber = 5;
  inline ::google::protobuf::uint32 joblimit() const;
  inline void set_joblimit(::google::protobuf::uint32 value);

  // optional uint32 droptype = 6;
  inline bool has_droptype() const;
  inline void clear_droptype();
  static const int kDroptypeFieldNumber = 6;
  inline ::google::protobuf::uint32 droptype() const;
  inline void set_droptype(::google::protobuf::uint32 value);

  // optional bytes name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 treasure_class = 8;
  inline bool has_treasure_class() const;
  inline void clear_treasure_class();
  static const int kTreasureClassFieldNumber = 8;
  inline ::google::protobuf::uint32 treasure_class() const;
  inline void set_treasure_class(::google::protobuf::uint32 value);

  // optional uint32 add_percent = 9;
  inline bool has_add_percent() const;
  inline void clear_add_percent();
  static const int kAddPercentFieldNumber = 9;
  inline ::google::protobuf::uint32 add_percent() const;
  inline void set_add_percent(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sDropStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_minlv();
  inline void clear_has_minlv();
  inline void set_has_maxlv();
  inline void clear_has_maxlv();
  inline void set_has_joblimit();
  inline void clear_has_joblimit();
  inline void set_has_droptype();
  inline void clear_has_droptype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_treasure_class();
  inline void clear_has_treasure_class();
  inline void set_has_add_percent();
  inline void clear_has_add_percent();

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropItem > drops_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 minlv_;
  ::google::protobuf::uint32 maxlv_;
  ::google::protobuf::uint32 joblimit_;
  ::std::string* name_;
  ::google::protobuf::uint32 droptype_;
  ::google::protobuf::uint32 treasure_class_;
  ::google::protobuf::uint32 add_percent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sDropStats* default_instance_;
};
// -------------------------------------------------------------------

class sMapStats : public ::google::protobuf::MessageLite {
 public:
  sMapStats();
  virtual ~sMapStats();

  sMapStats(const sMapStats& from);

  inline sMapStats& operator=(const sMapStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sMapStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sMapStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sMapStats* other);

  // implements Message ----------------------------------------------

  sMapStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sMapStats& from);
  void MergeFrom(const sMapStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 numlimit = 5;
  inline bool has_numlimit() const;
  inline void clear_numlimit();
  static const int kNumlimitFieldNumber = 5;
  inline ::google::protobuf::uint32 numlimit() const;
  inline void set_numlimit(::google::protobuf::uint32 value);

  // optional uint32 levellimit = 6;
  inline bool has_levellimit() const;
  inline void clear_levellimit();
  static const int kLevellimitFieldNumber = 6;
  inline ::google::protobuf::uint32 levellimit() const;
  inline void set_levellimit(::google::protobuf::uint32 value);

  // optional uint32 ranklimit = 7;
  inline bool has_ranklimit() const;
  inline void clear_ranklimit();
  static const int kRanklimitFieldNumber = 7;
  inline ::google::protobuf::uint32 ranklimit() const;
  inline void set_ranklimit(::google::protobuf::uint32 value);

  // repeated uint32 weekdaylimit = 8;
  inline int weekdaylimit_size() const;
  inline void clear_weekdaylimit();
  static const int kWeekdaylimitFieldNumber = 8;
  inline ::google::protobuf::uint32 weekdaylimit(int index) const;
  inline void set_weekdaylimit(int index, ::google::protobuf::uint32 value);
  inline void add_weekdaylimit(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      weekdaylimit() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_weekdaylimit();

  // optional fixed32 day_begintime = 9;
  inline bool has_day_begintime() const;
  inline void clear_day_begintime();
  static const int kDayBegintimeFieldNumber = 9;
  inline ::google::protobuf::uint32 day_begintime() const;
  inline void set_day_begintime(::google::protobuf::uint32 value);

  // optional fixed32 day_endtime = 10;
  inline bool has_day_endtime() const;
  inline void clear_day_endtime();
  static const int kDayEndtimeFieldNumber = 10;
  inline ::google::protobuf::uint32 day_endtime() const;
  inline void set_day_endtime(::google::protobuf::uint32 value);

  // optional uint32 front_map = 11;
  inline bool has_front_map() const;
  inline void clear_front_map();
  static const int kFrontMapFieldNumber = 11;
  inline ::google::protobuf::uint32 front_map() const;
  inline void set_front_map(::google::protobuf::uint32 value);

  // optional uint32 difficult = 29;
  inline bool has_difficult() const;
  inline void clear_difficult();
  static const int kDifficultFieldNumber = 29;
  inline ::google::protobuf::uint32 difficult() const;
  inline void set_difficult(::google::protobuf::uint32 value);

  // optional uint32 drop_id = 31;
  inline bool has_drop_id() const;
  inline void clear_drop_id();
  static const int kDropIdFieldNumber = 31;
  inline ::google::protobuf::uint32 drop_id() const;
  inline void set_drop_id(::google::protobuf::uint32 value);

  // optional uint32 cost_stamina = 32;
  inline bool has_cost_stamina() const;
  inline void clear_cost_stamina();
  static const int kCostStaminaFieldNumber = 32;
  inline ::google::protobuf::uint32 cost_stamina() const;
  inline void set_cost_stamina(::google::protobuf::uint32 value);

  // optional uint32 drop_middle = 33;
  inline bool has_drop_middle() const;
  inline void clear_drop_middle();
  static const int kDropMiddleFieldNumber = 33;
  inline ::google::protobuf::uint32 drop_middle() const;
  inline void set_drop_middle(::google::protobuf::uint32 value);

  // optional uint32 drop_middlenum = 34;
  inline bool has_drop_middlenum() const;
  inline void clear_drop_middlenum();
  static const int kDropMiddlenumFieldNumber = 34;
  inline ::google::protobuf::uint32 drop_middlenum() const;
  inline void set_drop_middlenum(::google::protobuf::uint32 value);

  // optional uint32 drop_goblin = 35;
  inline bool has_drop_goblin() const;
  inline void clear_drop_goblin();
  static const int kDropGoblinFieldNumber = 35;
  inline ::google::protobuf::uint32 drop_goblin() const;
  inline void set_drop_goblin(::google::protobuf::uint32 value);

  // optional uint32 drop_goblin_rate = 36;
  inline bool has_drop_goblin_rate() const;
  inline void clear_drop_goblin_rate();
  static const int kDropGoblinRateFieldNumber = 36;
  inline ::google::protobuf::uint32 drop_goblin_rate() const;
  inline void set_drop_goblin_rate(::google::protobuf::uint32 value);

  // optional uint32 castle_type = 37;
  inline bool has_castle_type() const;
  inline void clear_castle_type();
  static const int kCastleTypeFieldNumber = 37;
  inline ::google::protobuf::uint32 castle_type() const;
  inline void set_castle_type(::google::protobuf::uint32 value);

  // optional float star_score = 46;
  inline bool has_star_score() const;
  inline void clear_star_score();
  static const int kStarScoreFieldNumber = 46;
  inline float star_score() const;
  inline void set_star_score(float value);

  // optional float recommond_attack = 47;
  inline bool has_recommond_attack() const;
  inline void clear_recommond_attack();
  static const int kRecommondAttackFieldNumber = 47;
  inline float recommond_attack() const;
  inline void set_recommond_attack(float value);

  // repeated .jynetwork.proto.sChaosStats chaos = 65;
  inline int chaos_size() const;
  inline void clear_chaos();
  static const int kChaosFieldNumber = 65;
  inline const ::jynetwork::proto::sChaosStats& chaos(int index) const;
  inline ::jynetwork::proto::sChaosStats* mutable_chaos(int index);
  inline ::jynetwork::proto::sChaosStats* add_chaos();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sChaosStats >&
      chaos() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sChaosStats >*
      mutable_chaos();

  // optional uint32 after_drop_id = 66;
  inline bool has_after_drop_id() const;
  inline void clear_after_drop_id();
  static const int kAfterDropIdFieldNumber = 66;
  inline ::google::protobuf::uint32 after_drop_id() const;
  inline void set_after_drop_id(::google::protobuf::uint32 value);

  // optional uint32 stage_id = 59;
  inline bool has_stage_id() const;
  inline void clear_stage_id();
  static const int kStageIdFieldNumber = 59;
  inline ::google::protobuf::uint32 stage_id() const;
  inline void set_stage_id(::google::protobuf::uint32 value);

  // optional uint32 stage_group_id = 60;
  inline bool has_stage_group_id() const;
  inline void clear_stage_group_id();
  static const int kStageGroupIdFieldNumber = 60;
  inline ::google::protobuf::uint32 stage_group_id() const;
  inline void set_stage_group_id(::google::protobuf::uint32 value);

  // optional uint32 stage_detail_id = 61;
  inline bool has_stage_detail_id() const;
  inline void clear_stage_detail_id();
  static const int kStageDetailIdFieldNumber = 61;
  inline ::google::protobuf::uint32 stage_detail_id() const;
  inline void set_stage_detail_id(::google::protobuf::uint32 value);

  // optional uint32 percent = 67;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 67;
  inline ::google::protobuf::uint32 percent() const;
  inline void set_percent(::google::protobuf::uint32 value);

  // repeated uint32 chaos_group = 68;
  inline int chaos_group_size() const;
  inline void clear_chaos_group();
  static const int kChaosGroupFieldNumber = 68;
  inline ::google::protobuf::uint32 chaos_group(int index) const;
  inline void set_chaos_group(int index, ::google::protobuf::uint32 value);
  inline void add_chaos_group(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      chaos_group() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_chaos_group();

  // optional .jynetwork.proto.eRoleType role = 69;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 69;
  inline ::jynetwork::proto::eRoleType role() const;
  inline void set_role(::jynetwork::proto::eRoleType value);

  // optional uint32 first_drop = 70;
  inline bool has_first_drop() const;
  inline void clear_first_drop();
  static const int kFirstDropFieldNumber = 70;
  inline ::google::protobuf::uint32 first_drop() const;
  inline void set_first_drop(::google::protobuf::uint32 value);

  // repeated uint32 first_drop_show = 71;
  inline int first_drop_show_size() const;
  inline void clear_first_drop_show();
  static const int kFirstDropShowFieldNumber = 71;
  inline ::google::protobuf::uint32 first_drop_show(int index) const;
  inline void set_first_drop_show(int index, ::google::protobuf::uint32 value);
  inline void add_first_drop_show(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      first_drop_show() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_first_drop_show();

  // repeated uint32 first_drop_show_type = 73;
  inline int first_drop_show_type_size() const;
  inline void clear_first_drop_show_type();
  static const int kFirstDropShowTypeFieldNumber = 73;
  inline ::google::protobuf::uint32 first_drop_show_type(int index) const;
  inline void set_first_drop_show_type(int index, ::google::protobuf::uint32 value);
  inline void add_first_drop_show_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      first_drop_show_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_first_drop_show_type();

  // repeated uint32 difficult_percent = 74;
  inline int difficult_percent_size() const;
  inline void clear_difficult_percent();
  static const int kDifficultPercentFieldNumber = 74;
  inline ::google::protobuf::uint32 difficult_percent(int index) const;
  inline void set_difficult_percent(int index, ::google::protobuf::uint32 value);
  inline void add_difficult_percent(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      difficult_percent() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_difficult_percent();

  // repeated uint32 difficult_tc = 75;
  inline int difficult_tc_size() const;
  inline void clear_difficult_tc();
  static const int kDifficultTcFieldNumber = 75;
  inline ::google::protobuf::uint32 difficult_tc(int index) const;
  inline void set_difficult_tc(int index, ::google::protobuf::uint32 value);
  inline void add_difficult_tc(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      difficult_tc() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_difficult_tc();

  // optional uint32 mvp_drop = 76;
  inline bool has_mvp_drop() const;
  inline void clear_mvp_drop();
  static const int kMvpDropFieldNumber = 76;
  inline ::google::protobuf::uint32 mvp_drop() const;
  inline void set_mvp_drop(::google::protobuf::uint32 value);

  // repeated uint32 drop_show = 77;
  inline int drop_show_size() const;
  inline void clear_drop_show();
  static const int kDropShowFieldNumber = 77;
  inline ::google::protobuf::uint32 drop_show(int index) const;
  inline void set_drop_show(int index, ::google::protobuf::uint32 value);
  inline void add_drop_show(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      drop_show() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_drop_show();

  // repeated uint32 drop_show_type = 78;
  inline int drop_show_type_size() const;
  inline void clear_drop_show_type();
  static const int kDropShowTypeFieldNumber = 78;
  inline ::google::protobuf::uint32 drop_show_type(int index) const;
  inline void set_drop_show_type(int index, ::google::protobuf::uint32 value);
  inline void add_drop_show_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      drop_show_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_drop_show_type();

  // optional uint32 can_well_over = 79;
  inline bool has_can_well_over() const;
  inline void clear_can_well_over();
  static const int kCanWellOverFieldNumber = 79;
  inline ::google::protobuf::uint32 can_well_over() const;
  inline void set_can_well_over(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sMapStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_numlimit();
  inline void clear_has_numlimit();
  inline void set_has_levellimit();
  inline void clear_has_levellimit();
  inline void set_has_ranklimit();
  inline void clear_has_ranklimit();
  inline void set_has_day_begintime();
  inline void clear_has_day_begintime();
  inline void set_has_day_endtime();
  inline void clear_has_day_endtime();
  inline void set_has_front_map();
  inline void clear_has_front_map();
  inline void set_has_difficult();
  inline void clear_has_difficult();
  inline void set_has_drop_id();
  inline void clear_has_drop_id();
  inline void set_has_cost_stamina();
  inline void clear_has_cost_stamina();
  inline void set_has_drop_middle();
  inline void clear_has_drop_middle();
  inline void set_has_drop_middlenum();
  inline void clear_has_drop_middlenum();
  inline void set_has_drop_goblin();
  inline void clear_has_drop_goblin();
  inline void set_has_drop_goblin_rate();
  inline void clear_has_drop_goblin_rate();
  inline void set_has_castle_type();
  inline void clear_has_castle_type();
  inline void set_has_star_score();
  inline void clear_has_star_score();
  inline void set_has_recommond_attack();
  inline void clear_has_recommond_attack();
  inline void set_has_after_drop_id();
  inline void clear_has_after_drop_id();
  inline void set_has_stage_id();
  inline void clear_has_stage_id();
  inline void set_has_stage_group_id();
  inline void clear_has_stage_group_id();
  inline void set_has_stage_detail_id();
  inline void clear_has_stage_detail_id();
  inline void set_has_percent();
  inline void clear_has_percent();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_first_drop();
  inline void clear_has_first_drop();
  inline void set_has_mvp_drop();
  inline void clear_has_mvp_drop();
  inline void set_has_can_well_over();
  inline void clear_has_can_well_over();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 numlimit_;
  ::google::protobuf::uint32 levellimit_;
  ::google::protobuf::uint32 ranklimit_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > weekdaylimit_;
  ::google::protobuf::uint32 day_begintime_;
  ::google::protobuf::uint32 day_endtime_;
  ::google::protobuf::uint32 front_map_;
  ::google::protobuf::uint32 difficult_;
  ::google::protobuf::uint32 drop_id_;
  ::google::protobuf::uint32 cost_stamina_;
  ::google::protobuf::uint32 drop_middle_;
  ::google::protobuf::uint32 drop_middlenum_;
  ::google::protobuf::uint32 drop_goblin_;
  ::google::protobuf::uint32 drop_goblin_rate_;
  ::google::protobuf::uint32 castle_type_;
  float star_score_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sChaosStats > chaos_;
  float recommond_attack_;
  ::google::protobuf::uint32 after_drop_id_;
  ::google::protobuf::uint32 stage_id_;
  ::google::protobuf::uint32 stage_group_id_;
  ::google::protobuf::uint32 stage_detail_id_;
  ::google::protobuf::uint32 percent_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > chaos_group_;
  int role_;
  ::google::protobuf::uint32 first_drop_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > first_drop_show_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > first_drop_show_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > difficult_percent_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > difficult_tc_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > drop_show_;
  ::google::protobuf::uint32 mvp_drop_;
  ::google::protobuf::uint32 can_well_over_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > drop_show_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(35 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sMapStats* default_instance_;
};
// -------------------------------------------------------------------

class sCharExp : public ::google::protobuf::MessageLite {
 public:
  sCharExp();
  virtual ~sCharExp();

  sCharExp(const sCharExp& from);

  inline sCharExp& operator=(const sCharExp& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCharExp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCharExp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCharExp* other);

  // implements Message ----------------------------------------------

  sCharExp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCharExp& from);
  void MergeFrom(const sCharExp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 mission = 4;
  inline bool has_mission() const;
  inline void clear_mission();
  static const int kMissionFieldNumber = 4;
  inline ::google::protobuf::uint32 mission() const;
  inline void set_mission(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCharExp)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_mission();
  inline void clear_has_mission();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 mission_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sCharExp* default_instance_;
};
// -------------------------------------------------------------------

class sCharChangeJob : public ::google::protobuf::MessageLite {
 public:
  sCharChangeJob();
  virtual ~sCharChangeJob();

  sCharChangeJob(const sCharChangeJob& from);

  inline sCharChangeJob& operator=(const sCharChangeJob& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCharChangeJob& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCharChangeJob* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCharChangeJob* other);

  // implements Message ----------------------------------------------

  sCharChangeJob* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCharChangeJob& from);
  void MergeFrom(const sCharChangeJob& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 startjob = 2;
  inline bool has_startjob() const;
  inline void clear_startjob();
  static const int kStartjobFieldNumber = 2;
  inline ::google::protobuf::uint32 startjob() const;
  inline void set_startjob(::google::protobuf::uint32 value);

  // optional uint32 endjob = 3;
  inline bool has_endjob() const;
  inline void clear_endjob();
  static const int kEndjobFieldNumber = 3;
  inline ::google::protobuf::uint32 endjob() const;
  inline void set_endjob(::google::protobuf::uint32 value);

  // optional uint32 gamestateid = 4;
  inline bool has_gamestateid() const;
  inline void clear_gamestateid();
  static const int kGamestateidFieldNumber = 4;
  inline ::google::protobuf::uint32 gamestateid() const;
  inline void set_gamestateid(::google::protobuf::uint32 value);

  // optional uint32 lvlimit = 5;
  inline bool has_lvlimit() const;
  inline void clear_lvlimit();
  static const int kLvlimitFieldNumber = 5;
  inline ::google::protobuf::uint32 lvlimit() const;
  inline void set_lvlimit(::google::protobuf::uint32 value);

  // optional uint32 attraddpercent = 6;
  inline bool has_attraddpercent() const;
  inline void clear_attraddpercent();
  static const int kAttraddpercentFieldNumber = 6;
  inline ::google::protobuf::uint32 attraddpercent() const;
  inline void set_attraddpercent(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem itemneed = 7;
  inline int itemneed_size() const;
  inline void clear_itemneed();
  static const int kItemneedFieldNumber = 7;
  inline const ::jynetwork::proto::sSimpleItem& itemneed(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_itemneed(int index);
  inline ::jynetwork::proto::sSimpleItem* add_itemneed();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      itemneed() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_itemneed();

  // optional uint32 skillid = 8;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 8;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional string icon_c3b = 9;
  inline bool has_icon_c3b() const;
  inline void clear_icon_c3b();
  static const int kIconC3BFieldNumber = 9;
  inline const ::std::string& icon_c3b() const;
  inline void set_icon_c3b(const ::std::string& value);
  inline void set_icon_c3b(const char* value);
  inline void set_icon_c3b(const char* value, size_t size);
  inline ::std::string* mutable_icon_c3b();
  inline ::std::string* release_icon_c3b();
  inline void set_allocated_icon_c3b(::std::string* icon_c3b);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCharChangeJob)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_startjob();
  inline void clear_has_startjob();
  inline void set_has_endjob();
  inline void clear_has_endjob();
  inline void set_has_gamestateid();
  inline void clear_has_gamestateid();
  inline void set_has_lvlimit();
  inline void clear_has_lvlimit();
  inline void set_has_attraddpercent();
  inline void clear_has_attraddpercent();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_icon_c3b();
  inline void clear_has_icon_c3b();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 startjob_;
  ::google::protobuf::uint32 endjob_;
  ::google::protobuf::uint32 gamestateid_;
  ::google::protobuf::uint32 lvlimit_;
  ::google::protobuf::uint32 attraddpercent_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > itemneed_;
  ::std::string* icon_c3b_;
  ::google::protobuf::uint32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sCharChangeJob* default_instance_;
};
// -------------------------------------------------------------------

class sCharLevelUp : public ::google::protobuf::MessageLite {
 public:
  sCharLevelUp();
  virtual ~sCharLevelUp();

  sCharLevelUp(const sCharLevelUp& from);

  inline sCharLevelUp& operator=(const sCharLevelUp& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCharLevelUp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCharLevelUp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCharLevelUp* other);

  // implements Message ----------------------------------------------

  sCharLevelUp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCharLevelUp& from);
  void MergeFrom(const sCharLevelUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 str_ = 4;
  inline bool has_str_() const;
  inline void clear_str_();
  static const int kStrFieldNumber = 4;
  inline ::google::protobuf::uint32 str_() const;
  inline void set_str_(::google::protobuf::uint32 value);

  // optional uint32 agi_ = 5;
  inline bool has_agi_() const;
  inline void clear_agi_();
  static const int kAgiFieldNumber = 5;
  inline ::google::protobuf::uint32 agi_() const;
  inline void set_agi_(::google::protobuf::uint32 value);

  // optional uint32 int_ = 6;
  inline bool has_int_() const;
  inline void clear_int_();
  static const int kIntFieldNumber = 6;
  inline ::google::protobuf::uint32 int_() const;
  inline void set_int_(::google::protobuf::uint32 value);

  // optional uint32 vit_ = 7;
  inline bool has_vit_() const;
  inline void clear_vit_();
  static const int kVitFieldNumber = 7;
  inline ::google::protobuf::uint32 vit_() const;
  inline void set_vit_(::google::protobuf::uint32 value);

  // optional uint32 task = 8;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 8;
  inline ::google::protobuf::uint32 task() const;
  inline void set_task(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCharLevelUp)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_str_();
  inline void clear_has_str_();
  inline void set_has_agi_();
  inline void clear_has_agi_();
  inline void set_has_int_();
  inline void clear_has_int_();
  inline void set_has_vit_();
  inline void clear_has_vit_();
  inline void set_has_task();
  inline void clear_has_task();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 str__;
  ::google::protobuf::uint32 agi__;
  ::google::protobuf::uint32 int__;
  ::google::protobuf::uint32 vit__;
  ::google::protobuf::uint32 task_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sCharLevelUp* default_instance_;
};
// -------------------------------------------------------------------

class sCharSkillLevelUp : public ::google::protobuf::MessageLite {
 public:
  sCharSkillLevelUp();
  virtual ~sCharSkillLevelUp();

  sCharSkillLevelUp(const sCharSkillLevelUp& from);

  inline sCharSkillLevelUp& operator=(const sCharSkillLevelUp& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCharSkillLevelUp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCharSkillLevelUp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCharSkillLevelUp* other);

  // implements Message ----------------------------------------------

  sCharSkillLevelUp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCharSkillLevelUp& from);
  void MergeFrom(const sCharSkillLevelUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 charlv = 4;
  inline bool has_charlv() const;
  inline void clear_charlv();
  static const int kCharlvFieldNumber = 4;
  inline ::google::protobuf::uint32 charlv() const;
  inline void set_charlv(::google::protobuf::uint32 value);

  // optional uint32 money = 5;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 5;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // optional uint32 itemid = 6;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 6;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 itemnum = 7;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemnumFieldNumber = 7;
  inline ::google::protobuf::uint32 itemnum() const;
  inline void set_itemnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCharSkillLevelUp)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_charlv();
  inline void clear_has_charlv();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 charlv_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sCharSkillLevelUp* default_instance_;
};
// -------------------------------------------------------------------

class sEquipAttr : public ::google::protobuf::MessageLite {
 public:
  sEquipAttr();
  virtual ~sEquipAttr();

  sEquipAttr(const sEquipAttr& from);

  inline sEquipAttr& operator=(const sEquipAttr& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEquipAttr& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEquipAttr* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEquipAttr* other);

  // implements Message ----------------------------------------------

  sEquipAttr* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEquipAttr& from);
  void MergeFrom(const sEquipAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 attr_type = 1;
  inline bool has_attr_type() const;
  inline void clear_attr_type();
  static const int kAttrTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 attr_type() const;
  inline void set_attr_type(::google::protobuf::uint32 value);

  // optional uint32 attr_value = 2;
  inline bool has_attr_value() const;
  inline void clear_attr_value();
  static const int kAttrValueFieldNumber = 2;
  inline ::google::protobuf::uint32 attr_value() const;
  inline void set_attr_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEquipAttr)
 private:
  inline void set_has_attr_type();
  inline void clear_has_attr_type();
  inline void set_has_attr_value();
  inline void clear_has_attr_value();

  ::google::protobuf::uint32 attr_type_;
  ::google::protobuf::uint32 attr_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sEquipAttr* default_instance_;
};
// -------------------------------------------------------------------

class sEquipIntensify : public ::google::protobuf::MessageLite {
 public:
  sEquipIntensify();
  virtual ~sEquipIntensify();

  sEquipIntensify(const sEquipIntensify& from);

  inline sEquipIntensify& operator=(const sEquipIntensify& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEquipIntensify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEquipIntensify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEquipIntensify* other);

  // implements Message ----------------------------------------------

  sEquipIntensify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEquipIntensify& from);
  void MergeFrom(const sEquipIntensify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 equip_part = 2;
  inline bool has_equip_part() const;
  inline void clear_equip_part();
  static const int kEquipPartFieldNumber = 2;
  inline ::google::protobuf::uint32 equip_part() const;
  inline void set_equip_part(::google::protobuf::uint32 value);

  // optional uint32 equip_star = 3;
  inline bool has_equip_star() const;
  inline void clear_equip_star();
  static const int kEquipStarFieldNumber = 3;
  inline ::google::protobuf::uint32 equip_star() const;
  inline void set_equip_star(::google::protobuf::uint32 value);

  // optional uint32 lv_limit = 4;
  inline bool has_lv_limit() const;
  inline void clear_lv_limit();
  static const int kLvLimitFieldNumber = 4;
  inline ::google::protobuf::uint32 lv_limit() const;
  inline void set_lv_limit(::google::protobuf::uint32 value);

  // optional fixed32 rand_attr_count = 5;
  inline bool has_rand_attr_count() const;
  inline void clear_rand_attr_count();
  static const int kRandAttrCountFieldNumber = 5;
  inline ::google::protobuf::uint32 rand_attr_count() const;
  inline void set_rand_attr_count(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem itemneed = 6;
  inline int itemneed_size() const;
  inline void clear_itemneed();
  static const int kItemneedFieldNumber = 6;
  inline const ::jynetwork::proto::sSimpleItem& itemneed(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_itemneed(int index);
  inline ::jynetwork::proto::sSimpleItem* add_itemneed();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      itemneed() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_itemneed();

  // optional uint32 addpercent = 7;
  inline bool has_addpercent() const;
  inline void clear_addpercent();
  static const int kAddpercentFieldNumber = 7;
  inline ::google::protobuf::uint32 addpercent() const;
  inline void set_addpercent(::google::protobuf::uint32 value);

  // optional uint32 gold = 8;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 8;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional uint32 is_group = 9;
  inline bool has_is_group() const;
  inline void clear_is_group();
  static const int kIsGroupFieldNumber = 9;
  inline ::google::protobuf::uint32 is_group() const;
  inline void set_is_group(::google::protobuf::uint32 value);

  // optional uint32 max_intensify = 10;
  inline bool has_max_intensify() const;
  inline void clear_max_intensify();
  static const int kMaxIntensifyFieldNumber = 10;
  inline ::google::protobuf::uint32 max_intensify() const;
  inline void set_max_intensify(::google::protobuf::uint32 value);

  // optional uint32 equip_colour = 11;
  inline bool has_equip_colour() const;
  inline void clear_equip_colour();
  static const int kEquipColourFieldNumber = 11;
  inline ::google::protobuf::uint32 equip_colour() const;
  inline void set_equip_colour(::google::protobuf::uint32 value);

  // optional uint32 random_number = 12;
  inline bool has_random_number() const;
  inline void clear_random_number();
  static const int kRandomNumberFieldNumber = 12;
  inline ::google::protobuf::uint32 random_number() const;
  inline void set_random_number(::google::protobuf::uint32 value);

  // optional uint32 role = 13;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 13;
  inline ::google::protobuf::uint32 role() const;
  inline void set_role(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEquipIntensify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_equip_part();
  inline void clear_has_equip_part();
  inline void set_has_equip_star();
  inline void clear_has_equip_star();
  inline void set_has_lv_limit();
  inline void clear_has_lv_limit();
  inline void set_has_rand_attr_count();
  inline void clear_has_rand_attr_count();
  inline void set_has_addpercent();
  inline void clear_has_addpercent();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_is_group();
  inline void clear_has_is_group();
  inline void set_has_max_intensify();
  inline void clear_has_max_intensify();
  inline void set_has_equip_colour();
  inline void clear_has_equip_colour();
  inline void set_has_random_number();
  inline void clear_has_random_number();
  inline void set_has_role();
  inline void clear_has_role();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 equip_part_;
  ::google::protobuf::uint32 equip_star_;
  ::google::protobuf::uint32 lv_limit_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > itemneed_;
  ::google::protobuf::uint32 rand_attr_count_;
  ::google::protobuf::uint32 addpercent_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 is_group_;
  ::google::protobuf::uint32 max_intensify_;
  ::google::protobuf::uint32 equip_colour_;
  ::google::protobuf::uint32 random_number_;
  ::google::protobuf::uint32 role_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sEquipIntensify* default_instance_;
};
// -------------------------------------------------------------------

class sEquipLevelUp : public ::google::protobuf::MessageLite {
 public:
  sEquipLevelUp();
  virtual ~sEquipLevelUp();

  sEquipLevelUp(const sEquipLevelUp& from);

  inline sEquipLevelUp& operator=(const sEquipLevelUp& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEquipLevelUp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEquipLevelUp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEquipLevelUp* other);

  // implements Message ----------------------------------------------

  sEquipLevelUp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEquipLevelUp& from);
  void MergeFrom(const sEquipLevelUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 itemid = 5;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 5;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 itemnum = 6;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemnumFieldNumber = 6;
  inline ::google::protobuf::uint32 itemnum() const;
  inline void set_itemnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEquipLevelUp)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sEquipLevelUp* default_instance_;
};
// -------------------------------------------------------------------

class sEquipStarUp : public ::google::protobuf::MessageLite {
 public:
  sEquipStarUp();
  virtual ~sEquipStarUp();

  sEquipStarUp(const sEquipStarUp& from);

  inline sEquipStarUp& operator=(const sEquipStarUp& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEquipStarUp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEquipStarUp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEquipStarUp* other);

  // implements Message ----------------------------------------------

  sEquipStarUp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEquipStarUp& from);
  void MergeFrom(const sEquipStarUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eQuipPart part = 2;
  inline bool has_part() const;
  inline void clear_part();
  static const int kPartFieldNumber = 2;
  inline ::jynetwork::proto::eQuipPart part() const;
  inline void set_part(::jynetwork::proto::eQuipPart value);

  // optional uint32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 intensifyneed = 4;
  inline bool has_intensifyneed() const;
  inline void clear_intensifyneed();
  static const int kIntensifyneedFieldNumber = 4;
  inline ::google::protobuf::uint32 intensifyneed() const;
  inline void set_intensifyneed(::google::protobuf::uint32 value);

  // optional uint32 lvneed = 5;
  inline bool has_lvneed() const;
  inline void clear_lvneed();
  static const int kLvneedFieldNumber = 5;
  inline ::google::protobuf::uint32 lvneed() const;
  inline void set_lvneed(::google::protobuf::uint32 value);

  // optional uint32 attrnum = 6;
  inline bool has_attrnum() const;
  inline void clear_attrnum();
  static const int kAttrnumFieldNumber = 6;
  inline ::google::protobuf::uint32 attrnum() const;
  inline void set_attrnum(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sEquipAttr equip_attr = 7;
  inline int equip_attr_size() const;
  inline void clear_equip_attr();
  static const int kEquipAttrFieldNumber = 7;
  inline const ::jynetwork::proto::sEquipAttr& equip_attr(int index) const;
  inline ::jynetwork::proto::sEquipAttr* mutable_equip_attr(int index);
  inline ::jynetwork::proto::sEquipAttr* add_equip_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipAttr >&
      equip_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipAttr >*
      mutable_equip_attr();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEquipStarUp)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_part();
  inline void clear_has_part();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_intensifyneed();
  inline void clear_has_intensifyneed();
  inline void set_has_lvneed();
  inline void clear_has_lvneed();
  inline void set_has_attrnum();
  inline void clear_has_attrnum();

  ::google::protobuf::uint32 uid_;
  int part_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 intensifyneed_;
  ::google::protobuf::uint32 lvneed_;
  ::google::protobuf::uint32 attrnum_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipAttr > equip_attr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sEquipStarUp* default_instance_;
};
// -------------------------------------------------------------------

class sCardIntensify : public ::google::protobuf::MessageLite {
 public:
  sCardIntensify();
  virtual ~sCardIntensify();

  sCardIntensify(const sCardIntensify& from);

  inline sCardIntensify& operator=(const sCardIntensify& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCardIntensify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCardIntensify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCardIntensify* other);

  // implements Message ----------------------------------------------

  sCardIntensify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCardIntensify& from);
  void MergeFrom(const sCardIntensify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 cardid = 2;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardidFieldNumber = 2;
  inline ::google::protobuf::uint32 cardid() const;
  inline void set_cardid(::google::protobuf::uint32 value);

  // optional uint32 cardjob = 3;
  inline bool has_cardjob() const;
  inline void clear_cardjob();
  static const int kCardjobFieldNumber = 3;
  inline ::google::protobuf::uint32 cardjob() const;
  inline void set_cardjob(::google::protobuf::uint32 value);

  // optional uint32 intensify = 4;
  inline bool has_intensify() const;
  inline void clear_intensify();
  static const int kIntensifyFieldNumber = 4;
  inline ::google::protobuf::uint32 intensify() const;
  inline void set_intensify(::google::protobuf::uint32 value);

  // optional uint32 str_ = 5;
  inline bool has_str_() const;
  inline void clear_str_();
  static const int kStrFieldNumber = 5;
  inline ::google::protobuf::uint32 str_() const;
  inline void set_str_(::google::protobuf::uint32 value);

  // optional uint32 agi_ = 6;
  inline bool has_agi_() const;
  inline void clear_agi_();
  static const int kAgiFieldNumber = 6;
  inline ::google::protobuf::uint32 agi_() const;
  inline void set_agi_(::google::protobuf::uint32 value);

  // optional uint32 int_ = 7;
  inline bool has_int_() const;
  inline void clear_int_();
  static const int kIntFieldNumber = 7;
  inline ::google::protobuf::uint32 int_() const;
  inline void set_int_(::google::protobuf::uint32 value);

  // optional uint32 vit_ = 8;
  inline bool has_vit_() const;
  inline void clear_vit_();
  static const int kVitFieldNumber = 8;
  inline ::google::protobuf::uint32 vit_() const;
  inline void set_vit_(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem itemneed = 9;
  inline int itemneed_size() const;
  inline void clear_itemneed();
  static const int kItemneedFieldNumber = 9;
  inline const ::jynetwork::proto::sSimpleItem& itemneed(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_itemneed(int index);
  inline ::jynetwork::proto::sSimpleItem* add_itemneed();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      itemneed() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_itemneed();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCardIntensify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_cardjob();
  inline void clear_has_cardjob();
  inline void set_has_intensify();
  inline void clear_has_intensify();
  inline void set_has_str_();
  inline void clear_has_str_();
  inline void set_has_agi_();
  inline void clear_has_agi_();
  inline void set_has_int_();
  inline void clear_has_int_();
  inline void set_has_vit_();
  inline void clear_has_vit_();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 cardid_;
  ::google::protobuf::uint32 cardjob_;
  ::google::protobuf::uint32 intensify_;
  ::google::protobuf::uint32 str__;
  ::google::protobuf::uint32 agi__;
  ::google::protobuf::uint32 int__;
  ::google::protobuf::uint32 vit__;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > itemneed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sCardIntensify* default_instance_;
};
// -------------------------------------------------------------------

class sCardLevelUp : public ::google::protobuf::MessageLite {
 public:
  sCardLevelUp();
  virtual ~sCardLevelUp();

  sCardLevelUp(const sCardLevelUp& from);

  inline sCardLevelUp& operator=(const sCardLevelUp& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCardLevelUp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCardLevelUp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCardLevelUp* other);

  // implements Message ----------------------------------------------

  sCardLevelUp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCardLevelUp& from);
  void MergeFrom(const sCardLevelUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 job = 2;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 2;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 str_ = 5;
  inline bool has_str_() const;
  inline void clear_str_();
  static const int kStrFieldNumber = 5;
  inline ::google::protobuf::uint32 str_() const;
  inline void set_str_(::google::protobuf::uint32 value);

  // optional uint32 agi_ = 6;
  inline bool has_agi_() const;
  inline void clear_agi_();
  static const int kAgiFieldNumber = 6;
  inline ::google::protobuf::uint32 agi_() const;
  inline void set_agi_(::google::protobuf::uint32 value);

  // optional uint32 int_ = 7;
  inline bool has_int_() const;
  inline void clear_int_();
  static const int kIntFieldNumber = 7;
  inline ::google::protobuf::uint32 int_() const;
  inline void set_int_(::google::protobuf::uint32 value);

  // optional uint32 vit_ = 8;
  inline bool has_vit_() const;
  inline void clear_vit_();
  static const int kVitFieldNumber = 8;
  inline ::google::protobuf::uint32 vit_() const;
  inline void set_vit_(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCardLevelUp)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_str_();
  inline void clear_has_str_();
  inline void set_has_agi_();
  inline void clear_has_agi_();
  inline void set_has_int_();
  inline void clear_has_int_();
  inline void set_has_vit_();
  inline void clear_has_vit_();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 str__;
  ::google::protobuf::uint32 agi__;
  ::google::protobuf::uint32 int__;
  ::google::protobuf::uint32 vit__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sCardLevelUp* default_instance_;
};
// -------------------------------------------------------------------

class sCardStarUp : public ::google::protobuf::MessageLite {
 public:
  sCardStarUp();
  virtual ~sCardStarUp();

  sCardStarUp(const sCardStarUp& from);

  inline sCardStarUp& operator=(const sCardStarUp& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCardStarUp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCardStarUp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCardStarUp* other);

  // implements Message ----------------------------------------------

  sCardStarUp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCardStarUp& from);
  void MergeFrom(const sCardStarUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 starneed = 2;
  inline bool has_starneed() const;
  inline void clear_starneed();
  static const int kStarneedFieldNumber = 2;
  inline ::google::protobuf::uint32 starneed() const;
  inline void set_starneed(::google::protobuf::uint32 value);

  // optional uint32 lvneed = 3;
  inline bool has_lvneed() const;
  inline void clear_lvneed();
  static const int kLvneedFieldNumber = 3;
  inline ::google::protobuf::uint32 lvneed() const;
  inline void set_lvneed(::google::protobuf::uint32 value);

  // optional uint32 skillnum = 4;
  inline bool has_skillnum() const;
  inline void clear_skillnum();
  static const int kSkillnumFieldNumber = 4;
  inline ::google::protobuf::uint32 skillnum() const;
  inline void set_skillnum(::google::protobuf::uint32 value);

  // optional uint32 attrpercent = 5;
  inline bool has_attrpercent() const;
  inline void clear_attrpercent();
  static const int kAttrpercentFieldNumber = 5;
  inline ::google::protobuf::uint32 attrpercent() const;
  inline void set_attrpercent(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCardStarUp)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_starneed();
  inline void clear_has_starneed();
  inline void set_has_lvneed();
  inline void clear_has_lvneed();
  inline void set_has_skillnum();
  inline void clear_has_skillnum();
  inline void set_has_attrpercent();
  inline void clear_has_attrpercent();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 starneed_;
  ::google::protobuf::uint32 lvneed_;
  ::google::protobuf::uint32 skillnum_;
  ::google::protobuf::uint32 attrpercent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sCardStarUp* default_instance_;
};
// -------------------------------------------------------------------

class sShopItem : public ::google::protobuf::MessageLite {
 public:
  sShopItem();
  virtual ~sShopItem();

  sShopItem(const sShopItem& from);

  inline sShopItem& operator=(const sShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const sShopItem& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sShopItem* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sShopItem* other);

  // implements Message ----------------------------------------------

  sShopItem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sShopItem& from);
  void MergeFrom(const sShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 shopid = 2;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopidFieldNumber = 2;
  inline ::google::protobuf::uint32 shopid() const;
  inline void set_shopid(::google::protobuf::uint32 value);

  // repeated uint32 itemid = 3;
  inline int itemid_size() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid(int index) const;
  inline void set_itemid(int index, ::google::protobuf::uint32 value);
  inline void add_itemid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      itemid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_itemid();

  // optional uint32 iconname = 4;
  inline bool has_iconname() const;
  inline void clear_iconname();
  static const int kIconnameFieldNumber = 4;
  inline ::google::protobuf::uint32 iconname() const;
  inline void set_iconname(::google::protobuf::uint32 value);

  // optional bytes resource = 5;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 5;
  inline const ::std::string& resource() const;
  inline void set_resource(const ::std::string& value);
  inline void set_resource(const char* value);
  inline void set_resource(const void* value, size_t size);
  inline ::std::string* mutable_resource();
  inline ::std::string* release_resource();
  inline void set_allocated_resource(::std::string* resource);

  // optional uint32 tc_lv = 6;
  inline bool has_tc_lv() const;
  inline void clear_tc_lv();
  static const int kTcLvFieldNumber = 6;
  inline ::google::protobuf::uint32 tc_lv() const;
  inline void set_tc_lv(::google::protobuf::uint32 value);

  // repeated uint32 itemnum = 7;
  inline int itemnum_size() const;
  inline void clear_itemnum();
  static const int kItemnumFieldNumber = 7;
  inline ::google::protobuf::uint32 itemnum(int index) const;
  inline void set_itemnum(int index, ::google::protobuf::uint32 value);
  inline void add_itemnum(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      itemnum() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_itemnum();

  // optional uint32 shoplabel = 8;
  inline bool has_shoplabel() const;
  inline void clear_shoplabel();
  static const int kShoplabelFieldNumber = 8;
  inline ::google::protobuf::uint32 shoplabel() const;
  inline void set_shoplabel(::google::protobuf::uint32 value);

  // optional uint32 shoporder = 9;
  inline bool has_shoporder() const;
  inline void clear_shoporder();
  static const int kShoporderFieldNumber = 9;
  inline ::google::protobuf::uint32 shoporder() const;
  inline void set_shoporder(::google::protobuf::uint32 value);

  // optional uint32 pecentage = 10;
  inline bool has_pecentage() const;
  inline void clear_pecentage();
  static const int kPecentageFieldNumber = 10;
  inline ::google::protobuf::uint32 pecentage() const;
  inline void set_pecentage(::google::protobuf::uint32 value);

  // repeated uint32 moneytype = 11;
  inline int moneytype_size() const;
  inline void clear_moneytype();
  static const int kMoneytypeFieldNumber = 11;
  inline ::google::protobuf::uint32 moneytype(int index) const;
  inline void set_moneytype(int index, ::google::protobuf::uint32 value);
  inline void add_moneytype(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      moneytype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_moneytype();

  // repeated float money = 12;
  inline int money_size() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 12;
  inline float money(int index) const;
  inline void set_money(int index, float value);
  inline void add_money(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      money() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_money();

  // optional uint32 onsale = 13;
  inline bool has_onsale() const;
  inline void clear_onsale();
  static const int kOnsaleFieldNumber = 13;
  inline ::google::protobuf::uint32 onsale() const;
  inline void set_onsale(::google::protobuf::uint32 value);

  // optional uint32 buylimittype = 14;
  inline bool has_buylimittype() const;
  inline void clear_buylimittype();
  static const int kBuylimittypeFieldNumber = 14;
  inline ::google::protobuf::uint32 buylimittype() const;
  inline void set_buylimittype(::google::protobuf::uint32 value);

  // optional uint32 buylimitvalue = 15;
  inline bool has_buylimitvalue() const;
  inline void clear_buylimitvalue();
  static const int kBuylimitvalueFieldNumber = 15;
  inline ::google::protobuf::uint32 buylimitvalue() const;
  inline void set_buylimitvalue(::google::protobuf::uint32 value);

  // optional uint32 buylimittime = 16;
  inline bool has_buylimittime() const;
  inline void clear_buylimittime();
  static const int kBuylimittimeFieldNumber = 16;
  inline ::google::protobuf::uint32 buylimittime() const;
  inline void set_buylimittime(::google::protobuf::uint32 value);

  // optional uint32 bulimitnum = 17;
  inline bool has_bulimitnum() const;
  inline void clear_bulimitnum();
  static const int kBulimitnumFieldNumber = 17;
  inline ::google::protobuf::uint32 bulimitnum() const;
  inline void set_bulimitnum(::google::protobuf::uint32 value);

  // optional uint32 bonus1 = 18;
  inline bool has_bonus1() const;
  inline void clear_bonus1();
  static const int kBonus1FieldNumber = 18;
  inline ::google::protobuf::uint32 bonus1() const;
  inline void set_bonus1(::google::protobuf::uint32 value);

  // optional uint32 bonus2 = 19;
  inline bool has_bonus2() const;
  inline void clear_bonus2();
  static const int kBonus2FieldNumber = 19;
  inline ::google::protobuf::uint32 bonus2() const;
  inline void set_bonus2(::google::protobuf::uint32 value);

  // optional uint32 bonusname1 = 20;
  inline bool has_bonusname1() const;
  inline void clear_bonusname1();
  static const int kBonusname1FieldNumber = 20;
  inline ::google::protobuf::uint32 bonusname1() const;
  inline void set_bonusname1(::google::protobuf::uint32 value);

  // optional uint32 bonusname2 = 21;
  inline bool has_bonusname2() const;
  inline void clear_bonusname2();
  static const int kBonusname2FieldNumber = 21;
  inline ::google::protobuf::uint32 bonusname2() const;
  inline void set_bonusname2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sShopItem)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_iconname();
  inline void clear_has_iconname();
  inline void set_has_resource();
  inline void clear_has_resource();
  inline void set_has_tc_lv();
  inline void clear_has_tc_lv();
  inline void set_has_shoplabel();
  inline void clear_has_shoplabel();
  inline void set_has_shoporder();
  inline void clear_has_shoporder();
  inline void set_has_pecentage();
  inline void clear_has_pecentage();
  inline void set_has_onsale();
  inline void clear_has_onsale();
  inline void set_has_buylimittype();
  inline void clear_has_buylimittype();
  inline void set_has_buylimitvalue();
  inline void clear_has_buylimitvalue();
  inline void set_has_buylimittime();
  inline void clear_has_buylimittime();
  inline void set_has_bulimitnum();
  inline void clear_has_bulimitnum();
  inline void set_has_bonus1();
  inline void clear_has_bonus1();
  inline void set_has_bonus2();
  inline void clear_has_bonus2();
  inline void set_has_bonusname1();
  inline void clear_has_bonusname1();
  inline void set_has_bonusname2();
  inline void clear_has_bonusname2();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 shopid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > itemid_;
  ::google::protobuf::uint32 iconname_;
  ::google::protobuf::uint32 tc_lv_;
  ::std::string* resource_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > itemnum_;
  ::google::protobuf::uint32 shoplabel_;
  ::google::protobuf::uint32 shoporder_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > moneytype_;
  ::google::protobuf::uint32 pecentage_;
  ::google::protobuf::uint32 onsale_;
  ::google::protobuf::RepeatedField< float > money_;
  ::google::protobuf::uint32 buylimittype_;
  ::google::protobuf::uint32 buylimitvalue_;
  ::google::protobuf::uint32 buylimittime_;
  ::google::protobuf::uint32 bulimitnum_;
  ::google::protobuf::uint32 bonus1_;
  ::google::protobuf::uint32 bonus2_;
  ::google::protobuf::uint32 bonusname1_;
  ::google::protobuf::uint32 bonusname2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sShopItem* default_instance_;
};
// -------------------------------------------------------------------

class sTaskStats : public ::google::protobuf::MessageLite {
 public:
  sTaskStats();
  virtual ~sTaskStats();

  sTaskStats(const sTaskStats& from);

  inline sTaskStats& operator=(const sTaskStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sTaskStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sTaskStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sTaskStats* other);

  // implements Message ----------------------------------------------

  sTaskStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sTaskStats& from);
  void MergeFrom(const sTaskStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eTaskType task_type = 2;
  inline bool has_task_type() const;
  inline void clear_task_type();
  static const int kTaskTypeFieldNumber = 2;
  inline ::jynetwork::proto::eTaskType task_type() const;
  inline void set_task_type(::jynetwork::proto::eTaskType value);

  // optional uint32 task_var = 3;
  inline bool has_task_var() const;
  inline void clear_task_var();
  static const int kTaskVarFieldNumber = 3;
  inline ::google::protobuf::uint32 task_var() const;
  inline void set_task_var(::google::protobuf::uint32 value);

  // optional bytes task_name = 4;
  inline bool has_task_name() const;
  inline void clear_task_name();
  static const int kTaskNameFieldNumber = 4;
  inline const ::std::string& task_name() const;
  inline void set_task_name(const ::std::string& value);
  inline void set_task_name(const char* value);
  inline void set_task_name(const void* value, size_t size);
  inline ::std::string* mutable_task_name();
  inline ::std::string* release_task_name();
  inline void set_allocated_task_name(::std::string* task_name);

  // optional uint32 task_name_id = 5;
  inline bool has_task_name_id() const;
  inline void clear_task_name_id();
  static const int kTaskNameIdFieldNumber = 5;
  inline ::google::protobuf::uint32 task_name_id() const;
  inline void set_task_name_id(::google::protobuf::uint32 value);

  // optional uint32 lv_min = 6;
  inline bool has_lv_min() const;
  inline void clear_lv_min();
  static const int kLvMinFieldNumber = 6;
  inline ::google::protobuf::uint32 lv_min() const;
  inline void set_lv_min(::google::protobuf::uint32 value);

  // optional uint32 lv_max = 7;
  inline bool has_lv_max() const;
  inline void clear_lv_max();
  static const int kLvMaxFieldNumber = 7;
  inline ::google::protobuf::uint32 lv_max() const;
  inline void set_lv_max(::google::protobuf::uint32 value);

  // optional uint32 begin_time = 8;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 begin_time() const;
  inline void set_begin_time(::google::protobuf::uint32 value);

  // optional uint32 end_time = 9;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // optional uint32 job = 10;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 10;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 flotask = 11;
  inline bool has_flotask() const;
  inline void clear_flotask();
  static const int kFlotaskFieldNumber = 11;
  inline ::google::protobuf::uint32 flotask() const;
  inline void set_flotask(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eTaskFinishType task_finish_type = 12;
  inline bool has_task_finish_type() const;
  inline void clear_task_finish_type();
  static const int kTaskFinishTypeFieldNumber = 12;
  inline ::jynetwork::proto::eTaskFinishType task_finish_type() const;
  inline void set_task_finish_type(::jynetwork::proto::eTaskFinishType value);

  // optional uint32 task_finish_var1 = 13;
  inline bool has_task_finish_var1() const;
  inline void clear_task_finish_var1();
  static const int kTaskFinishVar1FieldNumber = 13;
  inline ::google::protobuf::uint32 task_finish_var1() const;
  inline void set_task_finish_var1(::google::protobuf::uint32 value);

  // optional uint32 task_finish_var2 = 14;
  inline bool has_task_finish_var2() const;
  inline void clear_task_finish_var2();
  static const int kTaskFinishVar2FieldNumber = 14;
  inline ::google::protobuf::uint32 task_finish_var2() const;
  inline void set_task_finish_var2(::google::protobuf::uint32 value);

  // optional uint32 trace_type = 15;
  inline bool has_trace_type() const;
  inline void clear_trace_type();
  static const int kTraceTypeFieldNumber = 15;
  inline ::google::protobuf::uint32 trace_type() const;
  inline void set_trace_type(::google::protobuf::uint32 value);

  // optional uint32 trace_id = 16;
  inline bool has_trace_id() const;
  inline void clear_trace_id();
  static const int kTraceIdFieldNumber = 16;
  inline ::google::protobuf::uint32 trace_id() const;
  inline void set_trace_id(::google::protobuf::uint32 value);

  // optional bytes task_desc = 17;
  inline bool has_task_desc() const;
  inline void clear_task_desc();
  static const int kTaskDescFieldNumber = 17;
  inline const ::std::string& task_desc() const;
  inline void set_task_desc(const ::std::string& value);
  inline void set_task_desc(const char* value);
  inline void set_task_desc(const void* value, size_t size);
  inline ::std::string* mutable_task_desc();
  inline ::std::string* release_task_desc();
  inline void set_allocated_task_desc(::std::string* task_desc);

  // optional uint32 task_desc_id = 18;
  inline bool has_task_desc_id() const;
  inline void clear_task_desc_id();
  static const int kTaskDescIdFieldNumber = 18;
  inline ::google::protobuf::uint32 task_desc_id() const;
  inline void set_task_desc_id(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem item_reward = 19;
  inline int item_reward_size() const;
  inline void clear_item_reward();
  static const int kItemRewardFieldNumber = 19;
  inline const ::jynetwork::proto::sSimpleItem& item_reward(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_item_reward(int index);
  inline ::jynetwork::proto::sSimpleItem* add_item_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      item_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_item_reward();

  // optional uint32 task_finish_var3 = 20;
  inline bool has_task_finish_var3() const;
  inline void clear_task_finish_var3();
  static const int kTaskFinishVar3FieldNumber = 20;
  inline ::google::protobuf::uint32 task_finish_var3() const;
  inline void set_task_finish_var3(::google::protobuf::uint32 value);

  // optional bytes iconName = 21;
  inline bool has_iconname() const;
  inline void clear_iconname();
  static const int kIconNameFieldNumber = 21;
  inline const ::std::string& iconname() const;
  inline void set_iconname(const ::std::string& value);
  inline void set_iconname(const char* value);
  inline void set_iconname(const void* value, size_t size);
  inline ::std::string* mutable_iconname();
  inline ::std::string* release_iconname();
  inline void set_allocated_iconname(::std::string* iconname);

  // optional uint32 tc_lv = 22;
  inline bool has_tc_lv() const;
  inline void clear_tc_lv();
  static const int kTcLvFieldNumber = 22;
  inline ::google::protobuf::uint32 tc_lv() const;
  inline void set_tc_lv(::google::protobuf::uint32 value);

  // optional uint32 is_guide = 23;
  inline bool has_is_guide() const;
  inline void clear_is_guide();
  static const int kIsGuideFieldNumber = 23;
  inline ::google::protobuf::uint32 is_guide() const;
  inline void set_is_guide(::google::protobuf::uint32 value);

  // optional uint32 guide_id = 24;
  inline bool has_guide_id() const;
  inline void clear_guide_id();
  static const int kGuideIdFieldNumber = 24;
  inline ::google::protobuf::uint32 guide_id() const;
  inline void set_guide_id(::google::protobuf::uint32 value);

  // optional uint32 guide_value = 25;
  inline bool has_guide_value() const;
  inline void clear_guide_value();
  static const int kGuideValueFieldNumber = 25;
  inline ::google::protobuf::uint32 guide_value() const;
  inline void set_guide_value(::google::protobuf::uint32 value);

  // optional uint32 flotask2 = 26;
  inline bool has_flotask2() const;
  inline void clear_flotask2();
  static const int kFlotask2FieldNumber = 26;
  inline ::google::protobuf::uint32 flotask2() const;
  inline void set_flotask2(::google::protobuf::uint32 value);

  // optional uint32 begin_date = 27;
  inline bool has_begin_date() const;
  inline void clear_begin_date();
  static const int kBeginDateFieldNumber = 27;
  inline ::google::protobuf::uint32 begin_date() const;
  inline void set_begin_date(::google::protobuf::uint32 value);

  // optional uint32 end_date = 28;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 28;
  inline ::google::protobuf::uint32 end_date() const;
  inline void set_end_date(::google::protobuf::uint32 value);

  // optional uint32 flotask3 = 29;
  inline bool has_flotask3() const;
  inline void clear_flotask3();
  static const int kFlotask3FieldNumber = 29;
  inline ::google::protobuf::uint32 flotask3() const;
  inline void set_flotask3(::google::protobuf::uint32 value);

  // optional uint32 pretask = 30;
  inline bool has_pretask() const;
  inline void clear_pretask();
  static const int kPretaskFieldNumber = 30;
  inline ::google::protobuf::uint32 pretask() const;
  inline void set_pretask(::google::protobuf::uint32 value);

  // optional uint32 start_var = 31;
  inline bool has_start_var() const;
  inline void clear_start_var();
  static const int kStartVarFieldNumber = 31;
  inline ::google::protobuf::uint32 start_var() const;
  inline void set_start_var(::google::protobuf::uint32 value);

  // optional uint32 task_order = 32;
  inline bool has_task_order() const;
  inline void clear_task_order();
  static const int kTaskOrderFieldNumber = 32;
  inline ::google::protobuf::uint32 task_order() const;
  inline void set_task_order(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sTaskStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_task_type();
  inline void clear_has_task_type();
  inline void set_has_task_var();
  inline void clear_has_task_var();
  inline void set_has_task_name();
  inline void clear_has_task_name();
  inline void set_has_task_name_id();
  inline void clear_has_task_name_id();
  inline void set_has_lv_min();
  inline void clear_has_lv_min();
  inline void set_has_lv_max();
  inline void clear_has_lv_max();
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_flotask();
  inline void clear_has_flotask();
  inline void set_has_task_finish_type();
  inline void clear_has_task_finish_type();
  inline void set_has_task_finish_var1();
  inline void clear_has_task_finish_var1();
  inline void set_has_task_finish_var2();
  inline void clear_has_task_finish_var2();
  inline void set_has_trace_type();
  inline void clear_has_trace_type();
  inline void set_has_trace_id();
  inline void clear_has_trace_id();
  inline void set_has_task_desc();
  inline void clear_has_task_desc();
  inline void set_has_task_desc_id();
  inline void clear_has_task_desc_id();
  inline void set_has_task_finish_var3();
  inline void clear_has_task_finish_var3();
  inline void set_has_iconname();
  inline void clear_has_iconname();
  inline void set_has_tc_lv();
  inline void clear_has_tc_lv();
  inline void set_has_is_guide();
  inline void clear_has_is_guide();
  inline void set_has_guide_id();
  inline void clear_has_guide_id();
  inline void set_has_guide_value();
  inline void clear_has_guide_value();
  inline void set_has_flotask2();
  inline void clear_has_flotask2();
  inline void set_has_begin_date();
  inline void clear_has_begin_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_flotask3();
  inline void clear_has_flotask3();
  inline void set_has_pretask();
  inline void clear_has_pretask();
  inline void set_has_start_var();
  inline void clear_has_start_var();
  inline void set_has_task_order();
  inline void clear_has_task_order();

  ::google::protobuf::uint32 uid_;
  int task_type_;
  ::std::string* task_name_;
  ::google::protobuf::uint32 task_var_;
  ::google::protobuf::uint32 task_name_id_;
  ::google::protobuf::uint32 lv_min_;
  ::google::protobuf::uint32 lv_max_;
  ::google::protobuf::uint32 begin_time_;
  ::google::protobuf::uint32 end_time_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 flotask_;
  int task_finish_type_;
  ::google::protobuf::uint32 task_finish_var1_;
  ::google::protobuf::uint32 task_finish_var2_;
  ::google::protobuf::uint32 trace_type_;
  ::std::string* task_desc_;
  ::google::protobuf::uint32 trace_id_;
  ::google::protobuf::uint32 task_desc_id_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > item_reward_;
  ::std::string* iconname_;
  ::google::protobuf::uint32 task_finish_var3_;
  ::google::protobuf::uint32 tc_lv_;
  ::google::protobuf::uint32 is_guide_;
  ::google::protobuf::uint32 guide_id_;
  ::google::protobuf::uint32 guide_value_;
  ::google::protobuf::uint32 flotask2_;
  ::google::protobuf::uint32 begin_date_;
  ::google::protobuf::uint32 end_date_;
  ::google::protobuf::uint32 flotask3_;
  ::google::protobuf::uint32 pretask_;
  ::google::protobuf::uint32 start_var_;
  ::google::protobuf::uint32 task_order_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sTaskStats* default_instance_;
};
// -------------------------------------------------------------------

class sBuyStaminaStats : public ::google::protobuf::MessageLite {
 public:
  sBuyStaminaStats();
  virtual ~sBuyStaminaStats();

  sBuyStaminaStats(const sBuyStaminaStats& from);

  inline sBuyStaminaStats& operator=(const sBuyStaminaStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sBuyStaminaStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sBuyStaminaStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sBuyStaminaStats* other);

  // implements Message ----------------------------------------------

  sBuyStaminaStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sBuyStaminaStats& from);
  void MergeFrom(const sBuyStaminaStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 cost_diamond = 2;
  inline bool has_cost_diamond() const;
  inline void clear_cost_diamond();
  static const int kCostDiamondFieldNumber = 2;
  inline ::google::protobuf::uint32 cost_diamond() const;
  inline void set_cost_diamond(::google::protobuf::uint32 value);

  // optional uint32 add_stamina = 3;
  inline bool has_add_stamina() const;
  inline void clear_add_stamina();
  static const int kAddStaminaFieldNumber = 3;
  inline ::google::protobuf::uint32 add_stamina() const;
  inline void set_add_stamina(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sBuyStaminaStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_cost_diamond();
  inline void clear_has_cost_diamond();
  inline void set_has_add_stamina();
  inline void clear_has_add_stamina();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 cost_diamond_;
  ::google::protobuf::uint32 add_stamina_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sBuyStaminaStats* default_instance_;
};
// -------------------------------------------------------------------

class sBuyGoldStats : public ::google::protobuf::MessageLite {
 public:
  sBuyGoldStats();
  virtual ~sBuyGoldStats();

  sBuyGoldStats(const sBuyGoldStats& from);

  inline sBuyGoldStats& operator=(const sBuyGoldStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sBuyGoldStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sBuyGoldStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sBuyGoldStats* other);

  // implements Message ----------------------------------------------

  sBuyGoldStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sBuyGoldStats& from);
  void MergeFrom(const sBuyGoldStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 cost_diamond = 2;
  inline bool has_cost_diamond() const;
  inline void clear_cost_diamond();
  static const int kCostDiamondFieldNumber = 2;
  inline ::google::protobuf::uint32 cost_diamond() const;
  inline void set_cost_diamond(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem item_reward = 3;
  inline int item_reward_size() const;
  inline void clear_item_reward();
  static const int kItemRewardFieldNumber = 3;
  inline const ::jynetwork::proto::sSimpleItem& item_reward(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_item_reward(int index);
  inline ::jynetwork::proto::sSimpleItem* add_item_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      item_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_item_reward();

  // optional uint32 add_gold = 4;
  inline bool has_add_gold() const;
  inline void clear_add_gold();
  static const int kAddGoldFieldNumber = 4;
  inline ::google::protobuf::uint32 add_gold() const;
  inline void set_add_gold(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sBuyGoldStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_cost_diamond();
  inline void clear_has_cost_diamond();
  inline void set_has_add_gold();
  inline void clear_has_add_gold();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 cost_diamond_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > item_reward_;
  ::google::protobuf::uint32 add_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sBuyGoldStats* default_instance_;
};
// -------------------------------------------------------------------

class sEquipAttrStats : public ::google::protobuf::MessageLite {
 public:
  sEquipAttrStats();
  virtual ~sEquipAttrStats();

  sEquipAttrStats(const sEquipAttrStats& from);

  inline sEquipAttrStats& operator=(const sEquipAttrStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEquipAttrStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEquipAttrStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEquipAttrStats* other);

  // implements Message ----------------------------------------------

  sEquipAttrStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEquipAttrStats& from);
  void MergeFrom(const sEquipAttrStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eQuipPart equip_part = 2;
  inline bool has_equip_part() const;
  inline void clear_equip_part();
  static const int kEquipPartFieldNumber = 2;
  inline ::jynetwork::proto::eQuipPart equip_part() const;
  inline void set_equip_part(::jynetwork::proto::eQuipPart value);

  // optional uint32 equip_star = 3;
  inline bool has_equip_star() const;
  inline void clear_equip_star();
  static const int kEquipStarFieldNumber = 3;
  inline ::google::protobuf::uint32 equip_star() const;
  inline void set_equip_star(::google::protobuf::uint32 value);

  // optional uint32 attr_type = 4;
  inline bool has_attr_type() const;
  inline void clear_attr_type();
  static const int kAttrTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 attr_type() const;
  inline void set_attr_type(::google::protobuf::uint32 value);

  // optional uint32 attr_rand = 5;
  inline bool has_attr_rand() const;
  inline void clear_attr_rand();
  static const int kAttrRandFieldNumber = 5;
  inline ::google::protobuf::uint32 attr_rand() const;
  inline void set_attr_rand(::google::protobuf::uint32 value);

  // optional uint32 skill_id = 6;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 6;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // optional uint32 fight_power = 7;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 7;
  inline ::google::protobuf::uint32 fight_power() const;
  inline void set_fight_power(::google::protobuf::uint32 value);

  // optional uint32 max_attr_type = 8;
  inline bool has_max_attr_type() const;
  inline void clear_max_attr_type();
  static const int kMaxAttrTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 max_attr_type() const;
  inline void set_max_attr_type(::google::protobuf::uint32 value);

  // optional uint32 rear = 9;
  inline bool has_rear() const;
  inline void clear_rear();
  static const int kRearFieldNumber = 9;
  inline ::google::protobuf::uint32 rear() const;
  inline void set_rear(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEquipAttrStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_equip_part();
  inline void clear_has_equip_part();
  inline void set_has_equip_star();
  inline void clear_has_equip_star();
  inline void set_has_attr_type();
  inline void clear_has_attr_type();
  inline void set_has_attr_rand();
  inline void clear_has_attr_rand();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();
  inline void set_has_max_attr_type();
  inline void clear_has_max_attr_type();
  inline void set_has_rear();
  inline void clear_has_rear();

  ::google::protobuf::uint32 uid_;
  int equip_part_;
  ::google::protobuf::uint32 equip_star_;
  ::google::protobuf::uint32 attr_type_;
  ::google::protobuf::uint32 attr_rand_;
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 fight_power_;
  ::google::protobuf::uint32 max_attr_type_;
  ::google::protobuf::uint32 rear_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sEquipAttrStats* default_instance_;
};
// -------------------------------------------------------------------

class sEquipAttrPropStats : public ::google::protobuf::MessageLite {
 public:
  sEquipAttrPropStats();
  virtual ~sEquipAttrPropStats();

  sEquipAttrPropStats(const sEquipAttrPropStats& from);

  inline sEquipAttrPropStats& operator=(const sEquipAttrPropStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEquipAttrPropStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEquipAttrPropStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEquipAttrPropStats* other);

  // implements Message ----------------------------------------------

  sEquipAttrPropStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEquipAttrPropStats& from);
  void MergeFrom(const sEquipAttrPropStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 equip_star = 2;
  inline bool has_equip_star() const;
  inline void clear_equip_star();
  static const int kEquipStarFieldNumber = 2;
  inline ::google::protobuf::uint32 equip_star() const;
  inline void set_equip_star(::google::protobuf::uint32 value);

  // optional uint32 prop = 3;
  inline bool has_prop() const;
  inline void clear_prop();
  static const int kPropFieldNumber = 3;
  inline ::google::protobuf::uint32 prop() const;
  inline void set_prop(::google::protobuf::uint32 value);

  // repeated uint32 rear = 4;
  inline int rear_size() const;
  inline void clear_rear();
  static const int kRearFieldNumber = 4;
  inline ::google::protobuf::uint32 rear(int index) const;
  inline void set_rear(int index, ::google::protobuf::uint32 value);
  inline void add_rear(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rear() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rear();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEquipAttrPropStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_equip_star();
  inline void clear_has_equip_star();
  inline void set_has_prop();
  inline void clear_has_prop();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 equip_star_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rear_;
  ::google::protobuf::uint32 prop_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sEquipAttrPropStats* default_instance_;
};
// -------------------------------------------------------------------

class sPrefixAttr : public ::google::protobuf::MessageLite {
 public:
  sPrefixAttr();
  virtual ~sPrefixAttr();

  sPrefixAttr(const sPrefixAttr& from);

  inline sPrefixAttr& operator=(const sPrefixAttr& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPrefixAttr& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPrefixAttr* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPrefixAttr* other);

  // implements Message ----------------------------------------------

  sPrefixAttr* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPrefixAttr& from);
  void MergeFrom(const sPrefixAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 attr_type = 1;
  inline bool has_attr_type() const;
  inline void clear_attr_type();
  static const int kAttrTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 attr_type() const;
  inline void set_attr_type(::google::protobuf::uint32 value);

  // optional uint32 attr_max = 2;
  inline bool has_attr_max() const;
  inline void clear_attr_max();
  static const int kAttrMaxFieldNumber = 2;
  inline ::google::protobuf::uint32 attr_max() const;
  inline void set_attr_max(::google::protobuf::uint32 value);

  // optional uint32 attr_min = 3;
  inline bool has_attr_min() const;
  inline void clear_attr_min();
  static const int kAttrMinFieldNumber = 3;
  inline ::google::protobuf::uint32 attr_min() const;
  inline void set_attr_min(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPrefixAttr)
 private:
  inline void set_has_attr_type();
  inline void clear_has_attr_type();
  inline void set_has_attr_max();
  inline void clear_has_attr_max();
  inline void set_has_attr_min();
  inline void clear_has_attr_min();

  ::google::protobuf::uint32 attr_type_;
  ::google::protobuf::uint32 attr_max_;
  ::google::protobuf::uint32 attr_min_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sPrefixAttr* default_instance_;
};
// -------------------------------------------------------------------

class sPrefixStats : public ::google::protobuf::MessageLite {
 public:
  sPrefixStats();
  virtual ~sPrefixStats();

  sPrefixStats(const sPrefixStats& from);

  inline sPrefixStats& operator=(const sPrefixStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPrefixStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPrefixStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPrefixStats* other);

  // implements Message ----------------------------------------------

  sPrefixStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPrefixStats& from);
  void MergeFrom(const sPrefixStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional bytes remark = 2;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 2;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const void* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 lang_id = 4;
  inline bool has_lang_id() const;
  inline void clear_lang_id();
  static const int kLangIdFieldNumber = 4;
  inline ::google::protobuf::uint32 lang_id() const;
  inline void set_lang_id(::google::protobuf::uint32 value);

  // optional uint32 teasture_class = 5;
  inline bool has_teasture_class() const;
  inline void clear_teasture_class();
  static const int kTeastureClassFieldNumber = 5;
  inline ::google::protobuf::uint32 teasture_class() const;
  inline void set_teasture_class(::google::protobuf::uint32 value);

  // optional uint32 prefix_star = 6;
  inline bool has_prefix_star() const;
  inline void clear_prefix_star();
  static const int kPrefixStarFieldNumber = 6;
  inline ::google::protobuf::uint32 prefix_star() const;
  inline void set_prefix_star(::google::protobuf::uint32 value);

  // optional uint32 prob = 7;
  inline bool has_prob() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 7;
  inline ::google::protobuf::uint32 prob() const;
  inline void set_prob(::google::protobuf::uint32 value);

  // optional uint32 prob_star = 8;
  inline bool has_prob_star() const;
  inline void clear_prob_star();
  static const int kProbStarFieldNumber = 8;
  inline ::google::protobuf::uint32 prob_star() const;
  inline void set_prob_star(::google::protobuf::uint32 value);

  // optional uint32 color = 9;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 9;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eQuipPart equip_part = 10;
  inline bool has_equip_part() const;
  inline void clear_equip_part();
  static const int kEquipPartFieldNumber = 10;
  inline ::jynetwork::proto::eQuipPart equip_part() const;
  inline void set_equip_part(::jynetwork::proto::eQuipPart value);

  // optional uint32 unque_item_id = 11;
  inline bool has_unque_item_id() const;
  inline void clear_unque_item_id();
  static const int kUnqueItemIdFieldNumber = 11;
  inline ::google::protobuf::uint32 unque_item_id() const;
  inline void set_unque_item_id(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sPrefixAttr pref_attr = 12;
  inline int pref_attr_size() const;
  inline void clear_pref_attr();
  static const int kPrefAttrFieldNumber = 12;
  inline const ::jynetwork::proto::sPrefixAttr& pref_attr(int index) const;
  inline ::jynetwork::proto::sPrefixAttr* mutable_pref_attr(int index);
  inline ::jynetwork::proto::sPrefixAttr* add_pref_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPrefixAttr >&
      pref_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPrefixAttr >*
      mutable_pref_attr();

  // optional uint32 effect = 13;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 13;
  inline ::google::protobuf::uint32 effect() const;
  inline void set_effect(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPrefixStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_remark();
  inline void clear_has_remark();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lang_id();
  inline void clear_has_lang_id();
  inline void set_has_teasture_class();
  inline void clear_has_teasture_class();
  inline void set_has_prefix_star();
  inline void clear_has_prefix_star();
  inline void set_has_prob();
  inline void clear_has_prob();
  inline void set_has_prob_star();
  inline void clear_has_prob_star();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_equip_part();
  inline void clear_has_equip_part();
  inline void set_has_unque_item_id();
  inline void clear_has_unque_item_id();
  inline void set_has_effect();
  inline void clear_has_effect();

  ::std::string* remark_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 lang_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 teasture_class_;
  ::google::protobuf::uint32 prefix_star_;
  ::google::protobuf::uint32 prob_;
  ::google::protobuf::uint32 prob_star_;
  ::google::protobuf::uint32 color_;
  int equip_part_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPrefixAttr > pref_attr_;
  ::google::protobuf::uint32 unque_item_id_;
  ::google::protobuf::uint32 effect_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sPrefixStats* default_instance_;
};
// -------------------------------------------------------------------

class sWeekStats : public ::google::protobuf::MessageLite {
 public:
  sWeekStats();
  virtual ~sWeekStats();

  sWeekStats(const sWeekStats& from);

  inline sWeekStats& operator=(const sWeekStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sWeekStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sWeekStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sWeekStats* other);

  // implements Message ----------------------------------------------

  sWeekStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sWeekStats& from);
  void MergeFrom(const sWeekStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 item_num = 3;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 3;
  inline ::google::protobuf::uint32 item_num() const;
  inline void set_item_num(::google::protobuf::uint32 value);

  // optional uint32 vip_lv = 4;
  inline bool has_vip_lv() const;
  inline void clear_vip_lv();
  static const int kVipLvFieldNumber = 4;
  inline ::google::protobuf::uint32 vip_lv() const;
  inline void set_vip_lv(::google::protobuf::uint32 value);

  // optional uint32 vip_bonus = 5;
  inline bool has_vip_bonus() const;
  inline void clear_vip_bonus();
  static const int kVipBonusFieldNumber = 5;
  inline ::google::protobuf::uint32 vip_bonus() const;
  inline void set_vip_bonus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sWeekStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  inline void set_has_vip_lv();
  inline void clear_has_vip_lv();
  inline void set_has_vip_bonus();
  inline void clear_has_vip_bonus();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_num_;
  ::google::protobuf::uint32 vip_lv_;
  ::google::protobuf::uint32 vip_bonus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sWeekStats* default_instance_;
};
// -------------------------------------------------------------------

class sDecomStats : public ::google::protobuf::MessageLite {
 public:
  sDecomStats();
  virtual ~sDecomStats();

  sDecomStats(const sDecomStats& from);

  inline sDecomStats& operator=(const sDecomStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sDecomStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sDecomStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sDecomStats* other);

  // implements Message ----------------------------------------------

  sDecomStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sDecomStats& from);
  void MergeFrom(const sDecomStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.sSimpleItem base_reward = 3;
  inline bool has_base_reward() const;
  inline void clear_base_reward();
  static const int kBaseRewardFieldNumber = 3;
  inline const ::jynetwork::proto::sSimpleItem& base_reward() const;
  inline ::jynetwork::proto::sSimpleItem* mutable_base_reward();
  inline ::jynetwork::proto::sSimpleItem* release_base_reward();
  inline void set_allocated_base_reward(::jynetwork::proto::sSimpleItem* base_reward);

  // optional .jynetwork.proto.sSimpleItem lv_reward = 4;
  inline bool has_lv_reward() const;
  inline void clear_lv_reward();
  static const int kLvRewardFieldNumber = 4;
  inline const ::jynetwork::proto::sSimpleItem& lv_reward() const;
  inline ::jynetwork::proto::sSimpleItem* mutable_lv_reward();
  inline ::jynetwork::proto::sSimpleItem* release_lv_reward();
  inline void set_allocated_lv_reward(::jynetwork::proto::sSimpleItem* lv_reward);

  // optional uint32 lv_gold = 5;
  inline bool has_lv_gold() const;
  inline void clear_lv_gold();
  static const int kLvGoldFieldNumber = 5;
  inline ::google::protobuf::uint32 lv_gold() const;
  inline void set_lv_gold(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem intensify_reward = 6;
  inline int intensify_reward_size() const;
  inline void clear_intensify_reward();
  static const int kIntensifyRewardFieldNumber = 6;
  inline const ::jynetwork::proto::sSimpleItem& intensify_reward(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_intensify_reward(int index);
  inline ::jynetwork::proto::sSimpleItem* add_intensify_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      intensify_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_intensify_reward();

  // optional uint32 intensify_gold = 7;
  inline bool has_intensify_gold() const;
  inline void clear_intensify_gold();
  static const int kIntensifyGoldFieldNumber = 7;
  inline ::google::protobuf::uint32 intensify_gold() const;
  inline void set_intensify_gold(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.sSimpleItem bonus_reward = 8;
  inline bool has_bonus_reward() const;
  inline void clear_bonus_reward();
  static const int kBonusRewardFieldNumber = 8;
  inline const ::jynetwork::proto::sSimpleItem& bonus_reward() const;
  inline ::jynetwork::proto::sSimpleItem* mutable_bonus_reward();
  inline ::jynetwork::proto::sSimpleItem* release_bonus_reward();
  inline void set_allocated_bonus_reward(::jynetwork::proto::sSimpleItem* bonus_reward);

  // optional uint32 bonus_percent = 9;
  inline bool has_bonus_percent() const;
  inline void clear_bonus_percent();
  static const int kBonusPercentFieldNumber = 9;
  inline ::google::protobuf::uint32 bonus_percent() const;
  inline void set_bonus_percent(::google::protobuf::uint32 value);

  // optional uint32 type_num = 10;
  inline bool has_type_num() const;
  inline void clear_type_num();
  static const int kTypeNumFieldNumber = 10;
  inline ::google::protobuf::uint32 type_num() const;
  inline void set_type_num(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.sSimpleItem magic_stone = 11;
  inline bool has_magic_stone() const;
  inline void clear_magic_stone();
  static const int kMagicStoneFieldNumber = 11;
  inline const ::jynetwork::proto::sSimpleItem& magic_stone() const;
  inline ::jynetwork::proto::sSimpleItem* mutable_magic_stone();
  inline ::jynetwork::proto::sSimpleItem* release_magic_stone();
  inline void set_allocated_magic_stone(::jynetwork::proto::sSimpleItem* magic_stone);

  // optional uint32 stone_percent = 12;
  inline bool has_stone_percent() const;
  inline void clear_stone_percent();
  static const int kStonePercentFieldNumber = 12;
  inline ::google::protobuf::uint32 stone_percent() const;
  inline void set_stone_percent(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.sSimpleItem shop_stone = 13;
  inline bool has_shop_stone() const;
  inline void clear_shop_stone();
  static const int kShopStoneFieldNumber = 13;
  inline const ::jynetwork::proto::sSimpleItem& shop_stone() const;
  inline ::jynetwork::proto::sSimpleItem* mutable_shop_stone();
  inline ::jynetwork::proto::sSimpleItem* release_shop_stone();
  inline void set_allocated_shop_stone(::jynetwork::proto::sSimpleItem* shop_stone);

  // optional .jynetwork.proto.sSimpleItem set_decom = 14;
  inline bool has_set_decom() const;
  inline void clear_set_decom();
  static const int kSetDecomFieldNumber = 14;
  inline const ::jynetwork::proto::sSimpleItem& set_decom() const;
  inline ::jynetwork::proto::sSimpleItem* mutable_set_decom();
  inline ::jynetwork::proto::sSimpleItem* release_set_decom();
  inline void set_allocated_set_decom(::jynetwork::proto::sSimpleItem* set_decom);

  // optional uint32 role = 15;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 15;
  inline ::google::protobuf::uint32 role() const;
  inline void set_role(::google::protobuf::uint32 value);

  // optional uint32 equip_part = 16;
  inline bool has_equip_part() const;
  inline void clear_equip_part();
  static const int kEquipPartFieldNumber = 16;
  inline ::google::protobuf::uint32 equip_part() const;
  inline void set_equip_part(::google::protobuf::uint32 value);

  // optional uint32 is_group = 17;
  inline bool has_is_group() const;
  inline void clear_is_group();
  static const int kIsGroupFieldNumber = 17;
  inline ::google::protobuf::uint32 is_group() const;
  inline void set_is_group(::google::protobuf::uint32 value);

  // optional uint32 equip_star = 18;
  inline bool has_equip_star() const;
  inline void clear_equip_star();
  static const int kEquipStarFieldNumber = 18;
  inline ::google::protobuf::uint32 equip_star() const;
  inline void set_equip_star(::google::protobuf::uint32 value);

  // optional uint32 intensify = 19;
  inline bool has_intensify() const;
  inline void clear_intensify();
  static const int kIntensifyFieldNumber = 19;
  inline ::google::protobuf::uint32 intensify() const;
  inline void set_intensify(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem new_base_reward = 20;
  inline int new_base_reward_size() const;
  inline void clear_new_base_reward();
  static const int kNewBaseRewardFieldNumber = 20;
  inline const ::jynetwork::proto::sSimpleItem& new_base_reward(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_new_base_reward(int index);
  inline ::jynetwork::proto::sSimpleItem* add_new_base_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      new_base_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_new_base_reward();

  // repeated .jynetwork.proto.sSimpleItem new_percent_item = 21;
  inline int new_percent_item_size() const;
  inline void clear_new_percent_item();
  static const int kNewPercentItemFieldNumber = 21;
  inline const ::jynetwork::proto::sSimpleItem& new_percent_item(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_new_percent_item(int index);
  inline ::jynetwork::proto::sSimpleItem* add_new_percent_item();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      new_percent_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_new_percent_item();

  // optional uint32 new_percent = 22;
  inline bool has_new_percent() const;
  inline void clear_new_percent();
  static const int kNewPercentFieldNumber = 22;
  inline ::google::protobuf::uint32 new_percent() const;
  inline void set_new_percent(::google::protobuf::uint32 value);

  // optional uint32 new_gold = 23;
  inline bool has_new_gold() const;
  inline void clear_new_gold();
  static const int kNewGoldFieldNumber = 23;
  inline ::google::protobuf::uint32 new_gold() const;
  inline void set_new_gold(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sDecomStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_base_reward();
  inline void clear_has_base_reward();
  inline void set_has_lv_reward();
  inline void clear_has_lv_reward();
  inline void set_has_lv_gold();
  inline void clear_has_lv_gold();
  inline void set_has_intensify_gold();
  inline void clear_has_intensify_gold();
  inline void set_has_bonus_reward();
  inline void clear_has_bonus_reward();
  inline void set_has_bonus_percent();
  inline void clear_has_bonus_percent();
  inline void set_has_type_num();
  inline void clear_has_type_num();
  inline void set_has_magic_stone();
  inline void clear_has_magic_stone();
  inline void set_has_stone_percent();
  inline void clear_has_stone_percent();
  inline void set_has_shop_stone();
  inline void clear_has_shop_stone();
  inline void set_has_set_decom();
  inline void clear_has_set_decom();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_equip_part();
  inline void clear_has_equip_part();
  inline void set_has_is_group();
  inline void clear_has_is_group();
  inline void set_has_equip_star();
  inline void clear_has_equip_star();
  inline void set_has_intensify();
  inline void clear_has_intensify();
  inline void set_has_new_percent();
  inline void clear_has_new_percent();
  inline void set_has_new_gold();
  inline void clear_has_new_gold();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 item_id_;
  ::jynetwork::proto::sSimpleItem* base_reward_;
  ::jynetwork::proto::sSimpleItem* lv_reward_;
  ::google::protobuf::uint32 lv_gold_;
  ::google::protobuf::uint32 intensify_gold_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > intensify_reward_;
  ::jynetwork::proto::sSimpleItem* bonus_reward_;
  ::google::protobuf::uint32 bonus_percent_;
  ::google::protobuf::uint32 type_num_;
  ::jynetwork::proto::sSimpleItem* magic_stone_;
  ::jynetwork::proto::sSimpleItem* shop_stone_;
  ::google::protobuf::uint32 stone_percent_;
  ::google::protobuf::uint32 role_;
  ::jynetwork::proto::sSimpleItem* set_decom_;
  ::google::protobuf::uint32 equip_part_;
  ::google::protobuf::uint32 is_group_;
  ::google::protobuf::uint32 equip_star_;
  ::google::protobuf::uint32 intensify_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > new_base_reward_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > new_percent_item_;
  ::google::protobuf::uint32 new_percent_;
  ::google::protobuf::uint32 new_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sDecomStats* default_instance_;
};
// -------------------------------------------------------------------

class sMaskWordStats : public ::google::protobuf::MessageLite {
 public:
  sMaskWordStats();
  virtual ~sMaskWordStats();

  sMaskWordStats(const sMaskWordStats& from);

  inline sMaskWordStats& operator=(const sMaskWordStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sMaskWordStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sMaskWordStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sMaskWordStats* other);

  // implements Message ----------------------------------------------

  sMaskWordStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sMaskWordStats& from);
  void MergeFrom(const sMaskWordStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional bytes txt = 2;
  inline bool has_txt() const;
  inline void clear_txt();
  static const int kTxtFieldNumber = 2;
  inline const ::std::string& txt() const;
  inline void set_txt(const ::std::string& value);
  inline void set_txt(const char* value);
  inline void set_txt(const void* value, size_t size);
  inline ::std::string* mutable_txt();
  inline ::std::string* release_txt();
  inline void set_allocated_txt(::std::string* txt);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sMaskWordStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_txt();
  inline void clear_has_txt();

  ::std::string* txt_;
  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sMaskWordStats* default_instance_;
};
// -------------------------------------------------------------------

class sPartnerStats : public ::google::protobuf::MessageLite {
 public:
  sPartnerStats();
  virtual ~sPartnerStats();

  sPartnerStats(const sPartnerStats& from);

  inline sPartnerStats& operator=(const sPartnerStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPartnerStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPartnerStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPartnerStats* other);

  // implements Message ----------------------------------------------

  sPartnerStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPartnerStats& from);
  void MergeFrom(const sPartnerStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 partner_id = 2;
  inline bool has_partner_id() const;
  inline void clear_partner_id();
  static const int kPartnerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 partner_id() const;
  inline void set_partner_id(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eRoleType role = 3;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline ::jynetwork::proto::eRoleType role() const;
  inline void set_role(::jynetwork::proto::eRoleType value);

  // optional uint32 cardname = 4;
  inline bool has_cardname() const;
  inline void clear_cardname();
  static const int kCardnameFieldNumber = 4;
  inline ::google::protobuf::uint32 cardname() const;
  inline void set_cardname(::google::protobuf::uint32 value);

  // optional uint32 star = 5;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 5;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional string skill_res = 6;
  inline bool has_skill_res() const;
  inline void clear_skill_res();
  static const int kSkillResFieldNumber = 6;
  inline const ::std::string& skill_res() const;
  inline void set_skill_res(const ::std::string& value);
  inline void set_skill_res(const char* value);
  inline void set_skill_res(const char* value, size_t size);
  inline ::std::string* mutable_skill_res();
  inline ::std::string* release_skill_res();
  inline void set_allocated_skill_res(::std::string* skill_res);

  // optional uint32 cardmodel = 7;
  inline bool has_cardmodel() const;
  inline void clear_cardmodel();
  static const int kCardmodelFieldNumber = 7;
  inline ::google::protobuf::uint32 cardmodel() const;
  inline void set_cardmodel(::google::protobuf::uint32 value);

  // optional float scale = 8;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 8;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string cardicon = 9;
  inline bool has_cardicon() const;
  inline void clear_cardicon();
  static const int kCardiconFieldNumber = 9;
  inline const ::std::string& cardicon() const;
  inline void set_cardicon(const ::std::string& value);
  inline void set_cardicon(const char* value);
  inline void set_cardicon(const char* value, size_t size);
  inline ::std::string* mutable_cardicon();
  inline ::std::string* release_cardicon();
  inline void set_allocated_cardicon(::std::string* cardicon);

  // optional .jynetwork.proto.ePartnerBuffType buff_type = 10;
  inline bool has_buff_type() const;
  inline void clear_buff_type();
  static const int kBuffTypeFieldNumber = 10;
  inline ::jynetwork::proto::ePartnerBuffType buff_type() const;
  inline void set_buff_type(::jynetwork::proto::ePartnerBuffType value);

  // optional uint32 effect_id = 11;
  inline bool has_effect_id() const;
  inline void clear_effect_id();
  static const int kEffectIdFieldNumber = 11;
  inline ::google::protobuf::uint32 effect_id() const;
  inline void set_effect_id(::google::protobuf::uint32 value);

  // optional uint32 effect_id2 = 32;
  inline bool has_effect_id2() const;
  inline void clear_effect_id2();
  static const int kEffectId2FieldNumber = 32;
  inline ::google::protobuf::uint32 effect_id2() const;
  inline void set_effect_id2(::google::protobuf::uint32 value);

  // optional uint32 gamestats = 12;
  inline bool has_gamestats() const;
  inline void clear_gamestats();
  static const int kGamestatsFieldNumber = 12;
  inline ::google::protobuf::uint32 gamestats() const;
  inline void set_gamestats(::google::protobuf::uint32 value);

  // optional uint32 gamestats_lvl = 13;
  inline bool has_gamestats_lvl() const;
  inline void clear_gamestats_lvl();
  static const int kGamestatsLvlFieldNumber = 13;
  inline ::google::protobuf::uint32 gamestats_lvl() const;
  inline void set_gamestats_lvl(::google::protobuf::uint32 value);

  // optional float skill_dmgscale = 14;
  inline bool has_skill_dmgscale() const;
  inline void clear_skill_dmgscale();
  static const int kSkillDmgscaleFieldNumber = 14;
  inline float skill_dmgscale() const;
  inline void set_skill_dmgscale(float value);

  // optional float duration = 15;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 15;
  inline float duration() const;
  inline void set_duration(float value);

  // optional uint32 es_id = 16;
  inline bool has_es_id() const;
  inline void clear_es_id();
  static const int kEsIdFieldNumber = 16;
  inline ::google::protobuf::uint32 es_id() const;
  inline void set_es_id(::google::protobuf::uint32 value);

  // optional uint32 battle_ability = 17;
  inline bool has_battle_ability() const;
  inline void clear_battle_ability();
  static const int kBattleAbilityFieldNumber = 17;
  inline ::google::protobuf::uint32 battle_ability() const;
  inline void set_battle_ability(::google::protobuf::uint32 value);

  // optional uint32 skill_desc = 18;
  inline bool has_skill_desc() const;
  inline void clear_skill_desc();
  static const int kSkillDescFieldNumber = 18;
  inline ::google::protobuf::uint32 skill_desc() const;
  inline void set_skill_desc(::google::protobuf::uint32 value);

  // optional uint32 buff_key = 19;
  inline bool has_buff_key() const;
  inline void clear_buff_key();
  static const int kBuffKeyFieldNumber = 19;
  inline ::google::protobuf::uint32 buff_key() const;
  inline void set_buff_key(::google::protobuf::uint32 value);

  // optional string aquire_eff = 20;
  inline bool has_aquire_eff() const;
  inline void clear_aquire_eff();
  static const int kAquireEffFieldNumber = 20;
  inline const ::std::string& aquire_eff() const;
  inline void set_aquire_eff(const ::std::string& value);
  inline void set_aquire_eff(const char* value);
  inline void set_aquire_eff(const char* value, size_t size);
  inline ::std::string* mutable_aquire_eff();
  inline ::std::string* release_aquire_eff();
  inline void set_allocated_aquire_eff(::std::string* aquire_eff);

  // optional string buff_icon = 21;
  inline bool has_buff_icon() const;
  inline void clear_buff_icon();
  static const int kBuffIconFieldNumber = 21;
  inline const ::std::string& buff_icon() const;
  inline void set_buff_icon(const ::std::string& value);
  inline void set_buff_icon(const char* value);
  inline void set_buff_icon(const char* value, size_t size);
  inline ::std::string* mutable_buff_icon();
  inline ::std::string* release_buff_icon();
  inline void set_allocated_buff_icon(::std::string* buff_icon);

  // optional string buff_show = 22;
  inline bool has_buff_show() const;
  inline void clear_buff_show();
  static const int kBuffShowFieldNumber = 22;
  inline const ::std::string& buff_show() const;
  inline void set_buff_show(const ::std::string& value);
  inline void set_buff_show(const char* value);
  inline void set_buff_show(const char* value, size_t size);
  inline ::std::string* mutable_buff_show();
  inline ::std::string* release_buff_show();
  inline void set_allocated_buff_show(::std::string* buff_show);

  // optional uint32 star_desc_lang_id = 23;
  inline bool has_star_desc_lang_id() const;
  inline void clear_star_desc_lang_id();
  static const int kStarDescLangIdFieldNumber = 23;
  inline ::google::protobuf::uint32 star_desc_lang_id() const;
  inline void set_star_desc_lang_id(::google::protobuf::uint32 value);

  // optional uint32 partner_skill_lang_id = 24;
  inline bool has_partner_skill_lang_id() const;
  inline void clear_partner_skill_lang_id();
  static const int kPartnerSkillLangIdFieldNumber = 24;
  inline ::google::protobuf::uint32 partner_skill_lang_id() const;
  inline void set_partner_skill_lang_id(::google::protobuf::uint32 value);

  // optional uint32 partner_skill_up_lang_id = 25;
  inline bool has_partner_skill_up_lang_id() const;
  inline void clear_partner_skill_up_lang_id();
  static const int kPartnerSkillUpLangIdFieldNumber = 25;
  inline ::google::protobuf::uint32 partner_skill_up_lang_id() const;
  inline void set_partner_skill_up_lang_id(::google::protobuf::uint32 value);

  // optional uint32 star_up_lang_id = 26;
  inline bool has_star_up_lang_id() const;
  inline void clear_star_up_lang_id();
  static const int kStarUpLangIdFieldNumber = 26;
  inline ::google::protobuf::uint32 star_up_lang_id() const;
  inline void set_star_up_lang_id(::google::protobuf::uint32 value);

  // optional uint32 star_bnum = 27;
  inline bool has_star_bnum() const;
  inline void clear_star_bnum();
  static const int kStarBnumFieldNumber = 27;
  inline ::google::protobuf::uint32 star_bnum() const;
  inline void set_star_bnum(::google::protobuf::uint32 value);

  // optional uint32 star_anum = 28;
  inline bool has_star_anum() const;
  inline void clear_star_anum();
  static const int kStarAnumFieldNumber = 28;
  inline ::google::protobuf::uint32 star_anum() const;
  inline void set_star_anum(::google::protobuf::uint32 value);

  // optional float offset = 29;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 29;
  inline float offset() const;
  inline void set_offset(float value);

  // optional uint32 is_bind = 30;
  inline bool has_is_bind() const;
  inline void clear_is_bind();
  static const int kIsBindFieldNumber = 30;
  inline ::google::protobuf::uint32 is_bind() const;
  inline void set_is_bind(::google::protobuf::uint32 value);

  // optional string battle_icon = 31;
  inline bool has_battle_icon() const;
  inline void clear_battle_icon();
  static const int kBattleIconFieldNumber = 31;
  inline const ::std::string& battle_icon() const;
  inline void set_battle_icon(const ::std::string& value);
  inline void set_battle_icon(const char* value);
  inline void set_battle_icon(const char* value, size_t size);
  inline ::std::string* mutable_battle_icon();
  inline ::std::string* release_battle_icon();
  inline void set_allocated_battle_icon(::std::string* battle_icon);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPartnerStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_partner_id();
  inline void clear_has_partner_id();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_cardname();
  inline void clear_has_cardname();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_skill_res();
  inline void clear_has_skill_res();
  inline void set_has_cardmodel();
  inline void clear_has_cardmodel();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_cardicon();
  inline void clear_has_cardicon();
  inline void set_has_buff_type();
  inline void clear_has_buff_type();
  inline void set_has_effect_id();
  inline void clear_has_effect_id();
  inline void set_has_effect_id2();
  inline void clear_has_effect_id2();
  inline void set_has_gamestats();
  inline void clear_has_gamestats();
  inline void set_has_gamestats_lvl();
  inline void clear_has_gamestats_lvl();
  inline void set_has_skill_dmgscale();
  inline void clear_has_skill_dmgscale();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_es_id();
  inline void clear_has_es_id();
  inline void set_has_battle_ability();
  inline void clear_has_battle_ability();
  inline void set_has_skill_desc();
  inline void clear_has_skill_desc();
  inline void set_has_buff_key();
  inline void clear_has_buff_key();
  inline void set_has_aquire_eff();
  inline void clear_has_aquire_eff();
  inline void set_has_buff_icon();
  inline void clear_has_buff_icon();
  inline void set_has_buff_show();
  inline void clear_has_buff_show();
  inline void set_has_star_desc_lang_id();
  inline void clear_has_star_desc_lang_id();
  inline void set_has_partner_skill_lang_id();
  inline void clear_has_partner_skill_lang_id();
  inline void set_has_partner_skill_up_lang_id();
  inline void clear_has_partner_skill_up_lang_id();
  inline void set_has_star_up_lang_id();
  inline void clear_has_star_up_lang_id();
  inline void set_has_star_bnum();
  inline void clear_has_star_bnum();
  inline void set_has_star_anum();
  inline void clear_has_star_anum();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_is_bind();
  inline void clear_has_is_bind();
  inline void set_has_battle_icon();
  inline void clear_has_battle_icon();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 partner_id_;
  int role_;
  ::google::protobuf::uint32 cardname_;
  ::std::string* skill_res_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 cardmodel_;
  float scale_;
  int buff_type_;
  ::std::string* cardicon_;
  ::google::protobuf::uint32 effect_id_;
  ::google::protobuf::uint32 effect_id2_;
  ::google::protobuf::uint32 gamestats_;
  ::google::protobuf::uint32 gamestats_lvl_;
  float skill_dmgscale_;
  float duration_;
  ::google::protobuf::uint32 es_id_;
  ::google::protobuf::uint32 battle_ability_;
  ::google::protobuf::uint32 skill_desc_;
  ::google::protobuf::uint32 buff_key_;
  ::std::string* aquire_eff_;
  ::std::string* buff_icon_;
  ::std::string* buff_show_;
  ::google::protobuf::uint32 star_desc_lang_id_;
  ::google::protobuf::uint32 partner_skill_lang_id_;
  ::google::protobuf::uint32 partner_skill_up_lang_id_;
  ::google::protobuf::uint32 star_up_lang_id_;
  ::google::protobuf::uint32 star_bnum_;
  ::google::protobuf::uint32 star_anum_;
  float offset_;
  ::google::protobuf::uint32 is_bind_;
  ::std::string* battle_icon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sPartnerStats* default_instance_;
};
// -------------------------------------------------------------------

class sPartnerLvUpStats : public ::google::protobuf::MessageLite {
 public:
  sPartnerLvUpStats();
  virtual ~sPartnerLvUpStats();

  sPartnerLvUpStats(const sPartnerLvUpStats& from);

  inline sPartnerLvUpStats& operator=(const sPartnerLvUpStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPartnerLvUpStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPartnerLvUpStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPartnerLvUpStats* other);

  // implements Message ----------------------------------------------

  sPartnerLvUpStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPartnerLvUpStats& from);
  void MergeFrom(const sPartnerLvUpStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 role = 2;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline ::google::protobuf::uint32 role() const;
  inline void set_role(::google::protobuf::uint32 value);

  // optional uint32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 intensify_need = 5;
  inline bool has_intensify_need() const;
  inline void clear_intensify_need();
  static const int kIntensifyNeedFieldNumber = 5;
  inline ::google::protobuf::uint32 intensify_need() const;
  inline void set_intensify_need(::google::protobuf::uint32 value);

  // optional uint32 battle_ability = 6;
  inline bool has_battle_ability() const;
  inline void clear_battle_ability();
  static const int kBattleAbilityFieldNumber = 6;
  inline ::google::protobuf::uint32 battle_ability() const;
  inline void set_battle_ability(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPartnerLvUpStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_intensify_need();
  inline void clear_has_intensify_need();
  inline void set_has_battle_ability();
  inline void clear_has_battle_ability();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 role_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 intensify_need_;
  ::google::protobuf::uint32 battle_ability_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sPartnerLvUpStats* default_instance_;
};
// -------------------------------------------------------------------

class sPartnerIntensifyStats : public ::google::protobuf::MessageLite {
 public:
  sPartnerIntensifyStats();
  virtual ~sPartnerIntensifyStats();

  sPartnerIntensifyStats(const sPartnerIntensifyStats& from);

  inline sPartnerIntensifyStats& operator=(const sPartnerIntensifyStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPartnerIntensifyStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPartnerIntensifyStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPartnerIntensifyStats* other);

  // implements Message ----------------------------------------------

  sPartnerIntensifyStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPartnerIntensifyStats& from);
  void MergeFrom(const sPartnerIntensifyStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 intensify = 3;
  inline bool has_intensify() const;
  inline void clear_intensify();
  static const int kIntensifyFieldNumber = 3;
  inline ::google::protobuf::uint32 intensify() const;
  inline void set_intensify(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem itemneed = 4;
  inline int itemneed_size() const;
  inline void clear_itemneed();
  static const int kItemneedFieldNumber = 4;
  inline const ::jynetwork::proto::sSimpleItem& itemneed(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_itemneed(int index);
  inline ::jynetwork::proto::sSimpleItem* add_itemneed();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      itemneed() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_itemneed();

  // optional float drop_percent = 5;
  inline bool has_drop_percent() const;
  inline void clear_drop_percent();
  static const int kDropPercentFieldNumber = 5;
  inline float drop_percent() const;
  inline void set_drop_percent(float value);

  // optional uint32 battle_ability = 6;
  inline bool has_battle_ability() const;
  inline void clear_battle_ability();
  static const int kBattleAbilityFieldNumber = 6;
  inline ::google::protobuf::uint32 battle_ability() const;
  inline void set_battle_ability(::google::protobuf::uint32 value);

  // optional uint32 intensify_des = 7;
  inline bool has_intensify_des() const;
  inline void clear_intensify_des();
  static const int kIntensifyDesFieldNumber = 7;
  inline ::google::protobuf::uint32 intensify_des() const;
  inline void set_intensify_des(::google::protobuf::uint32 value);

  // optional uint32 lv_limit = 8;
  inline bool has_lv_limit() const;
  inline void clear_lv_limit();
  static const int kLvLimitFieldNumber = 8;
  inline ::google::protobuf::uint32 lv_limit() const;
  inline void set_lv_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPartnerIntensifyStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_intensify();
  inline void clear_has_intensify();
  inline void set_has_drop_percent();
  inline void clear_has_drop_percent();
  inline void set_has_battle_ability();
  inline void clear_has_battle_ability();
  inline void set_has_intensify_des();
  inline void clear_has_intensify_des();
  inline void set_has_lv_limit();
  inline void clear_has_lv_limit();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > itemneed_;
  ::google::protobuf::uint32 intensify_;
  float drop_percent_;
  ::google::protobuf::uint32 battle_ability_;
  ::google::protobuf::uint32 intensify_des_;
  ::google::protobuf::uint32 lv_limit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sPartnerIntensifyStats* default_instance_;
};
// -------------------------------------------------------------------

class sPartnerStarStats : public ::google::protobuf::MessageLite {
 public:
  sPartnerStarStats();
  virtual ~sPartnerStarStats();

  sPartnerStarStats(const sPartnerStarStats& from);

  inline sPartnerStarStats& operator=(const sPartnerStarStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sPartnerStarStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sPartnerStarStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sPartnerStarStats* other);

  // implements Message ----------------------------------------------

  sPartnerStarStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sPartnerStarStats& from);
  void MergeFrom(const sPartnerStarStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 partner_id = 3;
  inline bool has_partner_id() const;
  inline void clear_partner_id();
  static const int kPartnerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 partner_id() const;
  inline void set_partner_id(::google::protobuf::uint32 value);

  // optional uint32 star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 item_id = 5;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 5;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // repeated uint32 start_up_count = 6;
  inline int start_up_count_size() const;
  inline void clear_start_up_count();
  static const int kStartUpCountFieldNumber = 6;
  inline ::google::protobuf::uint32 start_up_count(int index) const;
  inline void set_start_up_count(int index, ::google::protobuf::uint32 value);
  inline void add_start_up_count(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      start_up_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_start_up_count();

  // optional uint32 decom_count = 7;
  inline bool has_decom_count() const;
  inline void clear_decom_count();
  static const int kDecomCountFieldNumber = 7;
  inline ::google::protobuf::uint32 decom_count() const;
  inline void set_decom_count(::google::protobuf::uint32 value);

  // optional uint32 lang_id = 8;
  inline bool has_lang_id() const;
  inline void clear_lang_id();
  static const int kLangIdFieldNumber = 8;
  inline ::google::protobuf::uint32 lang_id() const;
  inline void set_lang_id(::google::protobuf::uint32 value);

  // optional uint32 type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string cardicon = 10;
  inline bool has_cardicon() const;
  inline void clear_cardicon();
  static const int kCardiconFieldNumber = 10;
  inline const ::std::string& cardicon() const;
  inline void set_cardicon(const ::std::string& value);
  inline void set_cardicon(const char* value);
  inline void set_cardicon(const char* value, size_t size);
  inline ::std::string* mutable_cardicon();
  inline ::std::string* release_cardicon();
  inline void set_allocated_cardicon(::std::string* cardicon);

  // optional uint32 ungetid = 11;
  inline bool has_ungetid() const;
  inline void clear_ungetid();
  static const int kUngetidFieldNumber = 11;
  inline ::google::protobuf::uint32 ungetid() const;
  inline void set_ungetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sPartnerStarStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_partner_id();
  inline void clear_has_partner_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_decom_count();
  inline void clear_has_decom_count();
  inline void set_has_lang_id();
  inline void clear_has_lang_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cardicon();
  inline void clear_has_cardicon();
  inline void set_has_ungetid();
  inline void clear_has_ungetid();

  ::std::string* name_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 partner_id_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > start_up_count_;
  ::google::protobuf::uint32 decom_count_;
  ::google::protobuf::uint32 lang_id_;
  ::std::string* cardicon_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 ungetid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sPartnerStarStats* default_instance_;
};
// -------------------------------------------------------------------

class sActivityStats : public ::google::protobuf::MessageLite {
 public:
  sActivityStats();
  virtual ~sActivityStats();

  sActivityStats(const sActivityStats& from);

  inline sActivityStats& operator=(const sActivityStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sActivityStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sActivityStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sActivityStats* other);

  // implements Message ----------------------------------------------

  sActivityStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sActivityStats& from);
  void MergeFrom(const sActivityStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 task_var = 2;
  inline bool has_task_var() const;
  inline void clear_task_var();
  static const int kTaskVarFieldNumber = 2;
  inline ::google::protobuf::uint32 task_var() const;
  inline void set_task_var(::google::protobuf::uint32 value);

  // optional uint32 shop_uid = 3;
  inline bool has_shop_uid() const;
  inline void clear_shop_uid();
  static const int kShopUidFieldNumber = 3;
  inline ::google::protobuf::uint32 shop_uid() const;
  inline void set_shop_uid(::google::protobuf::uint32 value);

  // optional uint32 ui_type = 4;
  inline bool has_ui_type() const;
  inline void clear_ui_type();
  static const int kUiTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 ui_type() const;
  inline void set_ui_type(::google::protobuf::uint32 value);

  // optional uint32 name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline ::google::protobuf::uint32 name() const;
  inline void set_name(::google::protobuf::uint32 value);

  // optional uint32 label = 6;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 6;
  inline ::google::protobuf::uint32 label() const;
  inline void set_label(::google::protobuf::uint32 value);

  // optional bytes icon = 7;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 7;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const void* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional bytes icon2 = 8;
  inline bool has_icon2() const;
  inline void clear_icon2();
  static const int kIcon2FieldNumber = 8;
  inline const ::std::string& icon2() const;
  inline void set_icon2(const ::std::string& value);
  inline void set_icon2(const char* value);
  inline void set_icon2(const void* value, size_t size);
  inline ::std::string* mutable_icon2();
  inline ::std::string* release_icon2();
  inline void set_allocated_icon2(::std::string* icon2);

  // optional uint32 type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 map_id = 10;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 10;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // optional uint32 finish_var = 11;
  inline bool has_finish_var() const;
  inline void clear_finish_var();
  static const int kFinishVarFieldNumber = 11;
  inline ::google::protobuf::uint32 finish_var() const;
  inline void set_finish_var(::google::protobuf::uint32 value);

  // optional uint32 finish_desc_lang_id = 12;
  inline bool has_finish_desc_lang_id() const;
  inline void clear_finish_desc_lang_id();
  static const int kFinishDescLangIdFieldNumber = 12;
  inline ::google::protobuf::uint32 finish_desc_lang_id() const;
  inline void set_finish_desc_lang_id(::google::protobuf::uint32 value);

  // optional uint32 start_date = 13;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 13;
  inline ::google::protobuf::uint32 start_date() const;
  inline void set_start_date(::google::protobuf::uint32 value);

  // optional uint32 start_time = 14;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 14;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional uint32 end_date = 15;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 15;
  inline ::google::protobuf::uint32 end_date() const;
  inline void set_end_date(::google::protobuf::uint32 value);

  // optional uint32 end_time = 16;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // optional uint32 lv_min = 17;
  inline bool has_lv_min() const;
  inline void clear_lv_min();
  static const int kLvMinFieldNumber = 17;
  inline ::google::protobuf::uint32 lv_min() const;
  inline void set_lv_min(::google::protobuf::uint32 value);

  // optional uint32 lv_max = 18;
  inline bool has_lv_max() const;
  inline void clear_lv_max();
  static const int kLvMaxFieldNumber = 18;
  inline ::google::protobuf::uint32 lv_max() const;
  inline void set_lv_max(::google::protobuf::uint32 value);

  // optional uint32 guide = 19;
  inline bool has_guide() const;
  inline void clear_guide();
  static const int kGuideFieldNumber = 19;
  inline ::google::protobuf::uint32 guide() const;
  inline void set_guide(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem reward_item = 20;
  inline int reward_item_size() const;
  inline void clear_reward_item();
  static const int kRewardItemFieldNumber = 20;
  inline const ::jynetwork::proto::sSimpleItem& reward_item(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_reward_item(int index);
  inline ::jynetwork::proto::sSimpleItem* add_reward_item();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      reward_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_reward_item();

  // optional uint32 act_type_lang_id = 21;
  inline bool has_act_type_lang_id() const;
  inline void clear_act_type_lang_id();
  static const int kActTypeLangIdFieldNumber = 21;
  inline ::google::protobuf::uint32 act_type_lang_id() const;
  inline void set_act_type_lang_id(::google::protobuf::uint32 value);

  // optional uint32 act_desc_lang_id = 22;
  inline bool has_act_desc_lang_id() const;
  inline void clear_act_desc_lang_id();
  static const int kActDescLangIdFieldNumber = 22;
  inline ::google::protobuf::uint32 act_desc_lang_id() const;
  inline void set_act_desc_lang_id(::google::protobuf::uint32 value);

  // optional uint32 order = 23;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 23;
  inline ::google::protobuf::uint32 order() const;
  inline void set_order(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sActivityStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_task_var();
  inline void clear_has_task_var();
  inline void set_has_shop_uid();
  inline void clear_has_shop_uid();
  inline void set_has_ui_type();
  inline void clear_has_ui_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_icon2();
  inline void clear_has_icon2();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_finish_var();
  inline void clear_has_finish_var();
  inline void set_has_finish_desc_lang_id();
  inline void clear_has_finish_desc_lang_id();
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_lv_min();
  inline void clear_has_lv_min();
  inline void set_has_lv_max();
  inline void clear_has_lv_max();
  inline void set_has_guide();
  inline void clear_has_guide();
  inline void set_has_act_type_lang_id();
  inline void clear_has_act_type_lang_id();
  inline void set_has_act_desc_lang_id();
  inline void clear_has_act_desc_lang_id();
  inline void set_has_order();
  inline void clear_has_order();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 task_var_;
  ::google::protobuf::uint32 shop_uid_;
  ::google::protobuf::uint32 ui_type_;
  ::google::protobuf::uint32 name_;
  ::google::protobuf::uint32 label_;
  ::std::string* icon_;
  ::std::string* icon2_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 finish_var_;
  ::google::protobuf::uint32 finish_desc_lang_id_;
  ::google::protobuf::uint32 start_date_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 end_date_;
  ::google::protobuf::uint32 end_time_;
  ::google::protobuf::uint32 lv_min_;
  ::google::protobuf::uint32 lv_max_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > reward_item_;
  ::google::protobuf::uint32 guide_;
  ::google::protobuf::uint32 act_type_lang_id_;
  ::google::protobuf::uint32 act_desc_lang_id_;
  ::google::protobuf::uint32 order_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sActivityStats* default_instance_;
};
// -------------------------------------------------------------------

class sRouletteStats : public ::google::protobuf::MessageLite {
 public:
  sRouletteStats();
  virtual ~sRouletteStats();

  sRouletteStats(const sRouletteStats& from);

  inline sRouletteStats& operator=(const sRouletteStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sRouletteStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sRouletteStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sRouletteStats* other);

  // implements Message ----------------------------------------------

  sRouletteStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sRouletteStats& from);
  void MergeFrom(const sRouletteStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 roulette_type = 2;
  inline bool has_roulette_type() const;
  inline void clear_roulette_type();
  static const int kRouletteTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 roulette_type() const;
  inline void set_roulette_type(::google::protobuf::uint32 value);

  // repeated uint32 drop_id = 3;
  inline int drop_id_size() const;
  inline void clear_drop_id();
  static const int kDropIdFieldNumber = 3;
  inline ::google::protobuf::uint32 drop_id(int index) const;
  inline void set_drop_id(int index, ::google::protobuf::uint32 value);
  inline void add_drop_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      drop_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_drop_id();

  // repeated uint32 percent = 4;
  inline int percent_size() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 4;
  inline ::google::protobuf::uint32 percent(int index) const;
  inline void set_percent(int index, ::google::protobuf::uint32 value);
  inline void add_percent(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      percent() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_percent();

  // optional uint32 cost_type = 9;
  inline bool has_cost_type() const;
  inline void clear_cost_type();
  static const int kCostTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 cost_type() const;
  inline void set_cost_type(::google::protobuf::uint32 value);

  // optional uint32 cost_value = 10;
  inline bool has_cost_value() const;
  inline void clear_cost_value();
  static const int kCostValueFieldNumber = 10;
  inline ::google::protobuf::uint32 cost_value() const;
  inline void set_cost_value(::google::protobuf::uint32 value);

  // optional uint32 cost_item = 11;
  inline bool has_cost_item() const;
  inline void clear_cost_item();
  static const int kCostItemFieldNumber = 11;
  inline ::google::protobuf::uint32 cost_item() const;
  inline void set_cost_item(::google::protobuf::uint32 value);

  // optional uint32 cost_item_num = 12;
  inline bool has_cost_item_num() const;
  inline void clear_cost_item_num();
  static const int kCostItemNumFieldNumber = 12;
  inline ::google::protobuf::uint32 cost_item_num() const;
  inline void set_cost_item_num(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem items = 13;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 13;
  inline const ::jynetwork::proto::sSimpleItem& items(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_items(int index);
  inline ::jynetwork::proto::sSimpleItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sRouletteStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_roulette_type();
  inline void clear_has_roulette_type();
  inline void set_has_cost_type();
  inline void clear_has_cost_type();
  inline void set_has_cost_value();
  inline void clear_has_cost_value();
  inline void set_has_cost_item();
  inline void clear_has_cost_item();
  inline void set_has_cost_item_num();
  inline void clear_has_cost_item_num();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 roulette_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > drop_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > percent_;
  ::google::protobuf::uint32 cost_type_;
  ::google::protobuf::uint32 cost_value_;
  ::google::protobuf::uint32 cost_item_;
  ::google::protobuf::uint32 cost_item_num_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sRouletteStats* default_instance_;
};
// -------------------------------------------------------------------

class sResourseDetail : public ::google::protobuf::MessageLite {
 public:
  sResourseDetail();
  virtual ~sResourseDetail();

  sResourseDetail(const sResourseDetail& from);

  inline sResourseDetail& operator=(const sResourseDetail& from) {
    CopyFrom(from);
    return *this;
  }

  static const sResourseDetail& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sResourseDetail* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sResourseDetail* other);

  // implements Message ----------------------------------------------

  sResourseDetail* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sResourseDetail& from);
  void MergeFrom(const sResourseDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sResourseDetail)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sResourseDetail* default_instance_;
};
// -------------------------------------------------------------------

class sResourseStats : public ::google::protobuf::MessageLite {
 public:
  sResourseStats();
  virtual ~sResourseStats();

  sResourseStats(const sResourseStats& from);

  inline sResourseStats& operator=(const sResourseStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sResourseStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sResourseStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sResourseStats* other);

  // implements Message ----------------------------------------------

  sResourseStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sResourseStats& from);
  void MergeFrom(const sResourseStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .jynetwork.proto.sResourseDetail guild_id = 3;
  inline int guild_id_size() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 3;
  inline const ::jynetwork::proto::sResourseDetail& guild_id(int index) const;
  inline ::jynetwork::proto::sResourseDetail* mutable_guild_id(int index);
  inline ::jynetwork::proto::sResourseDetail* add_guild_id();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sResourseDetail >&
      guild_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sResourseDetail >*
      mutable_guild_id();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sResourseStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sResourseDetail > guild_id_;
  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sResourseStats* default_instance_;
};
// -------------------------------------------------------------------

class sHomeBackground : public ::google::protobuf::MessageLite {
 public:
  sHomeBackground();
  virtual ~sHomeBackground();

  sHomeBackground(const sHomeBackground& from);

  inline sHomeBackground& operator=(const sHomeBackground& from) {
    CopyFrom(from);
    return *this;
  }

  static const sHomeBackground& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sHomeBackground* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sHomeBackground* other);

  // implements Message ----------------------------------------------

  sHomeBackground* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sHomeBackground& from);
  void MergeFrom(const sHomeBackground& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 layer = 3;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 3;
  inline ::google::protobuf::uint32 layer() const;
  inline void set_layer(::google::protobuf::uint32 value);

  // optional float speed = 4;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 4;
  inline float speed() const;
  inline void set_speed(float value);

  // optional uint32 up_limit = 5;
  inline bool has_up_limit() const;
  inline void clear_up_limit();
  static const int kUpLimitFieldNumber = 5;
  inline ::google::protobuf::uint32 up_limit() const;
  inline void set_up_limit(::google::protobuf::uint32 value);

  // optional uint32 down_limit = 6;
  inline bool has_down_limit() const;
  inline void clear_down_limit();
  static const int kDownLimitFieldNumber = 6;
  inline ::google::protobuf::uint32 down_limit() const;
  inline void set_down_limit(::google::protobuf::uint32 value);

  // optional uint32 left_limit = 7;
  inline bool has_left_limit() const;
  inline void clear_left_limit();
  static const int kLeftLimitFieldNumber = 7;
  inline ::google::protobuf::uint32 left_limit() const;
  inline void set_left_limit(::google::protobuf::uint32 value);

  // optional uint32 right_limit = 8;
  inline bool has_right_limit() const;
  inline void clear_right_limit();
  static const int kRightLimitFieldNumber = 8;
  inline ::google::protobuf::uint32 right_limit() const;
  inline void set_right_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sHomeBackground)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_up_limit();
  inline void clear_has_up_limit();
  inline void set_has_down_limit();
  inline void clear_has_down_limit();
  inline void set_has_left_limit();
  inline void clear_has_left_limit();
  inline void set_has_right_limit();
  inline void clear_has_right_limit();

  ::std::string* name_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 layer_;
  float speed_;
  ::google::protobuf::uint32 up_limit_;
  ::google::protobuf::uint32 down_limit_;
  ::google::protobuf::uint32 left_limit_;
  ::google::protobuf::uint32 right_limit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sHomeBackground* default_instance_;
};
// -------------------------------------------------------------------

class sEquipDetail : public ::google::protobuf::MessageLite {
 public:
  sEquipDetail();
  virtual ~sEquipDetail();

  sEquipDetail(const sEquipDetail& from);

  inline sEquipDetail& operator=(const sEquipDetail& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEquipDetail& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEquipDetail* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEquipDetail* other);

  // implements Message ----------------------------------------------

  sEquipDetail* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEquipDetail& from);
  void MergeFrom(const sEquipDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEquipDetail)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sEquipDetail* default_instance_;
};
// -------------------------------------------------------------------

class sEquipRecommend : public ::google::protobuf::MessageLite {
 public:
  sEquipRecommend();
  virtual ~sEquipRecommend();

  sEquipRecommend(const sEquipRecommend& from);

  inline sEquipRecommend& operator=(const sEquipRecommend& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEquipRecommend& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEquipRecommend* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEquipRecommend* other);

  // implements Message ----------------------------------------------

  sEquipRecommend* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEquipRecommend& from);
  void MergeFrom(const sEquipRecommend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::uint32 stage() const;
  inline void set_stage(::google::protobuf::uint32 value);

  // optional uint32 role = 2;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline ::google::protobuf::uint32 role() const;
  inline void set_role(::google::protobuf::uint32 value);

  // optional uint32 equipset = 3;
  inline bool has_equipset() const;
  inline void clear_equipset();
  static const int kEquipsetFieldNumber = 3;
  inline ::google::protobuf::uint32 equipset() const;
  inline void set_equipset(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sEquipDetail equip_id = 4;
  inline int equip_id_size() const;
  inline void clear_equip_id();
  static const int kEquipIdFieldNumber = 4;
  inline const ::jynetwork::proto::sEquipDetail& equip_id(int index) const;
  inline ::jynetwork::proto::sEquipDetail* mutable_equip_id(int index);
  inline ::jynetwork::proto::sEquipDetail* add_equip_id();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipDetail >&
      equip_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipDetail >*
      mutable_equip_id();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEquipRecommend)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_equipset();
  inline void clear_has_equipset();

  ::google::protobuf::uint32 stage_;
  ::google::protobuf::uint32 role_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipDetail > equip_id_;
  ::google::protobuf::uint32 equipset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sEquipRecommend* default_instance_;
};
// -------------------------------------------------------------------

class sCastleMonsterInfoStats : public ::google::protobuf::MessageLite {
 public:
  sCastleMonsterInfoStats();
  virtual ~sCastleMonsterInfoStats();

  sCastleMonsterInfoStats(const sCastleMonsterInfoStats& from);

  inline sCastleMonsterInfoStats& operator=(const sCastleMonsterInfoStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCastleMonsterInfoStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCastleMonsterInfoStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCastleMonsterInfoStats* other);

  // implements Message ----------------------------------------------

  sCastleMonsterInfoStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCastleMonsterInfoStats& from);
  void MergeFrom(const sCastleMonsterInfoStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional uint32 reward_wave = 3;
  inline bool has_reward_wave() const;
  inline void clear_reward_wave();
  static const int kRewardWaveFieldNumber = 3;
  inline ::google::protobuf::uint32 reward_wave() const;
  inline void set_reward_wave(::google::protobuf::uint32 value);

  // optional uint32 unit_type = 4;
  inline bool has_unit_type() const;
  inline void clear_unit_type();
  static const int kUnitTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 unit_type() const;
  inline void set_unit_type(::google::protobuf::uint32 value);

  // optional uint32 map_id = 5;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 5;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCastleMonsterInfoStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_reward_wave();
  inline void clear_has_reward_wave();
  inline void set_has_unit_type();
  inline void clear_has_unit_type();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 reward_wave_;
  ::google::protobuf::uint32 unit_type_;
  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sCastleMonsterInfoStats* default_instance_;
};
// -------------------------------------------------------------------

class sConstantsStats : public ::google::protobuf::MessageLite {
 public:
  sConstantsStats();
  virtual ~sConstantsStats();

  sConstantsStats(const sConstantsStats& from);

  inline sConstantsStats& operator=(const sConstantsStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sConstantsStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sConstantsStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sConstantsStats* other);

  // implements Message ----------------------------------------------

  sConstantsStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sConstantsStats& from);
  void MergeFrom(const sConstantsStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 bonusDiamond = 2;
  inline bool has_bonusdiamond() const;
  inline void clear_bonusdiamond();
  static const int kBonusDiamondFieldNumber = 2;
  inline ::google::protobuf::uint32 bonusdiamond() const;
  inline void set_bonusdiamond(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sConstantsStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_bonusdiamond();
  inline void clear_has_bonusdiamond();

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 bonusdiamond_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sConstantsStats* default_instance_;
};
// -------------------------------------------------------------------

class NetBattleMove : public ::google::protobuf::MessageLite {
 public:
  NetBattleMove();
  virtual ~NetBattleMove();

  NetBattleMove(const NetBattleMove& from);

  inline NetBattleMove& operator=(const NetBattleMove& from) {
    CopyFrom(from);
    return *this;
  }

  static const NetBattleMove& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NetBattleMove* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NetBattleMove* other);

  // implements Message ----------------------------------------------

  NetBattleMove* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NetBattleMove& from);
  void MergeFrom(const NetBattleMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float delay = 1;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 1;
  inline float delay() const;
  inline void set_delay(float value);

  // optional float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.NetBattleMove)
 private:
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  float delay_;
  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static NetBattleMove* default_instance_;
};
// -------------------------------------------------------------------

class NetCardSkill : public ::google::protobuf::MessageLite {
 public:
  NetCardSkill();
  virtual ~NetCardSkill();

  NetCardSkill(const NetCardSkill& from);

  inline NetCardSkill& operator=(const NetCardSkill& from) {
    CopyFrom(from);
    return *this;
  }

  static const NetCardSkill& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NetCardSkill* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NetCardSkill* other);

  // implements Message ----------------------------------------------

  NetCardSkill* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NetCardSkill& from);
  void MergeFrom(const NetCardSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float delay = 1;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 1;
  inline float delay() const;
  inline void set_delay(float value);

  // optional float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);

  // optional uint32 card_slot = 4;
  inline bool has_card_slot() const;
  inline void clear_card_slot();
  static const int kCardSlotFieldNumber = 4;
  inline ::google::protobuf::uint32 card_slot() const;
  inline void set_card_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.NetCardSkill)
 private:
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_card_slot();
  inline void clear_has_card_slot();

  float delay_;
  float x_;
  float y_;
  ::google::protobuf::uint32 card_slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static NetCardSkill* default_instance_;
};
// -------------------------------------------------------------------

class NetBattleOper : public ::google::protobuf::MessageLite {
 public:
  NetBattleOper();
  virtual ~NetBattleOper();

  NetBattleOper(const NetBattleOper& from);

  inline NetBattleOper& operator=(const NetBattleOper& from) {
    CopyFrom(from);
    return *this;
  }

  static const NetBattleOper& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NetBattleOper* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NetBattleOper* other);

  // implements Message ----------------------------------------------

  NetBattleOper* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NetBattleOper& from);
  void MergeFrom(const NetBattleOper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jynetwork.proto.eNetBattleOper oper = 1;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 1;
  inline ::jynetwork::proto::eNetBattleOper oper() const;
  inline void set_oper(::jynetwork::proto::eNetBattleOper value);

  // optional uint32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // optional float x = 5;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 5;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 6;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 6;
  inline float y() const;
  inline void set_y(float value);

  // optional float hp = 7;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 7;
  inline float hp() const;
  inline void set_hp(float value);

  // optional uint32 monster_id = 3;
  inline bool has_monster_id() const;
  inline void clear_monster_id();
  static const int kMonsterIdFieldNumber = 3;
  inline ::google::protobuf::uint32 monster_id() const;
  inline void set_monster_id(::google::protobuf::uint32 value);

  // repeated uint32 skill_id = 4;
  inline int skill_id_size() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 4;
  inline ::google::protobuf::uint32 skill_id(int index) const;
  inline void set_skill_id(int index, ::google::protobuf::uint32 value);
  inline void add_skill_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skill_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skill_id();

  // repeated uint32 wave_id = 8;
  inline int wave_id_size() const;
  inline void clear_wave_id();
  static const int kWaveIdFieldNumber = 8;
  inline ::google::protobuf::uint32 wave_id(int index) const;
  inline void set_wave_id(int index, ::google::protobuf::uint32 value);
  inline void add_wave_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      wave_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_wave_id();

  // repeated .jynetwork.proto.NetCardSkill card_skill = 9;
  inline int card_skill_size() const;
  inline void clear_card_skill();
  static const int kCardSkillFieldNumber = 9;
  inline const ::jynetwork::proto::NetCardSkill& card_skill(int index) const;
  inline ::jynetwork::proto::NetCardSkill* mutable_card_skill(int index);
  inline ::jynetwork::proto::NetCardSkill* add_card_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetCardSkill >&
      card_skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetCardSkill >*
      mutable_card_skill();

  // repeated .jynetwork.proto.NetBattleMove player_move = 12;
  inline int player_move_size() const;
  inline void clear_player_move();
  static const int kPlayerMoveFieldNumber = 12;
  inline const ::jynetwork::proto::NetBattleMove& player_move(int index) const;
  inline ::jynetwork::proto::NetBattleMove* mutable_player_move(int index);
  inline ::jynetwork::proto::NetBattleMove* add_player_move();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetBattleMove >&
      player_move() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetBattleMove >*
      mutable_player_move();

  // optional uint32 status = 13;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 13;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional float damage_score = 14;
  inline bool has_damage_score() const;
  inline void clear_damage_score();
  static const int kDamageScoreFieldNumber = 14;
  inline float damage_score() const;
  inline void set_damage_score(float value);

  // optional uint32 kill_player_id = 15;
  inline bool has_kill_player_id() const;
  inline void clear_kill_player_id();
  static const int kKillPlayerIdFieldNumber = 15;
  inline ::google::protobuf::uint32 kill_player_id() const;
  inline void set_kill_player_id(::google::protobuf::uint32 value);

  // optional float now_my_score = 16;
  inline bool has_now_my_score() const;
  inline void clear_now_my_score();
  static const int kNowMyScoreFieldNumber = 16;
  inline float now_my_score() const;
  inline void set_now_my_score(float value);

  // optional float now_sub_score = 17;
  inline bool has_now_sub_score() const;
  inline void clear_now_sub_score();
  static const int kNowSubScoreFieldNumber = 17;
  inline float now_sub_score() const;
  inline void set_now_sub_score(float value);

  // optional float hurt_hp = 18;
  inline bool has_hurt_hp() const;
  inline void clear_hurt_hp();
  static const int kHurtHpFieldNumber = 18;
  inline float hurt_hp() const;
  inline void set_hurt_hp(float value);

  // optional float arena_hp = 19;
  inline bool has_arena_hp() const;
  inline void clear_arena_hp();
  static const int kArenaHpFieldNumber = 19;
  inline float arena_hp() const;
  inline void set_arena_hp(float value);

  // optional float now_score = 20;
  inline bool has_now_score() const;
  inline void clear_now_score();
  static const int kNowScoreFieldNumber = 20;
  inline float now_score() const;
  inline void set_now_score(float value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.NetBattleOper)
 private:
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_monster_id();
  inline void clear_has_monster_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_damage_score();
  inline void clear_has_damage_score();
  inline void set_has_kill_player_id();
  inline void clear_has_kill_player_id();
  inline void set_has_now_my_score();
  inline void clear_has_now_my_score();
  inline void set_has_now_sub_score();
  inline void clear_has_now_sub_score();
  inline void set_has_hurt_hp();
  inline void clear_has_hurt_hp();
  inline void set_has_arena_hp();
  inline void clear_has_arena_hp();
  inline void set_has_now_score();
  inline void clear_has_now_score();

  int oper_;
  ::google::protobuf::uint32 player_id_;
  float x_;
  float y_;
  float hp_;
  ::google::protobuf::uint32 monster_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skill_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > wave_id_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetCardSkill > card_skill_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetBattleMove > player_move_;
  ::google::protobuf::uint32 status_;
  float damage_score_;
  ::google::protobuf::uint32 kill_player_id_;
  float now_my_score_;
  float now_sub_score_;
  float hurt_hp_;
  float arena_hp_;
  float now_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static NetBattleOper* default_instance_;
};
// -------------------------------------------------------------------

class sEquipIdentify : public ::google::protobuf::MessageLite {
 public:
  sEquipIdentify();
  virtual ~sEquipIdentify();

  sEquipIdentify(const sEquipIdentify& from);

  inline sEquipIdentify& operator=(const sEquipIdentify& from) {
    CopyFrom(from);
    return *this;
  }

  static const sEquipIdentify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sEquipIdentify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sEquipIdentify* other);

  // implements Message ----------------------------------------------

  sEquipIdentify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sEquipIdentify& from);
  void MergeFrom(const sEquipIdentify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 part = 3;
  inline bool has_part() const;
  inline void clear_part();
  static const int kPartFieldNumber = 3;
  inline ::google::protobuf::uint32 part() const;
  inline void set_part(::google::protobuf::uint32 value);

  // repeated uint32 cost_id = 4;
  inline int cost_id_size() const;
  inline void clear_cost_id();
  static const int kCostIdFieldNumber = 4;
  inline ::google::protobuf::uint32 cost_id(int index) const;
  inline void set_cost_id(int index, ::google::protobuf::uint32 value);
  inline void add_cost_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cost_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cost_id();

  // repeated uint32 cost_num = 5;
  inline int cost_num_size() const;
  inline void clear_cost_num();
  static const int kCostNumFieldNumber = 5;
  inline ::google::protobuf::uint32 cost_num(int index) const;
  inline void set_cost_num(int index, ::google::protobuf::uint32 value);
  inline void add_cost_num(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cost_num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cost_num();

  // repeated uint32 identify_item_id = 6;
  inline int identify_item_id_size() const;
  inline void clear_identify_item_id();
  static const int kIdentifyItemIdFieldNumber = 6;
  inline ::google::protobuf::uint32 identify_item_id(int index) const;
  inline void set_identify_item_id(int index, ::google::protobuf::uint32 value);
  inline void add_identify_item_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      identify_item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_identify_item_id();

  // repeated uint32 identify_item_num = 7;
  inline int identify_item_num_size() const;
  inline void clear_identify_item_num();
  static const int kIdentifyItemNumFieldNumber = 7;
  inline ::google::protobuf::uint32 identify_item_num(int index) const;
  inline void set_identify_item_num(int index, ::google::protobuf::uint32 value);
  inline void add_identify_item_num(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      identify_item_num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_identify_item_num();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sEquipIdentify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_part();
  inline void clear_has_part();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cost_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cost_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > identify_item_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > identify_item_num_;
  ::google::protobuf::uint32 part_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sEquipIdentify* default_instance_;
};
// -------------------------------------------------------------------

class sAttributeBase : public ::google::protobuf::MessageLite {
 public:
  sAttributeBase();
  virtual ~sAttributeBase();

  sAttributeBase(const sAttributeBase& from);

  inline sAttributeBase& operator=(const sAttributeBase& from) {
    CopyFrom(from);
    return *this;
  }

  static const sAttributeBase& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sAttributeBase* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sAttributeBase* other);

  // implements Message ----------------------------------------------

  sAttributeBase* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sAttributeBase& from);
  void MergeFrom(const sAttributeBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 part = 2;
  inline bool has_part() const;
  inline void clear_part();
  static const int kPartFieldNumber = 2;
  inline ::google::protobuf::uint32 part() const;
  inline void set_part(::google::protobuf::uint32 value);

  // optional uint32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 att_id = 4;
  inline bool has_att_id() const;
  inline void clear_att_id();
  static const int kAttIdFieldNumber = 4;
  inline ::google::protobuf::uint32 att_id() const;
  inline void set_att_id(::google::protobuf::uint32 value);

  // optional uint32 att_max = 5;
  inline bool has_att_max() const;
  inline void clear_att_max();
  static const int kAttMaxFieldNumber = 5;
  inline ::google::protobuf::uint32 att_max() const;
  inline void set_att_max(::google::protobuf::uint32 value);

  // optional uint32 att_weight = 6;
  inline bool has_att_weight() const;
  inline void clear_att_weight();
  static const int kAttWeightFieldNumber = 6;
  inline ::google::protobuf::uint32 att_weight() const;
  inline void set_att_weight(::google::protobuf::uint32 value);

  // optional uint32 skill_id = 7;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 7;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // optional uint32 ability = 8;
  inline bool has_ability() const;
  inline void clear_ability();
  static const int kAbilityFieldNumber = 8;
  inline ::google::protobuf::uint32 ability() const;
  inline void set_ability(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sAttributeBase)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_part();
  inline void clear_has_part();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_att_id();
  inline void clear_has_att_id();
  inline void set_has_att_max();
  inline void clear_has_att_max();
  inline void set_has_att_weight();
  inline void clear_has_att_weight();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_ability();
  inline void clear_has_ability();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 part_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 att_id_;
  ::google::protobuf::uint32 att_max_;
  ::google::protobuf::uint32 att_weight_;
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 ability_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sAttributeBase* default_instance_;
};
// -------------------------------------------------------------------

class sCorpsLevel : public ::google::protobuf::MessageLite {
 public:
  sCorpsLevel();
  virtual ~sCorpsLevel();

  sCorpsLevel(const sCorpsLevel& from);

  inline sCorpsLevel& operator=(const sCorpsLevel& from) {
    CopyFrom(from);
    return *this;
  }

  static const sCorpsLevel& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sCorpsLevel* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sCorpsLevel* other);

  // implements Message ----------------------------------------------

  sCorpsLevel* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sCorpsLevel& from);
  void MergeFrom(const sCorpsLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 member_count = 3;
  inline bool has_member_count() const;
  inline void clear_member_count();
  static const int kMemberCountFieldNumber = 3;
  inline ::google::protobuf::uint32 member_count() const;
  inline void set_member_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sCorpsLevel)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_member_count();
  inline void clear_has_member_count();

  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 member_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sCorpsLevel* default_instance_;
};
// -------------------------------------------------------------------

class sVipStats : public ::google::protobuf::MessageLite {
 public:
  sVipStats();
  virtual ~sVipStats();

  sVipStats(const sVipStats& from);

  inline sVipStats& operator=(const sVipStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sVipStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sVipStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sVipStats* other);

  // implements Message ----------------------------------------------

  sVipStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sVipStats& from);
  void MergeFrom(const sVipStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 vip_lv = 1;
  inline bool has_vip_lv() const;
  inline void clear_vip_lv();
  static const int kVipLvFieldNumber = 1;
  inline ::google::protobuf::uint32 vip_lv() const;
  inline void set_vip_lv(::google::protobuf::uint32 value);

  // optional uint32 vip_exp = 2;
  inline bool has_vip_exp() const;
  inline void clear_vip_exp();
  static const int kVipExpFieldNumber = 2;
  inline ::google::protobuf::uint32 vip_exp() const;
  inline void set_vip_exp(::google::protobuf::uint32 value);

  // repeated uint32 vip_oper_times = 3;
  inline int vip_oper_times_size() const;
  inline void clear_vip_oper_times();
  static const int kVipOperTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 vip_oper_times(int index) const;
  inline void set_vip_oper_times(int index, ::google::protobuf::uint32 value);
  inline void add_vip_oper_times(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vip_oper_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vip_oper_times();

  // repeated uint32 vip_function = 4;
  inline int vip_function_size() const;
  inline void clear_vip_function();
  static const int kVipFunctionFieldNumber = 4;
  inline ::google::protobuf::uint32 vip_function(int index) const;
  inline void set_vip_function(int index, ::google::protobuf::uint32 value);
  inline void add_vip_function(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vip_function() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vip_function();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sVipStats)
 private:
  inline void set_has_vip_lv();
  inline void clear_has_vip_lv();
  inline void set_has_vip_exp();
  inline void clear_has_vip_exp();

  ::google::protobuf::uint32 vip_lv_;
  ::google::protobuf::uint32 vip_exp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vip_oper_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vip_function_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sVipStats* default_instance_;
};
// -------------------------------------------------------------------

class sVipCostStats : public ::google::protobuf::MessageLite {
 public:
  sVipCostStats();
  virtual ~sVipCostStats();

  sVipCostStats(const sVipCostStats& from);

  inline sVipCostStats& operator=(const sVipCostStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sVipCostStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sVipCostStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sVipCostStats* other);

  // implements Message ----------------------------------------------

  sVipCostStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sVipCostStats& from);
  void MergeFrom(const sVipCostStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 times = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.eVipOper oper = 2;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 2;
  inline ::jynetwork::proto::eVipOper oper() const;
  inline void set_oper(::jynetwork::proto::eVipOper value);

  // optional uint32 vip_cost = 3;
  inline bool has_vip_cost() const;
  inline void clear_vip_cost();
  static const int kVipCostFieldNumber = 3;
  inline ::google::protobuf::uint32 vip_cost() const;
  inline void set_vip_cost(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sVipCostStats)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_vip_cost();
  inline void clear_has_vip_cost();

  ::google::protobuf::uint32 times_;
  int oper_;
  ::google::protobuf::uint32 vip_cost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sVipCostStats* default_instance_;
};
// -------------------------------------------------------------------

class sServerStats : public ::google::protobuf::MessageLite {
 public:
  sServerStats();
  virtual ~sServerStats();

  sServerStats(const sServerStats& from);

  inline sServerStats& operator=(const sServerStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sServerStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sServerStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sServerStats* other);

  // implements Message ----------------------------------------------

  sServerStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sServerStats& from);
  void MergeFrom(const sServerStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 isRecommend = 4;
  inline bool has_isrecommend() const;
  inline void clear_isrecommend();
  static const int kIsRecommendFieldNumber = 4;
  inline ::google::protobuf::uint32 isrecommend() const;
  inline void set_isrecommend(::google::protobuf::uint32 value);

  // optional uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sServerStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_isrecommend();
  inline void clear_has_isrecommend();
  inline void set_has_status();
  inline void clear_has_status();

  ::std::string* name_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 isrecommend_;
  ::std::string* ip_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sServerStats* default_instance_;
};
// -------------------------------------------------------------------

class sServerItems : public ::google::protobuf::MessageLite {
 public:
  sServerItems();
  virtual ~sServerItems();

  sServerItems(const sServerItems& from);

  inline sServerItems& operator=(const sServerItems& from) {
    CopyFrom(from);
    return *this;
  }

  static const sServerItems& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sServerItems* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sServerItems* other);

  // implements Message ----------------------------------------------

  sServerItems* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sServerItems& from);
  void MergeFrom(const sServerItems& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jynetwork.proto.sServerStats serverItem = 1;
  inline int serveritem_size() const;
  inline void clear_serveritem();
  static const int kServerItemFieldNumber = 1;
  inline const ::jynetwork::proto::sServerStats& serveritem(int index) const;
  inline ::jynetwork::proto::sServerStats* mutable_serveritem(int index);
  inline ::jynetwork::proto::sServerStats* add_serveritem();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sServerStats >&
      serveritem() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sServerStats >*
      mutable_serveritem();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sServerItems)
 private:

  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sServerStats > serveritem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sServerItems* default_instance_;
};
// -------------------------------------------------------------------

class CorpsBossRewardStats : public ::google::protobuf::MessageLite {
 public:
  CorpsBossRewardStats();
  virtual ~CorpsBossRewardStats();

  CorpsBossRewardStats(const CorpsBossRewardStats& from);

  inline CorpsBossRewardStats& operator=(const CorpsBossRewardStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const CorpsBossRewardStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CorpsBossRewardStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CorpsBossRewardStats* other);

  // implements Message ----------------------------------------------

  CorpsBossRewardStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CorpsBossRewardStats& from);
  void MergeFrom(const CorpsBossRewardStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 drop = 2;
  inline bool has_drop() const;
  inline void clear_drop();
  static const int kDropFieldNumber = 2;
  inline ::google::protobuf::uint32 drop() const;
  inline void set_drop(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::jynetwork::proto::sSimpleItem& items(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_items(int index);
  inline ::jynetwork::proto::sSimpleItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:jynetwork.proto.CorpsBossRewardStats)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_drop();
  inline void clear_has_drop();

  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 drop_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static CorpsBossRewardStats* default_instance_;
};
// -------------------------------------------------------------------

class CorpsBossMapStats : public ::google::protobuf::MessageLite {
 public:
  CorpsBossMapStats();
  virtual ~CorpsBossMapStats();

  CorpsBossMapStats(const CorpsBossMapStats& from);

  inline CorpsBossMapStats& operator=(const CorpsBossMapStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const CorpsBossMapStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CorpsBossMapStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CorpsBossMapStats* other);

  // implements Message ----------------------------------------------

  CorpsBossMapStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CorpsBossMapStats& from);
  void MergeFrom(const CorpsBossMapStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // optional uint32 drop_id = 2;
  inline bool has_drop_id() const;
  inline void clear_drop_id();
  static const int kDropIdFieldNumber = 2;
  inline ::google::protobuf::uint32 drop_id() const;
  inline void set_drop_id(::google::protobuf::uint32 value);

  // optional uint32 kill_drop_id = 3;
  inline bool has_kill_drop_id() const;
  inline void clear_kill_drop_id();
  static const int kKillDropIdFieldNumber = 3;
  inline ::google::protobuf::uint32 kill_drop_id() const;
  inline void set_kill_drop_id(::google::protobuf::uint32 value);

  // optional uint32 hunter_point = 4;
  inline bool has_hunter_point() const;
  inline void clear_hunter_point();
  static const int kHunterPointFieldNumber = 4;
  inline ::google::protobuf::uint32 hunter_point() const;
  inline void set_hunter_point(::google::protobuf::uint32 value);

  // repeated .jynetwork.proto.sSimpleItem kill_items = 5;
  inline int kill_items_size() const;
  inline void clear_kill_items();
  static const int kKillItemsFieldNumber = 5;
  inline const ::jynetwork::proto::sSimpleItem& kill_items(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_kill_items(int index);
  inline ::jynetwork::proto::sSimpleItem* add_kill_items();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      kill_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_kill_items();

  // repeated .jynetwork.proto.sSimpleItem items = 6;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 6;
  inline const ::jynetwork::proto::sSimpleItem& items(int index) const;
  inline ::jynetwork::proto::sSimpleItem* mutable_items(int index);
  inline ::jynetwork::proto::sSimpleItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
      mutable_items();

  // optional uint32 boss_hp = 7;
  inline bool has_boss_hp() const;
  inline void clear_boss_hp();
  static const int kBossHpFieldNumber = 7;
  inline ::google::protobuf::uint32 boss_hp() const;
  inline void set_boss_hp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.CorpsBossMapStats)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_drop_id();
  inline void clear_has_drop_id();
  inline void set_has_kill_drop_id();
  inline void clear_has_kill_drop_id();
  inline void set_has_hunter_point();
  inline void clear_has_hunter_point();
  inline void set_has_boss_hp();
  inline void clear_has_boss_hp();

  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 drop_id_;
  ::google::protobuf::uint32 kill_drop_id_;
  ::google::protobuf::uint32 hunter_point_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > kill_items_;
  ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem > items_;
  ::google::protobuf::uint32 boss_hp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static CorpsBossMapStats* default_instance_;
};
// -------------------------------------------------------------------

class sArenaStats : public ::google::protobuf::MessageLite {
 public:
  sArenaStats();
  virtual ~sArenaStats();

  sArenaStats(const sArenaStats& from);

  inline sArenaStats& operator=(const sArenaStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const sArenaStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const sArenaStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(sArenaStats* other);

  // implements Message ----------------------------------------------

  sArenaStats* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const sArenaStats& from);
  void MergeFrom(const sArenaStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 add_min = 2;
  inline bool has_add_min() const;
  inline void clear_add_min();
  static const int kAddMinFieldNumber = 2;
  inline ::google::protobuf::uint32 add_min() const;
  inline void set_add_min(::google::protobuf::uint32 value);

  // optional uint32 add_max = 3;
  inline bool has_add_max() const;
  inline void clear_add_max();
  static const int kAddMaxFieldNumber = 3;
  inline ::google::protobuf::uint32 add_max() const;
  inline void set_add_max(::google::protobuf::uint32 value);

  // optional .jynetwork.proto.sGameStats game_stat = 4;
  inline bool has_game_stat() const;
  inline void clear_game_stat();
  static const int kGameStatFieldNumber = 4;
  inline const ::jynetwork::proto::sGameStats& game_stat() const;
  inline ::jynetwork::proto::sGameStats* mutable_game_stat();
  inline ::jynetwork::proto::sGameStats* release_game_stat();
  inline void set_allocated_game_stat(::jynetwork::proto::sGameStats* game_stat);

  // optional uint32 monster_lv = 5;
  inline bool has_monster_lv() const;
  inline void clear_monster_lv();
  static const int kMonsterLvFieldNumber = 5;
  inline ::google::protobuf::uint32 monster_lv() const;
  inline void set_monster_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jynetwork.proto.sArenaStats)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_add_min();
  inline void clear_has_add_min();
  inline void set_has_add_max();
  inline void clear_has_add_max();
  inline void set_has_game_stat();
  inline void clear_has_game_stat();
  inline void set_has_monster_lv();
  inline void clear_has_monster_lv();

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 add_min_;
  ::jynetwork::proto::sGameStats* game_stat_;
  ::google::protobuf::uint32 add_max_;
  ::google::protobuf::uint32 monster_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_XML_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_XML_2eproto();
  #endif
  friend void protobuf_AssignDesc_XML_2eproto();
  friend void protobuf_ShutdownFile_XML_2eproto();

  void InitAsDefaultInstance();
  static sArenaStats* default_instance_;
};
// ===================================================================


// ===================================================================

// sGameStats

// optional uint32 uid = 1;
inline bool sGameStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGameStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGameStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGameStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sGameStats::uid() const {
  return uid_;
}
inline void sGameStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 hp = 2;
inline bool sGameStats::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGameStats::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGameStats::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGameStats::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 sGameStats::hp() const {
  return hp_;
}
inline void sGameStats::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional float pdamage = 3;
inline bool sGameStats::has_pdamage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sGameStats::set_has_pdamage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sGameStats::clear_has_pdamage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sGameStats::clear_pdamage() {
  pdamage_ = 0;
  clear_has_pdamage();
}
inline float sGameStats::pdamage() const {
  return pdamage_;
}
inline void sGameStats::set_pdamage(float value) {
  set_has_pdamage();
  pdamage_ = value;
}

// optional float despdamage = 4;
inline bool sGameStats::has_despdamage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sGameStats::set_has_despdamage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sGameStats::clear_has_despdamage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sGameStats::clear_despdamage() {
  despdamage_ = 0;
  clear_has_despdamage();
}
inline float sGameStats::despdamage() const {
  return despdamage_;
}
inline void sGameStats::set_despdamage(float value) {
  set_has_despdamage();
  despdamage_ = value;
}

// optional float mdamage = 5;
inline bool sGameStats::has_mdamage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sGameStats::set_has_mdamage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sGameStats::clear_has_mdamage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sGameStats::clear_mdamage() {
  mdamage_ = 0;
  clear_has_mdamage();
}
inline float sGameStats::mdamage() const {
  return mdamage_;
}
inline void sGameStats::set_mdamage(float value) {
  set_has_mdamage();
  mdamage_ = value;
}

// optional float desmdamage = 6;
inline bool sGameStats::has_desmdamage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sGameStats::set_has_desmdamage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sGameStats::clear_has_desmdamage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sGameStats::clear_desmdamage() {
  desmdamage_ = 0;
  clear_has_desmdamage();
}
inline float sGameStats::desmdamage() const {
  return desmdamage_;
}
inline void sGameStats::set_desmdamage(float value) {
  set_has_desmdamage();
  desmdamage_ = value;
}

// optional float strength = 7;
inline bool sGameStats::has_strength() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sGameStats::set_has_strength() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sGameStats::clear_has_strength() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sGameStats::clear_strength() {
  strength_ = 0;
  clear_has_strength();
}
inline float sGameStats::strength() const {
  return strength_;
}
inline void sGameStats::set_strength(float value) {
  set_has_strength();
  strength_ = value;
}

// optional float dexterity = 8;
inline bool sGameStats::has_dexterity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sGameStats::set_has_dexterity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sGameStats::clear_has_dexterity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sGameStats::clear_dexterity() {
  dexterity_ = 0;
  clear_has_dexterity();
}
inline float sGameStats::dexterity() const {
  return dexterity_;
}
inline void sGameStats::set_dexterity(float value) {
  set_has_dexterity();
  dexterity_ = value;
}

// optional float intelligence = 9;
inline bool sGameStats::has_intelligence() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sGameStats::set_has_intelligence() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sGameStats::clear_has_intelligence() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sGameStats::clear_intelligence() {
  intelligence_ = 0;
  clear_has_intelligence();
}
inline float sGameStats::intelligence() const {
  return intelligence_;
}
inline void sGameStats::set_intelligence(float value) {
  set_has_intelligence();
  intelligence_ = value;
}

// optional float stamina = 10;
inline bool sGameStats::has_stamina() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sGameStats::set_has_stamina() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sGameStats::clear_has_stamina() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sGameStats::clear_stamina() {
  stamina_ = 0;
  clear_has_stamina();
}
inline float sGameStats::stamina() const {
  return stamina_;
}
inline void sGameStats::set_stamina(float value) {
  set_has_stamina();
  stamina_ = value;
}

// optional float speed = 11;
inline bool sGameStats::has_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sGameStats::set_has_speed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sGameStats::clear_has_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sGameStats::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float sGameStats::speed() const {
  return speed_;
}
inline void sGameStats::set_speed(float value) {
  set_has_speed();
  speed_ = value;
}

// optional float atkspeed = 12;
inline bool sGameStats::has_atkspeed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sGameStats::set_has_atkspeed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sGameStats::clear_has_atkspeed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sGameStats::clear_atkspeed() {
  atkspeed_ = 0;
  clear_has_atkspeed();
}
inline float sGameStats::atkspeed() const {
  return atkspeed_;
}
inline void sGameStats::set_atkspeed(float value) {
  set_has_atkspeed();
  atkspeed_ = value;
}

// optional float crit = 13;
inline bool sGameStats::has_crit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sGameStats::set_has_crit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sGameStats::clear_has_crit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sGameStats::clear_crit() {
  crit_ = 0;
  clear_has_crit();
}
inline float sGameStats::crit() const {
  return crit_;
}
inline void sGameStats::set_crit(float value) {
  set_has_crit();
  crit_ = value;
}

// optional float perfect = 14;
inline bool sGameStats::has_perfect() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sGameStats::set_has_perfect() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sGameStats::clear_has_perfect() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sGameStats::clear_perfect() {
  perfect_ = 0;
  clear_has_perfect();
}
inline float sGameStats::perfect() const {
  return perfect_;
}
inline void sGameStats::set_perfect(float value) {
  set_has_perfect();
  perfect_ = value;
}

// optional float excellent = 15;
inline bool sGameStats::has_excellent() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sGameStats::set_has_excellent() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sGameStats::clear_has_excellent() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sGameStats::clear_excellent() {
  excellent_ = 0;
  clear_has_excellent();
}
inline float sGameStats::excellent() const {
  return excellent_;
}
inline void sGameStats::set_excellent(float value) {
  set_has_excellent();
  excellent_ = value;
}

// optional float fire = 37;
inline bool sGameStats::has_fire() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sGameStats::set_has_fire() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sGameStats::clear_has_fire() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sGameStats::clear_fire() {
  fire_ = 0;
  clear_has_fire();
}
inline float sGameStats::fire() const {
  return fire_;
}
inline void sGameStats::set_fire(float value) {
  set_has_fire();
  fire_ = value;
}

// optional float resfire = 38;
inline bool sGameStats::has_resfire() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sGameStats::set_has_resfire() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sGameStats::clear_has_resfire() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sGameStats::clear_resfire() {
  resfire_ = 0;
  clear_has_resfire();
}
inline float sGameStats::resfire() const {
  return resfire_;
}
inline void sGameStats::set_resfire(float value) {
  set_has_resfire();
  resfire_ = value;
}

// optional float water = 39;
inline bool sGameStats::has_water() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sGameStats::set_has_water() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sGameStats::clear_has_water() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sGameStats::clear_water() {
  water_ = 0;
  clear_has_water();
}
inline float sGameStats::water() const {
  return water_;
}
inline void sGameStats::set_water(float value) {
  set_has_water();
  water_ = value;
}

// optional float reswater = 40;
inline bool sGameStats::has_reswater() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sGameStats::set_has_reswater() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sGameStats::clear_has_reswater() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sGameStats::clear_reswater() {
  reswater_ = 0;
  clear_has_reswater();
}
inline float sGameStats::reswater() const {
  return reswater_;
}
inline void sGameStats::set_reswater(float value) {
  set_has_reswater();
  reswater_ = value;
}

// optional float wind = 41;
inline bool sGameStats::has_wind() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sGameStats::set_has_wind() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sGameStats::clear_has_wind() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sGameStats::clear_wind() {
  wind_ = 0;
  clear_has_wind();
}
inline float sGameStats::wind() const {
  return wind_;
}
inline void sGameStats::set_wind(float value) {
  set_has_wind();
  wind_ = value;
}

// optional float reswind = 42;
inline bool sGameStats::has_reswind() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sGameStats::set_has_reswind() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sGameStats::clear_has_reswind() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sGameStats::clear_reswind() {
  reswind_ = 0;
  clear_has_reswind();
}
inline float sGameStats::reswind() const {
  return reswind_;
}
inline void sGameStats::set_reswind(float value) {
  set_has_reswind();
  reswind_ = value;
}

// optional float thunder = 43;
inline bool sGameStats::has_thunder() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sGameStats::set_has_thunder() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sGameStats::clear_has_thunder() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sGameStats::clear_thunder() {
  thunder_ = 0;
  clear_has_thunder();
}
inline float sGameStats::thunder() const {
  return thunder_;
}
inline void sGameStats::set_thunder(float value) {
  set_has_thunder();
  thunder_ = value;
}

// optional float resthunder = 44;
inline bool sGameStats::has_resthunder() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sGameStats::set_has_resthunder() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sGameStats::clear_has_resthunder() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sGameStats::clear_resthunder() {
  resthunder_ = 0;
  clear_has_resthunder();
}
inline float sGameStats::resthunder() const {
  return resthunder_;
}
inline void sGameStats::set_resthunder(float value) {
  set_has_resthunder();
  resthunder_ = value;
}

// optional float bolt = 16;
inline bool sGameStats::has_bolt() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sGameStats::set_has_bolt() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sGameStats::clear_has_bolt() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sGameStats::clear_bolt() {
  bolt_ = 0;
  clear_has_bolt();
}
inline float sGameStats::bolt() const {
  return bolt_;
}
inline void sGameStats::set_bolt(float value) {
  set_has_bolt();
  bolt_ = value;
}

// optional float resbolt = 17;
inline bool sGameStats::has_resbolt() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sGameStats::set_has_resbolt() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sGameStats::clear_has_resbolt() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sGameStats::clear_resbolt() {
  resbolt_ = 0;
  clear_has_resbolt();
}
inline float sGameStats::resbolt() const {
  return resbolt_;
}
inline void sGameStats::set_resbolt(float value) {
  set_has_resbolt();
  resbolt_ = value;
}

// optional float dark = 18;
inline bool sGameStats::has_dark() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sGameStats::set_has_dark() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sGameStats::clear_has_dark() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sGameStats::clear_dark() {
  dark_ = 0;
  clear_has_dark();
}
inline float sGameStats::dark() const {
  return dark_;
}
inline void sGameStats::set_dark(float value) {
  set_has_dark();
  dark_ = value;
}

// optional float resdark = 19;
inline bool sGameStats::has_resdark() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void sGameStats::set_has_resdark() {
  _has_bits_[0] |= 0x04000000u;
}
inline void sGameStats::clear_has_resdark() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void sGameStats::clear_resdark() {
  resdark_ = 0;
  clear_has_resdark();
}
inline float sGameStats::resdark() const {
  return resdark_;
}
inline void sGameStats::set_resdark(float value) {
  set_has_resdark();
  resdark_ = value;
}

// optional float poison = 20;
inline bool sGameStats::has_poison() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void sGameStats::set_has_poison() {
  _has_bits_[0] |= 0x08000000u;
}
inline void sGameStats::clear_has_poison() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void sGameStats::clear_poison() {
  poison_ = 0;
  clear_has_poison();
}
inline float sGameStats::poison() const {
  return poison_;
}
inline void sGameStats::set_poison(float value) {
  set_has_poison();
  poison_ = value;
}

// optional float respoison = 21;
inline bool sGameStats::has_respoison() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void sGameStats::set_has_respoison() {
  _has_bits_[0] |= 0x10000000u;
}
inline void sGameStats::clear_has_respoison() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void sGameStats::clear_respoison() {
  respoison_ = 0;
  clear_has_respoison();
}
inline float sGameStats::respoison() const {
  return respoison_;
}
inline void sGameStats::set_respoison(float value) {
  set_has_respoison();
  respoison_ = value;
}

// optional float pickrange = 22;
inline bool sGameStats::has_pickrange() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void sGameStats::set_has_pickrange() {
  _has_bits_[0] |= 0x20000000u;
}
inline void sGameStats::clear_has_pickrange() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void sGameStats::clear_pickrange() {
  pickrange_ = 0;
  clear_has_pickrange();
}
inline float sGameStats::pickrange() const {
  return pickrange_;
}
inline void sGameStats::set_pickrange(float value) {
  set_has_pickrange();
  pickrange_ = value;
}

// optional float hprecover = 23;
inline bool sGameStats::has_hprecover() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void sGameStats::set_has_hprecover() {
  _has_bits_[0] |= 0x40000000u;
}
inline void sGameStats::clear_has_hprecover() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void sGameStats::clear_hprecover() {
  hprecover_ = 0;
  clear_has_hprecover();
}
inline float sGameStats::hprecover() const {
  return hprecover_;
}
inline void sGameStats::set_hprecover(float value) {
  set_has_hprecover();
  hprecover_ = value;
}

// optional float mprecover = 24;
inline bool sGameStats::has_mprecover() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void sGameStats::set_has_mprecover() {
  _has_bits_[0] |= 0x80000000u;
}
inline void sGameStats::clear_has_mprecover() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void sGameStats::clear_mprecover() {
  mprecover_ = 0;
  clear_has_mprecover();
}
inline float sGameStats::mprecover() const {
  return mprecover_;
}
inline void sGameStats::set_mprecover(float value) {
  set_has_mprecover();
  mprecover_ = value;
}

// optional float chaosrate = 25;
inline bool sGameStats::has_chaosrate() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void sGameStats::set_has_chaosrate() {
  _has_bits_[1] |= 0x00000001u;
}
inline void sGameStats::clear_has_chaosrate() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void sGameStats::clear_chaosrate() {
  chaosrate_ = 0;
  clear_has_chaosrate();
}
inline float sGameStats::chaosrate() const {
  return chaosrate_;
}
inline void sGameStats::set_chaosrate(float value) {
  set_has_chaosrate();
  chaosrate_ = value;
}

// optional float reschaosrate = 26;
inline bool sGameStats::has_reschaosrate() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void sGameStats::set_has_reschaosrate() {
  _has_bits_[1] |= 0x00000002u;
}
inline void sGameStats::clear_has_reschaosrate() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void sGameStats::clear_reschaosrate() {
  reschaosrate_ = 0;
  clear_has_reschaosrate();
}
inline float sGameStats::reschaosrate() const {
  return reschaosrate_;
}
inline void sGameStats::set_reschaosrate(float value) {
  set_has_reschaosrate();
  reschaosrate_ = value;
}

// optional float sealrate = 27;
inline bool sGameStats::has_sealrate() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void sGameStats::set_has_sealrate() {
  _has_bits_[1] |= 0x00000004u;
}
inline void sGameStats::clear_has_sealrate() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void sGameStats::clear_sealrate() {
  sealrate_ = 0;
  clear_has_sealrate();
}
inline float sGameStats::sealrate() const {
  return sealrate_;
}
inline void sGameStats::set_sealrate(float value) {
  set_has_sealrate();
  sealrate_ = value;
}

// optional float rescsealrate = 28;
inline bool sGameStats::has_rescsealrate() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void sGameStats::set_has_rescsealrate() {
  _has_bits_[1] |= 0x00000008u;
}
inline void sGameStats::clear_has_rescsealrate() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void sGameStats::clear_rescsealrate() {
  rescsealrate_ = 0;
  clear_has_rescsealrate();
}
inline float sGameStats::rescsealrate() const {
  return rescsealrate_;
}
inline void sGameStats::set_rescsealrate(float value) {
  set_has_rescsealrate();
  rescsealrate_ = value;
}

// optional float freezerate = 29;
inline bool sGameStats::has_freezerate() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void sGameStats::set_has_freezerate() {
  _has_bits_[1] |= 0x00000010u;
}
inline void sGameStats::clear_has_freezerate() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void sGameStats::clear_freezerate() {
  freezerate_ = 0;
  clear_has_freezerate();
}
inline float sGameStats::freezerate() const {
  return freezerate_;
}
inline void sGameStats::set_freezerate(float value) {
  set_has_freezerate();
  freezerate_ = value;
}

// optional float resfreezerate = 30;
inline bool sGameStats::has_resfreezerate() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void sGameStats::set_has_resfreezerate() {
  _has_bits_[1] |= 0x00000020u;
}
inline void sGameStats::clear_has_resfreezerate() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void sGameStats::clear_resfreezerate() {
  resfreezerate_ = 0;
  clear_has_resfreezerate();
}
inline float sGameStats::resfreezerate() const {
  return resfreezerate_;
}
inline void sGameStats::set_resfreezerate(float value) {
  set_has_resfreezerate();
  resfreezerate_ = value;
}

// optional int32 battle_abilty = 31;
inline bool sGameStats::has_battle_abilty() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void sGameStats::set_has_battle_abilty() {
  _has_bits_[1] |= 0x00000040u;
}
inline void sGameStats::clear_has_battle_abilty() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void sGameStats::clear_battle_abilty() {
  battle_abilty_ = 0;
  clear_has_battle_abilty();
}
inline ::google::protobuf::int32 sGameStats::battle_abilty() const {
  return battle_abilty_;
}
inline void sGameStats::set_battle_abilty(::google::protobuf::int32 value) {
  set_has_battle_abilty();
  battle_abilty_ = value;
}

// optional float mortal = 32;
inline bool sGameStats::has_mortal() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void sGameStats::set_has_mortal() {
  _has_bits_[1] |= 0x00000080u;
}
inline void sGameStats::clear_has_mortal() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void sGameStats::clear_mortal() {
  mortal_ = 0;
  clear_has_mortal();
}
inline float sGameStats::mortal() const {
  return mortal_;
}
inline void sGameStats::set_mortal(float value) {
  set_has_mortal();
  mortal_ = value;
}

// optional float toughness = 33;
inline bool sGameStats::has_toughness() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void sGameStats::set_has_toughness() {
  _has_bits_[1] |= 0x00000100u;
}
inline void sGameStats::clear_has_toughness() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void sGameStats::clear_toughness() {
  toughness_ = 0;
  clear_has_toughness();
}
inline float sGameStats::toughness() const {
  return toughness_;
}
inline void sGameStats::set_toughness(float value) {
  set_has_toughness();
  toughness_ = value;
}

// optional float hppercent = 45;
inline bool sGameStats::has_hppercent() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void sGameStats::set_has_hppercent() {
  _has_bits_[1] |= 0x00000200u;
}
inline void sGameStats::clear_has_hppercent() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void sGameStats::clear_hppercent() {
  hppercent_ = 0;
  clear_has_hppercent();
}
inline float sGameStats::hppercent() const {
  return hppercent_;
}
inline void sGameStats::set_hppercent(float value) {
  set_has_hppercent();
  hppercent_ = value;
}

// optional float pdamagepercent = 46;
inline bool sGameStats::has_pdamagepercent() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void sGameStats::set_has_pdamagepercent() {
  _has_bits_[1] |= 0x00000400u;
}
inline void sGameStats::clear_has_pdamagepercent() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void sGameStats::clear_pdamagepercent() {
  pdamagepercent_ = 0;
  clear_has_pdamagepercent();
}
inline float sGameStats::pdamagepercent() const {
  return pdamagepercent_;
}
inline void sGameStats::set_pdamagepercent(float value) {
  set_has_pdamagepercent();
  pdamagepercent_ = value;
}

// optional float despdamagepercent = 47;
inline bool sGameStats::has_despdamagepercent() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void sGameStats::set_has_despdamagepercent() {
  _has_bits_[1] |= 0x00000800u;
}
inline void sGameStats::clear_has_despdamagepercent() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void sGameStats::clear_despdamagepercent() {
  despdamagepercent_ = 0;
  clear_has_despdamagepercent();
}
inline float sGameStats::despdamagepercent() const {
  return despdamagepercent_;
}
inline void sGameStats::set_despdamagepercent(float value) {
  set_has_despdamagepercent();
  despdamagepercent_ = value;
}

// optional float mdamagepercent = 48;
inline bool sGameStats::has_mdamagepercent() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void sGameStats::set_has_mdamagepercent() {
  _has_bits_[1] |= 0x00001000u;
}
inline void sGameStats::clear_has_mdamagepercent() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void sGameStats::clear_mdamagepercent() {
  mdamagepercent_ = 0;
  clear_has_mdamagepercent();
}
inline float sGameStats::mdamagepercent() const {
  return mdamagepercent_;
}
inline void sGameStats::set_mdamagepercent(float value) {
  set_has_mdamagepercent();
  mdamagepercent_ = value;
}

// optional float desmdamagepercent = 49;
inline bool sGameStats::has_desmdamagepercent() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void sGameStats::set_has_desmdamagepercent() {
  _has_bits_[1] |= 0x00002000u;
}
inline void sGameStats::clear_has_desmdamagepercent() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void sGameStats::clear_desmdamagepercent() {
  desmdamagepercent_ = 0;
  clear_has_desmdamagepercent();
}
inline float sGameStats::desmdamagepercent() const {
  return desmdamagepercent_;
}
inline void sGameStats::set_desmdamagepercent(float value) {
  set_has_desmdamagepercent();
  desmdamagepercent_ = value;
}

// optional float mortalpercent = 50;
inline bool sGameStats::has_mortalpercent() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void sGameStats::set_has_mortalpercent() {
  _has_bits_[1] |= 0x00004000u;
}
inline void sGameStats::clear_has_mortalpercent() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void sGameStats::clear_mortalpercent() {
  mortalpercent_ = 0;
  clear_has_mortalpercent();
}
inline float sGameStats::mortalpercent() const {
  return mortalpercent_;
}
inline void sGameStats::set_mortalpercent(float value) {
  set_has_mortalpercent();
  mortalpercent_ = value;
}

// optional float toughnesspercent = 51;
inline bool sGameStats::has_toughnesspercent() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void sGameStats::set_has_toughnesspercent() {
  _has_bits_[1] |= 0x00008000u;
}
inline void sGameStats::clear_has_toughnesspercent() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void sGameStats::clear_toughnesspercent() {
  toughnesspercent_ = 0;
  clear_has_toughnesspercent();
}
inline float sGameStats::toughnesspercent() const {
  return toughnesspercent_;
}
inline void sGameStats::set_toughnesspercent(float value) {
  set_has_toughnesspercent();
  toughnesspercent_ = value;
}

// optional float firepercent = 52;
inline bool sGameStats::has_firepercent() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void sGameStats::set_has_firepercent() {
  _has_bits_[1] |= 0x00010000u;
}
inline void sGameStats::clear_has_firepercent() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void sGameStats::clear_firepercent() {
  firepercent_ = 0;
  clear_has_firepercent();
}
inline float sGameStats::firepercent() const {
  return firepercent_;
}
inline void sGameStats::set_firepercent(float value) {
  set_has_firepercent();
  firepercent_ = value;
}

// optional float waterpecent = 53;
inline bool sGameStats::has_waterpecent() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void sGameStats::set_has_waterpecent() {
  _has_bits_[1] |= 0x00020000u;
}
inline void sGameStats::clear_has_waterpecent() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void sGameStats::clear_waterpecent() {
  waterpecent_ = 0;
  clear_has_waterpecent();
}
inline float sGameStats::waterpecent() const {
  return waterpecent_;
}
inline void sGameStats::set_waterpecent(float value) {
  set_has_waterpecent();
  waterpecent_ = value;
}

// optional float windpercent = 54;
inline bool sGameStats::has_windpercent() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void sGameStats::set_has_windpercent() {
  _has_bits_[1] |= 0x00040000u;
}
inline void sGameStats::clear_has_windpercent() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void sGameStats::clear_windpercent() {
  windpercent_ = 0;
  clear_has_windpercent();
}
inline float sGameStats::windpercent() const {
  return windpercent_;
}
inline void sGameStats::set_windpercent(float value) {
  set_has_windpercent();
  windpercent_ = value;
}

// optional float thunderpercent = 55;
inline bool sGameStats::has_thunderpercent() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void sGameStats::set_has_thunderpercent() {
  _has_bits_[1] |= 0x00080000u;
}
inline void sGameStats::clear_has_thunderpercent() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void sGameStats::clear_thunderpercent() {
  thunderpercent_ = 0;
  clear_has_thunderpercent();
}
inline float sGameStats::thunderpercent() const {
  return thunderpercent_;
}
inline void sGameStats::set_thunderpercent(float value) {
  set_has_thunderpercent();
  thunderpercent_ = value;
}

// optional float boltpercent = 56;
inline bool sGameStats::has_boltpercent() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void sGameStats::set_has_boltpercent() {
  _has_bits_[1] |= 0x00100000u;
}
inline void sGameStats::clear_has_boltpercent() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void sGameStats::clear_boltpercent() {
  boltpercent_ = 0;
  clear_has_boltpercent();
}
inline float sGameStats::boltpercent() const {
  return boltpercent_;
}
inline void sGameStats::set_boltpercent(float value) {
  set_has_boltpercent();
  boltpercent_ = value;
}

// optional float darkpercent = 57;
inline bool sGameStats::has_darkpercent() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void sGameStats::set_has_darkpercent() {
  _has_bits_[1] |= 0x00200000u;
}
inline void sGameStats::clear_has_darkpercent() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void sGameStats::clear_darkpercent() {
  darkpercent_ = 0;
  clear_has_darkpercent();
}
inline float sGameStats::darkpercent() const {
  return darkpercent_;
}
inline void sGameStats::set_darkpercent(float value) {
  set_has_darkpercent();
  darkpercent_ = value;
}

// optional uint32 attribute_calc = 34;
inline bool sGameStats::has_attribute_calc() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void sGameStats::set_has_attribute_calc() {
  _has_bits_[1] |= 0x00400000u;
}
inline void sGameStats::clear_has_attribute_calc() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void sGameStats::clear_attribute_calc() {
  attribute_calc_ = 0u;
  clear_has_attribute_calc();
}
inline ::google::protobuf::uint32 sGameStats::attribute_calc() const {
  return attribute_calc_;
}
inline void sGameStats::set_attribute_calc(::google::protobuf::uint32 value) {
  set_has_attribute_calc();
  attribute_calc_ = value;
}

// optional int32 owner_level = 35;
inline bool sGameStats::has_owner_level() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void sGameStats::set_has_owner_level() {
  _has_bits_[1] |= 0x00800000u;
}
inline void sGameStats::clear_has_owner_level() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void sGameStats::clear_owner_level() {
  owner_level_ = 0;
  clear_has_owner_level();
}
inline ::google::protobuf::int32 sGameStats::owner_level() const {
  return owner_level_;
}
inline void sGameStats::set_owner_level(::google::protobuf::int32 value) {
  set_has_owner_level();
  owner_level_ = value;
}

// optional float percent = 36;
inline bool sGameStats::has_percent() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void sGameStats::set_has_percent() {
  _has_bits_[1] |= 0x01000000u;
}
inline void sGameStats::clear_has_percent() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void sGameStats::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline float sGameStats::percent() const {
  return percent_;
}
inline void sGameStats::set_percent(float value) {
  set_has_percent();
  percent_ = value;
}

// optional float card_ability = 58;
inline bool sGameStats::has_card_ability() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void sGameStats::set_has_card_ability() {
  _has_bits_[1] |= 0x02000000u;
}
inline void sGameStats::clear_has_card_ability() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void sGameStats::clear_card_ability() {
  card_ability_ = 0;
  clear_has_card_ability();
}
inline float sGameStats::card_ability() const {
  return card_ability_;
}
inline void sGameStats::set_card_ability(float value) {
  set_has_card_ability();
  card_ability_ = value;
}

// optional float dmg_firepercent = 59;
inline bool sGameStats::has_dmg_firepercent() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void sGameStats::set_has_dmg_firepercent() {
  _has_bits_[1] |= 0x04000000u;
}
inline void sGameStats::clear_has_dmg_firepercent() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void sGameStats::clear_dmg_firepercent() {
  dmg_firepercent_ = 0;
  clear_has_dmg_firepercent();
}
inline float sGameStats::dmg_firepercent() const {
  return dmg_firepercent_;
}
inline void sGameStats::set_dmg_firepercent(float value) {
  set_has_dmg_firepercent();
  dmg_firepercent_ = value;
}

// optional float dmg_waterpercent = 60;
inline bool sGameStats::has_dmg_waterpercent() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void sGameStats::set_has_dmg_waterpercent() {
  _has_bits_[1] |= 0x08000000u;
}
inline void sGameStats::clear_has_dmg_waterpercent() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void sGameStats::clear_dmg_waterpercent() {
  dmg_waterpercent_ = 0;
  clear_has_dmg_waterpercent();
}
inline float sGameStats::dmg_waterpercent() const {
  return dmg_waterpercent_;
}
inline void sGameStats::set_dmg_waterpercent(float value) {
  set_has_dmg_waterpercent();
  dmg_waterpercent_ = value;
}

// optional float dmg_windpercent = 61;
inline bool sGameStats::has_dmg_windpercent() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void sGameStats::set_has_dmg_windpercent() {
  _has_bits_[1] |= 0x10000000u;
}
inline void sGameStats::clear_has_dmg_windpercent() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void sGameStats::clear_dmg_windpercent() {
  dmg_windpercent_ = 0;
  clear_has_dmg_windpercent();
}
inline float sGameStats::dmg_windpercent() const {
  return dmg_windpercent_;
}
inline void sGameStats::set_dmg_windpercent(float value) {
  set_has_dmg_windpercent();
  dmg_windpercent_ = value;
}

// optional float dmg_thunderpercent = 62;
inline bool sGameStats::has_dmg_thunderpercent() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void sGameStats::set_has_dmg_thunderpercent() {
  _has_bits_[1] |= 0x20000000u;
}
inline void sGameStats::clear_has_dmg_thunderpercent() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void sGameStats::clear_dmg_thunderpercent() {
  dmg_thunderpercent_ = 0;
  clear_has_dmg_thunderpercent();
}
inline float sGameStats::dmg_thunderpercent() const {
  return dmg_thunderpercent_;
}
inline void sGameStats::set_dmg_thunderpercent(float value) {
  set_has_dmg_thunderpercent();
  dmg_thunderpercent_ = value;
}

// optional float dmg_boltpercent = 63;
inline bool sGameStats::has_dmg_boltpercent() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void sGameStats::set_has_dmg_boltpercent() {
  _has_bits_[1] |= 0x40000000u;
}
inline void sGameStats::clear_has_dmg_boltpercent() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void sGameStats::clear_dmg_boltpercent() {
  dmg_boltpercent_ = 0;
  clear_has_dmg_boltpercent();
}
inline float sGameStats::dmg_boltpercent() const {
  return dmg_boltpercent_;
}
inline void sGameStats::set_dmg_boltpercent(float value) {
  set_has_dmg_boltpercent();
  dmg_boltpercent_ = value;
}

// optional float dmg_darkpercent = 64;
inline bool sGameStats::has_dmg_darkpercent() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void sGameStats::set_has_dmg_darkpercent() {
  _has_bits_[1] |= 0x80000000u;
}
inline void sGameStats::clear_has_dmg_darkpercent() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void sGameStats::clear_dmg_darkpercent() {
  dmg_darkpercent_ = 0;
  clear_has_dmg_darkpercent();
}
inline float sGameStats::dmg_darkpercent() const {
  return dmg_darkpercent_;
}
inline void sGameStats::set_dmg_darkpercent(float value) {
  set_has_dmg_darkpercent();
  dmg_darkpercent_ = value;
}

// -------------------------------------------------------------------

// sItemStats

// optional uint32 uid = 1;
inline bool sItemStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sItemStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sItemStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sItemStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sItemStats::uid() const {
  return uid_;
}
inline void sItemStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .jynetwork.proto.ePackType packtype = 2;
inline bool sItemStats::has_packtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sItemStats::set_has_packtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sItemStats::clear_has_packtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sItemStats::clear_packtype() {
  packtype_ = 0;
  clear_has_packtype();
}
inline ::jynetwork::proto::ePackType sItemStats::packtype() const {
  return static_cast< ::jynetwork::proto::ePackType >(packtype_);
}
inline void sItemStats::set_packtype(::jynetwork::proto::ePackType value) {
  assert(::jynetwork::proto::ePackType_IsValid(value));
  set_has_packtype();
  packtype_ = value;
}

// optional .jynetwork.proto.eItemType itemtype = 3;
inline bool sItemStats::has_itemtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sItemStats::set_has_itemtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sItemStats::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sItemStats::clear_itemtype() {
  itemtype_ = 0;
  clear_has_itemtype();
}
inline ::jynetwork::proto::eItemType sItemStats::itemtype() const {
  return static_cast< ::jynetwork::proto::eItemType >(itemtype_);
}
inline void sItemStats::set_itemtype(::jynetwork::proto::eItemType value) {
  assert(::jynetwork::proto::eItemType_IsValid(value));
  set_has_itemtype();
  itemtype_ = value;
}

// optional uint32 namelocaleid = 4;
inline bool sItemStats::has_namelocaleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sItemStats::set_has_namelocaleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sItemStats::clear_has_namelocaleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sItemStats::clear_namelocaleid() {
  namelocaleid_ = 0u;
  clear_has_namelocaleid();
}
inline ::google::protobuf::uint32 sItemStats::namelocaleid() const {
  return namelocaleid_;
}
inline void sItemStats::set_namelocaleid(::google::protobuf::uint32 value) {
  set_has_namelocaleid();
  namelocaleid_ = value;
}

// optional string itemicon = 5;
inline bool sItemStats::has_itemicon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sItemStats::set_has_itemicon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sItemStats::clear_has_itemicon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sItemStats::clear_itemicon() {
  if (itemicon_ != &::google::protobuf::internal::kEmptyString) {
    itemicon_->clear();
  }
  clear_has_itemicon();
}
inline const ::std::string& sItemStats::itemicon() const {
  return *itemicon_;
}
inline void sItemStats::set_itemicon(const ::std::string& value) {
  set_has_itemicon();
  if (itemicon_ == &::google::protobuf::internal::kEmptyString) {
    itemicon_ = new ::std::string;
  }
  itemicon_->assign(value);
}
inline void sItemStats::set_itemicon(const char* value) {
  set_has_itemicon();
  if (itemicon_ == &::google::protobuf::internal::kEmptyString) {
    itemicon_ = new ::std::string;
  }
  itemicon_->assign(value);
}
inline void sItemStats::set_itemicon(const char* value, size_t size) {
  set_has_itemicon();
  if (itemicon_ == &::google::protobuf::internal::kEmptyString) {
    itemicon_ = new ::std::string;
  }
  itemicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sItemStats::mutable_itemicon() {
  set_has_itemicon();
  if (itemicon_ == &::google::protobuf::internal::kEmptyString) {
    itemicon_ = new ::std::string;
  }
  return itemicon_;
}
inline ::std::string* sItemStats::release_itemicon() {
  clear_has_itemicon();
  if (itemicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemicon_;
    itemicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sItemStats::set_allocated_itemicon(::std::string* itemicon) {
  if (itemicon_ != &::google::protobuf::internal::kEmptyString) {
    delete itemicon_;
  }
  if (itemicon) {
    set_has_itemicon();
    itemicon_ = itemicon;
  } else {
    clear_has_itemicon();
    itemicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 describelocaleid = 6;
inline bool sItemStats::has_describelocaleid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sItemStats::set_has_describelocaleid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sItemStats::clear_has_describelocaleid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sItemStats::clear_describelocaleid() {
  describelocaleid_ = 0u;
  clear_has_describelocaleid();
}
inline ::google::protobuf::uint32 sItemStats::describelocaleid() const {
  return describelocaleid_;
}
inline void sItemStats::set_describelocaleid(::google::protobuf::uint32 value) {
  set_has_describelocaleid();
  describelocaleid_ = value;
}

// optional uint32 itemcolor = 7;
inline bool sItemStats::has_itemcolor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sItemStats::set_has_itemcolor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sItemStats::clear_has_itemcolor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sItemStats::clear_itemcolor() {
  itemcolor_ = 0u;
  clear_has_itemcolor();
}
inline ::google::protobuf::uint32 sItemStats::itemcolor() const {
  return itemcolor_;
}
inline void sItemStats::set_itemcolor(::google::protobuf::uint32 value) {
  set_has_itemcolor();
  itemcolor_ = value;
}

// optional uint32 stack = 8;
inline bool sItemStats::has_stack() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sItemStats::set_has_stack() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sItemStats::clear_has_stack() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sItemStats::clear_stack() {
  stack_ = 0u;
  clear_has_stack();
}
inline ::google::protobuf::uint32 sItemStats::stack() const {
  return stack_;
}
inline void sItemStats::set_stack(::google::protobuf::uint32 value) {
  set_has_stack();
  stack_ = value;
}

// optional uint32 salevalue = 9;
inline bool sItemStats::has_salevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sItemStats::set_has_salevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sItemStats::clear_has_salevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sItemStats::clear_salevalue() {
  salevalue_ = 0u;
  clear_has_salevalue();
}
inline ::google::protobuf::uint32 sItemStats::salevalue() const {
  return salevalue_;
}
inline void sItemStats::set_salevalue(::google::protobuf::uint32 value) {
  set_has_salevalue();
  salevalue_ = value;
}

// optional .jynetwork.proto.eItemFuncType effecttype = 10;
inline bool sItemStats::has_effecttype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sItemStats::set_has_effecttype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sItemStats::clear_has_effecttype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sItemStats::clear_effecttype() {
  effecttype_ = 0;
  clear_has_effecttype();
}
inline ::jynetwork::proto::eItemFuncType sItemStats::effecttype() const {
  return static_cast< ::jynetwork::proto::eItemFuncType >(effecttype_);
}
inline void sItemStats::set_effecttype(::jynetwork::proto::eItemFuncType value) {
  assert(::jynetwork::proto::eItemFuncType_IsValid(value));
  set_has_effecttype();
  effecttype_ = value;
}

// optional uint32 effectvalue = 11;
inline bool sItemStats::has_effectvalue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sItemStats::set_has_effectvalue() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sItemStats::clear_has_effectvalue() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sItemStats::clear_effectvalue() {
  effectvalue_ = 0u;
  clear_has_effectvalue();
}
inline ::google::protobuf::uint32 sItemStats::effectvalue() const {
  return effectvalue_;
}
inline void sItemStats::set_effectvalue(::google::protobuf::uint32 value) {
  set_has_effectvalue();
  effectvalue_ = value;
}

// optional uint32 lvlimit = 12;
inline bool sItemStats::has_lvlimit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sItemStats::set_has_lvlimit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sItemStats::clear_has_lvlimit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sItemStats::clear_lvlimit() {
  lvlimit_ = 0u;
  clear_has_lvlimit();
}
inline ::google::protobuf::uint32 sItemStats::lvlimit() const {
  return lvlimit_;
}
inline void sItemStats::set_lvlimit(::google::protobuf::uint32 value) {
  set_has_lvlimit();
  lvlimit_ = value;
}

// optional uint32 viplimit = 13;
inline bool sItemStats::has_viplimit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sItemStats::set_has_viplimit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sItemStats::clear_has_viplimit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sItemStats::clear_viplimit() {
  viplimit_ = 0u;
  clear_has_viplimit();
}
inline ::google::protobuf::uint32 sItemStats::viplimit() const {
  return viplimit_;
}
inline void sItemStats::set_viplimit(::google::protobuf::uint32 value) {
  set_has_viplimit();
  viplimit_ = value;
}

// optional uint32 traceid = 14;
inline bool sItemStats::has_traceid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sItemStats::set_has_traceid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sItemStats::clear_has_traceid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sItemStats::clear_traceid() {
  traceid_ = 0u;
  clear_has_traceid();
}
inline ::google::protobuf::uint32 sItemStats::traceid() const {
  return traceid_;
}
inline void sItemStats::set_traceid(::google::protobuf::uint32 value) {
  set_has_traceid();
  traceid_ = value;
}

// optional uint32 orderid = 15;
inline bool sItemStats::has_orderid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sItemStats::set_has_orderid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sItemStats::clear_has_orderid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sItemStats::clear_orderid() {
  orderid_ = 0u;
  clear_has_orderid();
}
inline ::google::protobuf::uint32 sItemStats::orderid() const {
  return orderid_;
}
inline void sItemStats::set_orderid(::google::protobuf::uint32 value) {
  set_has_orderid();
  orderid_ = value;
}

// optional uint32 itemduang = 16;
inline bool sItemStats::has_itemduang() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sItemStats::set_has_itemduang() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sItemStats::clear_has_itemduang() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sItemStats::clear_itemduang() {
  itemduang_ = 0u;
  clear_has_itemduang();
}
inline ::google::protobuf::uint32 sItemStats::itemduang() const {
  return itemduang_;
}
inline void sItemStats::set_itemduang(::google::protobuf::uint32 value) {
  set_has_itemduang();
  itemduang_ = value;
}

// optional uint32 itemTag = 17;
inline bool sItemStats::has_itemtag() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sItemStats::set_has_itemtag() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sItemStats::clear_has_itemtag() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sItemStats::clear_itemtag() {
  itemtag_ = 0u;
  clear_has_itemtag();
}
inline ::google::protobuf::uint32 sItemStats::itemtag() const {
  return itemtag_;
}
inline void sItemStats::set_itemtag(::google::protobuf::uint32 value) {
  set_has_itemtag();
  itemtag_ = value;
}

// optional uint32 moneytype = 18;
inline bool sItemStats::has_moneytype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sItemStats::set_has_moneytype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sItemStats::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sItemStats::clear_moneytype() {
  moneytype_ = 0u;
  clear_has_moneytype();
}
inline ::google::protobuf::uint32 sItemStats::moneytype() const {
  return moneytype_;
}
inline void sItemStats::set_moneytype(::google::protobuf::uint32 value) {
  set_has_moneytype();
  moneytype_ = value;
}

// -------------------------------------------------------------------

// sEquipStats

// optional uint32 uid = 1;
inline bool sEquipStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEquipStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEquipStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEquipStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEquipStats::uid() const {
  return uid_;
}
inline void sEquipStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 equipname = 3;
inline bool sEquipStats::has_equipname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEquipStats::set_has_equipname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEquipStats::clear_has_equipname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEquipStats::clear_equipname() {
  equipname_ = 0u;
  clear_has_equipname();
}
inline ::google::protobuf::uint32 sEquipStats::equipname() const {
  return equipname_;
}
inline void sEquipStats::set_equipname(::google::protobuf::uint32 value) {
  set_has_equipname();
  equipname_ = value;
}

// optional .jynetwork.proto.eQuipPart equippart = 4;
inline bool sEquipStats::has_equippart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sEquipStats::set_has_equippart() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sEquipStats::clear_has_equippart() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sEquipStats::clear_equippart() {
  equippart_ = 1;
  clear_has_equippart();
}
inline ::jynetwork::proto::eQuipPart sEquipStats::equippart() const {
  return static_cast< ::jynetwork::proto::eQuipPart >(equippart_);
}
inline void sEquipStats::set_equippart(::jynetwork::proto::eQuipPart value) {
  assert(::jynetwork::proto::eQuipPart_IsValid(value));
  set_has_equippart();
  equippart_ = value;
}

// optional string equipicon = 5;
inline bool sEquipStats::has_equipicon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sEquipStats::set_has_equipicon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sEquipStats::clear_has_equipicon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sEquipStats::clear_equipicon() {
  if (equipicon_ != &::google::protobuf::internal::kEmptyString) {
    equipicon_->clear();
  }
  clear_has_equipicon();
}
inline const ::std::string& sEquipStats::equipicon() const {
  return *equipicon_;
}
inline void sEquipStats::set_equipicon(const ::std::string& value) {
  set_has_equipicon();
  if (equipicon_ == &::google::protobuf::internal::kEmptyString) {
    equipicon_ = new ::std::string;
  }
  equipicon_->assign(value);
}
inline void sEquipStats::set_equipicon(const char* value) {
  set_has_equipicon();
  if (equipicon_ == &::google::protobuf::internal::kEmptyString) {
    equipicon_ = new ::std::string;
  }
  equipicon_->assign(value);
}
inline void sEquipStats::set_equipicon(const char* value, size_t size) {
  set_has_equipicon();
  if (equipicon_ == &::google::protobuf::internal::kEmptyString) {
    equipicon_ = new ::std::string;
  }
  equipicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEquipStats::mutable_equipicon() {
  set_has_equipicon();
  if (equipicon_ == &::google::protobuf::internal::kEmptyString) {
    equipicon_ = new ::std::string;
  }
  return equipicon_;
}
inline ::std::string* sEquipStats::release_equipicon() {
  clear_has_equipicon();
  if (equipicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equipicon_;
    equipicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEquipStats::set_allocated_equipicon(::std::string* equipicon) {
  if (equipicon_ != &::google::protobuf::internal::kEmptyString) {
    delete equipicon_;
  }
  if (equipicon) {
    set_has_equipicon();
    equipicon_ = equipicon;
  } else {
    clear_has_equipicon();
    equipicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string equipmodel = 6;
inline bool sEquipStats::has_equipmodel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sEquipStats::set_has_equipmodel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sEquipStats::clear_has_equipmodel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sEquipStats::clear_equipmodel() {
  if (equipmodel_ != &::google::protobuf::internal::kEmptyString) {
    equipmodel_->clear();
  }
  clear_has_equipmodel();
}
inline const ::std::string& sEquipStats::equipmodel() const {
  return *equipmodel_;
}
inline void sEquipStats::set_equipmodel(const ::std::string& value) {
  set_has_equipmodel();
  if (equipmodel_ == &::google::protobuf::internal::kEmptyString) {
    equipmodel_ = new ::std::string;
  }
  equipmodel_->assign(value);
}
inline void sEquipStats::set_equipmodel(const char* value) {
  set_has_equipmodel();
  if (equipmodel_ == &::google::protobuf::internal::kEmptyString) {
    equipmodel_ = new ::std::string;
  }
  equipmodel_->assign(value);
}
inline void sEquipStats::set_equipmodel(const char* value, size_t size) {
  set_has_equipmodel();
  if (equipmodel_ == &::google::protobuf::internal::kEmptyString) {
    equipmodel_ = new ::std::string;
  }
  equipmodel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEquipStats::mutable_equipmodel() {
  set_has_equipmodel();
  if (equipmodel_ == &::google::protobuf::internal::kEmptyString) {
    equipmodel_ = new ::std::string;
  }
  return equipmodel_;
}
inline ::std::string* sEquipStats::release_equipmodel() {
  clear_has_equipmodel();
  if (equipmodel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equipmodel_;
    equipmodel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEquipStats::set_allocated_equipmodel(::std::string* equipmodel) {
  if (equipmodel_ != &::google::protobuf::internal::kEmptyString) {
    delete equipmodel_;
  }
  if (equipmodel) {
    set_has_equipmodel();
    equipmodel_ = equipmodel;
  } else {
    clear_has_equipmodel();
    equipmodel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 modeaction = 7;
inline bool sEquipStats::has_modeaction() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sEquipStats::set_has_modeaction() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sEquipStats::clear_has_modeaction() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sEquipStats::clear_modeaction() {
  modeaction_ = 0u;
  clear_has_modeaction();
}
inline ::google::protobuf::uint32 sEquipStats::modeaction() const {
  return modeaction_;
}
inline void sEquipStats::set_modeaction(::google::protobuf::uint32 value) {
  set_has_modeaction();
  modeaction_ = value;
}

// optional string equipmodel2 = 8;
inline bool sEquipStats::has_equipmodel2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sEquipStats::set_has_equipmodel2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sEquipStats::clear_has_equipmodel2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sEquipStats::clear_equipmodel2() {
  if (equipmodel2_ != &::google::protobuf::internal::kEmptyString) {
    equipmodel2_->clear();
  }
  clear_has_equipmodel2();
}
inline const ::std::string& sEquipStats::equipmodel2() const {
  return *equipmodel2_;
}
inline void sEquipStats::set_equipmodel2(const ::std::string& value) {
  set_has_equipmodel2();
  if (equipmodel2_ == &::google::protobuf::internal::kEmptyString) {
    equipmodel2_ = new ::std::string;
  }
  equipmodel2_->assign(value);
}
inline void sEquipStats::set_equipmodel2(const char* value) {
  set_has_equipmodel2();
  if (equipmodel2_ == &::google::protobuf::internal::kEmptyString) {
    equipmodel2_ = new ::std::string;
  }
  equipmodel2_->assign(value);
}
inline void sEquipStats::set_equipmodel2(const char* value, size_t size) {
  set_has_equipmodel2();
  if (equipmodel2_ == &::google::protobuf::internal::kEmptyString) {
    equipmodel2_ = new ::std::string;
  }
  equipmodel2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEquipStats::mutable_equipmodel2() {
  set_has_equipmodel2();
  if (equipmodel2_ == &::google::protobuf::internal::kEmptyString) {
    equipmodel2_ = new ::std::string;
  }
  return equipmodel2_;
}
inline ::std::string* sEquipStats::release_equipmodel2() {
  clear_has_equipmodel2();
  if (equipmodel2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equipmodel2_;
    equipmodel2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEquipStats::set_allocated_equipmodel2(::std::string* equipmodel2) {
  if (equipmodel2_ != &::google::protobuf::internal::kEmptyString) {
    delete equipmodel2_;
  }
  if (equipmodel2) {
    set_has_equipmodel2();
    equipmodel2_ = equipmodel2;
  } else {
    clear_has_equipmodel2();
    equipmodel2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 modeaction2 = 9;
inline bool sEquipStats::has_modeaction2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sEquipStats::set_has_modeaction2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sEquipStats::clear_has_modeaction2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sEquipStats::clear_modeaction2() {
  modeaction2_ = 0u;
  clear_has_modeaction2();
}
inline ::google::protobuf::uint32 sEquipStats::modeaction2() const {
  return modeaction2_;
}
inline void sEquipStats::set_modeaction2(::google::protobuf::uint32 value) {
  set_has_modeaction2();
  modeaction2_ = value;
}

// optional uint64 fragid = 10;
inline bool sEquipStats::has_fragid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sEquipStats::set_has_fragid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sEquipStats::clear_has_fragid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sEquipStats::clear_fragid() {
  fragid_ = GOOGLE_ULONGLONG(0);
  clear_has_fragid();
}
inline ::google::protobuf::uint64 sEquipStats::fragid() const {
  return fragid_;
}
inline void sEquipStats::set_fragid(::google::protobuf::uint64 value) {
  set_has_fragid();
  fragid_ = value;
}

// optional uint32 gamestats = 11;
inline bool sEquipStats::has_gamestats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sEquipStats::set_has_gamestats() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sEquipStats::clear_has_gamestats() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sEquipStats::clear_gamestats() {
  gamestats_ = 0u;
  clear_has_gamestats();
}
inline ::google::protobuf::uint32 sEquipStats::gamestats() const {
  return gamestats_;
}
inline void sEquipStats::set_gamestats(::google::protobuf::uint32 value) {
  set_has_gamestats();
  gamestats_ = value;
}

// optional uint32 gamestatslv = 12;
inline bool sEquipStats::has_gamestatslv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sEquipStats::set_has_gamestatslv() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sEquipStats::clear_has_gamestatslv() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sEquipStats::clear_gamestatslv() {
  gamestatslv_ = 0u;
  clear_has_gamestatslv();
}
inline ::google::protobuf::uint32 sEquipStats::gamestatslv() const {
  return gamestatslv_;
}
inline void sEquipStats::set_gamestatslv(::google::protobuf::uint32 value) {
  set_has_gamestatslv();
  gamestatslv_ = value;
}

// optional uint32 role_limit = 13;
inline bool sEquipStats::has_role_limit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sEquipStats::set_has_role_limit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sEquipStats::clear_has_role_limit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sEquipStats::clear_role_limit() {
  role_limit_ = 0u;
  clear_has_role_limit();
}
inline ::google::protobuf::uint32 sEquipStats::role_limit() const {
  return role_limit_;
}
inline void sEquipStats::set_role_limit(::google::protobuf::uint32 value) {
  set_has_role_limit();
  role_limit_ = value;
}

// optional uint32 degree_limit = 14;
inline bool sEquipStats::has_degree_limit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sEquipStats::set_has_degree_limit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sEquipStats::clear_has_degree_limit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sEquipStats::clear_degree_limit() {
  degree_limit_ = 0u;
  clear_has_degree_limit();
}
inline ::google::protobuf::uint32 sEquipStats::degree_limit() const {
  return degree_limit_;
}
inline void sEquipStats::set_degree_limit(::google::protobuf::uint32 value) {
  set_has_degree_limit();
  degree_limit_ = value;
}

// optional string suv = 15;
inline bool sEquipStats::has_suv() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sEquipStats::set_has_suv() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sEquipStats::clear_has_suv() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sEquipStats::clear_suv() {
  if (suv_ != &::google::protobuf::internal::kEmptyString) {
    suv_->clear();
  }
  clear_has_suv();
}
inline const ::std::string& sEquipStats::suv() const {
  return *suv_;
}
inline void sEquipStats::set_suv(const ::std::string& value) {
  set_has_suv();
  if (suv_ == &::google::protobuf::internal::kEmptyString) {
    suv_ = new ::std::string;
  }
  suv_->assign(value);
}
inline void sEquipStats::set_suv(const char* value) {
  set_has_suv();
  if (suv_ == &::google::protobuf::internal::kEmptyString) {
    suv_ = new ::std::string;
  }
  suv_->assign(value);
}
inline void sEquipStats::set_suv(const char* value, size_t size) {
  set_has_suv();
  if (suv_ == &::google::protobuf::internal::kEmptyString) {
    suv_ = new ::std::string;
  }
  suv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEquipStats::mutable_suv() {
  set_has_suv();
  if (suv_ == &::google::protobuf::internal::kEmptyString) {
    suv_ = new ::std::string;
  }
  return suv_;
}
inline ::std::string* sEquipStats::release_suv() {
  clear_has_suv();
  if (suv_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = suv_;
    suv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEquipStats::set_allocated_suv(::std::string* suv) {
  if (suv_ != &::google::protobuf::internal::kEmptyString) {
    delete suv_;
  }
  if (suv) {
    set_has_suv();
    suv_ = suv;
  } else {
    clear_has_suv();
    suv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float wavespeed = 16;
inline bool sEquipStats::has_wavespeed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sEquipStats::set_has_wavespeed() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sEquipStats::clear_has_wavespeed() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sEquipStats::clear_wavespeed() {
  wavespeed_ = 0;
  clear_has_wavespeed();
}
inline float sEquipStats::wavespeed() const {
  return wavespeed_;
}
inline void sEquipStats::set_wavespeed(float value) {
  set_has_wavespeed();
  wavespeed_ = value;
}

// optional uint32 wavedir = 17;
inline bool sEquipStats::has_wavedir() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sEquipStats::set_has_wavedir() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sEquipStats::clear_has_wavedir() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sEquipStats::clear_wavedir() {
  wavedir_ = 0u;
  clear_has_wavedir();
}
inline ::google::protobuf::uint32 sEquipStats::wavedir() const {
  return wavedir_;
}
inline void sEquipStats::set_wavedir(::google::protobuf::uint32 value) {
  set_has_wavedir();
  wavedir_ = value;
}

// optional float scale = 18;
inline bool sEquipStats::has_scale() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sEquipStats::set_has_scale() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sEquipStats::clear_has_scale() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sEquipStats::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float sEquipStats::scale() const {
  return scale_;
}
inline void sEquipStats::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional uint32 exp_add = 19;
inline bool sEquipStats::has_exp_add() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sEquipStats::set_has_exp_add() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sEquipStats::clear_has_exp_add() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sEquipStats::clear_exp_add() {
  exp_add_ = 0u;
  clear_has_exp_add();
}
inline ::google::protobuf::uint32 sEquipStats::exp_add() const {
  return exp_add_;
}
inline void sEquipStats::set_exp_add(::google::protobuf::uint32 value) {
  set_has_exp_add();
  exp_add_ = value;
}

// optional uint32 startup_id = 20;
inline bool sEquipStats::has_startup_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sEquipStats::set_has_startup_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sEquipStats::clear_has_startup_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sEquipStats::clear_startup_id() {
  startup_id_ = 0u;
  clear_has_startup_id();
}
inline ::google::protobuf::uint32 sEquipStats::startup_id() const {
  return startup_id_;
}
inline void sEquipStats::set_startup_id(::google::protobuf::uint32 value) {
  set_has_startup_id();
  startup_id_ = value;
}

// optional uint32 levelup_id = 21;
inline bool sEquipStats::has_levelup_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sEquipStats::set_has_levelup_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sEquipStats::clear_has_levelup_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sEquipStats::clear_levelup_id() {
  levelup_id_ = 0u;
  clear_has_levelup_id();
}
inline ::google::protobuf::uint32 sEquipStats::levelup_id() const {
  return levelup_id_;
}
inline void sEquipStats::set_levelup_id(::google::protobuf::uint32 value) {
  set_has_levelup_id();
  levelup_id_ = value;
}

// optional uint32 star = 22;
inline bool sEquipStats::has_star() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sEquipStats::set_has_star() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sEquipStats::clear_has_star() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sEquipStats::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 sEquipStats::star() const {
  return star_;
}
inline void sEquipStats::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional string suvalpha = 23;
inline bool sEquipStats::has_suvalpha() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sEquipStats::set_has_suvalpha() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sEquipStats::clear_has_suvalpha() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sEquipStats::clear_suvalpha() {
  if (suvalpha_ != &::google::protobuf::internal::kEmptyString) {
    suvalpha_->clear();
  }
  clear_has_suvalpha();
}
inline const ::std::string& sEquipStats::suvalpha() const {
  return *suvalpha_;
}
inline void sEquipStats::set_suvalpha(const ::std::string& value) {
  set_has_suvalpha();
  if (suvalpha_ == &::google::protobuf::internal::kEmptyString) {
    suvalpha_ = new ::std::string;
  }
  suvalpha_->assign(value);
}
inline void sEquipStats::set_suvalpha(const char* value) {
  set_has_suvalpha();
  if (suvalpha_ == &::google::protobuf::internal::kEmptyString) {
    suvalpha_ = new ::std::string;
  }
  suvalpha_->assign(value);
}
inline void sEquipStats::set_suvalpha(const char* value, size_t size) {
  set_has_suvalpha();
  if (suvalpha_ == &::google::protobuf::internal::kEmptyString) {
    suvalpha_ = new ::std::string;
  }
  suvalpha_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEquipStats::mutable_suvalpha() {
  set_has_suvalpha();
  if (suvalpha_ == &::google::protobuf::internal::kEmptyString) {
    suvalpha_ = new ::std::string;
  }
  return suvalpha_;
}
inline ::std::string* sEquipStats::release_suvalpha() {
  clear_has_suvalpha();
  if (suvalpha_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = suvalpha_;
    suvalpha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEquipStats::set_allocated_suvalpha(::std::string* suvalpha) {
  if (suvalpha_ != &::google::protobuf::internal::kEmptyString) {
    delete suvalpha_;
  }
  if (suvalpha) {
    set_has_suvalpha();
    suvalpha_ = suvalpha;
  } else {
    clear_has_suvalpha();
    suvalpha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float mox = 24;
inline bool sEquipStats::has_mox() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sEquipStats::set_has_mox() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sEquipStats::clear_has_mox() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sEquipStats::clear_mox() {
  mox_ = 0;
  clear_has_mox();
}
inline float sEquipStats::mox() const {
  return mox_;
}
inline void sEquipStats::set_mox(float value) {
  set_has_mox();
  mox_ = value;
}

// optional float moy = 25;
inline bool sEquipStats::has_moy() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sEquipStats::set_has_moy() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sEquipStats::clear_has_moy() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sEquipStats::clear_moy() {
  moy_ = 0;
  clear_has_moy();
}
inline float sEquipStats::moy() const {
  return moy_;
}
inline void sEquipStats::set_moy(float value) {
  set_has_moy();
  moy_ = value;
}

// optional float moz = 26;
inline bool sEquipStats::has_moz() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sEquipStats::set_has_moz() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sEquipStats::clear_has_moz() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sEquipStats::clear_moz() {
  moz_ = 0;
  clear_has_moz();
}
inline float sEquipStats::moz() const {
  return moz_;
}
inline void sEquipStats::set_moz(float value) {
  set_has_moz();
  moz_ = value;
}

// optional uint32 skill_id = 27;
inline bool sEquipStats::has_skill_id() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sEquipStats::set_has_skill_id() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sEquipStats::clear_has_skill_id() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sEquipStats::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 sEquipStats::skill_id() const {
  return skill_id_;
}
inline void sEquipStats::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional string bind_skeleton = 28;
inline bool sEquipStats::has_bind_skeleton() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void sEquipStats::set_has_bind_skeleton() {
  _has_bits_[0] |= 0x04000000u;
}
inline void sEquipStats::clear_has_bind_skeleton() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void sEquipStats::clear_bind_skeleton() {
  if (bind_skeleton_ != &::google::protobuf::internal::kEmptyString) {
    bind_skeleton_->clear();
  }
  clear_has_bind_skeleton();
}
inline const ::std::string& sEquipStats::bind_skeleton() const {
  return *bind_skeleton_;
}
inline void sEquipStats::set_bind_skeleton(const ::std::string& value) {
  set_has_bind_skeleton();
  if (bind_skeleton_ == &::google::protobuf::internal::kEmptyString) {
    bind_skeleton_ = new ::std::string;
  }
  bind_skeleton_->assign(value);
}
inline void sEquipStats::set_bind_skeleton(const char* value) {
  set_has_bind_skeleton();
  if (bind_skeleton_ == &::google::protobuf::internal::kEmptyString) {
    bind_skeleton_ = new ::std::string;
  }
  bind_skeleton_->assign(value);
}
inline void sEquipStats::set_bind_skeleton(const char* value, size_t size) {
  set_has_bind_skeleton();
  if (bind_skeleton_ == &::google::protobuf::internal::kEmptyString) {
    bind_skeleton_ = new ::std::string;
  }
  bind_skeleton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEquipStats::mutable_bind_skeleton() {
  set_has_bind_skeleton();
  if (bind_skeleton_ == &::google::protobuf::internal::kEmptyString) {
    bind_skeleton_ = new ::std::string;
  }
  return bind_skeleton_;
}
inline ::std::string* sEquipStats::release_bind_skeleton() {
  clear_has_bind_skeleton();
  if (bind_skeleton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bind_skeleton_;
    bind_skeleton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEquipStats::set_allocated_bind_skeleton(::std::string* bind_skeleton) {
  if (bind_skeleton_ != &::google::protobuf::internal::kEmptyString) {
    delete bind_skeleton_;
  }
  if (bind_skeleton) {
    set_has_bind_skeleton();
    bind_skeleton_ = bind_skeleton;
  } else {
    clear_has_bind_skeleton();
    bind_skeleton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 bind_effect_status = 29;
inline bool sEquipStats::has_bind_effect_status() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void sEquipStats::set_has_bind_effect_status() {
  _has_bits_[0] |= 0x08000000u;
}
inline void sEquipStats::clear_has_bind_effect_status() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void sEquipStats::clear_bind_effect_status() {
  bind_effect_status_ = 0u;
  clear_has_bind_effect_status();
}
inline ::google::protobuf::uint32 sEquipStats::bind_effect_status() const {
  return bind_effect_status_;
}
inline void sEquipStats::set_bind_effect_status(::google::protobuf::uint32 value) {
  set_has_bind_effect_status();
  bind_effect_status_ = value;
}

// optional float effect_status_scale = 30;
inline bool sEquipStats::has_effect_status_scale() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void sEquipStats::set_has_effect_status_scale() {
  _has_bits_[0] |= 0x10000000u;
}
inline void sEquipStats::clear_has_effect_status_scale() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void sEquipStats::clear_effect_status_scale() {
  effect_status_scale_ = 0;
  clear_has_effect_status_scale();
}
inline float sEquipStats::effect_status_scale() const {
  return effect_status_scale_;
}
inline void sEquipStats::set_effect_status_scale(float value) {
  set_has_effect_status_scale();
  effect_status_scale_ = value;
}

// optional float effect_status_x = 31;
inline bool sEquipStats::has_effect_status_x() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void sEquipStats::set_has_effect_status_x() {
  _has_bits_[0] |= 0x20000000u;
}
inline void sEquipStats::clear_has_effect_status_x() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void sEquipStats::clear_effect_status_x() {
  effect_status_x_ = 0;
  clear_has_effect_status_x();
}
inline float sEquipStats::effect_status_x() const {
  return effect_status_x_;
}
inline void sEquipStats::set_effect_status_x(float value) {
  set_has_effect_status_x();
  effect_status_x_ = value;
}

// optional float effect_status_y = 32;
inline bool sEquipStats::has_effect_status_y() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void sEquipStats::set_has_effect_status_y() {
  _has_bits_[0] |= 0x40000000u;
}
inline void sEquipStats::clear_has_effect_status_y() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void sEquipStats::clear_effect_status_y() {
  effect_status_y_ = 0;
  clear_has_effect_status_y();
}
inline float sEquipStats::effect_status_y() const {
  return effect_status_y_;
}
inline void sEquipStats::set_effect_status_y(float value) {
  set_has_effect_status_y();
  effect_status_y_ = value;
}

// optional float effect_status_z = 33;
inline bool sEquipStats::has_effect_status_z() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void sEquipStats::set_has_effect_status_z() {
  _has_bits_[0] |= 0x80000000u;
}
inline void sEquipStats::clear_has_effect_status_z() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void sEquipStats::clear_effect_status_z() {
  effect_status_z_ = 0;
  clear_has_effect_status_z();
}
inline float sEquipStats::effect_status_z() const {
  return effect_status_z_;
}
inline void sEquipStats::set_effect_status_z(float value) {
  set_has_effect_status_z();
  effect_status_z_ = value;
}

// optional float effect_status_degreex = 34;
inline bool sEquipStats::has_effect_status_degreex() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void sEquipStats::set_has_effect_status_degreex() {
  _has_bits_[1] |= 0x00000001u;
}
inline void sEquipStats::clear_has_effect_status_degreex() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void sEquipStats::clear_effect_status_degreex() {
  effect_status_degreex_ = 0;
  clear_has_effect_status_degreex();
}
inline float sEquipStats::effect_status_degreex() const {
  return effect_status_degreex_;
}
inline void sEquipStats::set_effect_status_degreex(float value) {
  set_has_effect_status_degreex();
  effect_status_degreex_ = value;
}

// optional float effect_status_degreey = 35;
inline bool sEquipStats::has_effect_status_degreey() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void sEquipStats::set_has_effect_status_degreey() {
  _has_bits_[1] |= 0x00000002u;
}
inline void sEquipStats::clear_has_effect_status_degreey() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void sEquipStats::clear_effect_status_degreey() {
  effect_status_degreey_ = 0;
  clear_has_effect_status_degreey();
}
inline float sEquipStats::effect_status_degreey() const {
  return effect_status_degreey_;
}
inline void sEquipStats::set_effect_status_degreey(float value) {
  set_has_effect_status_degreey();
  effect_status_degreey_ = value;
}

// optional float effect_status_degreez = 36;
inline bool sEquipStats::has_effect_status_degreez() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void sEquipStats::set_has_effect_status_degreez() {
  _has_bits_[1] |= 0x00000004u;
}
inline void sEquipStats::clear_has_effect_status_degreez() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void sEquipStats::clear_effect_status_degreez() {
  effect_status_degreez_ = 0;
  clear_has_effect_status_degreez();
}
inline float sEquipStats::effect_status_degreez() const {
  return effect_status_degreez_;
}
inline void sEquipStats::set_effect_status_degreez(float value) {
  set_has_effect_status_degreez();
  effect_status_degreez_ = value;
}

// optional uint32 attack_type = 37;
inline bool sEquipStats::has_attack_type() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void sEquipStats::set_has_attack_type() {
  _has_bits_[1] |= 0x00000008u;
}
inline void sEquipStats::clear_has_attack_type() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void sEquipStats::clear_attack_type() {
  attack_type_ = 0u;
  clear_has_attack_type();
}
inline ::google::protobuf::uint32 sEquipStats::attack_type() const {
  return attack_type_;
}
inline void sEquipStats::set_attack_type(::google::protobuf::uint32 value) {
  set_has_attack_type();
  attack_type_ = value;
}

// optional uint32 mageball_link = 38;
inline bool sEquipStats::has_mageball_link() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void sEquipStats::set_has_mageball_link() {
  _has_bits_[1] |= 0x00000010u;
}
inline void sEquipStats::clear_has_mageball_link() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void sEquipStats::clear_mageball_link() {
  mageball_link_ = 0u;
  clear_has_mageball_link();
}
inline ::google::protobuf::uint32 sEquipStats::mageball_link() const {
  return mageball_link_;
}
inline void sEquipStats::set_mageball_link(::google::protobuf::uint32 value) {
  set_has_mageball_link();
  mageball_link_ = value;
}

// optional uint32 mageball_eff = 39;
inline bool sEquipStats::has_mageball_eff() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void sEquipStats::set_has_mageball_eff() {
  _has_bits_[1] |= 0x00000020u;
}
inline void sEquipStats::clear_has_mageball_eff() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void sEquipStats::clear_mageball_eff() {
  mageball_eff_ = 0u;
  clear_has_mageball_eff();
}
inline ::google::protobuf::uint32 sEquipStats::mageball_eff() const {
  return mageball_eff_;
}
inline void sEquipStats::set_mageball_eff(::google::protobuf::uint32 value) {
  set_has_mageball_eff();
  mageball_eff_ = value;
}

// optional uint32 identify = 40;
inline bool sEquipStats::has_identify() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void sEquipStats::set_has_identify() {
  _has_bits_[1] |= 0x00000040u;
}
inline void sEquipStats::clear_has_identify() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void sEquipStats::clear_identify() {
  identify_ = 0u;
  clear_has_identify();
}
inline ::google::protobuf::uint32 sEquipStats::identify() const {
  return identify_;
}
inline void sEquipStats::set_identify(::google::protobuf::uint32 value) {
  set_has_identify();
  identify_ = value;
}

// optional uint32 equip_group_id = 41;
inline bool sEquipStats::has_equip_group_id() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void sEquipStats::set_has_equip_group_id() {
  _has_bits_[1] |= 0x00000080u;
}
inline void sEquipStats::clear_has_equip_group_id() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void sEquipStats::clear_equip_group_id() {
  equip_group_id_ = 0u;
  clear_has_equip_group_id();
}
inline ::google::protobuf::uint32 sEquipStats::equip_group_id() const {
  return equip_group_id_;
}
inline void sEquipStats::set_equip_group_id(::google::protobuf::uint32 value) {
  set_has_equip_group_id();
  equip_group_id_ = value;
}

// optional uint32 equip_group_color = 42;
inline bool sEquipStats::has_equip_group_color() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void sEquipStats::set_has_equip_group_color() {
  _has_bits_[1] |= 0x00000100u;
}
inline void sEquipStats::clear_has_equip_group_color() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void sEquipStats::clear_equip_group_color() {
  equip_group_color_ = 0u;
  clear_has_equip_group_color();
}
inline ::google::protobuf::uint32 sEquipStats::equip_group_color() const {
  return equip_group_color_;
}
inline void sEquipStats::set_equip_group_color(::google::protobuf::uint32 value) {
  set_has_equip_group_color();
  equip_group_color_ = value;
}

// -------------------------------------------------------------------

// sEquipGroupStats

// optional uint32 uid = 1;
inline bool sEquipGroupStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEquipGroupStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEquipGroupStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEquipGroupStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEquipGroupStats::uid() const {
  return uid_;
}
inline void sEquipGroupStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string desc = 2;
inline bool sEquipGroupStats::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEquipGroupStats::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEquipGroupStats::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEquipGroupStats::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& sEquipGroupStats::desc() const {
  return *desc_;
}
inline void sEquipGroupStats::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void sEquipGroupStats::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void sEquipGroupStats::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sEquipGroupStats::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* sEquipGroupStats::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sEquipGroupStats::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 lang_id = 3;
inline bool sEquipGroupStats::has_lang_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sEquipGroupStats::set_has_lang_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sEquipGroupStats::clear_has_lang_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sEquipGroupStats::clear_lang_id() {
  lang_id_ = 0u;
  clear_has_lang_id();
}
inline ::google::protobuf::uint32 sEquipGroupStats::lang_id() const {
  return lang_id_;
}
inline void sEquipGroupStats::set_lang_id(::google::protobuf::uint32 value) {
  set_has_lang_id();
  lang_id_ = value;
}

// repeated uint32 attr_2 = 4;
inline int sEquipGroupStats::attr_2_size() const {
  return attr_2_.size();
}
inline void sEquipGroupStats::clear_attr_2() {
  attr_2_.Clear();
}
inline ::google::protobuf::uint32 sEquipGroupStats::attr_2(int index) const {
  return attr_2_.Get(index);
}
inline void sEquipGroupStats::set_attr_2(int index, ::google::protobuf::uint32 value) {
  attr_2_.Set(index, value);
}
inline void sEquipGroupStats::add_attr_2(::google::protobuf::uint32 value) {
  attr_2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sEquipGroupStats::attr_2() const {
  return attr_2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sEquipGroupStats::mutable_attr_2() {
  return &attr_2_;
}

// repeated uint32 attr_3 = 5;
inline int sEquipGroupStats::attr_3_size() const {
  return attr_3_.size();
}
inline void sEquipGroupStats::clear_attr_3() {
  attr_3_.Clear();
}
inline ::google::protobuf::uint32 sEquipGroupStats::attr_3(int index) const {
  return attr_3_.Get(index);
}
inline void sEquipGroupStats::set_attr_3(int index, ::google::protobuf::uint32 value) {
  attr_3_.Set(index, value);
}
inline void sEquipGroupStats::add_attr_3(::google::protobuf::uint32 value) {
  attr_3_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sEquipGroupStats::attr_3() const {
  return attr_3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sEquipGroupStats::mutable_attr_3() {
  return &attr_3_;
}

// repeated uint32 attr_4 = 6;
inline int sEquipGroupStats::attr_4_size() const {
  return attr_4_.size();
}
inline void sEquipGroupStats::clear_attr_4() {
  attr_4_.Clear();
}
inline ::google::protobuf::uint32 sEquipGroupStats::attr_4(int index) const {
  return attr_4_.Get(index);
}
inline void sEquipGroupStats::set_attr_4(int index, ::google::protobuf::uint32 value) {
  attr_4_.Set(index, value);
}
inline void sEquipGroupStats::add_attr_4(::google::protobuf::uint32 value) {
  attr_4_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sEquipGroupStats::attr_4() const {
  return attr_4_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sEquipGroupStats::mutable_attr_4() {
  return &attr_4_;
}

// repeated uint32 attr_5 = 7;
inline int sEquipGroupStats::attr_5_size() const {
  return attr_5_.size();
}
inline void sEquipGroupStats::clear_attr_5() {
  attr_5_.Clear();
}
inline ::google::protobuf::uint32 sEquipGroupStats::attr_5(int index) const {
  return attr_5_.Get(index);
}
inline void sEquipGroupStats::set_attr_5(int index, ::google::protobuf::uint32 value) {
  attr_5_.Set(index, value);
}
inline void sEquipGroupStats::add_attr_5(::google::protobuf::uint32 value) {
  attr_5_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sEquipGroupStats::attr_5() const {
  return attr_5_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sEquipGroupStats::mutable_attr_5() {
  return &attr_5_;
}

// repeated uint32 attr_6 = 9;
inline int sEquipGroupStats::attr_6_size() const {
  return attr_6_.size();
}
inline void sEquipGroupStats::clear_attr_6() {
  attr_6_.Clear();
}
inline ::google::protobuf::uint32 sEquipGroupStats::attr_6(int index) const {
  return attr_6_.Get(index);
}
inline void sEquipGroupStats::set_attr_6(int index, ::google::protobuf::uint32 value) {
  attr_6_.Set(index, value);
}
inline void sEquipGroupStats::add_attr_6(::google::protobuf::uint32 value) {
  attr_6_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sEquipGroupStats::attr_6() const {
  return attr_6_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sEquipGroupStats::mutable_attr_6() {
  return &attr_6_;
}

// optional uint32 equip_num = 10;
inline bool sEquipGroupStats::has_equip_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sEquipGroupStats::set_has_equip_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sEquipGroupStats::clear_has_equip_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sEquipGroupStats::clear_equip_num() {
  equip_num_ = 0u;
  clear_has_equip_num();
}
inline ::google::protobuf::uint32 sEquipGroupStats::equip_num() const {
  return equip_num_;
}
inline void sEquipGroupStats::set_equip_num(::google::protobuf::uint32 value) {
  set_has_equip_num();
  equip_num_ = value;
}

// -------------------------------------------------------------------

// sCharactorStats

// optional uint32 uid = 1;
inline bool sCharactorStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCharactorStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCharactorStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCharactorStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sCharactorStats::uid() const {
  return uid_;
}
inline void sCharactorStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 charactormodel = 2;
inline bool sCharactorStats::has_charactormodel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCharactorStats::set_has_charactormodel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCharactorStats::clear_has_charactormodel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCharactorStats::clear_charactormodel() {
  charactormodel_ = 0u;
  clear_has_charactormodel();
}
inline ::google::protobuf::uint32 sCharactorStats::charactormodel() const {
  return charactormodel_;
}
inline void sCharactorStats::set_charactormodel(::google::protobuf::uint32 value) {
  set_has_charactormodel();
  charactormodel_ = value;
}

// optional uint32 gamestats = 3;
inline bool sCharactorStats::has_gamestats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCharactorStats::set_has_gamestats() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCharactorStats::clear_has_gamestats() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCharactorStats::clear_gamestats() {
  gamestats_ = 0u;
  clear_has_gamestats();
}
inline ::google::protobuf::uint32 sCharactorStats::gamestats() const {
  return gamestats_;
}
inline void sCharactorStats::set_gamestats(::google::protobuf::uint32 value) {
  set_has_gamestats();
  gamestats_ = value;
}

// optional float scale = 4;
inline bool sCharactorStats::has_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCharactorStats::set_has_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCharactorStats::clear_has_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCharactorStats::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float sCharactorStats::scale() const {
  return scale_;
}
inline void sCharactorStats::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional float radius = 5;
inline bool sCharactorStats::has_radius() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sCharactorStats::set_has_radius() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sCharactorStats::clear_has_radius() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sCharactorStats::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float sCharactorStats::radius() const {
  return radius_;
}
inline void sCharactorStats::set_radius(float value) {
  set_has_radius();
  radius_ = value;
}

// optional float turnrate = 6;
inline bool sCharactorStats::has_turnrate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sCharactorStats::set_has_turnrate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sCharactorStats::clear_has_turnrate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sCharactorStats::clear_turnrate() {
  turnrate_ = 0;
  clear_has_turnrate();
}
inline float sCharactorStats::turnrate() const {
  return turnrate_;
}
inline void sCharactorStats::set_turnrate(float value) {
  set_has_turnrate();
  turnrate_ = value;
}

// optional float lookat_z = 7;
inline bool sCharactorStats::has_lookat_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sCharactorStats::set_has_lookat_z() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sCharactorStats::clear_has_lookat_z() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sCharactorStats::clear_lookat_z() {
  lookat_z_ = 0;
  clear_has_lookat_z();
}
inline float sCharactorStats::lookat_z() const {
  return lookat_z_;
}
inline void sCharactorStats::set_lookat_z(float value) {
  set_has_lookat_z();
  lookat_z_ = value;
}

// -------------------------------------------------------------------

// sSkillCondition

// optional uint32 skill = 1;
inline bool sSkillCondition::has_skill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSkillCondition::set_has_skill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSkillCondition::clear_has_skill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSkillCondition::clear_skill() {
  skill_ = 0u;
  clear_has_skill();
}
inline ::google::protobuf::uint32 sSkillCondition::skill() const {
  return skill_;
}
inline void sSkillCondition::set_skill(::google::protobuf::uint32 value) {
  set_has_skill();
  skill_ = value;
}

// optional uint32 skill_cond = 2;
inline bool sSkillCondition::has_skill_cond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sSkillCondition::set_has_skill_cond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sSkillCondition::clear_has_skill_cond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sSkillCondition::clear_skill_cond() {
  skill_cond_ = 0u;
  clear_has_skill_cond();
}
inline ::google::protobuf::uint32 sSkillCondition::skill_cond() const {
  return skill_cond_;
}
inline void sSkillCondition::set_skill_cond(::google::protobuf::uint32 value) {
  set_has_skill_cond();
  skill_cond_ = value;
}

// optional uint32 skill_cv = 3;
inline bool sSkillCondition::has_skill_cv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sSkillCondition::set_has_skill_cv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sSkillCondition::clear_has_skill_cv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sSkillCondition::clear_skill_cv() {
  skill_cv_ = 0u;
  clear_has_skill_cv();
}
inline ::google::protobuf::uint32 sSkillCondition::skill_cv() const {
  return skill_cv_;
}
inline void sSkillCondition::set_skill_cv(::google::protobuf::uint32 value) {
  set_has_skill_cv();
  skill_cv_ = value;
}

// optional uint32 skill_cd = 4;
inline bool sSkillCondition::has_skill_cd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sSkillCondition::set_has_skill_cd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sSkillCondition::clear_has_skill_cd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sSkillCondition::clear_skill_cd() {
  skill_cd_ = 0u;
  clear_has_skill_cd();
}
inline ::google::protobuf::uint32 sSkillCondition::skill_cd() const {
  return skill_cd_;
}
inline void sSkillCondition::set_skill_cd(::google::protobuf::uint32 value) {
  set_has_skill_cd();
  skill_cd_ = value;
}

// optional uint32 skill_action = 5;
inline bool sSkillCondition::has_skill_action() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sSkillCondition::set_has_skill_action() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sSkillCondition::clear_has_skill_action() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sSkillCondition::clear_skill_action() {
  skill_action_ = 0u;
  clear_has_skill_action();
}
inline ::google::protobuf::uint32 sSkillCondition::skill_action() const {
  return skill_action_;
}
inline void sSkillCondition::set_skill_action(::google::protobuf::uint32 value) {
  set_has_skill_action();
  skill_action_ = value;
}

// optional uint32 slot = 6;
inline bool sSkillCondition::has_slot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sSkillCondition::set_has_slot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sSkillCondition::clear_has_slot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sSkillCondition::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 sSkillCondition::slot() const {
  return slot_;
}
inline void sSkillCondition::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
}

// -------------------------------------------------------------------

// sCardStats

// optional uint32 uid = 1;
inline bool sCardStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCardStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCardStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCardStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sCardStats::uid() const {
  return uid_;
}
inline void sCardStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .jynetwork.proto.eRoleType role = 2;
inline bool sCardStats::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCardStats::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCardStats::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCardStats::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::jynetwork::proto::eRoleType sCardStats::role() const {
  return static_cast< ::jynetwork::proto::eRoleType >(role_);
}
inline void sCardStats::set_role(::jynetwork::proto::eRoleType value) {
  assert(::jynetwork::proto::eRoleType_IsValid(value));
  set_has_role();
  role_ = value;
}

// optional uint32 cardname = 3;
inline bool sCardStats::has_cardname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCardStats::set_has_cardname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCardStats::clear_has_cardname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCardStats::clear_cardname() {
  cardname_ = 0u;
  clear_has_cardname();
}
inline ::google::protobuf::uint32 sCardStats::cardname() const {
  return cardname_;
}
inline void sCardStats::set_cardname(::google::protobuf::uint32 value) {
  set_has_cardname();
  cardname_ = value;
}

// optional string cardpic = 4;
inline bool sCardStats::has_cardpic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCardStats::set_has_cardpic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCardStats::clear_has_cardpic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCardStats::clear_cardpic() {
  if (cardpic_ != &::google::protobuf::internal::kEmptyString) {
    cardpic_->clear();
  }
  clear_has_cardpic();
}
inline const ::std::string& sCardStats::cardpic() const {
  return *cardpic_;
}
inline void sCardStats::set_cardpic(const ::std::string& value) {
  set_has_cardpic();
  if (cardpic_ == &::google::protobuf::internal::kEmptyString) {
    cardpic_ = new ::std::string;
  }
  cardpic_->assign(value);
}
inline void sCardStats::set_cardpic(const char* value) {
  set_has_cardpic();
  if (cardpic_ == &::google::protobuf::internal::kEmptyString) {
    cardpic_ = new ::std::string;
  }
  cardpic_->assign(value);
}
inline void sCardStats::set_cardpic(const char* value, size_t size) {
  set_has_cardpic();
  if (cardpic_ == &::google::protobuf::internal::kEmptyString) {
    cardpic_ = new ::std::string;
  }
  cardpic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCardStats::mutable_cardpic() {
  set_has_cardpic();
  if (cardpic_ == &::google::protobuf::internal::kEmptyString) {
    cardpic_ = new ::std::string;
  }
  return cardpic_;
}
inline ::std::string* sCardStats::release_cardpic() {
  clear_has_cardpic();
  if (cardpic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardpic_;
    cardpic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCardStats::set_allocated_cardpic(::std::string* cardpic) {
  if (cardpic_ != &::google::protobuf::internal::kEmptyString) {
    delete cardpic_;
  }
  if (cardpic) {
    set_has_cardpic();
    cardpic_ = cardpic;
  } else {
    clear_has_cardpic();
    cardpic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 cardmodel = 5;
inline bool sCardStats::has_cardmodel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sCardStats::set_has_cardmodel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sCardStats::clear_has_cardmodel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sCardStats::clear_cardmodel() {
  cardmodel_ = 0u;
  clear_has_cardmodel();
}
inline ::google::protobuf::uint32 sCardStats::cardmodel() const {
  return cardmodel_;
}
inline void sCardStats::set_cardmodel(::google::protobuf::uint32 value) {
  set_has_cardmodel();
  cardmodel_ = value;
}

// optional string cardicon = 6;
inline bool sCardStats::has_cardicon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sCardStats::set_has_cardicon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sCardStats::clear_has_cardicon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sCardStats::clear_cardicon() {
  if (cardicon_ != &::google::protobuf::internal::kEmptyString) {
    cardicon_->clear();
  }
  clear_has_cardicon();
}
inline const ::std::string& sCardStats::cardicon() const {
  return *cardicon_;
}
inline void sCardStats::set_cardicon(const ::std::string& value) {
  set_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    cardicon_ = new ::std::string;
  }
  cardicon_->assign(value);
}
inline void sCardStats::set_cardicon(const char* value) {
  set_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    cardicon_ = new ::std::string;
  }
  cardicon_->assign(value);
}
inline void sCardStats::set_cardicon(const char* value, size_t size) {
  set_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    cardicon_ = new ::std::string;
  }
  cardicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCardStats::mutable_cardicon() {
  set_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    cardicon_ = new ::std::string;
  }
  return cardicon_;
}
inline ::std::string* sCardStats::release_cardicon() {
  clear_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardicon_;
    cardicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCardStats::set_allocated_cardicon(::std::string* cardicon) {
  if (cardicon_ != &::google::protobuf::internal::kEmptyString) {
    delete cardicon_;
  }
  if (cardicon) {
    set_has_cardicon();
    cardicon_ = cardicon;
  } else {
    clear_has_cardicon();
    cardicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float scale = 7;
inline bool sCardStats::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sCardStats::set_has_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sCardStats::clear_has_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sCardStats::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float sCardStats::scale() const {
  return scale_;
}
inline void sCardStats::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional float radius = 8;
inline bool sCardStats::has_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sCardStats::set_has_radius() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sCardStats::clear_has_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sCardStats::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float sCardStats::radius() const {
  return radius_;
}
inline void sCardStats::set_radius(float value) {
  set_has_radius();
  radius_ = value;
}

// optional float turnrate = 9;
inline bool sCardStats::has_turnrate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sCardStats::set_has_turnrate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sCardStats::clear_has_turnrate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sCardStats::clear_turnrate() {
  turnrate_ = 0;
  clear_has_turnrate();
}
inline float sCardStats::turnrate() const {
  return turnrate_;
}
inline void sCardStats::set_turnrate(float value) {
  set_has_turnrate();
  turnrate_ = value;
}

// optional uint32 attacknormal = 11;
inline bool sCardStats::has_attacknormal() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sCardStats::set_has_attacknormal() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sCardStats::clear_has_attacknormal() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sCardStats::clear_attacknormal() {
  attacknormal_ = 0u;
  clear_has_attacknormal();
}
inline ::google::protobuf::uint32 sCardStats::attacknormal() const {
  return attacknormal_;
}
inline void sCardStats::set_attacknormal(::google::protobuf::uint32 value) {
  set_has_attacknormal();
  attacknormal_ = value;
}

// optional uint32 attacknormal_cd = 34;
inline bool sCardStats::has_attacknormal_cd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sCardStats::set_has_attacknormal_cd() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sCardStats::clear_has_attacknormal_cd() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sCardStats::clear_attacknormal_cd() {
  attacknormal_cd_ = 0u;
  clear_has_attacknormal_cd();
}
inline ::google::protobuf::uint32 sCardStats::attacknormal_cd() const {
  return attacknormal_cd_;
}
inline void sCardStats::set_attacknormal_cd(::google::protobuf::uint32 value) {
  set_has_attacknormal_cd();
  attacknormal_cd_ = value;
}

// optional uint32 skillnormal = 12;
inline bool sCardStats::has_skillnormal() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sCardStats::set_has_skillnormal() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sCardStats::clear_has_skillnormal() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sCardStats::clear_skillnormal() {
  skillnormal_ = 0u;
  clear_has_skillnormal();
}
inline ::google::protobuf::uint32 sCardStats::skillnormal() const {
  return skillnormal_;
}
inline void sCardStats::set_skillnormal(::google::protobuf::uint32 value) {
  set_has_skillnormal();
  skillnormal_ = value;
}

// optional uint32 skillnormal_cd = 28;
inline bool sCardStats::has_skillnormal_cd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sCardStats::set_has_skillnormal_cd() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sCardStats::clear_has_skillnormal_cd() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sCardStats::clear_skillnormal_cd() {
  skillnormal_cd_ = 0u;
  clear_has_skillnormal_cd();
}
inline ::google::protobuf::uint32 sCardStats::skillnormal_cd() const {
  return skillnormal_cd_;
}
inline void sCardStats::set_skillnormal_cd(::google::protobuf::uint32 value) {
  set_has_skillnormal_cd();
  skillnormal_cd_ = value;
}

// optional uint32 skillbig = 13;
inline bool sCardStats::has_skillbig() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sCardStats::set_has_skillbig() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sCardStats::clear_has_skillbig() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sCardStats::clear_skillbig() {
  skillbig_ = 0u;
  clear_has_skillbig();
}
inline ::google::protobuf::uint32 sCardStats::skillbig() const {
  return skillbig_;
}
inline void sCardStats::set_skillbig(::google::protobuf::uint32 value) {
  set_has_skillbig();
  skillbig_ = value;
}

// optional uint32 skillbig_cd = 29;
inline bool sCardStats::has_skillbig_cd() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sCardStats::set_has_skillbig_cd() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sCardStats::clear_has_skillbig_cd() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sCardStats::clear_skillbig_cd() {
  skillbig_cd_ = 0u;
  clear_has_skillbig_cd();
}
inline ::google::protobuf::uint32 sCardStats::skillbig_cd() const {
  return skillbig_cd_;
}
inline void sCardStats::set_skillbig_cd(::google::protobuf::uint32 value) {
  set_has_skillbig_cd();
  skillbig_cd_ = value;
}

// optional uint32 skillhero = 14;
inline bool sCardStats::has_skillhero() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sCardStats::set_has_skillhero() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sCardStats::clear_has_skillhero() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sCardStats::clear_skillhero() {
  skillhero_ = 0u;
  clear_has_skillhero();
}
inline ::google::protobuf::uint32 sCardStats::skillhero() const {
  return skillhero_;
}
inline void sCardStats::set_skillhero(::google::protobuf::uint32 value) {
  set_has_skillhero();
  skillhero_ = value;
}

// optional uint32 skillhero_cd = 30;
inline bool sCardStats::has_skillhero_cd() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sCardStats::set_has_skillhero_cd() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sCardStats::clear_has_skillhero_cd() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sCardStats::clear_skillhero_cd() {
  skillhero_cd_ = 0u;
  clear_has_skillhero_cd();
}
inline ::google::protobuf::uint32 sCardStats::skillhero_cd() const {
  return skillhero_cd_;
}
inline void sCardStats::set_skillhero_cd(::google::protobuf::uint32 value) {
  set_has_skillhero_cd();
  skillhero_cd_ = value;
}

// optional uint32 skillfriend = 15;
inline bool sCardStats::has_skillfriend() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sCardStats::set_has_skillfriend() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sCardStats::clear_has_skillfriend() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sCardStats::clear_skillfriend() {
  skillfriend_ = 0u;
  clear_has_skillfriend();
}
inline ::google::protobuf::uint32 sCardStats::skillfriend() const {
  return skillfriend_;
}
inline void sCardStats::set_skillfriend(::google::protobuf::uint32 value) {
  set_has_skillfriend();
  skillfriend_ = value;
}

// optional uint32 skillfriend_cd = 31;
inline bool sCardStats::has_skillfriend_cd() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sCardStats::set_has_skillfriend_cd() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sCardStats::clear_has_skillfriend_cd() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sCardStats::clear_skillfriend_cd() {
  skillfriend_cd_ = 0u;
  clear_has_skillfriend_cd();
}
inline ::google::protobuf::uint32 sCardStats::skillfriend_cd() const {
  return skillfriend_cd_;
}
inline void sCardStats::set_skillfriend_cd(::google::protobuf::uint32 value) {
  set_has_skillfriend_cd();
  skillfriend_cd_ = value;
}

// optional uint32 aiid = 20;
inline bool sCardStats::has_aiid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sCardStats::set_has_aiid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sCardStats::clear_has_aiid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sCardStats::clear_aiid() {
  aiid_ = 0u;
  clear_has_aiid();
}
inline ::google::protobuf::uint32 sCardStats::aiid() const {
  return aiid_;
}
inline void sCardStats::set_aiid(::google::protobuf::uint32 value) {
  set_has_aiid();
  aiid_ = value;
}

// optional uint32 frag = 21;
inline bool sCardStats::has_frag() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sCardStats::set_has_frag() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sCardStats::clear_has_frag() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sCardStats::clear_frag() {
  frag_ = 0u;
  clear_has_frag();
}
inline ::google::protobuf::uint32 sCardStats::frag() const {
  return frag_;
}
inline void sCardStats::set_frag(::google::protobuf::uint32 value) {
  set_has_frag();
  frag_ = value;
}

// optional uint32 gamestats = 22;
inline bool sCardStats::has_gamestats() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sCardStats::set_has_gamestats() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sCardStats::clear_has_gamestats() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sCardStats::clear_gamestats() {
  gamestats_ = 0u;
  clear_has_gamestats();
}
inline ::google::protobuf::uint32 sCardStats::gamestats() const {
  return gamestats_;
}
inline void sCardStats::set_gamestats(::google::protobuf::uint32 value) {
  set_has_gamestats();
  gamestats_ = value;
}

// optional string name_pic = 24;
inline bool sCardStats::has_name_pic() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sCardStats::set_has_name_pic() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sCardStats::clear_has_name_pic() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sCardStats::clear_name_pic() {
  if (name_pic_ != &::google::protobuf::internal::kEmptyString) {
    name_pic_->clear();
  }
  clear_has_name_pic();
}
inline const ::std::string& sCardStats::name_pic() const {
  return *name_pic_;
}
inline void sCardStats::set_name_pic(const ::std::string& value) {
  set_has_name_pic();
  if (name_pic_ == &::google::protobuf::internal::kEmptyString) {
    name_pic_ = new ::std::string;
  }
  name_pic_->assign(value);
}
inline void sCardStats::set_name_pic(const char* value) {
  set_has_name_pic();
  if (name_pic_ == &::google::protobuf::internal::kEmptyString) {
    name_pic_ = new ::std::string;
  }
  name_pic_->assign(value);
}
inline void sCardStats::set_name_pic(const char* value, size_t size) {
  set_has_name_pic();
  if (name_pic_ == &::google::protobuf::internal::kEmptyString) {
    name_pic_ = new ::std::string;
  }
  name_pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCardStats::mutable_name_pic() {
  set_has_name_pic();
  if (name_pic_ == &::google::protobuf::internal::kEmptyString) {
    name_pic_ = new ::std::string;
  }
  return name_pic_;
}
inline ::std::string* sCardStats::release_name_pic() {
  clear_has_name_pic();
  if (name_pic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_pic_;
    name_pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCardStats::set_allocated_name_pic(::std::string* name_pic) {
  if (name_pic_ != &::google::protobuf::internal::kEmptyString) {
    delete name_pic_;
  }
  if (name_pic) {
    set_has_name_pic();
    name_pic_ = name_pic;
  } else {
    clear_has_name_pic();
    name_pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 can_summered = 25;
inline bool sCardStats::has_can_summered() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sCardStats::set_has_can_summered() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sCardStats::clear_has_can_summered() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sCardStats::clear_can_summered() {
  can_summered_ = 0u;
  clear_has_can_summered();
}
inline ::google::protobuf::uint32 sCardStats::can_summered() const {
  return can_summered_;
}
inline void sCardStats::set_can_summered(::google::protobuf::uint32 value) {
  set_has_can_summered();
  can_summered_ = value;
}

// optional uint32 star = 26;
inline bool sCardStats::has_star() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sCardStats::set_has_star() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sCardStats::clear_has_star() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sCardStats::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 sCardStats::star() const {
  return star_;
}
inline void sCardStats::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional uint32 star_gamestat = 27;
inline bool sCardStats::has_star_gamestat() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sCardStats::set_has_star_gamestat() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sCardStats::clear_has_star_gamestat() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sCardStats::clear_star_gamestat() {
  star_gamestat_ = 0u;
  clear_has_star_gamestat();
}
inline ::google::protobuf::uint32 sCardStats::star_gamestat() const {
  return star_gamestat_;
}
inline void sCardStats::set_star_gamestat(::google::protobuf::uint32 value) {
  set_has_star_gamestat();
  star_gamestat_ = value;
}

// repeated .jynetwork.proto.sSkillCondition skill_extra = 32;
inline int sCardStats::skill_extra_size() const {
  return skill_extra_.size();
}
inline void sCardStats::clear_skill_extra() {
  skill_extra_.Clear();
}
inline const ::jynetwork::proto::sSkillCondition& sCardStats::skill_extra(int index) const {
  return skill_extra_.Get(index);
}
inline ::jynetwork::proto::sSkillCondition* sCardStats::mutable_skill_extra(int index) {
  return skill_extra_.Mutable(index);
}
inline ::jynetwork::proto::sSkillCondition* sCardStats::add_skill_extra() {
  return skill_extra_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSkillCondition >&
sCardStats::skill_extra() const {
  return skill_extra_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSkillCondition >*
sCardStats::mutable_skill_extra() {
  return &skill_extra_;
}

// optional uint32 ai_uid = 33;
inline bool sCardStats::has_ai_uid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void sCardStats::set_has_ai_uid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void sCardStats::clear_has_ai_uid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void sCardStats::clear_ai_uid() {
  ai_uid_ = 0u;
  clear_has_ai_uid();
}
inline ::google::protobuf::uint32 sCardStats::ai_uid() const {
  return ai_uid_;
}
inline void sCardStats::set_ai_uid(::google::protobuf::uint32 value) {
  set_has_ai_uid();
  ai_uid_ = value;
}

// optional string collision_name = 35;
inline bool sCardStats::has_collision_name() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void sCardStats::set_has_collision_name() {
  _has_bits_[0] |= 0x10000000u;
}
inline void sCardStats::clear_has_collision_name() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void sCardStats::clear_collision_name() {
  if (collision_name_ != &::google::protobuf::internal::kEmptyString) {
    collision_name_->clear();
  }
  clear_has_collision_name();
}
inline const ::std::string& sCardStats::collision_name() const {
  return *collision_name_;
}
inline void sCardStats::set_collision_name(const ::std::string& value) {
  set_has_collision_name();
  if (collision_name_ == &::google::protobuf::internal::kEmptyString) {
    collision_name_ = new ::std::string;
  }
  collision_name_->assign(value);
}
inline void sCardStats::set_collision_name(const char* value) {
  set_has_collision_name();
  if (collision_name_ == &::google::protobuf::internal::kEmptyString) {
    collision_name_ = new ::std::string;
  }
  collision_name_->assign(value);
}
inline void sCardStats::set_collision_name(const char* value, size_t size) {
  set_has_collision_name();
  if (collision_name_ == &::google::protobuf::internal::kEmptyString) {
    collision_name_ = new ::std::string;
  }
  collision_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCardStats::mutable_collision_name() {
  set_has_collision_name();
  if (collision_name_ == &::google::protobuf::internal::kEmptyString) {
    collision_name_ = new ::std::string;
  }
  return collision_name_;
}
inline ::std::string* sCardStats::release_collision_name() {
  clear_has_collision_name();
  if (collision_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = collision_name_;
    collision_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCardStats::set_allocated_collision_name(::std::string* collision_name) {
  if (collision_name_ != &::google::protobuf::internal::kEmptyString) {
    delete collision_name_;
  }
  if (collision_name) {
    set_has_collision_name();
    collision_name_ = collision_name;
  } else {
    clear_has_collision_name();
    collision_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 ai_loop = 36;
inline int sCardStats::ai_loop_size() const {
  return ai_loop_.size();
}
inline void sCardStats::clear_ai_loop() {
  ai_loop_.Clear();
}
inline ::google::protobuf::uint32 sCardStats::ai_loop(int index) const {
  return ai_loop_.Get(index);
}
inline void sCardStats::set_ai_loop(int index, ::google::protobuf::uint32 value) {
  ai_loop_.Set(index, value);
}
inline void sCardStats::add_ai_loop(::google::protobuf::uint32 value) {
  ai_loop_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sCardStats::ai_loop() const {
  return ai_loop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sCardStats::mutable_ai_loop() {
  return &ai_loop_;
}

// optional string death_sound = 37;
inline bool sCardStats::has_death_sound() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void sCardStats::set_has_death_sound() {
  _has_bits_[0] |= 0x40000000u;
}
inline void sCardStats::clear_has_death_sound() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void sCardStats::clear_death_sound() {
  if (death_sound_ != &::google::protobuf::internal::kEmptyString) {
    death_sound_->clear();
  }
  clear_has_death_sound();
}
inline const ::std::string& sCardStats::death_sound() const {
  return *death_sound_;
}
inline void sCardStats::set_death_sound(const ::std::string& value) {
  set_has_death_sound();
  if (death_sound_ == &::google::protobuf::internal::kEmptyString) {
    death_sound_ = new ::std::string;
  }
  death_sound_->assign(value);
}
inline void sCardStats::set_death_sound(const char* value) {
  set_has_death_sound();
  if (death_sound_ == &::google::protobuf::internal::kEmptyString) {
    death_sound_ = new ::std::string;
  }
  death_sound_->assign(value);
}
inline void sCardStats::set_death_sound(const char* value, size_t size) {
  set_has_death_sound();
  if (death_sound_ == &::google::protobuf::internal::kEmptyString) {
    death_sound_ = new ::std::string;
  }
  death_sound_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCardStats::mutable_death_sound() {
  set_has_death_sound();
  if (death_sound_ == &::google::protobuf::internal::kEmptyString) {
    death_sound_ = new ::std::string;
  }
  return death_sound_;
}
inline ::std::string* sCardStats::release_death_sound() {
  clear_has_death_sound();
  if (death_sound_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = death_sound_;
    death_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCardStats::set_allocated_death_sound(::std::string* death_sound) {
  if (death_sound_ != &::google::protobuf::internal::kEmptyString) {
    delete death_sound_;
  }
  if (death_sound) {
    set_has_death_sound();
    death_sound_ = death_sound;
  } else {
    clear_has_death_sound();
    death_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 death_eff = 38;
inline bool sCardStats::has_death_eff() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void sCardStats::set_has_death_eff() {
  _has_bits_[0] |= 0x80000000u;
}
inline void sCardStats::clear_has_death_eff() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void sCardStats::clear_death_eff() {
  death_eff_ = 0u;
  clear_has_death_eff();
}
inline ::google::protobuf::uint32 sCardStats::death_eff() const {
  return death_eff_;
}
inline void sCardStats::set_death_eff(::google::protobuf::uint32 value) {
  set_has_death_eff();
  death_eff_ = value;
}

// optional float buff_scale = 39;
inline bool sCardStats::has_buff_scale() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void sCardStats::set_has_buff_scale() {
  _has_bits_[1] |= 0x00000001u;
}
inline void sCardStats::clear_has_buff_scale() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void sCardStats::clear_buff_scale() {
  buff_scale_ = 0;
  clear_has_buff_scale();
}
inline float sCardStats::buff_scale() const {
  return buff_scale_;
}
inline void sCardStats::set_buff_scale(float value) {
  set_has_buff_scale();
  buff_scale_ = value;
}

// -------------------------------------------------------------------

// sPersonCardStats

// optional uint32 uid = 1;
inline bool sPersonCardStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPersonCardStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPersonCardStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPersonCardStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sPersonCardStats::uid() const {
  return uid_;
}
inline void sPersonCardStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 partner = 2;
inline bool sPersonCardStats::has_partner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPersonCardStats::set_has_partner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPersonCardStats::clear_has_partner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPersonCardStats::clear_partner() {
  partner_ = 0u;
  clear_has_partner();
}
inline ::google::protobuf::uint32 sPersonCardStats::partner() const {
  return partner_;
}
inline void sPersonCardStats::set_partner(::google::protobuf::uint32 value) {
  set_has_partner();
  partner_ = value;
}

// optional uint32 exp = 3;
inline bool sPersonCardStats::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPersonCardStats::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPersonCardStats::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPersonCardStats::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 sPersonCardStats::exp() const {
  return exp_;
}
inline void sPersonCardStats::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 level = 4;
inline bool sPersonCardStats::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sPersonCardStats::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sPersonCardStats::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sPersonCardStats::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 sPersonCardStats::level() const {
  return level_;
}
inline void sPersonCardStats::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 intensify = 5;
inline bool sPersonCardStats::has_intensify() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sPersonCardStats::set_has_intensify() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sPersonCardStats::clear_has_intensify() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sPersonCardStats::clear_intensify() {
  intensify_ = 0u;
  clear_has_intensify();
}
inline ::google::protobuf::uint32 sPersonCardStats::intensify() const {
  return intensify_;
}
inline void sPersonCardStats::set_intensify(::google::protobuf::uint32 value) {
  set_has_intensify();
  intensify_ = value;
}

// optional .jynetwork.proto.ePersonalOpertionType oper = 6;
inline bool sPersonCardStats::has_oper() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sPersonCardStats::set_has_oper() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sPersonCardStats::clear_has_oper() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sPersonCardStats::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::jynetwork::proto::ePersonalOpertionType sPersonCardStats::oper() const {
  return static_cast< ::jynetwork::proto::ePersonalOpertionType >(oper_);
}
inline void sPersonCardStats::set_oper(::jynetwork::proto::ePersonalOpertionType value) {
  assert(::jynetwork::proto::ePersonalOpertionType_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// optional .jynetwork.proto.sGameStats gamestats = 7;
inline bool sPersonCardStats::has_gamestats() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sPersonCardStats::set_has_gamestats() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sPersonCardStats::clear_has_gamestats() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sPersonCardStats::clear_gamestats() {
  if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
  clear_has_gamestats();
}
inline const ::jynetwork::proto::sGameStats& sPersonCardStats::gamestats() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamestats_ != NULL ? *gamestats_ : *default_instance().gamestats_;
#else
  return gamestats_ != NULL ? *gamestats_ : *default_instance_->gamestats_;
#endif
}
inline ::jynetwork::proto::sGameStats* sPersonCardStats::mutable_gamestats() {
  set_has_gamestats();
  if (gamestats_ == NULL) gamestats_ = new ::jynetwork::proto::sGameStats;
  return gamestats_;
}
inline ::jynetwork::proto::sGameStats* sPersonCardStats::release_gamestats() {
  clear_has_gamestats();
  ::jynetwork::proto::sGameStats* temp = gamestats_;
  gamestats_ = NULL;
  return temp;
}
inline void sPersonCardStats::set_allocated_gamestats(::jynetwork::proto::sGameStats* gamestats) {
  delete gamestats_;
  gamestats_ = gamestats;
  if (gamestats) {
    set_has_gamestats();
  } else {
    clear_has_gamestats();
  }
}

// -------------------------------------------------------------------

// sSkillStats

// optional uint32 uid = 1;
inline bool sSkillStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSkillStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSkillStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSkillStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sSkillStats::uid() const {
  return uid_;
}
inline void sSkillStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 skillname = 2;
inline bool sSkillStats::has_skillname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sSkillStats::set_has_skillname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sSkillStats::clear_has_skillname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sSkillStats::clear_skillname() {
  skillname_ = 0u;
  clear_has_skillname();
}
inline ::google::protobuf::uint32 sSkillStats::skillname() const {
  return skillname_;
}
inline void sSkillStats::set_skillname(::google::protobuf::uint32 value) {
  set_has_skillname();
  skillname_ = value;
}

// optional uint32 description = 3;
inline bool sSkillStats::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sSkillStats::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sSkillStats::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sSkillStats::clear_description() {
  description_ = 0u;
  clear_has_description();
}
inline ::google::protobuf::uint32 sSkillStats::description() const {
  return description_;
}
inline void sSkillStats::set_description(::google::protobuf::uint32 value) {
  set_has_description();
  description_ = value;
}

// optional string icon = 4;
inline bool sSkillStats::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sSkillStats::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sSkillStats::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sSkillStats::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& sSkillStats::icon() const {
  return *icon_;
}
inline void sSkillStats::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void sSkillStats::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void sSkillStats::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSkillStats::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* sSkillStats::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSkillStats::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 activeenergy = 5;
inline bool sSkillStats::has_activeenergy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sSkillStats::set_has_activeenergy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sSkillStats::clear_has_activeenergy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sSkillStats::clear_activeenergy() {
  activeenergy_ = 0u;
  clear_has_activeenergy();
}
inline ::google::protobuf::uint32 sSkillStats::activeenergy() const {
  return activeenergy_;
}
inline void sSkillStats::set_activeenergy(::google::protobuf::uint32 value) {
  set_has_activeenergy();
  activeenergy_ = value;
}

// optional .jynetwork.proto.eTargetType targettype = 6;
inline bool sSkillStats::has_targettype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sSkillStats::set_has_targettype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sSkillStats::clear_has_targettype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sSkillStats::clear_targettype() {
  targettype_ = 1;
  clear_has_targettype();
}
inline ::jynetwork::proto::eTargetType sSkillStats::targettype() const {
  return static_cast< ::jynetwork::proto::eTargetType >(targettype_);
}
inline void sSkillStats::set_targettype(::jynetwork::proto::eTargetType value) {
  assert(::jynetwork::proto::eTargetType_IsValid(value));
  set_has_targettype();
  targettype_ = value;
}

// optional uint32 targetlimit = 7;
inline bool sSkillStats::has_targetlimit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sSkillStats::set_has_targetlimit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sSkillStats::clear_has_targetlimit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sSkillStats::clear_targetlimit() {
  targetlimit_ = 0u;
  clear_has_targetlimit();
}
inline ::google::protobuf::uint32 sSkillStats::targetlimit() const {
  return targetlimit_;
}
inline void sSkillStats::set_targetlimit(::google::protobuf::uint32 value) {
  set_has_targetlimit();
  targetlimit_ = value;
}

// optional uint32 targetnum = 8;
inline bool sSkillStats::has_targetnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sSkillStats::set_has_targetnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sSkillStats::clear_has_targetnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sSkillStats::clear_targetnum() {
  targetnum_ = 0u;
  clear_has_targetnum();
}
inline ::google::protobuf::uint32 sSkillStats::targetnum() const {
  return targetnum_;
}
inline void sSkillStats::set_targetnum(::google::protobuf::uint32 value) {
  set_has_targetnum();
  targetnum_ = value;
}

// optional float rangecirclex = 9;
inline bool sSkillStats::has_rangecirclex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sSkillStats::set_has_rangecirclex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sSkillStats::clear_has_rangecirclex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sSkillStats::clear_rangecirclex() {
  rangecirclex_ = 0;
  clear_has_rangecirclex();
}
inline float sSkillStats::rangecirclex() const {
  return rangecirclex_;
}
inline void sSkillStats::set_rangecirclex(float value) {
  set_has_rangecirclex();
  rangecirclex_ = value;
}

// optional float rangecircley = 10;
inline bool sSkillStats::has_rangecircley() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sSkillStats::set_has_rangecircley() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sSkillStats::clear_has_rangecircley() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sSkillStats::clear_rangecircley() {
  rangecircley_ = 0;
  clear_has_rangecircley();
}
inline float sSkillStats::rangecircley() const {
  return rangecircley_;
}
inline void sSkillStats::set_rangecircley(float value) {
  set_has_rangecircley();
  rangecircley_ = value;
}

// optional float rangelong = 11;
inline bool sSkillStats::has_rangelong() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sSkillStats::set_has_rangelong() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sSkillStats::clear_has_rangelong() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sSkillStats::clear_rangelong() {
  rangelong_ = 0;
  clear_has_rangelong();
}
inline float sSkillStats::rangelong() const {
  return rangelong_;
}
inline void sSkillStats::set_rangelong(float value) {
  set_has_rangelong();
  rangelong_ = value;
}

// optional float rangewide = 12;
inline bool sSkillStats::has_rangewide() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sSkillStats::set_has_rangewide() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sSkillStats::clear_has_rangewide() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sSkillStats::clear_rangewide() {
  rangewide_ = 0;
  clear_has_rangewide();
}
inline float sSkillStats::rangewide() const {
  return rangewide_;
}
inline void sSkillStats::set_rangewide(float value) {
  set_has_rangewide();
  rangewide_ = value;
}

// optional uint32 begineffect = 13;
inline bool sSkillStats::has_begineffect() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sSkillStats::set_has_begineffect() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sSkillStats::clear_has_begineffect() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sSkillStats::clear_begineffect() {
  begineffect_ = 0u;
  clear_has_begineffect();
}
inline ::google::protobuf::uint32 sSkillStats::begineffect() const {
  return begineffect_;
}
inline void sSkillStats::set_begineffect(::google::protobuf::uint32 value) {
  set_has_begineffect();
  begineffect_ = value;
}

// optional uint32 bulleteffect = 14;
inline bool sSkillStats::has_bulleteffect() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sSkillStats::set_has_bulleteffect() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sSkillStats::clear_has_bulleteffect() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sSkillStats::clear_bulleteffect() {
  bulleteffect_ = 0u;
  clear_has_bulleteffect();
}
inline ::google::protobuf::uint32 sSkillStats::bulleteffect() const {
  return bulleteffect_;
}
inline void sSkillStats::set_bulleteffect(::google::protobuf::uint32 value) {
  set_has_bulleteffect();
  bulleteffect_ = value;
}

// optional float continuetime = 15;
inline bool sSkillStats::has_continuetime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sSkillStats::set_has_continuetime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sSkillStats::clear_has_continuetime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sSkillStats::clear_continuetime() {
  continuetime_ = 0;
  clear_has_continuetime();
}
inline float sSkillStats::continuetime() const {
  return continuetime_;
}
inline void sSkillStats::set_continuetime(float value) {
  set_has_continuetime();
  continuetime_ = value;
}

// optional uint32 frag = 16;
inline bool sSkillStats::has_frag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sSkillStats::set_has_frag() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sSkillStats::clear_has_frag() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sSkillStats::clear_frag() {
  frag_ = 0u;
  clear_has_frag();
}
inline ::google::protobuf::uint32 sSkillStats::frag() const {
  return frag_;
}
inline void sSkillStats::set_frag(::google::protobuf::uint32 value) {
  set_has_frag();
  frag_ = value;
}

// optional uint32 cd = 17;
inline bool sSkillStats::has_cd() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sSkillStats::set_has_cd() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sSkillStats::clear_has_cd() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sSkillStats::clear_cd() {
  cd_ = 0u;
  clear_has_cd();
}
inline ::google::protobuf::uint32 sSkillStats::cd() const {
  return cd_;
}
inline void sSkillStats::set_cd(::google::protobuf::uint32 value) {
  set_has_cd();
  cd_ = value;
}

// optional uint32 unlock_level = 20;
inline bool sSkillStats::has_unlock_level() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sSkillStats::set_has_unlock_level() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sSkillStats::clear_has_unlock_level() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sSkillStats::clear_unlock_level() {
  unlock_level_ = 0u;
  clear_has_unlock_level();
}
inline ::google::protobuf::uint32 sSkillStats::unlock_level() const {
  return unlock_level_;
}
inline void sSkillStats::set_unlock_level(::google::protobuf::uint32 value) {
  set_has_unlock_level();
  unlock_level_ = value;
}

// optional uint32 role = 21;
inline bool sSkillStats::has_role() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sSkillStats::set_has_role() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sSkillStats::clear_has_role() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sSkillStats::clear_role() {
  role_ = 0u;
  clear_has_role();
}
inline ::google::protobuf::uint32 sSkillStats::role() const {
  return role_;
}
inline void sSkillStats::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
}

// optional float damage_modify = 22;
inline bool sSkillStats::has_damage_modify() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sSkillStats::set_has_damage_modify() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sSkillStats::clear_has_damage_modify() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sSkillStats::clear_damage_modify() {
  damage_modify_ = 0;
  clear_has_damage_modify();
}
inline float sSkillStats::damage_modify() const {
  return damage_modify_;
}
inline void sSkillStats::set_damage_modify(float value) {
  set_has_damage_modify();
  damage_modify_ = value;
}

// optional string icon_display = 23;
inline bool sSkillStats::has_icon_display() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sSkillStats::set_has_icon_display() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sSkillStats::clear_has_icon_display() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sSkillStats::clear_icon_display() {
  if (icon_display_ != &::google::protobuf::internal::kEmptyString) {
    icon_display_->clear();
  }
  clear_has_icon_display();
}
inline const ::std::string& sSkillStats::icon_display() const {
  return *icon_display_;
}
inline void sSkillStats::set_icon_display(const ::std::string& value) {
  set_has_icon_display();
  if (icon_display_ == &::google::protobuf::internal::kEmptyString) {
    icon_display_ = new ::std::string;
  }
  icon_display_->assign(value);
}
inline void sSkillStats::set_icon_display(const char* value) {
  set_has_icon_display();
  if (icon_display_ == &::google::protobuf::internal::kEmptyString) {
    icon_display_ = new ::std::string;
  }
  icon_display_->assign(value);
}
inline void sSkillStats::set_icon_display(const char* value, size_t size) {
  set_has_icon_display();
  if (icon_display_ == &::google::protobuf::internal::kEmptyString) {
    icon_display_ = new ::std::string;
  }
  icon_display_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSkillStats::mutable_icon_display() {
  set_has_icon_display();
  if (icon_display_ == &::google::protobuf::internal::kEmptyString) {
    icon_display_ = new ::std::string;
  }
  return icon_display_;
}
inline ::std::string* sSkillStats::release_icon_display() {
  clear_has_icon_display();
  if (icon_display_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_display_;
    icon_display_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSkillStats::set_allocated_icon_display(::std::string* icon_display) {
  if (icon_display_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_display_;
  }
  if (icon_display) {
    set_has_icon_display();
    icon_display_ = icon_display;
  } else {
    clear_has_icon_display();
    icon_display_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 skill_use_type = 24;
inline bool sSkillStats::has_skill_use_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sSkillStats::set_has_skill_use_type() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sSkillStats::clear_has_skill_use_type() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sSkillStats::clear_skill_use_type() {
  skill_use_type_ = 0u;
  clear_has_skill_use_type();
}
inline ::google::protobuf::uint32 sSkillStats::skill_use_type() const {
  return skill_use_type_;
}
inline void sSkillStats::set_skill_use_type(::google::protobuf::uint32 value) {
  set_has_skill_use_type();
  skill_use_type_ = value;
}

// optional uint32 skill_disp_stat = 25;
inline bool sSkillStats::has_skill_disp_stat() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sSkillStats::set_has_skill_disp_stat() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sSkillStats::clear_has_skill_disp_stat() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sSkillStats::clear_skill_disp_stat() {
  skill_disp_stat_ = 0u;
  clear_has_skill_disp_stat();
}
inline ::google::protobuf::uint32 sSkillStats::skill_disp_stat() const {
  return skill_disp_stat_;
}
inline void sSkillStats::set_skill_disp_stat(::google::protobuf::uint32 value) {
  set_has_skill_disp_stat();
  skill_disp_stat_ = value;
}

// optional uint32 skill_disp_stat_lv = 26;
inline bool sSkillStats::has_skill_disp_stat_lv() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sSkillStats::set_has_skill_disp_stat_lv() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sSkillStats::clear_has_skill_disp_stat_lv() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sSkillStats::clear_skill_disp_stat_lv() {
  skill_disp_stat_lv_ = 0u;
  clear_has_skill_disp_stat_lv();
}
inline ::google::protobuf::uint32 sSkillStats::skill_disp_stat_lv() const {
  return skill_disp_stat_lv_;
}
inline void sSkillStats::set_skill_disp_stat_lv(::google::protobuf::uint32 value) {
  set_has_skill_disp_stat_lv();
  skill_disp_stat_lv_ = value;
}

// optional float mage_ball_radius = 27;
inline bool sSkillStats::has_mage_ball_radius() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sSkillStats::set_has_mage_ball_radius() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sSkillStats::clear_has_mage_ball_radius() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sSkillStats::clear_mage_ball_radius() {
  mage_ball_radius_ = 0;
  clear_has_mage_ball_radius();
}
inline float sSkillStats::mage_ball_radius() const {
  return mage_ball_radius_;
}
inline void sSkillStats::set_mage_ball_radius(float value) {
  set_has_mage_ball_radius();
  mage_ball_radius_ = value;
}

// optional float mage_ball_dector = 28;
inline bool sSkillStats::has_mage_ball_dector() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sSkillStats::set_has_mage_ball_dector() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sSkillStats::clear_has_mage_ball_dector() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sSkillStats::clear_mage_ball_dector() {
  mage_ball_dector_ = 0;
  clear_has_mage_ball_dector();
}
inline float sSkillStats::mage_ball_dector() const {
  return mage_ball_dector_;
}
inline void sSkillStats::set_mage_ball_dector(float value) {
  set_has_mage_ball_dector();
  mage_ball_dector_ = value;
}

// optional uint32 mage_ball_body = 29;
inline bool sSkillStats::has_mage_ball_body() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void sSkillStats::set_has_mage_ball_body() {
  _has_bits_[0] |= 0x04000000u;
}
inline void sSkillStats::clear_has_mage_ball_body() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void sSkillStats::clear_mage_ball_body() {
  mage_ball_body_ = 0u;
  clear_has_mage_ball_body();
}
inline ::google::protobuf::uint32 sSkillStats::mage_ball_body() const {
  return mage_ball_body_;
}
inline void sSkillStats::set_mage_ball_body(::google::protobuf::uint32 value) {
  set_has_mage_ball_body();
  mage_ball_body_ = value;
}

// optional float begineffect_delay = 30;
inline bool sSkillStats::has_begineffect_delay() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void sSkillStats::set_has_begineffect_delay() {
  _has_bits_[0] |= 0x08000000u;
}
inline void sSkillStats::clear_has_begineffect_delay() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void sSkillStats::clear_begineffect_delay() {
  begineffect_delay_ = 0;
  clear_has_begineffect_delay();
}
inline float sSkillStats::begineffect_delay() const {
  return begineffect_delay_;
}
inline void sSkillStats::set_begineffect_delay(float value) {
  set_has_begineffect_delay();
  begineffect_delay_ = value;
}

// optional float bulleteffect_delay = 31;
inline bool sSkillStats::has_bulleteffect_delay() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void sSkillStats::set_has_bulleteffect_delay() {
  _has_bits_[0] |= 0x10000000u;
}
inline void sSkillStats::clear_has_bulleteffect_delay() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void sSkillStats::clear_bulleteffect_delay() {
  bulleteffect_delay_ = 0;
  clear_has_bulleteffect_delay();
}
inline float sSkillStats::bulleteffect_delay() const {
  return bulleteffect_delay_;
}
inline void sSkillStats::set_bulleteffect_delay(float value) {
  set_has_bulleteffect_delay();
  bulleteffect_delay_ = value;
}

// optional uint32 battle_ability = 32;
inline bool sSkillStats::has_battle_ability() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void sSkillStats::set_has_battle_ability() {
  _has_bits_[0] |= 0x20000000u;
}
inline void sSkillStats::clear_has_battle_ability() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void sSkillStats::clear_battle_ability() {
  battle_ability_ = 0u;
  clear_has_battle_ability();
}
inline ::google::protobuf::uint32 sSkillStats::battle_ability() const {
  return battle_ability_;
}
inline void sSkillStats::set_battle_ability(::google::protobuf::uint32 value) {
  set_has_battle_ability();
  battle_ability_ = value;
}

// optional string icon_btl_skill = 33;
inline bool sSkillStats::has_icon_btl_skill() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void sSkillStats::set_has_icon_btl_skill() {
  _has_bits_[0] |= 0x40000000u;
}
inline void sSkillStats::clear_has_icon_btl_skill() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void sSkillStats::clear_icon_btl_skill() {
  if (icon_btl_skill_ != &::google::protobuf::internal::kEmptyString) {
    icon_btl_skill_->clear();
  }
  clear_has_icon_btl_skill();
}
inline const ::std::string& sSkillStats::icon_btl_skill() const {
  return *icon_btl_skill_;
}
inline void sSkillStats::set_icon_btl_skill(const ::std::string& value) {
  set_has_icon_btl_skill();
  if (icon_btl_skill_ == &::google::protobuf::internal::kEmptyString) {
    icon_btl_skill_ = new ::std::string;
  }
  icon_btl_skill_->assign(value);
}
inline void sSkillStats::set_icon_btl_skill(const char* value) {
  set_has_icon_btl_skill();
  if (icon_btl_skill_ == &::google::protobuf::internal::kEmptyString) {
    icon_btl_skill_ = new ::std::string;
  }
  icon_btl_skill_->assign(value);
}
inline void sSkillStats::set_icon_btl_skill(const char* value, size_t size) {
  set_has_icon_btl_skill();
  if (icon_btl_skill_ == &::google::protobuf::internal::kEmptyString) {
    icon_btl_skill_ = new ::std::string;
  }
  icon_btl_skill_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSkillStats::mutable_icon_btl_skill() {
  set_has_icon_btl_skill();
  if (icon_btl_skill_ == &::google::protobuf::internal::kEmptyString) {
    icon_btl_skill_ = new ::std::string;
  }
  return icon_btl_skill_;
}
inline ::std::string* sSkillStats::release_icon_btl_skill() {
  clear_has_icon_btl_skill();
  if (icon_btl_skill_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_btl_skill_;
    icon_btl_skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSkillStats::set_allocated_icon_btl_skill(::std::string* icon_btl_skill) {
  if (icon_btl_skill_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_btl_skill_;
  }
  if (icon_btl_skill) {
    set_has_icon_btl_skill();
    icon_btl_skill_ = icon_btl_skill;
  } else {
    clear_has_icon_btl_skill();
    icon_btl_skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sound = 34;
inline bool sSkillStats::has_sound() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void sSkillStats::set_has_sound() {
  _has_bits_[0] |= 0x80000000u;
}
inline void sSkillStats::clear_has_sound() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void sSkillStats::clear_sound() {
  if (sound_ != &::google::protobuf::internal::kEmptyString) {
    sound_->clear();
  }
  clear_has_sound();
}
inline const ::std::string& sSkillStats::sound() const {
  return *sound_;
}
inline void sSkillStats::set_sound(const ::std::string& value) {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    sound_ = new ::std::string;
  }
  sound_->assign(value);
}
inline void sSkillStats::set_sound(const char* value) {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    sound_ = new ::std::string;
  }
  sound_->assign(value);
}
inline void sSkillStats::set_sound(const char* value, size_t size) {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    sound_ = new ::std::string;
  }
  sound_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSkillStats::mutable_sound() {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    sound_ = new ::std::string;
  }
  return sound_;
}
inline ::std::string* sSkillStats::release_sound() {
  clear_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sound_;
    sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSkillStats::set_allocated_sound(::std::string* sound) {
  if (sound_ != &::google::protobuf::internal::kEmptyString) {
    delete sound_;
  }
  if (sound) {
    set_has_sound();
    sound_ = sound;
  } else {
    clear_has_sound();
    sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 skill_desc = 35;
inline bool sSkillStats::has_skill_desc() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void sSkillStats::set_has_skill_desc() {
  _has_bits_[1] |= 0x00000001u;
}
inline void sSkillStats::clear_has_skill_desc() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void sSkillStats::clear_skill_desc() {
  skill_desc_ = 0u;
  clear_has_skill_desc();
}
inline ::google::protobuf::uint32 sSkillStats::skill_desc() const {
  return skill_desc_;
}
inline void sSkillStats::set_skill_desc(::google::protobuf::uint32 value) {
  set_has_skill_desc();
  skill_desc_ = value;
}

// optional uint32 skill_location = 36;
inline bool sSkillStats::has_skill_location() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void sSkillStats::set_has_skill_location() {
  _has_bits_[1] |= 0x00000002u;
}
inline void sSkillStats::clear_has_skill_location() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void sSkillStats::clear_skill_location() {
  skill_location_ = 0u;
  clear_has_skill_location();
}
inline ::google::protobuf::uint32 sSkillStats::skill_location() const {
  return skill_location_;
}
inline void sSkillStats::set_skill_location(::google::protobuf::uint32 value) {
  set_has_skill_location();
  skill_location_ = value;
}

// -------------------------------------------------------------------

// sBuffStats

// optional uint32 uid = 1;
inline bool sBuffStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sBuffStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sBuffStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sBuffStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sBuffStats::uid() const {
  return uid_;
}
inline void sBuffStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 buffname = 2;
inline bool sBuffStats::has_buffname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sBuffStats::set_has_buffname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sBuffStats::clear_has_buffname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sBuffStats::clear_buffname() {
  buffname_ = 0u;
  clear_has_buffname();
}
inline ::google::protobuf::uint32 sBuffStats::buffname() const {
  return buffname_;
}
inline void sBuffStats::set_buffname(::google::protobuf::uint32 value) {
  set_has_buffname();
  buffname_ = value;
}

// optional string bufficon = 3;
inline bool sBuffStats::has_bufficon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sBuffStats::set_has_bufficon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sBuffStats::clear_has_bufficon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sBuffStats::clear_bufficon() {
  if (bufficon_ != &::google::protobuf::internal::kEmptyString) {
    bufficon_->clear();
  }
  clear_has_bufficon();
}
inline const ::std::string& sBuffStats::bufficon() const {
  return *bufficon_;
}
inline void sBuffStats::set_bufficon(const ::std::string& value) {
  set_has_bufficon();
  if (bufficon_ == &::google::protobuf::internal::kEmptyString) {
    bufficon_ = new ::std::string;
  }
  bufficon_->assign(value);
}
inline void sBuffStats::set_bufficon(const char* value) {
  set_has_bufficon();
  if (bufficon_ == &::google::protobuf::internal::kEmptyString) {
    bufficon_ = new ::std::string;
  }
  bufficon_->assign(value);
}
inline void sBuffStats::set_bufficon(const char* value, size_t size) {
  set_has_bufficon();
  if (bufficon_ == &::google::protobuf::internal::kEmptyString) {
    bufficon_ = new ::std::string;
  }
  bufficon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sBuffStats::mutable_bufficon() {
  set_has_bufficon();
  if (bufficon_ == &::google::protobuf::internal::kEmptyString) {
    bufficon_ = new ::std::string;
  }
  return bufficon_;
}
inline ::std::string* sBuffStats::release_bufficon() {
  clear_has_bufficon();
  if (bufficon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bufficon_;
    bufficon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sBuffStats::set_allocated_bufficon(::std::string* bufficon) {
  if (bufficon_ != &::google::protobuf::internal::kEmptyString) {
    delete bufficon_;
  }
  if (bufficon) {
    set_has_bufficon();
    bufficon_ = bufficon;
  } else {
    clear_has_bufficon();
    bufficon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 begintime = 4;
inline bool sBuffStats::has_begintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sBuffStats::set_has_begintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sBuffStats::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sBuffStats::clear_begintime() {
  begintime_ = 0u;
  clear_has_begintime();
}
inline ::google::protobuf::uint32 sBuffStats::begintime() const {
  return begintime_;
}
inline void sBuffStats::set_begintime(::google::protobuf::uint32 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional fixed32 endtime = 5;
inline bool sBuffStats::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sBuffStats::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sBuffStats::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sBuffStats::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 sBuffStats::endtime() const {
  return endtime_;
}
inline void sBuffStats::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional .jynetwork.proto.sGameStats gamestats = 6;
inline bool sBuffStats::has_gamestats() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sBuffStats::set_has_gamestats() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sBuffStats::clear_has_gamestats() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sBuffStats::clear_gamestats() {
  if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
  clear_has_gamestats();
}
inline const ::jynetwork::proto::sGameStats& sBuffStats::gamestats() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamestats_ != NULL ? *gamestats_ : *default_instance().gamestats_;
#else
  return gamestats_ != NULL ? *gamestats_ : *default_instance_->gamestats_;
#endif
}
inline ::jynetwork::proto::sGameStats* sBuffStats::mutable_gamestats() {
  set_has_gamestats();
  if (gamestats_ == NULL) gamestats_ = new ::jynetwork::proto::sGameStats;
  return gamestats_;
}
inline ::jynetwork::proto::sGameStats* sBuffStats::release_gamestats() {
  clear_has_gamestats();
  ::jynetwork::proto::sGameStats* temp = gamestats_;
  gamestats_ = NULL;
  return temp;
}
inline void sBuffStats::set_allocated_gamestats(::jynetwork::proto::sGameStats* gamestats) {
  delete gamestats_;
  gamestats_ = gamestats;
  if (gamestats) {
    set_has_gamestats();
  } else {
    clear_has_gamestats();
  }
}

// -------------------------------------------------------------------

// sDropItem

// optional uint32 uid = 1;
inline bool sDropItem::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sDropItem::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sDropItem::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sDropItem::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sDropItem::uid() const {
  return uid_;
}
inline void sDropItem::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional float rate = 2;
inline bool sDropItem::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sDropItem::set_has_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sDropItem::clear_has_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sDropItem::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline float sDropItem::rate() const {
  return rate_;
}
inline void sDropItem::set_rate(float value) {
  set_has_rate();
  rate_ = value;
}

// optional uint32 ispackage = 3;
inline bool sDropItem::has_ispackage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sDropItem::set_has_ispackage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sDropItem::clear_has_ispackage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sDropItem::clear_ispackage() {
  ispackage_ = 0u;
  clear_has_ispackage();
}
inline ::google::protobuf::uint32 sDropItem::ispackage() const {
  return ispackage_;
}
inline void sDropItem::set_ispackage(::google::protobuf::uint32 value) {
  set_has_ispackage();
  ispackage_ = value;
}

// optional uint32 num = 4;
inline bool sDropItem::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sDropItem::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sDropItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sDropItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 sDropItem::num() const {
  return num_;
}
inline void sDropItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 percent = 5;
inline bool sDropItem::has_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sDropItem::set_has_percent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sDropItem::clear_has_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sDropItem::clear_percent() {
  percent_ = 0u;
  clear_has_percent();
}
inline ::google::protobuf::uint32 sDropItem::percent() const {
  return percent_;
}
inline void sDropItem::set_percent(::google::protobuf::uint32 value) {
  set_has_percent();
  percent_ = value;
}

// optional bytes name = 6;
inline bool sDropItem::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sDropItem::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sDropItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sDropItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sDropItem::name() const {
  return *name_;
}
inline void sDropItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sDropItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sDropItem::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sDropItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sDropItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sDropItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 drop_times = 7;
inline bool sDropItem::has_drop_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sDropItem::set_has_drop_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sDropItem::clear_has_drop_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sDropItem::clear_drop_times() {
  drop_times_ = 0u;
  clear_has_drop_times();
}
inline ::google::protobuf::uint32 sDropItem::drop_times() const {
  return drop_times_;
}
inline void sDropItem::set_drop_times(::google::protobuf::uint32 value) {
  set_has_drop_times();
  drop_times_ = value;
}

// -------------------------------------------------------------------

// sDropStats

// optional uint32 uid = 1;
inline bool sDropStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sDropStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sDropStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sDropStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sDropStats::uid() const {
  return uid_;
}
inline void sDropStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// repeated .jynetwork.proto.sDropItem drops = 2;
inline int sDropStats::drops_size() const {
  return drops_.size();
}
inline void sDropStats::clear_drops() {
  drops_.Clear();
}
inline const ::jynetwork::proto::sDropItem& sDropStats::drops(int index) const {
  return drops_.Get(index);
}
inline ::jynetwork::proto::sDropItem* sDropStats::mutable_drops(int index) {
  return drops_.Mutable(index);
}
inline ::jynetwork::proto::sDropItem* sDropStats::add_drops() {
  return drops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropItem >&
sDropStats::drops() const {
  return drops_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sDropItem >*
sDropStats::mutable_drops() {
  return &drops_;
}

// optional uint32 minlv = 3;
inline bool sDropStats::has_minlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sDropStats::set_has_minlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sDropStats::clear_has_minlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sDropStats::clear_minlv() {
  minlv_ = 0u;
  clear_has_minlv();
}
inline ::google::protobuf::uint32 sDropStats::minlv() const {
  return minlv_;
}
inline void sDropStats::set_minlv(::google::protobuf::uint32 value) {
  set_has_minlv();
  minlv_ = value;
}

// optional uint32 maxlv = 4;
inline bool sDropStats::has_maxlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sDropStats::set_has_maxlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sDropStats::clear_has_maxlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sDropStats::clear_maxlv() {
  maxlv_ = 0u;
  clear_has_maxlv();
}
inline ::google::protobuf::uint32 sDropStats::maxlv() const {
  return maxlv_;
}
inline void sDropStats::set_maxlv(::google::protobuf::uint32 value) {
  set_has_maxlv();
  maxlv_ = value;
}

// optional uint32 joblimit = 5;
inline bool sDropStats::has_joblimit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sDropStats::set_has_joblimit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sDropStats::clear_has_joblimit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sDropStats::clear_joblimit() {
  joblimit_ = 0u;
  clear_has_joblimit();
}
inline ::google::protobuf::uint32 sDropStats::joblimit() const {
  return joblimit_;
}
inline void sDropStats::set_joblimit(::google::protobuf::uint32 value) {
  set_has_joblimit();
  joblimit_ = value;
}

// optional uint32 droptype = 6;
inline bool sDropStats::has_droptype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sDropStats::set_has_droptype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sDropStats::clear_has_droptype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sDropStats::clear_droptype() {
  droptype_ = 0u;
  clear_has_droptype();
}
inline ::google::protobuf::uint32 sDropStats::droptype() const {
  return droptype_;
}
inline void sDropStats::set_droptype(::google::protobuf::uint32 value) {
  set_has_droptype();
  droptype_ = value;
}

// optional bytes name = 7;
inline bool sDropStats::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sDropStats::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sDropStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sDropStats::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sDropStats::name() const {
  return *name_;
}
inline void sDropStats::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sDropStats::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sDropStats::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sDropStats::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sDropStats::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sDropStats::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 treasure_class = 8;
inline bool sDropStats::has_treasure_class() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sDropStats::set_has_treasure_class() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sDropStats::clear_has_treasure_class() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sDropStats::clear_treasure_class() {
  treasure_class_ = 0u;
  clear_has_treasure_class();
}
inline ::google::protobuf::uint32 sDropStats::treasure_class() const {
  return treasure_class_;
}
inline void sDropStats::set_treasure_class(::google::protobuf::uint32 value) {
  set_has_treasure_class();
  treasure_class_ = value;
}

// optional uint32 add_percent = 9;
inline bool sDropStats::has_add_percent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sDropStats::set_has_add_percent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sDropStats::clear_has_add_percent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sDropStats::clear_add_percent() {
  add_percent_ = 0u;
  clear_has_add_percent();
}
inline ::google::protobuf::uint32 sDropStats::add_percent() const {
  return add_percent_;
}
inline void sDropStats::set_add_percent(::google::protobuf::uint32 value) {
  set_has_add_percent();
  add_percent_ = value;
}

// -------------------------------------------------------------------

// sMapStats

// optional uint32 uid = 1;
inline bool sMapStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sMapStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sMapStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sMapStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sMapStats::uid() const {
  return uid_;
}
inline void sMapStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 numlimit = 5;
inline bool sMapStats::has_numlimit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sMapStats::set_has_numlimit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sMapStats::clear_has_numlimit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sMapStats::clear_numlimit() {
  numlimit_ = 0u;
  clear_has_numlimit();
}
inline ::google::protobuf::uint32 sMapStats::numlimit() const {
  return numlimit_;
}
inline void sMapStats::set_numlimit(::google::protobuf::uint32 value) {
  set_has_numlimit();
  numlimit_ = value;
}

// optional uint32 levellimit = 6;
inline bool sMapStats::has_levellimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sMapStats::set_has_levellimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sMapStats::clear_has_levellimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sMapStats::clear_levellimit() {
  levellimit_ = 0u;
  clear_has_levellimit();
}
inline ::google::protobuf::uint32 sMapStats::levellimit() const {
  return levellimit_;
}
inline void sMapStats::set_levellimit(::google::protobuf::uint32 value) {
  set_has_levellimit();
  levellimit_ = value;
}

// optional uint32 ranklimit = 7;
inline bool sMapStats::has_ranklimit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sMapStats::set_has_ranklimit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sMapStats::clear_has_ranklimit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sMapStats::clear_ranklimit() {
  ranklimit_ = 0u;
  clear_has_ranklimit();
}
inline ::google::protobuf::uint32 sMapStats::ranklimit() const {
  return ranklimit_;
}
inline void sMapStats::set_ranklimit(::google::protobuf::uint32 value) {
  set_has_ranklimit();
  ranklimit_ = value;
}

// repeated uint32 weekdaylimit = 8;
inline int sMapStats::weekdaylimit_size() const {
  return weekdaylimit_.size();
}
inline void sMapStats::clear_weekdaylimit() {
  weekdaylimit_.Clear();
}
inline ::google::protobuf::uint32 sMapStats::weekdaylimit(int index) const {
  return weekdaylimit_.Get(index);
}
inline void sMapStats::set_weekdaylimit(int index, ::google::protobuf::uint32 value) {
  weekdaylimit_.Set(index, value);
}
inline void sMapStats::add_weekdaylimit(::google::protobuf::uint32 value) {
  weekdaylimit_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sMapStats::weekdaylimit() const {
  return weekdaylimit_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sMapStats::mutable_weekdaylimit() {
  return &weekdaylimit_;
}

// optional fixed32 day_begintime = 9;
inline bool sMapStats::has_day_begintime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sMapStats::set_has_day_begintime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sMapStats::clear_has_day_begintime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sMapStats::clear_day_begintime() {
  day_begintime_ = 0u;
  clear_has_day_begintime();
}
inline ::google::protobuf::uint32 sMapStats::day_begintime() const {
  return day_begintime_;
}
inline void sMapStats::set_day_begintime(::google::protobuf::uint32 value) {
  set_has_day_begintime();
  day_begintime_ = value;
}

// optional fixed32 day_endtime = 10;
inline bool sMapStats::has_day_endtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sMapStats::set_has_day_endtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sMapStats::clear_has_day_endtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sMapStats::clear_day_endtime() {
  day_endtime_ = 0u;
  clear_has_day_endtime();
}
inline ::google::protobuf::uint32 sMapStats::day_endtime() const {
  return day_endtime_;
}
inline void sMapStats::set_day_endtime(::google::protobuf::uint32 value) {
  set_has_day_endtime();
  day_endtime_ = value;
}

// optional uint32 front_map = 11;
inline bool sMapStats::has_front_map() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sMapStats::set_has_front_map() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sMapStats::clear_has_front_map() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sMapStats::clear_front_map() {
  front_map_ = 0u;
  clear_has_front_map();
}
inline ::google::protobuf::uint32 sMapStats::front_map() const {
  return front_map_;
}
inline void sMapStats::set_front_map(::google::protobuf::uint32 value) {
  set_has_front_map();
  front_map_ = value;
}

// optional uint32 difficult = 29;
inline bool sMapStats::has_difficult() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sMapStats::set_has_difficult() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sMapStats::clear_has_difficult() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sMapStats::clear_difficult() {
  difficult_ = 0u;
  clear_has_difficult();
}
inline ::google::protobuf::uint32 sMapStats::difficult() const {
  return difficult_;
}
inline void sMapStats::set_difficult(::google::protobuf::uint32 value) {
  set_has_difficult();
  difficult_ = value;
}

// optional uint32 drop_id = 31;
inline bool sMapStats::has_drop_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sMapStats::set_has_drop_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sMapStats::clear_has_drop_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sMapStats::clear_drop_id() {
  drop_id_ = 0u;
  clear_has_drop_id();
}
inline ::google::protobuf::uint32 sMapStats::drop_id() const {
  return drop_id_;
}
inline void sMapStats::set_drop_id(::google::protobuf::uint32 value) {
  set_has_drop_id();
  drop_id_ = value;
}

// optional uint32 cost_stamina = 32;
inline bool sMapStats::has_cost_stamina() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sMapStats::set_has_cost_stamina() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sMapStats::clear_has_cost_stamina() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sMapStats::clear_cost_stamina() {
  cost_stamina_ = 0u;
  clear_has_cost_stamina();
}
inline ::google::protobuf::uint32 sMapStats::cost_stamina() const {
  return cost_stamina_;
}
inline void sMapStats::set_cost_stamina(::google::protobuf::uint32 value) {
  set_has_cost_stamina();
  cost_stamina_ = value;
}

// optional uint32 drop_middle = 33;
inline bool sMapStats::has_drop_middle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sMapStats::set_has_drop_middle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sMapStats::clear_has_drop_middle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sMapStats::clear_drop_middle() {
  drop_middle_ = 0u;
  clear_has_drop_middle();
}
inline ::google::protobuf::uint32 sMapStats::drop_middle() const {
  return drop_middle_;
}
inline void sMapStats::set_drop_middle(::google::protobuf::uint32 value) {
  set_has_drop_middle();
  drop_middle_ = value;
}

// optional uint32 drop_middlenum = 34;
inline bool sMapStats::has_drop_middlenum() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sMapStats::set_has_drop_middlenum() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sMapStats::clear_has_drop_middlenum() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sMapStats::clear_drop_middlenum() {
  drop_middlenum_ = 0u;
  clear_has_drop_middlenum();
}
inline ::google::protobuf::uint32 sMapStats::drop_middlenum() const {
  return drop_middlenum_;
}
inline void sMapStats::set_drop_middlenum(::google::protobuf::uint32 value) {
  set_has_drop_middlenum();
  drop_middlenum_ = value;
}

// optional uint32 drop_goblin = 35;
inline bool sMapStats::has_drop_goblin() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sMapStats::set_has_drop_goblin() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sMapStats::clear_has_drop_goblin() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sMapStats::clear_drop_goblin() {
  drop_goblin_ = 0u;
  clear_has_drop_goblin();
}
inline ::google::protobuf::uint32 sMapStats::drop_goblin() const {
  return drop_goblin_;
}
inline void sMapStats::set_drop_goblin(::google::protobuf::uint32 value) {
  set_has_drop_goblin();
  drop_goblin_ = value;
}

// optional uint32 drop_goblin_rate = 36;
inline bool sMapStats::has_drop_goblin_rate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sMapStats::set_has_drop_goblin_rate() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sMapStats::clear_has_drop_goblin_rate() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sMapStats::clear_drop_goblin_rate() {
  drop_goblin_rate_ = 0u;
  clear_has_drop_goblin_rate();
}
inline ::google::protobuf::uint32 sMapStats::drop_goblin_rate() const {
  return drop_goblin_rate_;
}
inline void sMapStats::set_drop_goblin_rate(::google::protobuf::uint32 value) {
  set_has_drop_goblin_rate();
  drop_goblin_rate_ = value;
}

// optional uint32 castle_type = 37;
inline bool sMapStats::has_castle_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sMapStats::set_has_castle_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sMapStats::clear_has_castle_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sMapStats::clear_castle_type() {
  castle_type_ = 0u;
  clear_has_castle_type();
}
inline ::google::protobuf::uint32 sMapStats::castle_type() const {
  return castle_type_;
}
inline void sMapStats::set_castle_type(::google::protobuf::uint32 value) {
  set_has_castle_type();
  castle_type_ = value;
}

// optional float star_score = 46;
inline bool sMapStats::has_star_score() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sMapStats::set_has_star_score() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sMapStats::clear_has_star_score() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sMapStats::clear_star_score() {
  star_score_ = 0;
  clear_has_star_score();
}
inline float sMapStats::star_score() const {
  return star_score_;
}
inline void sMapStats::set_star_score(float value) {
  set_has_star_score();
  star_score_ = value;
}

// optional float recommond_attack = 47;
inline bool sMapStats::has_recommond_attack() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sMapStats::set_has_recommond_attack() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sMapStats::clear_has_recommond_attack() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sMapStats::clear_recommond_attack() {
  recommond_attack_ = 0;
  clear_has_recommond_attack();
}
inline float sMapStats::recommond_attack() const {
  return recommond_attack_;
}
inline void sMapStats::set_recommond_attack(float value) {
  set_has_recommond_attack();
  recommond_attack_ = value;
}

// repeated .jynetwork.proto.sChaosStats chaos = 65;
inline int sMapStats::chaos_size() const {
  return chaos_.size();
}
inline void sMapStats::clear_chaos() {
  chaos_.Clear();
}
inline const ::jynetwork::proto::sChaosStats& sMapStats::chaos(int index) const {
  return chaos_.Get(index);
}
inline ::jynetwork::proto::sChaosStats* sMapStats::mutable_chaos(int index) {
  return chaos_.Mutable(index);
}
inline ::jynetwork::proto::sChaosStats* sMapStats::add_chaos() {
  return chaos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sChaosStats >&
sMapStats::chaos() const {
  return chaos_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sChaosStats >*
sMapStats::mutable_chaos() {
  return &chaos_;
}

// optional uint32 after_drop_id = 66;
inline bool sMapStats::has_after_drop_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sMapStats::set_has_after_drop_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sMapStats::clear_has_after_drop_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sMapStats::clear_after_drop_id() {
  after_drop_id_ = 0u;
  clear_has_after_drop_id();
}
inline ::google::protobuf::uint32 sMapStats::after_drop_id() const {
  return after_drop_id_;
}
inline void sMapStats::set_after_drop_id(::google::protobuf::uint32 value) {
  set_has_after_drop_id();
  after_drop_id_ = value;
}

// optional uint32 stage_id = 59;
inline bool sMapStats::has_stage_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sMapStats::set_has_stage_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sMapStats::clear_has_stage_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sMapStats::clear_stage_id() {
  stage_id_ = 0u;
  clear_has_stage_id();
}
inline ::google::protobuf::uint32 sMapStats::stage_id() const {
  return stage_id_;
}
inline void sMapStats::set_stage_id(::google::protobuf::uint32 value) {
  set_has_stage_id();
  stage_id_ = value;
}

// optional uint32 stage_group_id = 60;
inline bool sMapStats::has_stage_group_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sMapStats::set_has_stage_group_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sMapStats::clear_has_stage_group_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sMapStats::clear_stage_group_id() {
  stage_group_id_ = 0u;
  clear_has_stage_group_id();
}
inline ::google::protobuf::uint32 sMapStats::stage_group_id() const {
  return stage_group_id_;
}
inline void sMapStats::set_stage_group_id(::google::protobuf::uint32 value) {
  set_has_stage_group_id();
  stage_group_id_ = value;
}

// optional uint32 stage_detail_id = 61;
inline bool sMapStats::has_stage_detail_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sMapStats::set_has_stage_detail_id() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sMapStats::clear_has_stage_detail_id() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sMapStats::clear_stage_detail_id() {
  stage_detail_id_ = 0u;
  clear_has_stage_detail_id();
}
inline ::google::protobuf::uint32 sMapStats::stage_detail_id() const {
  return stage_detail_id_;
}
inline void sMapStats::set_stage_detail_id(::google::protobuf::uint32 value) {
  set_has_stage_detail_id();
  stage_detail_id_ = value;
}

// optional uint32 percent = 67;
inline bool sMapStats::has_percent() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sMapStats::set_has_percent() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sMapStats::clear_has_percent() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sMapStats::clear_percent() {
  percent_ = 0u;
  clear_has_percent();
}
inline ::google::protobuf::uint32 sMapStats::percent() const {
  return percent_;
}
inline void sMapStats::set_percent(::google::protobuf::uint32 value) {
  set_has_percent();
  percent_ = value;
}

// repeated uint32 chaos_group = 68;
inline int sMapStats::chaos_group_size() const {
  return chaos_group_.size();
}
inline void sMapStats::clear_chaos_group() {
  chaos_group_.Clear();
}
inline ::google::protobuf::uint32 sMapStats::chaos_group(int index) const {
  return chaos_group_.Get(index);
}
inline void sMapStats::set_chaos_group(int index, ::google::protobuf::uint32 value) {
  chaos_group_.Set(index, value);
}
inline void sMapStats::add_chaos_group(::google::protobuf::uint32 value) {
  chaos_group_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sMapStats::chaos_group() const {
  return chaos_group_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sMapStats::mutable_chaos_group() {
  return &chaos_group_;
}

// optional .jynetwork.proto.eRoleType role = 69;
inline bool sMapStats::has_role() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sMapStats::set_has_role() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sMapStats::clear_has_role() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sMapStats::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::jynetwork::proto::eRoleType sMapStats::role() const {
  return static_cast< ::jynetwork::proto::eRoleType >(role_);
}
inline void sMapStats::set_role(::jynetwork::proto::eRoleType value) {
  assert(::jynetwork::proto::eRoleType_IsValid(value));
  set_has_role();
  role_ = value;
}

// optional uint32 first_drop = 70;
inline bool sMapStats::has_first_drop() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void sMapStats::set_has_first_drop() {
  _has_bits_[0] |= 0x04000000u;
}
inline void sMapStats::clear_has_first_drop() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void sMapStats::clear_first_drop() {
  first_drop_ = 0u;
  clear_has_first_drop();
}
inline ::google::protobuf::uint32 sMapStats::first_drop() const {
  return first_drop_;
}
inline void sMapStats::set_first_drop(::google::protobuf::uint32 value) {
  set_has_first_drop();
  first_drop_ = value;
}

// repeated uint32 first_drop_show = 71;
inline int sMapStats::first_drop_show_size() const {
  return first_drop_show_.size();
}
inline void sMapStats::clear_first_drop_show() {
  first_drop_show_.Clear();
}
inline ::google::protobuf::uint32 sMapStats::first_drop_show(int index) const {
  return first_drop_show_.Get(index);
}
inline void sMapStats::set_first_drop_show(int index, ::google::protobuf::uint32 value) {
  first_drop_show_.Set(index, value);
}
inline void sMapStats::add_first_drop_show(::google::protobuf::uint32 value) {
  first_drop_show_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sMapStats::first_drop_show() const {
  return first_drop_show_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sMapStats::mutable_first_drop_show() {
  return &first_drop_show_;
}

// repeated uint32 first_drop_show_type = 73;
inline int sMapStats::first_drop_show_type_size() const {
  return first_drop_show_type_.size();
}
inline void sMapStats::clear_first_drop_show_type() {
  first_drop_show_type_.Clear();
}
inline ::google::protobuf::uint32 sMapStats::first_drop_show_type(int index) const {
  return first_drop_show_type_.Get(index);
}
inline void sMapStats::set_first_drop_show_type(int index, ::google::protobuf::uint32 value) {
  first_drop_show_type_.Set(index, value);
}
inline void sMapStats::add_first_drop_show_type(::google::protobuf::uint32 value) {
  first_drop_show_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sMapStats::first_drop_show_type() const {
  return first_drop_show_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sMapStats::mutable_first_drop_show_type() {
  return &first_drop_show_type_;
}

// repeated uint32 difficult_percent = 74;
inline int sMapStats::difficult_percent_size() const {
  return difficult_percent_.size();
}
inline void sMapStats::clear_difficult_percent() {
  difficult_percent_.Clear();
}
inline ::google::protobuf::uint32 sMapStats::difficult_percent(int index) const {
  return difficult_percent_.Get(index);
}
inline void sMapStats::set_difficult_percent(int index, ::google::protobuf::uint32 value) {
  difficult_percent_.Set(index, value);
}
inline void sMapStats::add_difficult_percent(::google::protobuf::uint32 value) {
  difficult_percent_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sMapStats::difficult_percent() const {
  return difficult_percent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sMapStats::mutable_difficult_percent() {
  return &difficult_percent_;
}

// repeated uint32 difficult_tc = 75;
inline int sMapStats::difficult_tc_size() const {
  return difficult_tc_.size();
}
inline void sMapStats::clear_difficult_tc() {
  difficult_tc_.Clear();
}
inline ::google::protobuf::uint32 sMapStats::difficult_tc(int index) const {
  return difficult_tc_.Get(index);
}
inline void sMapStats::set_difficult_tc(int index, ::google::protobuf::uint32 value) {
  difficult_tc_.Set(index, value);
}
inline void sMapStats::add_difficult_tc(::google::protobuf::uint32 value) {
  difficult_tc_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sMapStats::difficult_tc() const {
  return difficult_tc_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sMapStats::mutable_difficult_tc() {
  return &difficult_tc_;
}

// optional uint32 mvp_drop = 76;
inline bool sMapStats::has_mvp_drop() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void sMapStats::set_has_mvp_drop() {
  _has_bits_[0] |= 0x80000000u;
}
inline void sMapStats::clear_has_mvp_drop() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void sMapStats::clear_mvp_drop() {
  mvp_drop_ = 0u;
  clear_has_mvp_drop();
}
inline ::google::protobuf::uint32 sMapStats::mvp_drop() const {
  return mvp_drop_;
}
inline void sMapStats::set_mvp_drop(::google::protobuf::uint32 value) {
  set_has_mvp_drop();
  mvp_drop_ = value;
}

// repeated uint32 drop_show = 77;
inline int sMapStats::drop_show_size() const {
  return drop_show_.size();
}
inline void sMapStats::clear_drop_show() {
  drop_show_.Clear();
}
inline ::google::protobuf::uint32 sMapStats::drop_show(int index) const {
  return drop_show_.Get(index);
}
inline void sMapStats::set_drop_show(int index, ::google::protobuf::uint32 value) {
  drop_show_.Set(index, value);
}
inline void sMapStats::add_drop_show(::google::protobuf::uint32 value) {
  drop_show_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sMapStats::drop_show() const {
  return drop_show_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sMapStats::mutable_drop_show() {
  return &drop_show_;
}

// repeated uint32 drop_show_type = 78;
inline int sMapStats::drop_show_type_size() const {
  return drop_show_type_.size();
}
inline void sMapStats::clear_drop_show_type() {
  drop_show_type_.Clear();
}
inline ::google::protobuf::uint32 sMapStats::drop_show_type(int index) const {
  return drop_show_type_.Get(index);
}
inline void sMapStats::set_drop_show_type(int index, ::google::protobuf::uint32 value) {
  drop_show_type_.Set(index, value);
}
inline void sMapStats::add_drop_show_type(::google::protobuf::uint32 value) {
  drop_show_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sMapStats::drop_show_type() const {
  return drop_show_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sMapStats::mutable_drop_show_type() {
  return &drop_show_type_;
}

// optional uint32 can_well_over = 79;
inline bool sMapStats::has_can_well_over() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void sMapStats::set_has_can_well_over() {
  _has_bits_[1] |= 0x00000004u;
}
inline void sMapStats::clear_has_can_well_over() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void sMapStats::clear_can_well_over() {
  can_well_over_ = 0u;
  clear_has_can_well_over();
}
inline ::google::protobuf::uint32 sMapStats::can_well_over() const {
  return can_well_over_;
}
inline void sMapStats::set_can_well_over(::google::protobuf::uint32 value) {
  set_has_can_well_over();
  can_well_over_ = value;
}

// -------------------------------------------------------------------

// sCharExp

// optional uint32 uid = 1;
inline bool sCharExp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCharExp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCharExp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCharExp::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sCharExp::uid() const {
  return uid_;
}
inline void sCharExp::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 lv = 2;
inline bool sCharExp::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCharExp::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCharExp::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCharExp::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 sCharExp::lv() const {
  return lv_;
}
inline void sCharExp::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 exp = 3;
inline bool sCharExp::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCharExp::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCharExp::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCharExp::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 sCharExp::exp() const {
  return exp_;
}
inline void sCharExp::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 mission = 4;
inline bool sCharExp::has_mission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCharExp::set_has_mission() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCharExp::clear_has_mission() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCharExp::clear_mission() {
  mission_ = 0u;
  clear_has_mission();
}
inline ::google::protobuf::uint32 sCharExp::mission() const {
  return mission_;
}
inline void sCharExp::set_mission(::google::protobuf::uint32 value) {
  set_has_mission();
  mission_ = value;
}

// -------------------------------------------------------------------

// sCharChangeJob

// optional uint32 uid = 1;
inline bool sCharChangeJob::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCharChangeJob::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCharChangeJob::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCharChangeJob::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sCharChangeJob::uid() const {
  return uid_;
}
inline void sCharChangeJob::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 startjob = 2;
inline bool sCharChangeJob::has_startjob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCharChangeJob::set_has_startjob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCharChangeJob::clear_has_startjob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCharChangeJob::clear_startjob() {
  startjob_ = 0u;
  clear_has_startjob();
}
inline ::google::protobuf::uint32 sCharChangeJob::startjob() const {
  return startjob_;
}
inline void sCharChangeJob::set_startjob(::google::protobuf::uint32 value) {
  set_has_startjob();
  startjob_ = value;
}

// optional uint32 endjob = 3;
inline bool sCharChangeJob::has_endjob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCharChangeJob::set_has_endjob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCharChangeJob::clear_has_endjob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCharChangeJob::clear_endjob() {
  endjob_ = 0u;
  clear_has_endjob();
}
inline ::google::protobuf::uint32 sCharChangeJob::endjob() const {
  return endjob_;
}
inline void sCharChangeJob::set_endjob(::google::protobuf::uint32 value) {
  set_has_endjob();
  endjob_ = value;
}

// optional uint32 gamestateid = 4;
inline bool sCharChangeJob::has_gamestateid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCharChangeJob::set_has_gamestateid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCharChangeJob::clear_has_gamestateid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCharChangeJob::clear_gamestateid() {
  gamestateid_ = 0u;
  clear_has_gamestateid();
}
inline ::google::protobuf::uint32 sCharChangeJob::gamestateid() const {
  return gamestateid_;
}
inline void sCharChangeJob::set_gamestateid(::google::protobuf::uint32 value) {
  set_has_gamestateid();
  gamestateid_ = value;
}

// optional uint32 lvlimit = 5;
inline bool sCharChangeJob::has_lvlimit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sCharChangeJob::set_has_lvlimit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sCharChangeJob::clear_has_lvlimit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sCharChangeJob::clear_lvlimit() {
  lvlimit_ = 0u;
  clear_has_lvlimit();
}
inline ::google::protobuf::uint32 sCharChangeJob::lvlimit() const {
  return lvlimit_;
}
inline void sCharChangeJob::set_lvlimit(::google::protobuf::uint32 value) {
  set_has_lvlimit();
  lvlimit_ = value;
}

// optional uint32 attraddpercent = 6;
inline bool sCharChangeJob::has_attraddpercent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sCharChangeJob::set_has_attraddpercent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sCharChangeJob::clear_has_attraddpercent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sCharChangeJob::clear_attraddpercent() {
  attraddpercent_ = 0u;
  clear_has_attraddpercent();
}
inline ::google::protobuf::uint32 sCharChangeJob::attraddpercent() const {
  return attraddpercent_;
}
inline void sCharChangeJob::set_attraddpercent(::google::protobuf::uint32 value) {
  set_has_attraddpercent();
  attraddpercent_ = value;
}

// repeated .jynetwork.proto.sSimpleItem itemneed = 7;
inline int sCharChangeJob::itemneed_size() const {
  return itemneed_.size();
}
inline void sCharChangeJob::clear_itemneed() {
  itemneed_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& sCharChangeJob::itemneed(int index) const {
  return itemneed_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* sCharChangeJob::mutable_itemneed(int index) {
  return itemneed_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* sCharChangeJob::add_itemneed() {
  return itemneed_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
sCharChangeJob::itemneed() const {
  return itemneed_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
sCharChangeJob::mutable_itemneed() {
  return &itemneed_;
}

// optional uint32 skillid = 8;
inline bool sCharChangeJob::has_skillid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sCharChangeJob::set_has_skillid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sCharChangeJob::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sCharChangeJob::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 sCharChangeJob::skillid() const {
  return skillid_;
}
inline void sCharChangeJob::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional string icon_c3b = 9;
inline bool sCharChangeJob::has_icon_c3b() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sCharChangeJob::set_has_icon_c3b() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sCharChangeJob::clear_has_icon_c3b() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sCharChangeJob::clear_icon_c3b() {
  if (icon_c3b_ != &::google::protobuf::internal::kEmptyString) {
    icon_c3b_->clear();
  }
  clear_has_icon_c3b();
}
inline const ::std::string& sCharChangeJob::icon_c3b() const {
  return *icon_c3b_;
}
inline void sCharChangeJob::set_icon_c3b(const ::std::string& value) {
  set_has_icon_c3b();
  if (icon_c3b_ == &::google::protobuf::internal::kEmptyString) {
    icon_c3b_ = new ::std::string;
  }
  icon_c3b_->assign(value);
}
inline void sCharChangeJob::set_icon_c3b(const char* value) {
  set_has_icon_c3b();
  if (icon_c3b_ == &::google::protobuf::internal::kEmptyString) {
    icon_c3b_ = new ::std::string;
  }
  icon_c3b_->assign(value);
}
inline void sCharChangeJob::set_icon_c3b(const char* value, size_t size) {
  set_has_icon_c3b();
  if (icon_c3b_ == &::google::protobuf::internal::kEmptyString) {
    icon_c3b_ = new ::std::string;
  }
  icon_c3b_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCharChangeJob::mutable_icon_c3b() {
  set_has_icon_c3b();
  if (icon_c3b_ == &::google::protobuf::internal::kEmptyString) {
    icon_c3b_ = new ::std::string;
  }
  return icon_c3b_;
}
inline ::std::string* sCharChangeJob::release_icon_c3b() {
  clear_has_icon_c3b();
  if (icon_c3b_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_c3b_;
    icon_c3b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCharChangeJob::set_allocated_icon_c3b(::std::string* icon_c3b) {
  if (icon_c3b_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_c3b_;
  }
  if (icon_c3b) {
    set_has_icon_c3b();
    icon_c3b_ = icon_c3b;
  } else {
    clear_has_icon_c3b();
    icon_c3b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sCharLevelUp

// optional uint32 uid = 1;
inline bool sCharLevelUp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCharLevelUp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCharLevelUp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCharLevelUp::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sCharLevelUp::uid() const {
  return uid_;
}
inline void sCharLevelUp::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 level = 2;
inline bool sCharLevelUp::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCharLevelUp::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCharLevelUp::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCharLevelUp::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 sCharLevelUp::level() const {
  return level_;
}
inline void sCharLevelUp::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 3;
inline bool sCharLevelUp::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCharLevelUp::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCharLevelUp::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCharLevelUp::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 sCharLevelUp::job() const {
  return job_;
}
inline void sCharLevelUp::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 str_ = 4;
inline bool sCharLevelUp::has_str_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCharLevelUp::set_has_str_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCharLevelUp::clear_has_str_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCharLevelUp::clear_str_() {
  str__ = 0u;
  clear_has_str_();
}
inline ::google::protobuf::uint32 sCharLevelUp::str_() const {
  return str__;
}
inline void sCharLevelUp::set_str_(::google::protobuf::uint32 value) {
  set_has_str_();
  str__ = value;
}

// optional uint32 agi_ = 5;
inline bool sCharLevelUp::has_agi_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sCharLevelUp::set_has_agi_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sCharLevelUp::clear_has_agi_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sCharLevelUp::clear_agi_() {
  agi__ = 0u;
  clear_has_agi_();
}
inline ::google::protobuf::uint32 sCharLevelUp::agi_() const {
  return agi__;
}
inline void sCharLevelUp::set_agi_(::google::protobuf::uint32 value) {
  set_has_agi_();
  agi__ = value;
}

// optional uint32 int_ = 6;
inline bool sCharLevelUp::has_int_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sCharLevelUp::set_has_int_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sCharLevelUp::clear_has_int_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sCharLevelUp::clear_int_() {
  int__ = 0u;
  clear_has_int_();
}
inline ::google::protobuf::uint32 sCharLevelUp::int_() const {
  return int__;
}
inline void sCharLevelUp::set_int_(::google::protobuf::uint32 value) {
  set_has_int_();
  int__ = value;
}

// optional uint32 vit_ = 7;
inline bool sCharLevelUp::has_vit_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sCharLevelUp::set_has_vit_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sCharLevelUp::clear_has_vit_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sCharLevelUp::clear_vit_() {
  vit__ = 0u;
  clear_has_vit_();
}
inline ::google::protobuf::uint32 sCharLevelUp::vit_() const {
  return vit__;
}
inline void sCharLevelUp::set_vit_(::google::protobuf::uint32 value) {
  set_has_vit_();
  vit__ = value;
}

// optional uint32 task = 8;
inline bool sCharLevelUp::has_task() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sCharLevelUp::set_has_task() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sCharLevelUp::clear_has_task() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sCharLevelUp::clear_task() {
  task_ = 0u;
  clear_has_task();
}
inline ::google::protobuf::uint32 sCharLevelUp::task() const {
  return task_;
}
inline void sCharLevelUp::set_task(::google::protobuf::uint32 value) {
  set_has_task();
  task_ = value;
}

// -------------------------------------------------------------------

// sCharSkillLevelUp

// optional uint32 uid = 1;
inline bool sCharSkillLevelUp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCharSkillLevelUp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCharSkillLevelUp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCharSkillLevelUp::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sCharSkillLevelUp::uid() const {
  return uid_;
}
inline void sCharSkillLevelUp::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 type = 2;
inline bool sCharSkillLevelUp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCharSkillLevelUp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCharSkillLevelUp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCharSkillLevelUp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 sCharSkillLevelUp::type() const {
  return type_;
}
inline void sCharSkillLevelUp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 lv = 3;
inline bool sCharSkillLevelUp::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCharSkillLevelUp::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCharSkillLevelUp::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCharSkillLevelUp::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 sCharSkillLevelUp::lv() const {
  return lv_;
}
inline void sCharSkillLevelUp::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 charlv = 4;
inline bool sCharSkillLevelUp::has_charlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCharSkillLevelUp::set_has_charlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCharSkillLevelUp::clear_has_charlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCharSkillLevelUp::clear_charlv() {
  charlv_ = 0u;
  clear_has_charlv();
}
inline ::google::protobuf::uint32 sCharSkillLevelUp::charlv() const {
  return charlv_;
}
inline void sCharSkillLevelUp::set_charlv(::google::protobuf::uint32 value) {
  set_has_charlv();
  charlv_ = value;
}

// optional uint32 money = 5;
inline bool sCharSkillLevelUp::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sCharSkillLevelUp::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sCharSkillLevelUp::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sCharSkillLevelUp::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 sCharSkillLevelUp::money() const {
  return money_;
}
inline void sCharSkillLevelUp::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// optional uint32 itemid = 6;
inline bool sCharSkillLevelUp::has_itemid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sCharSkillLevelUp::set_has_itemid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sCharSkillLevelUp::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sCharSkillLevelUp::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 sCharSkillLevelUp::itemid() const {
  return itemid_;
}
inline void sCharSkillLevelUp::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 itemnum = 7;
inline bool sCharSkillLevelUp::has_itemnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sCharSkillLevelUp::set_has_itemnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sCharSkillLevelUp::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sCharSkillLevelUp::clear_itemnum() {
  itemnum_ = 0u;
  clear_has_itemnum();
}
inline ::google::protobuf::uint32 sCharSkillLevelUp::itemnum() const {
  return itemnum_;
}
inline void sCharSkillLevelUp::set_itemnum(::google::protobuf::uint32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// -------------------------------------------------------------------

// sEquipAttr

// optional uint32 attr_type = 1;
inline bool sEquipAttr::has_attr_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEquipAttr::set_has_attr_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEquipAttr::clear_has_attr_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEquipAttr::clear_attr_type() {
  attr_type_ = 0u;
  clear_has_attr_type();
}
inline ::google::protobuf::uint32 sEquipAttr::attr_type() const {
  return attr_type_;
}
inline void sEquipAttr::set_attr_type(::google::protobuf::uint32 value) {
  set_has_attr_type();
  attr_type_ = value;
}

// optional uint32 attr_value = 2;
inline bool sEquipAttr::has_attr_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEquipAttr::set_has_attr_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEquipAttr::clear_has_attr_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEquipAttr::clear_attr_value() {
  attr_value_ = 0u;
  clear_has_attr_value();
}
inline ::google::protobuf::uint32 sEquipAttr::attr_value() const {
  return attr_value_;
}
inline void sEquipAttr::set_attr_value(::google::protobuf::uint32 value) {
  set_has_attr_value();
  attr_value_ = value;
}

// -------------------------------------------------------------------

// sEquipIntensify

// optional uint32 uid = 1;
inline bool sEquipIntensify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEquipIntensify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEquipIntensify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEquipIntensify::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEquipIntensify::uid() const {
  return uid_;
}
inline void sEquipIntensify::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 equip_part = 2;
inline bool sEquipIntensify::has_equip_part() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEquipIntensify::set_has_equip_part() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEquipIntensify::clear_has_equip_part() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEquipIntensify::clear_equip_part() {
  equip_part_ = 0u;
  clear_has_equip_part();
}
inline ::google::protobuf::uint32 sEquipIntensify::equip_part() const {
  return equip_part_;
}
inline void sEquipIntensify::set_equip_part(::google::protobuf::uint32 value) {
  set_has_equip_part();
  equip_part_ = value;
}

// optional uint32 equip_star = 3;
inline bool sEquipIntensify::has_equip_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sEquipIntensify::set_has_equip_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sEquipIntensify::clear_has_equip_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sEquipIntensify::clear_equip_star() {
  equip_star_ = 0u;
  clear_has_equip_star();
}
inline ::google::protobuf::uint32 sEquipIntensify::equip_star() const {
  return equip_star_;
}
inline void sEquipIntensify::set_equip_star(::google::protobuf::uint32 value) {
  set_has_equip_star();
  equip_star_ = value;
}

// optional uint32 lv_limit = 4;
inline bool sEquipIntensify::has_lv_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sEquipIntensify::set_has_lv_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sEquipIntensify::clear_has_lv_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sEquipIntensify::clear_lv_limit() {
  lv_limit_ = 0u;
  clear_has_lv_limit();
}
inline ::google::protobuf::uint32 sEquipIntensify::lv_limit() const {
  return lv_limit_;
}
inline void sEquipIntensify::set_lv_limit(::google::protobuf::uint32 value) {
  set_has_lv_limit();
  lv_limit_ = value;
}

// optional fixed32 rand_attr_count = 5;
inline bool sEquipIntensify::has_rand_attr_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sEquipIntensify::set_has_rand_attr_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sEquipIntensify::clear_has_rand_attr_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sEquipIntensify::clear_rand_attr_count() {
  rand_attr_count_ = 0u;
  clear_has_rand_attr_count();
}
inline ::google::protobuf::uint32 sEquipIntensify::rand_attr_count() const {
  return rand_attr_count_;
}
inline void sEquipIntensify::set_rand_attr_count(::google::protobuf::uint32 value) {
  set_has_rand_attr_count();
  rand_attr_count_ = value;
}

// repeated .jynetwork.proto.sSimpleItem itemneed = 6;
inline int sEquipIntensify::itemneed_size() const {
  return itemneed_.size();
}
inline void sEquipIntensify::clear_itemneed() {
  itemneed_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& sEquipIntensify::itemneed(int index) const {
  return itemneed_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* sEquipIntensify::mutable_itemneed(int index) {
  return itemneed_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* sEquipIntensify::add_itemneed() {
  return itemneed_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
sEquipIntensify::itemneed() const {
  return itemneed_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
sEquipIntensify::mutable_itemneed() {
  return &itemneed_;
}

// optional uint32 addpercent = 7;
inline bool sEquipIntensify::has_addpercent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sEquipIntensify::set_has_addpercent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sEquipIntensify::clear_has_addpercent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sEquipIntensify::clear_addpercent() {
  addpercent_ = 0u;
  clear_has_addpercent();
}
inline ::google::protobuf::uint32 sEquipIntensify::addpercent() const {
  return addpercent_;
}
inline void sEquipIntensify::set_addpercent(::google::protobuf::uint32 value) {
  set_has_addpercent();
  addpercent_ = value;
}

// optional uint32 gold = 8;
inline bool sEquipIntensify::has_gold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sEquipIntensify::set_has_gold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sEquipIntensify::clear_has_gold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sEquipIntensify::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 sEquipIntensify::gold() const {
  return gold_;
}
inline void sEquipIntensify::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint32 is_group = 9;
inline bool sEquipIntensify::has_is_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sEquipIntensify::set_has_is_group() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sEquipIntensify::clear_has_is_group() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sEquipIntensify::clear_is_group() {
  is_group_ = 0u;
  clear_has_is_group();
}
inline ::google::protobuf::uint32 sEquipIntensify::is_group() const {
  return is_group_;
}
inline void sEquipIntensify::set_is_group(::google::protobuf::uint32 value) {
  set_has_is_group();
  is_group_ = value;
}

// optional uint32 max_intensify = 10;
inline bool sEquipIntensify::has_max_intensify() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sEquipIntensify::set_has_max_intensify() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sEquipIntensify::clear_has_max_intensify() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sEquipIntensify::clear_max_intensify() {
  max_intensify_ = 0u;
  clear_has_max_intensify();
}
inline ::google::protobuf::uint32 sEquipIntensify::max_intensify() const {
  return max_intensify_;
}
inline void sEquipIntensify::set_max_intensify(::google::protobuf::uint32 value) {
  set_has_max_intensify();
  max_intensify_ = value;
}

// optional uint32 equip_colour = 11;
inline bool sEquipIntensify::has_equip_colour() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sEquipIntensify::set_has_equip_colour() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sEquipIntensify::clear_has_equip_colour() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sEquipIntensify::clear_equip_colour() {
  equip_colour_ = 0u;
  clear_has_equip_colour();
}
inline ::google::protobuf::uint32 sEquipIntensify::equip_colour() const {
  return equip_colour_;
}
inline void sEquipIntensify::set_equip_colour(::google::protobuf::uint32 value) {
  set_has_equip_colour();
  equip_colour_ = value;
}

// optional uint32 random_number = 12;
inline bool sEquipIntensify::has_random_number() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sEquipIntensify::set_has_random_number() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sEquipIntensify::clear_has_random_number() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sEquipIntensify::clear_random_number() {
  random_number_ = 0u;
  clear_has_random_number();
}
inline ::google::protobuf::uint32 sEquipIntensify::random_number() const {
  return random_number_;
}
inline void sEquipIntensify::set_random_number(::google::protobuf::uint32 value) {
  set_has_random_number();
  random_number_ = value;
}

// optional uint32 role = 13;
inline bool sEquipIntensify::has_role() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sEquipIntensify::set_has_role() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sEquipIntensify::clear_has_role() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sEquipIntensify::clear_role() {
  role_ = 0u;
  clear_has_role();
}
inline ::google::protobuf::uint32 sEquipIntensify::role() const {
  return role_;
}
inline void sEquipIntensify::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
}

// -------------------------------------------------------------------

// sEquipLevelUp

// optional uint32 uid = 1;
inline bool sEquipLevelUp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEquipLevelUp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEquipLevelUp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEquipLevelUp::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEquipLevelUp::uid() const {
  return uid_;
}
inline void sEquipLevelUp::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 level = 2;
inline bool sEquipLevelUp::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEquipLevelUp::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEquipLevelUp::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEquipLevelUp::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 sEquipLevelUp::level() const {
  return level_;
}
inline void sEquipLevelUp::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 star = 3;
inline bool sEquipLevelUp::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sEquipLevelUp::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sEquipLevelUp::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sEquipLevelUp::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 sEquipLevelUp::star() const {
  return star_;
}
inline void sEquipLevelUp::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional uint32 exp = 4;
inline bool sEquipLevelUp::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sEquipLevelUp::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sEquipLevelUp::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sEquipLevelUp::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 sEquipLevelUp::exp() const {
  return exp_;
}
inline void sEquipLevelUp::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 itemid = 5;
inline bool sEquipLevelUp::has_itemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sEquipLevelUp::set_has_itemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sEquipLevelUp::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sEquipLevelUp::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 sEquipLevelUp::itemid() const {
  return itemid_;
}
inline void sEquipLevelUp::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 itemnum = 6;
inline bool sEquipLevelUp::has_itemnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sEquipLevelUp::set_has_itemnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sEquipLevelUp::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sEquipLevelUp::clear_itemnum() {
  itemnum_ = 0u;
  clear_has_itemnum();
}
inline ::google::protobuf::uint32 sEquipLevelUp::itemnum() const {
  return itemnum_;
}
inline void sEquipLevelUp::set_itemnum(::google::protobuf::uint32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// -------------------------------------------------------------------

// sEquipStarUp

// optional uint32 uid = 1;
inline bool sEquipStarUp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEquipStarUp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEquipStarUp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEquipStarUp::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEquipStarUp::uid() const {
  return uid_;
}
inline void sEquipStarUp::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .jynetwork.proto.eQuipPart part = 2;
inline bool sEquipStarUp::has_part() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEquipStarUp::set_has_part() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEquipStarUp::clear_has_part() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEquipStarUp::clear_part() {
  part_ = 1;
  clear_has_part();
}
inline ::jynetwork::proto::eQuipPart sEquipStarUp::part() const {
  return static_cast< ::jynetwork::proto::eQuipPart >(part_);
}
inline void sEquipStarUp::set_part(::jynetwork::proto::eQuipPart value) {
  assert(::jynetwork::proto::eQuipPart_IsValid(value));
  set_has_part();
  part_ = value;
}

// optional uint32 star = 3;
inline bool sEquipStarUp::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sEquipStarUp::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sEquipStarUp::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sEquipStarUp::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 sEquipStarUp::star() const {
  return star_;
}
inline void sEquipStarUp::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional uint32 intensifyneed = 4;
inline bool sEquipStarUp::has_intensifyneed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sEquipStarUp::set_has_intensifyneed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sEquipStarUp::clear_has_intensifyneed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sEquipStarUp::clear_intensifyneed() {
  intensifyneed_ = 0u;
  clear_has_intensifyneed();
}
inline ::google::protobuf::uint32 sEquipStarUp::intensifyneed() const {
  return intensifyneed_;
}
inline void sEquipStarUp::set_intensifyneed(::google::protobuf::uint32 value) {
  set_has_intensifyneed();
  intensifyneed_ = value;
}

// optional uint32 lvneed = 5;
inline bool sEquipStarUp::has_lvneed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sEquipStarUp::set_has_lvneed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sEquipStarUp::clear_has_lvneed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sEquipStarUp::clear_lvneed() {
  lvneed_ = 0u;
  clear_has_lvneed();
}
inline ::google::protobuf::uint32 sEquipStarUp::lvneed() const {
  return lvneed_;
}
inline void sEquipStarUp::set_lvneed(::google::protobuf::uint32 value) {
  set_has_lvneed();
  lvneed_ = value;
}

// optional uint32 attrnum = 6;
inline bool sEquipStarUp::has_attrnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sEquipStarUp::set_has_attrnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sEquipStarUp::clear_has_attrnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sEquipStarUp::clear_attrnum() {
  attrnum_ = 0u;
  clear_has_attrnum();
}
inline ::google::protobuf::uint32 sEquipStarUp::attrnum() const {
  return attrnum_;
}
inline void sEquipStarUp::set_attrnum(::google::protobuf::uint32 value) {
  set_has_attrnum();
  attrnum_ = value;
}

// repeated .jynetwork.proto.sEquipAttr equip_attr = 7;
inline int sEquipStarUp::equip_attr_size() const {
  return equip_attr_.size();
}
inline void sEquipStarUp::clear_equip_attr() {
  equip_attr_.Clear();
}
inline const ::jynetwork::proto::sEquipAttr& sEquipStarUp::equip_attr(int index) const {
  return equip_attr_.Get(index);
}
inline ::jynetwork::proto::sEquipAttr* sEquipStarUp::mutable_equip_attr(int index) {
  return equip_attr_.Mutable(index);
}
inline ::jynetwork::proto::sEquipAttr* sEquipStarUp::add_equip_attr() {
  return equip_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipAttr >&
sEquipStarUp::equip_attr() const {
  return equip_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipAttr >*
sEquipStarUp::mutable_equip_attr() {
  return &equip_attr_;
}

// -------------------------------------------------------------------

// sCardIntensify

// optional uint32 uid = 1;
inline bool sCardIntensify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCardIntensify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCardIntensify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCardIntensify::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sCardIntensify::uid() const {
  return uid_;
}
inline void sCardIntensify::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 cardid = 2;
inline bool sCardIntensify::has_cardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCardIntensify::set_has_cardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCardIntensify::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCardIntensify::clear_cardid() {
  cardid_ = 0u;
  clear_has_cardid();
}
inline ::google::protobuf::uint32 sCardIntensify::cardid() const {
  return cardid_;
}
inline void sCardIntensify::set_cardid(::google::protobuf::uint32 value) {
  set_has_cardid();
  cardid_ = value;
}

// optional uint32 cardjob = 3;
inline bool sCardIntensify::has_cardjob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCardIntensify::set_has_cardjob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCardIntensify::clear_has_cardjob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCardIntensify::clear_cardjob() {
  cardjob_ = 0u;
  clear_has_cardjob();
}
inline ::google::protobuf::uint32 sCardIntensify::cardjob() const {
  return cardjob_;
}
inline void sCardIntensify::set_cardjob(::google::protobuf::uint32 value) {
  set_has_cardjob();
  cardjob_ = value;
}

// optional uint32 intensify = 4;
inline bool sCardIntensify::has_intensify() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCardIntensify::set_has_intensify() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCardIntensify::clear_has_intensify() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCardIntensify::clear_intensify() {
  intensify_ = 0u;
  clear_has_intensify();
}
inline ::google::protobuf::uint32 sCardIntensify::intensify() const {
  return intensify_;
}
inline void sCardIntensify::set_intensify(::google::protobuf::uint32 value) {
  set_has_intensify();
  intensify_ = value;
}

// optional uint32 str_ = 5;
inline bool sCardIntensify::has_str_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sCardIntensify::set_has_str_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sCardIntensify::clear_has_str_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sCardIntensify::clear_str_() {
  str__ = 0u;
  clear_has_str_();
}
inline ::google::protobuf::uint32 sCardIntensify::str_() const {
  return str__;
}
inline void sCardIntensify::set_str_(::google::protobuf::uint32 value) {
  set_has_str_();
  str__ = value;
}

// optional uint32 agi_ = 6;
inline bool sCardIntensify::has_agi_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sCardIntensify::set_has_agi_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sCardIntensify::clear_has_agi_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sCardIntensify::clear_agi_() {
  agi__ = 0u;
  clear_has_agi_();
}
inline ::google::protobuf::uint32 sCardIntensify::agi_() const {
  return agi__;
}
inline void sCardIntensify::set_agi_(::google::protobuf::uint32 value) {
  set_has_agi_();
  agi__ = value;
}

// optional uint32 int_ = 7;
inline bool sCardIntensify::has_int_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sCardIntensify::set_has_int_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sCardIntensify::clear_has_int_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sCardIntensify::clear_int_() {
  int__ = 0u;
  clear_has_int_();
}
inline ::google::protobuf::uint32 sCardIntensify::int_() const {
  return int__;
}
inline void sCardIntensify::set_int_(::google::protobuf::uint32 value) {
  set_has_int_();
  int__ = value;
}

// optional uint32 vit_ = 8;
inline bool sCardIntensify::has_vit_() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sCardIntensify::set_has_vit_() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sCardIntensify::clear_has_vit_() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sCardIntensify::clear_vit_() {
  vit__ = 0u;
  clear_has_vit_();
}
inline ::google::protobuf::uint32 sCardIntensify::vit_() const {
  return vit__;
}
inline void sCardIntensify::set_vit_(::google::protobuf::uint32 value) {
  set_has_vit_();
  vit__ = value;
}

// repeated .jynetwork.proto.sSimpleItem itemneed = 9;
inline int sCardIntensify::itemneed_size() const {
  return itemneed_.size();
}
inline void sCardIntensify::clear_itemneed() {
  itemneed_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& sCardIntensify::itemneed(int index) const {
  return itemneed_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* sCardIntensify::mutable_itemneed(int index) {
  return itemneed_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* sCardIntensify::add_itemneed() {
  return itemneed_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
sCardIntensify::itemneed() const {
  return itemneed_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
sCardIntensify::mutable_itemneed() {
  return &itemneed_;
}

// -------------------------------------------------------------------

// sCardLevelUp

// optional uint32 uid = 1;
inline bool sCardLevelUp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCardLevelUp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCardLevelUp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCardLevelUp::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sCardLevelUp::uid() const {
  return uid_;
}
inline void sCardLevelUp::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 job = 2;
inline bool sCardLevelUp::has_job() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCardLevelUp::set_has_job() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCardLevelUp::clear_has_job() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCardLevelUp::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 sCardLevelUp::job() const {
  return job_;
}
inline void sCardLevelUp::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 level = 3;
inline bool sCardLevelUp::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCardLevelUp::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCardLevelUp::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCardLevelUp::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 sCardLevelUp::level() const {
  return level_;
}
inline void sCardLevelUp::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 exp = 4;
inline bool sCardLevelUp::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCardLevelUp::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCardLevelUp::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCardLevelUp::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 sCardLevelUp::exp() const {
  return exp_;
}
inline void sCardLevelUp::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 str_ = 5;
inline bool sCardLevelUp::has_str_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sCardLevelUp::set_has_str_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sCardLevelUp::clear_has_str_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sCardLevelUp::clear_str_() {
  str__ = 0u;
  clear_has_str_();
}
inline ::google::protobuf::uint32 sCardLevelUp::str_() const {
  return str__;
}
inline void sCardLevelUp::set_str_(::google::protobuf::uint32 value) {
  set_has_str_();
  str__ = value;
}

// optional uint32 agi_ = 6;
inline bool sCardLevelUp::has_agi_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sCardLevelUp::set_has_agi_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sCardLevelUp::clear_has_agi_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sCardLevelUp::clear_agi_() {
  agi__ = 0u;
  clear_has_agi_();
}
inline ::google::protobuf::uint32 sCardLevelUp::agi_() const {
  return agi__;
}
inline void sCardLevelUp::set_agi_(::google::protobuf::uint32 value) {
  set_has_agi_();
  agi__ = value;
}

// optional uint32 int_ = 7;
inline bool sCardLevelUp::has_int_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sCardLevelUp::set_has_int_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sCardLevelUp::clear_has_int_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sCardLevelUp::clear_int_() {
  int__ = 0u;
  clear_has_int_();
}
inline ::google::protobuf::uint32 sCardLevelUp::int_() const {
  return int__;
}
inline void sCardLevelUp::set_int_(::google::protobuf::uint32 value) {
  set_has_int_();
  int__ = value;
}

// optional uint32 vit_ = 8;
inline bool sCardLevelUp::has_vit_() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sCardLevelUp::set_has_vit_() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sCardLevelUp::clear_has_vit_() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sCardLevelUp::clear_vit_() {
  vit__ = 0u;
  clear_has_vit_();
}
inline ::google::protobuf::uint32 sCardLevelUp::vit_() const {
  return vit__;
}
inline void sCardLevelUp::set_vit_(::google::protobuf::uint32 value) {
  set_has_vit_();
  vit__ = value;
}

// -------------------------------------------------------------------

// sCardStarUp

// optional uint32 uid = 1;
inline bool sCardStarUp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCardStarUp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCardStarUp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCardStarUp::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sCardStarUp::uid() const {
  return uid_;
}
inline void sCardStarUp::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 starneed = 2;
inline bool sCardStarUp::has_starneed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCardStarUp::set_has_starneed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCardStarUp::clear_has_starneed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCardStarUp::clear_starneed() {
  starneed_ = 0u;
  clear_has_starneed();
}
inline ::google::protobuf::uint32 sCardStarUp::starneed() const {
  return starneed_;
}
inline void sCardStarUp::set_starneed(::google::protobuf::uint32 value) {
  set_has_starneed();
  starneed_ = value;
}

// optional uint32 lvneed = 3;
inline bool sCardStarUp::has_lvneed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCardStarUp::set_has_lvneed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCardStarUp::clear_has_lvneed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCardStarUp::clear_lvneed() {
  lvneed_ = 0u;
  clear_has_lvneed();
}
inline ::google::protobuf::uint32 sCardStarUp::lvneed() const {
  return lvneed_;
}
inline void sCardStarUp::set_lvneed(::google::protobuf::uint32 value) {
  set_has_lvneed();
  lvneed_ = value;
}

// optional uint32 skillnum = 4;
inline bool sCardStarUp::has_skillnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCardStarUp::set_has_skillnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCardStarUp::clear_has_skillnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCardStarUp::clear_skillnum() {
  skillnum_ = 0u;
  clear_has_skillnum();
}
inline ::google::protobuf::uint32 sCardStarUp::skillnum() const {
  return skillnum_;
}
inline void sCardStarUp::set_skillnum(::google::protobuf::uint32 value) {
  set_has_skillnum();
  skillnum_ = value;
}

// optional uint32 attrpercent = 5;
inline bool sCardStarUp::has_attrpercent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sCardStarUp::set_has_attrpercent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sCardStarUp::clear_has_attrpercent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sCardStarUp::clear_attrpercent() {
  attrpercent_ = 0u;
  clear_has_attrpercent();
}
inline ::google::protobuf::uint32 sCardStarUp::attrpercent() const {
  return attrpercent_;
}
inline void sCardStarUp::set_attrpercent(::google::protobuf::uint32 value) {
  set_has_attrpercent();
  attrpercent_ = value;
}

// -------------------------------------------------------------------

// sShopItem

// optional uint32 uid = 1;
inline bool sShopItem::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sShopItem::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sShopItem::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sShopItem::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sShopItem::uid() const {
  return uid_;
}
inline void sShopItem::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 shopid = 2;
inline bool sShopItem::has_shopid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sShopItem::set_has_shopid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sShopItem::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sShopItem::clear_shopid() {
  shopid_ = 0u;
  clear_has_shopid();
}
inline ::google::protobuf::uint32 sShopItem::shopid() const {
  return shopid_;
}
inline void sShopItem::set_shopid(::google::protobuf::uint32 value) {
  set_has_shopid();
  shopid_ = value;
}

// repeated uint32 itemid = 3;
inline int sShopItem::itemid_size() const {
  return itemid_.size();
}
inline void sShopItem::clear_itemid() {
  itemid_.Clear();
}
inline ::google::protobuf::uint32 sShopItem::itemid(int index) const {
  return itemid_.Get(index);
}
inline void sShopItem::set_itemid(int index, ::google::protobuf::uint32 value) {
  itemid_.Set(index, value);
}
inline void sShopItem::add_itemid(::google::protobuf::uint32 value) {
  itemid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sShopItem::itemid() const {
  return itemid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sShopItem::mutable_itemid() {
  return &itemid_;
}

// optional uint32 iconname = 4;
inline bool sShopItem::has_iconname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sShopItem::set_has_iconname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sShopItem::clear_has_iconname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sShopItem::clear_iconname() {
  iconname_ = 0u;
  clear_has_iconname();
}
inline ::google::protobuf::uint32 sShopItem::iconname() const {
  return iconname_;
}
inline void sShopItem::set_iconname(::google::protobuf::uint32 value) {
  set_has_iconname();
  iconname_ = value;
}

// optional bytes resource = 5;
inline bool sShopItem::has_resource() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sShopItem::set_has_resource() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sShopItem::clear_has_resource() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sShopItem::clear_resource() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    resource_->clear();
  }
  clear_has_resource();
}
inline const ::std::string& sShopItem::resource() const {
  return *resource_;
}
inline void sShopItem::set_resource(const ::std::string& value) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
}
inline void sShopItem::set_resource(const char* value) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
}
inline void sShopItem::set_resource(const void* value, size_t size) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  resource_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sShopItem::mutable_resource() {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  return resource_;
}
inline ::std::string* sShopItem::release_resource() {
  clear_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resource_;
    resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sShopItem::set_allocated_resource(::std::string* resource) {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (resource) {
    set_has_resource();
    resource_ = resource;
  } else {
    clear_has_resource();
    resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 tc_lv = 6;
inline bool sShopItem::has_tc_lv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sShopItem::set_has_tc_lv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sShopItem::clear_has_tc_lv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sShopItem::clear_tc_lv() {
  tc_lv_ = 0u;
  clear_has_tc_lv();
}
inline ::google::protobuf::uint32 sShopItem::tc_lv() const {
  return tc_lv_;
}
inline void sShopItem::set_tc_lv(::google::protobuf::uint32 value) {
  set_has_tc_lv();
  tc_lv_ = value;
}

// repeated uint32 itemnum = 7;
inline int sShopItem::itemnum_size() const {
  return itemnum_.size();
}
inline void sShopItem::clear_itemnum() {
  itemnum_.Clear();
}
inline ::google::protobuf::uint32 sShopItem::itemnum(int index) const {
  return itemnum_.Get(index);
}
inline void sShopItem::set_itemnum(int index, ::google::protobuf::uint32 value) {
  itemnum_.Set(index, value);
}
inline void sShopItem::add_itemnum(::google::protobuf::uint32 value) {
  itemnum_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sShopItem::itemnum() const {
  return itemnum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sShopItem::mutable_itemnum() {
  return &itemnum_;
}

// optional uint32 shoplabel = 8;
inline bool sShopItem::has_shoplabel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sShopItem::set_has_shoplabel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sShopItem::clear_has_shoplabel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sShopItem::clear_shoplabel() {
  shoplabel_ = 0u;
  clear_has_shoplabel();
}
inline ::google::protobuf::uint32 sShopItem::shoplabel() const {
  return shoplabel_;
}
inline void sShopItem::set_shoplabel(::google::protobuf::uint32 value) {
  set_has_shoplabel();
  shoplabel_ = value;
}

// optional uint32 shoporder = 9;
inline bool sShopItem::has_shoporder() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sShopItem::set_has_shoporder() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sShopItem::clear_has_shoporder() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sShopItem::clear_shoporder() {
  shoporder_ = 0u;
  clear_has_shoporder();
}
inline ::google::protobuf::uint32 sShopItem::shoporder() const {
  return shoporder_;
}
inline void sShopItem::set_shoporder(::google::protobuf::uint32 value) {
  set_has_shoporder();
  shoporder_ = value;
}

// optional uint32 pecentage = 10;
inline bool sShopItem::has_pecentage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sShopItem::set_has_pecentage() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sShopItem::clear_has_pecentage() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sShopItem::clear_pecentage() {
  pecentage_ = 0u;
  clear_has_pecentage();
}
inline ::google::protobuf::uint32 sShopItem::pecentage() const {
  return pecentage_;
}
inline void sShopItem::set_pecentage(::google::protobuf::uint32 value) {
  set_has_pecentage();
  pecentage_ = value;
}

// repeated uint32 moneytype = 11;
inline int sShopItem::moneytype_size() const {
  return moneytype_.size();
}
inline void sShopItem::clear_moneytype() {
  moneytype_.Clear();
}
inline ::google::protobuf::uint32 sShopItem::moneytype(int index) const {
  return moneytype_.Get(index);
}
inline void sShopItem::set_moneytype(int index, ::google::protobuf::uint32 value) {
  moneytype_.Set(index, value);
}
inline void sShopItem::add_moneytype(::google::protobuf::uint32 value) {
  moneytype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sShopItem::moneytype() const {
  return moneytype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sShopItem::mutable_moneytype() {
  return &moneytype_;
}

// repeated float money = 12;
inline int sShopItem::money_size() const {
  return money_.size();
}
inline void sShopItem::clear_money() {
  money_.Clear();
}
inline float sShopItem::money(int index) const {
  return money_.Get(index);
}
inline void sShopItem::set_money(int index, float value) {
  money_.Set(index, value);
}
inline void sShopItem::add_money(float value) {
  money_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
sShopItem::money() const {
  return money_;
}
inline ::google::protobuf::RepeatedField< float >*
sShopItem::mutable_money() {
  return &money_;
}

// optional uint32 onsale = 13;
inline bool sShopItem::has_onsale() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sShopItem::set_has_onsale() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sShopItem::clear_has_onsale() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sShopItem::clear_onsale() {
  onsale_ = 0u;
  clear_has_onsale();
}
inline ::google::protobuf::uint32 sShopItem::onsale() const {
  return onsale_;
}
inline void sShopItem::set_onsale(::google::protobuf::uint32 value) {
  set_has_onsale();
  onsale_ = value;
}

// optional uint32 buylimittype = 14;
inline bool sShopItem::has_buylimittype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sShopItem::set_has_buylimittype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sShopItem::clear_has_buylimittype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sShopItem::clear_buylimittype() {
  buylimittype_ = 0u;
  clear_has_buylimittype();
}
inline ::google::protobuf::uint32 sShopItem::buylimittype() const {
  return buylimittype_;
}
inline void sShopItem::set_buylimittype(::google::protobuf::uint32 value) {
  set_has_buylimittype();
  buylimittype_ = value;
}

// optional uint32 buylimitvalue = 15;
inline bool sShopItem::has_buylimitvalue() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sShopItem::set_has_buylimitvalue() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sShopItem::clear_has_buylimitvalue() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sShopItem::clear_buylimitvalue() {
  buylimitvalue_ = 0u;
  clear_has_buylimitvalue();
}
inline ::google::protobuf::uint32 sShopItem::buylimitvalue() const {
  return buylimitvalue_;
}
inline void sShopItem::set_buylimitvalue(::google::protobuf::uint32 value) {
  set_has_buylimitvalue();
  buylimitvalue_ = value;
}

// optional uint32 buylimittime = 16;
inline bool sShopItem::has_buylimittime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sShopItem::set_has_buylimittime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sShopItem::clear_has_buylimittime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sShopItem::clear_buylimittime() {
  buylimittime_ = 0u;
  clear_has_buylimittime();
}
inline ::google::protobuf::uint32 sShopItem::buylimittime() const {
  return buylimittime_;
}
inline void sShopItem::set_buylimittime(::google::protobuf::uint32 value) {
  set_has_buylimittime();
  buylimittime_ = value;
}

// optional uint32 bulimitnum = 17;
inline bool sShopItem::has_bulimitnum() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sShopItem::set_has_bulimitnum() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sShopItem::clear_has_bulimitnum() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sShopItem::clear_bulimitnum() {
  bulimitnum_ = 0u;
  clear_has_bulimitnum();
}
inline ::google::protobuf::uint32 sShopItem::bulimitnum() const {
  return bulimitnum_;
}
inline void sShopItem::set_bulimitnum(::google::protobuf::uint32 value) {
  set_has_bulimitnum();
  bulimitnum_ = value;
}

// optional uint32 bonus1 = 18;
inline bool sShopItem::has_bonus1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sShopItem::set_has_bonus1() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sShopItem::clear_has_bonus1() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sShopItem::clear_bonus1() {
  bonus1_ = 0u;
  clear_has_bonus1();
}
inline ::google::protobuf::uint32 sShopItem::bonus1() const {
  return bonus1_;
}
inline void sShopItem::set_bonus1(::google::protobuf::uint32 value) {
  set_has_bonus1();
  bonus1_ = value;
}

// optional uint32 bonus2 = 19;
inline bool sShopItem::has_bonus2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sShopItem::set_has_bonus2() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sShopItem::clear_has_bonus2() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sShopItem::clear_bonus2() {
  bonus2_ = 0u;
  clear_has_bonus2();
}
inline ::google::protobuf::uint32 sShopItem::bonus2() const {
  return bonus2_;
}
inline void sShopItem::set_bonus2(::google::protobuf::uint32 value) {
  set_has_bonus2();
  bonus2_ = value;
}

// optional uint32 bonusname1 = 20;
inline bool sShopItem::has_bonusname1() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sShopItem::set_has_bonusname1() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sShopItem::clear_has_bonusname1() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sShopItem::clear_bonusname1() {
  bonusname1_ = 0u;
  clear_has_bonusname1();
}
inline ::google::protobuf::uint32 sShopItem::bonusname1() const {
  return bonusname1_;
}
inline void sShopItem::set_bonusname1(::google::protobuf::uint32 value) {
  set_has_bonusname1();
  bonusname1_ = value;
}

// optional uint32 bonusname2 = 21;
inline bool sShopItem::has_bonusname2() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sShopItem::set_has_bonusname2() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sShopItem::clear_has_bonusname2() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sShopItem::clear_bonusname2() {
  bonusname2_ = 0u;
  clear_has_bonusname2();
}
inline ::google::protobuf::uint32 sShopItem::bonusname2() const {
  return bonusname2_;
}
inline void sShopItem::set_bonusname2(::google::protobuf::uint32 value) {
  set_has_bonusname2();
  bonusname2_ = value;
}

// -------------------------------------------------------------------

// sTaskStats

// optional uint32 uid = 1;
inline bool sTaskStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sTaskStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sTaskStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sTaskStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sTaskStats::uid() const {
  return uid_;
}
inline void sTaskStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .jynetwork.proto.eTaskType task_type = 2;
inline bool sTaskStats::has_task_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sTaskStats::set_has_task_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sTaskStats::clear_has_task_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sTaskStats::clear_task_type() {
  task_type_ = 1;
  clear_has_task_type();
}
inline ::jynetwork::proto::eTaskType sTaskStats::task_type() const {
  return static_cast< ::jynetwork::proto::eTaskType >(task_type_);
}
inline void sTaskStats::set_task_type(::jynetwork::proto::eTaskType value) {
  assert(::jynetwork::proto::eTaskType_IsValid(value));
  set_has_task_type();
  task_type_ = value;
}

// optional uint32 task_var = 3;
inline bool sTaskStats::has_task_var() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sTaskStats::set_has_task_var() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sTaskStats::clear_has_task_var() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sTaskStats::clear_task_var() {
  task_var_ = 0u;
  clear_has_task_var();
}
inline ::google::protobuf::uint32 sTaskStats::task_var() const {
  return task_var_;
}
inline void sTaskStats::set_task_var(::google::protobuf::uint32 value) {
  set_has_task_var();
  task_var_ = value;
}

// optional bytes task_name = 4;
inline bool sTaskStats::has_task_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sTaskStats::set_has_task_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sTaskStats::clear_has_task_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sTaskStats::clear_task_name() {
  if (task_name_ != &::google::protobuf::internal::kEmptyString) {
    task_name_->clear();
  }
  clear_has_task_name();
}
inline const ::std::string& sTaskStats::task_name() const {
  return *task_name_;
}
inline void sTaskStats::set_task_name(const ::std::string& value) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::kEmptyString) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(value);
}
inline void sTaskStats::set_task_name(const char* value) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::kEmptyString) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(value);
}
inline void sTaskStats::set_task_name(const void* value, size_t size) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::kEmptyString) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sTaskStats::mutable_task_name() {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::kEmptyString) {
    task_name_ = new ::std::string;
  }
  return task_name_;
}
inline ::std::string* sTaskStats::release_task_name() {
  clear_has_task_name();
  if (task_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = task_name_;
    task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sTaskStats::set_allocated_task_name(::std::string* task_name) {
  if (task_name_ != &::google::protobuf::internal::kEmptyString) {
    delete task_name_;
  }
  if (task_name) {
    set_has_task_name();
    task_name_ = task_name;
  } else {
    clear_has_task_name();
    task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 task_name_id = 5;
inline bool sTaskStats::has_task_name_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sTaskStats::set_has_task_name_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sTaskStats::clear_has_task_name_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sTaskStats::clear_task_name_id() {
  task_name_id_ = 0u;
  clear_has_task_name_id();
}
inline ::google::protobuf::uint32 sTaskStats::task_name_id() const {
  return task_name_id_;
}
inline void sTaskStats::set_task_name_id(::google::protobuf::uint32 value) {
  set_has_task_name_id();
  task_name_id_ = value;
}

// optional uint32 lv_min = 6;
inline bool sTaskStats::has_lv_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sTaskStats::set_has_lv_min() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sTaskStats::clear_has_lv_min() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sTaskStats::clear_lv_min() {
  lv_min_ = 0u;
  clear_has_lv_min();
}
inline ::google::protobuf::uint32 sTaskStats::lv_min() const {
  return lv_min_;
}
inline void sTaskStats::set_lv_min(::google::protobuf::uint32 value) {
  set_has_lv_min();
  lv_min_ = value;
}

// optional uint32 lv_max = 7;
inline bool sTaskStats::has_lv_max() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sTaskStats::set_has_lv_max() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sTaskStats::clear_has_lv_max() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sTaskStats::clear_lv_max() {
  lv_max_ = 0u;
  clear_has_lv_max();
}
inline ::google::protobuf::uint32 sTaskStats::lv_max() const {
  return lv_max_;
}
inline void sTaskStats::set_lv_max(::google::protobuf::uint32 value) {
  set_has_lv_max();
  lv_max_ = value;
}

// optional uint32 begin_time = 8;
inline bool sTaskStats::has_begin_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sTaskStats::set_has_begin_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sTaskStats::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sTaskStats::clear_begin_time() {
  begin_time_ = 0u;
  clear_has_begin_time();
}
inline ::google::protobuf::uint32 sTaskStats::begin_time() const {
  return begin_time_;
}
inline void sTaskStats::set_begin_time(::google::protobuf::uint32 value) {
  set_has_begin_time();
  begin_time_ = value;
}

// optional uint32 end_time = 9;
inline bool sTaskStats::has_end_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sTaskStats::set_has_end_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sTaskStats::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sTaskStats::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 sTaskStats::end_time() const {
  return end_time_;
}
inline void sTaskStats::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional uint32 job = 10;
inline bool sTaskStats::has_job() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sTaskStats::set_has_job() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sTaskStats::clear_has_job() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sTaskStats::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 sTaskStats::job() const {
  return job_;
}
inline void sTaskStats::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 flotask = 11;
inline bool sTaskStats::has_flotask() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sTaskStats::set_has_flotask() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sTaskStats::clear_has_flotask() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sTaskStats::clear_flotask() {
  flotask_ = 0u;
  clear_has_flotask();
}
inline ::google::protobuf::uint32 sTaskStats::flotask() const {
  return flotask_;
}
inline void sTaskStats::set_flotask(::google::protobuf::uint32 value) {
  set_has_flotask();
  flotask_ = value;
}

// optional .jynetwork.proto.eTaskFinishType task_finish_type = 12;
inline bool sTaskStats::has_task_finish_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sTaskStats::set_has_task_finish_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sTaskStats::clear_has_task_finish_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sTaskStats::clear_task_finish_type() {
  task_finish_type_ = 0;
  clear_has_task_finish_type();
}
inline ::jynetwork::proto::eTaskFinishType sTaskStats::task_finish_type() const {
  return static_cast< ::jynetwork::proto::eTaskFinishType >(task_finish_type_);
}
inline void sTaskStats::set_task_finish_type(::jynetwork::proto::eTaskFinishType value) {
  assert(::jynetwork::proto::eTaskFinishType_IsValid(value));
  set_has_task_finish_type();
  task_finish_type_ = value;
}

// optional uint32 task_finish_var1 = 13;
inline bool sTaskStats::has_task_finish_var1() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sTaskStats::set_has_task_finish_var1() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sTaskStats::clear_has_task_finish_var1() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sTaskStats::clear_task_finish_var1() {
  task_finish_var1_ = 0u;
  clear_has_task_finish_var1();
}
inline ::google::protobuf::uint32 sTaskStats::task_finish_var1() const {
  return task_finish_var1_;
}
inline void sTaskStats::set_task_finish_var1(::google::protobuf::uint32 value) {
  set_has_task_finish_var1();
  task_finish_var1_ = value;
}

// optional uint32 task_finish_var2 = 14;
inline bool sTaskStats::has_task_finish_var2() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sTaskStats::set_has_task_finish_var2() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sTaskStats::clear_has_task_finish_var2() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sTaskStats::clear_task_finish_var2() {
  task_finish_var2_ = 0u;
  clear_has_task_finish_var2();
}
inline ::google::protobuf::uint32 sTaskStats::task_finish_var2() const {
  return task_finish_var2_;
}
inline void sTaskStats::set_task_finish_var2(::google::protobuf::uint32 value) {
  set_has_task_finish_var2();
  task_finish_var2_ = value;
}

// optional uint32 trace_type = 15;
inline bool sTaskStats::has_trace_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sTaskStats::set_has_trace_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sTaskStats::clear_has_trace_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sTaskStats::clear_trace_type() {
  trace_type_ = 0u;
  clear_has_trace_type();
}
inline ::google::protobuf::uint32 sTaskStats::trace_type() const {
  return trace_type_;
}
inline void sTaskStats::set_trace_type(::google::protobuf::uint32 value) {
  set_has_trace_type();
  trace_type_ = value;
}

// optional uint32 trace_id = 16;
inline bool sTaskStats::has_trace_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sTaskStats::set_has_trace_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sTaskStats::clear_has_trace_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sTaskStats::clear_trace_id() {
  trace_id_ = 0u;
  clear_has_trace_id();
}
inline ::google::protobuf::uint32 sTaskStats::trace_id() const {
  return trace_id_;
}
inline void sTaskStats::set_trace_id(::google::protobuf::uint32 value) {
  set_has_trace_id();
  trace_id_ = value;
}

// optional bytes task_desc = 17;
inline bool sTaskStats::has_task_desc() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sTaskStats::set_has_task_desc() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sTaskStats::clear_has_task_desc() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sTaskStats::clear_task_desc() {
  if (task_desc_ != &::google::protobuf::internal::kEmptyString) {
    task_desc_->clear();
  }
  clear_has_task_desc();
}
inline const ::std::string& sTaskStats::task_desc() const {
  return *task_desc_;
}
inline void sTaskStats::set_task_desc(const ::std::string& value) {
  set_has_task_desc();
  if (task_desc_ == &::google::protobuf::internal::kEmptyString) {
    task_desc_ = new ::std::string;
  }
  task_desc_->assign(value);
}
inline void sTaskStats::set_task_desc(const char* value) {
  set_has_task_desc();
  if (task_desc_ == &::google::protobuf::internal::kEmptyString) {
    task_desc_ = new ::std::string;
  }
  task_desc_->assign(value);
}
inline void sTaskStats::set_task_desc(const void* value, size_t size) {
  set_has_task_desc();
  if (task_desc_ == &::google::protobuf::internal::kEmptyString) {
    task_desc_ = new ::std::string;
  }
  task_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sTaskStats::mutable_task_desc() {
  set_has_task_desc();
  if (task_desc_ == &::google::protobuf::internal::kEmptyString) {
    task_desc_ = new ::std::string;
  }
  return task_desc_;
}
inline ::std::string* sTaskStats::release_task_desc() {
  clear_has_task_desc();
  if (task_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = task_desc_;
    task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sTaskStats::set_allocated_task_desc(::std::string* task_desc) {
  if (task_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete task_desc_;
  }
  if (task_desc) {
    set_has_task_desc();
    task_desc_ = task_desc;
  } else {
    clear_has_task_desc();
    task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 task_desc_id = 18;
inline bool sTaskStats::has_task_desc_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sTaskStats::set_has_task_desc_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sTaskStats::clear_has_task_desc_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sTaskStats::clear_task_desc_id() {
  task_desc_id_ = 0u;
  clear_has_task_desc_id();
}
inline ::google::protobuf::uint32 sTaskStats::task_desc_id() const {
  return task_desc_id_;
}
inline void sTaskStats::set_task_desc_id(::google::protobuf::uint32 value) {
  set_has_task_desc_id();
  task_desc_id_ = value;
}

// repeated .jynetwork.proto.sSimpleItem item_reward = 19;
inline int sTaskStats::item_reward_size() const {
  return item_reward_.size();
}
inline void sTaskStats::clear_item_reward() {
  item_reward_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& sTaskStats::item_reward(int index) const {
  return item_reward_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* sTaskStats::mutable_item_reward(int index) {
  return item_reward_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* sTaskStats::add_item_reward() {
  return item_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
sTaskStats::item_reward() const {
  return item_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
sTaskStats::mutable_item_reward() {
  return &item_reward_;
}

// optional uint32 task_finish_var3 = 20;
inline bool sTaskStats::has_task_finish_var3() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sTaskStats::set_has_task_finish_var3() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sTaskStats::clear_has_task_finish_var3() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sTaskStats::clear_task_finish_var3() {
  task_finish_var3_ = 0u;
  clear_has_task_finish_var3();
}
inline ::google::protobuf::uint32 sTaskStats::task_finish_var3() const {
  return task_finish_var3_;
}
inline void sTaskStats::set_task_finish_var3(::google::protobuf::uint32 value) {
  set_has_task_finish_var3();
  task_finish_var3_ = value;
}

// optional bytes iconName = 21;
inline bool sTaskStats::has_iconname() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sTaskStats::set_has_iconname() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sTaskStats::clear_has_iconname() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sTaskStats::clear_iconname() {
  if (iconname_ != &::google::protobuf::internal::kEmptyString) {
    iconname_->clear();
  }
  clear_has_iconname();
}
inline const ::std::string& sTaskStats::iconname() const {
  return *iconname_;
}
inline void sTaskStats::set_iconname(const ::std::string& value) {
  set_has_iconname();
  if (iconname_ == &::google::protobuf::internal::kEmptyString) {
    iconname_ = new ::std::string;
  }
  iconname_->assign(value);
}
inline void sTaskStats::set_iconname(const char* value) {
  set_has_iconname();
  if (iconname_ == &::google::protobuf::internal::kEmptyString) {
    iconname_ = new ::std::string;
  }
  iconname_->assign(value);
}
inline void sTaskStats::set_iconname(const void* value, size_t size) {
  set_has_iconname();
  if (iconname_ == &::google::protobuf::internal::kEmptyString) {
    iconname_ = new ::std::string;
  }
  iconname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sTaskStats::mutable_iconname() {
  set_has_iconname();
  if (iconname_ == &::google::protobuf::internal::kEmptyString) {
    iconname_ = new ::std::string;
  }
  return iconname_;
}
inline ::std::string* sTaskStats::release_iconname() {
  clear_has_iconname();
  if (iconname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iconname_;
    iconname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sTaskStats::set_allocated_iconname(::std::string* iconname) {
  if (iconname_ != &::google::protobuf::internal::kEmptyString) {
    delete iconname_;
  }
  if (iconname) {
    set_has_iconname();
    iconname_ = iconname;
  } else {
    clear_has_iconname();
    iconname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 tc_lv = 22;
inline bool sTaskStats::has_tc_lv() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sTaskStats::set_has_tc_lv() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sTaskStats::clear_has_tc_lv() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sTaskStats::clear_tc_lv() {
  tc_lv_ = 0u;
  clear_has_tc_lv();
}
inline ::google::protobuf::uint32 sTaskStats::tc_lv() const {
  return tc_lv_;
}
inline void sTaskStats::set_tc_lv(::google::protobuf::uint32 value) {
  set_has_tc_lv();
  tc_lv_ = value;
}

// optional uint32 is_guide = 23;
inline bool sTaskStats::has_is_guide() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sTaskStats::set_has_is_guide() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sTaskStats::clear_has_is_guide() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sTaskStats::clear_is_guide() {
  is_guide_ = 0u;
  clear_has_is_guide();
}
inline ::google::protobuf::uint32 sTaskStats::is_guide() const {
  return is_guide_;
}
inline void sTaskStats::set_is_guide(::google::protobuf::uint32 value) {
  set_has_is_guide();
  is_guide_ = value;
}

// optional uint32 guide_id = 24;
inline bool sTaskStats::has_guide_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sTaskStats::set_has_guide_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sTaskStats::clear_has_guide_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sTaskStats::clear_guide_id() {
  guide_id_ = 0u;
  clear_has_guide_id();
}
inline ::google::protobuf::uint32 sTaskStats::guide_id() const {
  return guide_id_;
}
inline void sTaskStats::set_guide_id(::google::protobuf::uint32 value) {
  set_has_guide_id();
  guide_id_ = value;
}

// optional uint32 guide_value = 25;
inline bool sTaskStats::has_guide_value() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sTaskStats::set_has_guide_value() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sTaskStats::clear_has_guide_value() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sTaskStats::clear_guide_value() {
  guide_value_ = 0u;
  clear_has_guide_value();
}
inline ::google::protobuf::uint32 sTaskStats::guide_value() const {
  return guide_value_;
}
inline void sTaskStats::set_guide_value(::google::protobuf::uint32 value) {
  set_has_guide_value();
  guide_value_ = value;
}

// optional uint32 flotask2 = 26;
inline bool sTaskStats::has_flotask2() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sTaskStats::set_has_flotask2() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sTaskStats::clear_has_flotask2() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sTaskStats::clear_flotask2() {
  flotask2_ = 0u;
  clear_has_flotask2();
}
inline ::google::protobuf::uint32 sTaskStats::flotask2() const {
  return flotask2_;
}
inline void sTaskStats::set_flotask2(::google::protobuf::uint32 value) {
  set_has_flotask2();
  flotask2_ = value;
}

// optional uint32 begin_date = 27;
inline bool sTaskStats::has_begin_date() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void sTaskStats::set_has_begin_date() {
  _has_bits_[0] |= 0x04000000u;
}
inline void sTaskStats::clear_has_begin_date() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void sTaskStats::clear_begin_date() {
  begin_date_ = 0u;
  clear_has_begin_date();
}
inline ::google::protobuf::uint32 sTaskStats::begin_date() const {
  return begin_date_;
}
inline void sTaskStats::set_begin_date(::google::protobuf::uint32 value) {
  set_has_begin_date();
  begin_date_ = value;
}

// optional uint32 end_date = 28;
inline bool sTaskStats::has_end_date() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void sTaskStats::set_has_end_date() {
  _has_bits_[0] |= 0x08000000u;
}
inline void sTaskStats::clear_has_end_date() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void sTaskStats::clear_end_date() {
  end_date_ = 0u;
  clear_has_end_date();
}
inline ::google::protobuf::uint32 sTaskStats::end_date() const {
  return end_date_;
}
inline void sTaskStats::set_end_date(::google::protobuf::uint32 value) {
  set_has_end_date();
  end_date_ = value;
}

// optional uint32 flotask3 = 29;
inline bool sTaskStats::has_flotask3() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void sTaskStats::set_has_flotask3() {
  _has_bits_[0] |= 0x10000000u;
}
inline void sTaskStats::clear_has_flotask3() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void sTaskStats::clear_flotask3() {
  flotask3_ = 0u;
  clear_has_flotask3();
}
inline ::google::protobuf::uint32 sTaskStats::flotask3() const {
  return flotask3_;
}
inline void sTaskStats::set_flotask3(::google::protobuf::uint32 value) {
  set_has_flotask3();
  flotask3_ = value;
}

// optional uint32 pretask = 30;
inline bool sTaskStats::has_pretask() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void sTaskStats::set_has_pretask() {
  _has_bits_[0] |= 0x20000000u;
}
inline void sTaskStats::clear_has_pretask() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void sTaskStats::clear_pretask() {
  pretask_ = 0u;
  clear_has_pretask();
}
inline ::google::protobuf::uint32 sTaskStats::pretask() const {
  return pretask_;
}
inline void sTaskStats::set_pretask(::google::protobuf::uint32 value) {
  set_has_pretask();
  pretask_ = value;
}

// optional uint32 start_var = 31;
inline bool sTaskStats::has_start_var() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void sTaskStats::set_has_start_var() {
  _has_bits_[0] |= 0x40000000u;
}
inline void sTaskStats::clear_has_start_var() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void sTaskStats::clear_start_var() {
  start_var_ = 0u;
  clear_has_start_var();
}
inline ::google::protobuf::uint32 sTaskStats::start_var() const {
  return start_var_;
}
inline void sTaskStats::set_start_var(::google::protobuf::uint32 value) {
  set_has_start_var();
  start_var_ = value;
}

// optional uint32 task_order = 32;
inline bool sTaskStats::has_task_order() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void sTaskStats::set_has_task_order() {
  _has_bits_[0] |= 0x80000000u;
}
inline void sTaskStats::clear_has_task_order() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void sTaskStats::clear_task_order() {
  task_order_ = 0u;
  clear_has_task_order();
}
inline ::google::protobuf::uint32 sTaskStats::task_order() const {
  return task_order_;
}
inline void sTaskStats::set_task_order(::google::protobuf::uint32 value) {
  set_has_task_order();
  task_order_ = value;
}

// -------------------------------------------------------------------

// sBuyStaminaStats

// optional uint32 uid = 1;
inline bool sBuyStaminaStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sBuyStaminaStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sBuyStaminaStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sBuyStaminaStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sBuyStaminaStats::uid() const {
  return uid_;
}
inline void sBuyStaminaStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 cost_diamond = 2;
inline bool sBuyStaminaStats::has_cost_diamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sBuyStaminaStats::set_has_cost_diamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sBuyStaminaStats::clear_has_cost_diamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sBuyStaminaStats::clear_cost_diamond() {
  cost_diamond_ = 0u;
  clear_has_cost_diamond();
}
inline ::google::protobuf::uint32 sBuyStaminaStats::cost_diamond() const {
  return cost_diamond_;
}
inline void sBuyStaminaStats::set_cost_diamond(::google::protobuf::uint32 value) {
  set_has_cost_diamond();
  cost_diamond_ = value;
}

// optional uint32 add_stamina = 3;
inline bool sBuyStaminaStats::has_add_stamina() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sBuyStaminaStats::set_has_add_stamina() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sBuyStaminaStats::clear_has_add_stamina() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sBuyStaminaStats::clear_add_stamina() {
  add_stamina_ = 0u;
  clear_has_add_stamina();
}
inline ::google::protobuf::uint32 sBuyStaminaStats::add_stamina() const {
  return add_stamina_;
}
inline void sBuyStaminaStats::set_add_stamina(::google::protobuf::uint32 value) {
  set_has_add_stamina();
  add_stamina_ = value;
}

// -------------------------------------------------------------------

// sBuyGoldStats

// optional uint32 uid = 1;
inline bool sBuyGoldStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sBuyGoldStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sBuyGoldStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sBuyGoldStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sBuyGoldStats::uid() const {
  return uid_;
}
inline void sBuyGoldStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 cost_diamond = 2;
inline bool sBuyGoldStats::has_cost_diamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sBuyGoldStats::set_has_cost_diamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sBuyGoldStats::clear_has_cost_diamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sBuyGoldStats::clear_cost_diamond() {
  cost_diamond_ = 0u;
  clear_has_cost_diamond();
}
inline ::google::protobuf::uint32 sBuyGoldStats::cost_diamond() const {
  return cost_diamond_;
}
inline void sBuyGoldStats::set_cost_diamond(::google::protobuf::uint32 value) {
  set_has_cost_diamond();
  cost_diamond_ = value;
}

// repeated .jynetwork.proto.sSimpleItem item_reward = 3;
inline int sBuyGoldStats::item_reward_size() const {
  return item_reward_.size();
}
inline void sBuyGoldStats::clear_item_reward() {
  item_reward_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& sBuyGoldStats::item_reward(int index) const {
  return item_reward_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* sBuyGoldStats::mutable_item_reward(int index) {
  return item_reward_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* sBuyGoldStats::add_item_reward() {
  return item_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
sBuyGoldStats::item_reward() const {
  return item_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
sBuyGoldStats::mutable_item_reward() {
  return &item_reward_;
}

// optional uint32 add_gold = 4;
inline bool sBuyGoldStats::has_add_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sBuyGoldStats::set_has_add_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sBuyGoldStats::clear_has_add_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sBuyGoldStats::clear_add_gold() {
  add_gold_ = 0u;
  clear_has_add_gold();
}
inline ::google::protobuf::uint32 sBuyGoldStats::add_gold() const {
  return add_gold_;
}
inline void sBuyGoldStats::set_add_gold(::google::protobuf::uint32 value) {
  set_has_add_gold();
  add_gold_ = value;
}

// -------------------------------------------------------------------

// sEquipAttrStats

// optional uint32 uid = 1;
inline bool sEquipAttrStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEquipAttrStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEquipAttrStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEquipAttrStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEquipAttrStats::uid() const {
  return uid_;
}
inline void sEquipAttrStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .jynetwork.proto.eQuipPart equip_part = 2;
inline bool sEquipAttrStats::has_equip_part() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEquipAttrStats::set_has_equip_part() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEquipAttrStats::clear_has_equip_part() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEquipAttrStats::clear_equip_part() {
  equip_part_ = 1;
  clear_has_equip_part();
}
inline ::jynetwork::proto::eQuipPart sEquipAttrStats::equip_part() const {
  return static_cast< ::jynetwork::proto::eQuipPart >(equip_part_);
}
inline void sEquipAttrStats::set_equip_part(::jynetwork::proto::eQuipPart value) {
  assert(::jynetwork::proto::eQuipPart_IsValid(value));
  set_has_equip_part();
  equip_part_ = value;
}

// optional uint32 equip_star = 3;
inline bool sEquipAttrStats::has_equip_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sEquipAttrStats::set_has_equip_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sEquipAttrStats::clear_has_equip_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sEquipAttrStats::clear_equip_star() {
  equip_star_ = 0u;
  clear_has_equip_star();
}
inline ::google::protobuf::uint32 sEquipAttrStats::equip_star() const {
  return equip_star_;
}
inline void sEquipAttrStats::set_equip_star(::google::protobuf::uint32 value) {
  set_has_equip_star();
  equip_star_ = value;
}

// optional uint32 attr_type = 4;
inline bool sEquipAttrStats::has_attr_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sEquipAttrStats::set_has_attr_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sEquipAttrStats::clear_has_attr_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sEquipAttrStats::clear_attr_type() {
  attr_type_ = 0u;
  clear_has_attr_type();
}
inline ::google::protobuf::uint32 sEquipAttrStats::attr_type() const {
  return attr_type_;
}
inline void sEquipAttrStats::set_attr_type(::google::protobuf::uint32 value) {
  set_has_attr_type();
  attr_type_ = value;
}

// optional uint32 attr_rand = 5;
inline bool sEquipAttrStats::has_attr_rand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sEquipAttrStats::set_has_attr_rand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sEquipAttrStats::clear_has_attr_rand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sEquipAttrStats::clear_attr_rand() {
  attr_rand_ = 0u;
  clear_has_attr_rand();
}
inline ::google::protobuf::uint32 sEquipAttrStats::attr_rand() const {
  return attr_rand_;
}
inline void sEquipAttrStats::set_attr_rand(::google::protobuf::uint32 value) {
  set_has_attr_rand();
  attr_rand_ = value;
}

// optional uint32 skill_id = 6;
inline bool sEquipAttrStats::has_skill_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sEquipAttrStats::set_has_skill_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sEquipAttrStats::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sEquipAttrStats::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 sEquipAttrStats::skill_id() const {
  return skill_id_;
}
inline void sEquipAttrStats::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional uint32 fight_power = 7;
inline bool sEquipAttrStats::has_fight_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sEquipAttrStats::set_has_fight_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sEquipAttrStats::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sEquipAttrStats::clear_fight_power() {
  fight_power_ = 0u;
  clear_has_fight_power();
}
inline ::google::protobuf::uint32 sEquipAttrStats::fight_power() const {
  return fight_power_;
}
inline void sEquipAttrStats::set_fight_power(::google::protobuf::uint32 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// optional uint32 max_attr_type = 8;
inline bool sEquipAttrStats::has_max_attr_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sEquipAttrStats::set_has_max_attr_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sEquipAttrStats::clear_has_max_attr_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sEquipAttrStats::clear_max_attr_type() {
  max_attr_type_ = 0u;
  clear_has_max_attr_type();
}
inline ::google::protobuf::uint32 sEquipAttrStats::max_attr_type() const {
  return max_attr_type_;
}
inline void sEquipAttrStats::set_max_attr_type(::google::protobuf::uint32 value) {
  set_has_max_attr_type();
  max_attr_type_ = value;
}

// optional uint32 rear = 9;
inline bool sEquipAttrStats::has_rear() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sEquipAttrStats::set_has_rear() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sEquipAttrStats::clear_has_rear() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sEquipAttrStats::clear_rear() {
  rear_ = 0u;
  clear_has_rear();
}
inline ::google::protobuf::uint32 sEquipAttrStats::rear() const {
  return rear_;
}
inline void sEquipAttrStats::set_rear(::google::protobuf::uint32 value) {
  set_has_rear();
  rear_ = value;
}

// -------------------------------------------------------------------

// sEquipAttrPropStats

// optional uint32 uid = 1;
inline bool sEquipAttrPropStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEquipAttrPropStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEquipAttrPropStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEquipAttrPropStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEquipAttrPropStats::uid() const {
  return uid_;
}
inline void sEquipAttrPropStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 equip_star = 2;
inline bool sEquipAttrPropStats::has_equip_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEquipAttrPropStats::set_has_equip_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEquipAttrPropStats::clear_has_equip_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEquipAttrPropStats::clear_equip_star() {
  equip_star_ = 0u;
  clear_has_equip_star();
}
inline ::google::protobuf::uint32 sEquipAttrPropStats::equip_star() const {
  return equip_star_;
}
inline void sEquipAttrPropStats::set_equip_star(::google::protobuf::uint32 value) {
  set_has_equip_star();
  equip_star_ = value;
}

// optional uint32 prop = 3;
inline bool sEquipAttrPropStats::has_prop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sEquipAttrPropStats::set_has_prop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sEquipAttrPropStats::clear_has_prop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sEquipAttrPropStats::clear_prop() {
  prop_ = 0u;
  clear_has_prop();
}
inline ::google::protobuf::uint32 sEquipAttrPropStats::prop() const {
  return prop_;
}
inline void sEquipAttrPropStats::set_prop(::google::protobuf::uint32 value) {
  set_has_prop();
  prop_ = value;
}

// repeated uint32 rear = 4;
inline int sEquipAttrPropStats::rear_size() const {
  return rear_.size();
}
inline void sEquipAttrPropStats::clear_rear() {
  rear_.Clear();
}
inline ::google::protobuf::uint32 sEquipAttrPropStats::rear(int index) const {
  return rear_.Get(index);
}
inline void sEquipAttrPropStats::set_rear(int index, ::google::protobuf::uint32 value) {
  rear_.Set(index, value);
}
inline void sEquipAttrPropStats::add_rear(::google::protobuf::uint32 value) {
  rear_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sEquipAttrPropStats::rear() const {
  return rear_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sEquipAttrPropStats::mutable_rear() {
  return &rear_;
}

// -------------------------------------------------------------------

// sPrefixAttr

// optional uint32 attr_type = 1;
inline bool sPrefixAttr::has_attr_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPrefixAttr::set_has_attr_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPrefixAttr::clear_has_attr_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPrefixAttr::clear_attr_type() {
  attr_type_ = 0u;
  clear_has_attr_type();
}
inline ::google::protobuf::uint32 sPrefixAttr::attr_type() const {
  return attr_type_;
}
inline void sPrefixAttr::set_attr_type(::google::protobuf::uint32 value) {
  set_has_attr_type();
  attr_type_ = value;
}

// optional uint32 attr_max = 2;
inline bool sPrefixAttr::has_attr_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPrefixAttr::set_has_attr_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPrefixAttr::clear_has_attr_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPrefixAttr::clear_attr_max() {
  attr_max_ = 0u;
  clear_has_attr_max();
}
inline ::google::protobuf::uint32 sPrefixAttr::attr_max() const {
  return attr_max_;
}
inline void sPrefixAttr::set_attr_max(::google::protobuf::uint32 value) {
  set_has_attr_max();
  attr_max_ = value;
}

// optional uint32 attr_min = 3;
inline bool sPrefixAttr::has_attr_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPrefixAttr::set_has_attr_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPrefixAttr::clear_has_attr_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPrefixAttr::clear_attr_min() {
  attr_min_ = 0u;
  clear_has_attr_min();
}
inline ::google::protobuf::uint32 sPrefixAttr::attr_min() const {
  return attr_min_;
}
inline void sPrefixAttr::set_attr_min(::google::protobuf::uint32 value) {
  set_has_attr_min();
  attr_min_ = value;
}

// -------------------------------------------------------------------

// sPrefixStats

// optional uint32 uid = 1;
inline bool sPrefixStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPrefixStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPrefixStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPrefixStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sPrefixStats::uid() const {
  return uid_;
}
inline void sPrefixStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes remark = 2;
inline bool sPrefixStats::has_remark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPrefixStats::set_has_remark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPrefixStats::clear_has_remark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPrefixStats::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& sPrefixStats::remark() const {
  return *remark_;
}
inline void sPrefixStats::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void sPrefixStats::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void sPrefixStats::set_remark(const void* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPrefixStats::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* sPrefixStats::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sPrefixStats::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes name = 3;
inline bool sPrefixStats::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPrefixStats::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPrefixStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPrefixStats::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sPrefixStats::name() const {
  return *name_;
}
inline void sPrefixStats::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sPrefixStats::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sPrefixStats::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPrefixStats::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sPrefixStats::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sPrefixStats::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 lang_id = 4;
inline bool sPrefixStats::has_lang_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sPrefixStats::set_has_lang_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sPrefixStats::clear_has_lang_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sPrefixStats::clear_lang_id() {
  lang_id_ = 0u;
  clear_has_lang_id();
}
inline ::google::protobuf::uint32 sPrefixStats::lang_id() const {
  return lang_id_;
}
inline void sPrefixStats::set_lang_id(::google::protobuf::uint32 value) {
  set_has_lang_id();
  lang_id_ = value;
}

// optional uint32 teasture_class = 5;
inline bool sPrefixStats::has_teasture_class() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sPrefixStats::set_has_teasture_class() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sPrefixStats::clear_has_teasture_class() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sPrefixStats::clear_teasture_class() {
  teasture_class_ = 0u;
  clear_has_teasture_class();
}
inline ::google::protobuf::uint32 sPrefixStats::teasture_class() const {
  return teasture_class_;
}
inline void sPrefixStats::set_teasture_class(::google::protobuf::uint32 value) {
  set_has_teasture_class();
  teasture_class_ = value;
}

// optional uint32 prefix_star = 6;
inline bool sPrefixStats::has_prefix_star() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sPrefixStats::set_has_prefix_star() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sPrefixStats::clear_has_prefix_star() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sPrefixStats::clear_prefix_star() {
  prefix_star_ = 0u;
  clear_has_prefix_star();
}
inline ::google::protobuf::uint32 sPrefixStats::prefix_star() const {
  return prefix_star_;
}
inline void sPrefixStats::set_prefix_star(::google::protobuf::uint32 value) {
  set_has_prefix_star();
  prefix_star_ = value;
}

// optional uint32 prob = 7;
inline bool sPrefixStats::has_prob() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sPrefixStats::set_has_prob() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sPrefixStats::clear_has_prob() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sPrefixStats::clear_prob() {
  prob_ = 0u;
  clear_has_prob();
}
inline ::google::protobuf::uint32 sPrefixStats::prob() const {
  return prob_;
}
inline void sPrefixStats::set_prob(::google::protobuf::uint32 value) {
  set_has_prob();
  prob_ = value;
}

// optional uint32 prob_star = 8;
inline bool sPrefixStats::has_prob_star() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sPrefixStats::set_has_prob_star() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sPrefixStats::clear_has_prob_star() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sPrefixStats::clear_prob_star() {
  prob_star_ = 0u;
  clear_has_prob_star();
}
inline ::google::protobuf::uint32 sPrefixStats::prob_star() const {
  return prob_star_;
}
inline void sPrefixStats::set_prob_star(::google::protobuf::uint32 value) {
  set_has_prob_star();
  prob_star_ = value;
}

// optional uint32 color = 9;
inline bool sPrefixStats::has_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sPrefixStats::set_has_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sPrefixStats::clear_has_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sPrefixStats::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 sPrefixStats::color() const {
  return color_;
}
inline void sPrefixStats::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
}

// optional .jynetwork.proto.eQuipPart equip_part = 10;
inline bool sPrefixStats::has_equip_part() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sPrefixStats::set_has_equip_part() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sPrefixStats::clear_has_equip_part() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sPrefixStats::clear_equip_part() {
  equip_part_ = 1;
  clear_has_equip_part();
}
inline ::jynetwork::proto::eQuipPart sPrefixStats::equip_part() const {
  return static_cast< ::jynetwork::proto::eQuipPart >(equip_part_);
}
inline void sPrefixStats::set_equip_part(::jynetwork::proto::eQuipPart value) {
  assert(::jynetwork::proto::eQuipPart_IsValid(value));
  set_has_equip_part();
  equip_part_ = value;
}

// optional uint32 unque_item_id = 11;
inline bool sPrefixStats::has_unque_item_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sPrefixStats::set_has_unque_item_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sPrefixStats::clear_has_unque_item_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sPrefixStats::clear_unque_item_id() {
  unque_item_id_ = 0u;
  clear_has_unque_item_id();
}
inline ::google::protobuf::uint32 sPrefixStats::unque_item_id() const {
  return unque_item_id_;
}
inline void sPrefixStats::set_unque_item_id(::google::protobuf::uint32 value) {
  set_has_unque_item_id();
  unque_item_id_ = value;
}

// repeated .jynetwork.proto.sPrefixAttr pref_attr = 12;
inline int sPrefixStats::pref_attr_size() const {
  return pref_attr_.size();
}
inline void sPrefixStats::clear_pref_attr() {
  pref_attr_.Clear();
}
inline const ::jynetwork::proto::sPrefixAttr& sPrefixStats::pref_attr(int index) const {
  return pref_attr_.Get(index);
}
inline ::jynetwork::proto::sPrefixAttr* sPrefixStats::mutable_pref_attr(int index) {
  return pref_attr_.Mutable(index);
}
inline ::jynetwork::proto::sPrefixAttr* sPrefixStats::add_pref_attr() {
  return pref_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPrefixAttr >&
sPrefixStats::pref_attr() const {
  return pref_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sPrefixAttr >*
sPrefixStats::mutable_pref_attr() {
  return &pref_attr_;
}

// optional uint32 effect = 13;
inline bool sPrefixStats::has_effect() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sPrefixStats::set_has_effect() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sPrefixStats::clear_has_effect() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sPrefixStats::clear_effect() {
  effect_ = 0u;
  clear_has_effect();
}
inline ::google::protobuf::uint32 sPrefixStats::effect() const {
  return effect_;
}
inline void sPrefixStats::set_effect(::google::protobuf::uint32 value) {
  set_has_effect();
  effect_ = value;
}

// -------------------------------------------------------------------

// sWeekStats

// optional uint32 uid = 1;
inline bool sWeekStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sWeekStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sWeekStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sWeekStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sWeekStats::uid() const {
  return uid_;
}
inline void sWeekStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 item_id = 2;
inline bool sWeekStats::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sWeekStats::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sWeekStats::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sWeekStats::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 sWeekStats::item_id() const {
  return item_id_;
}
inline void sWeekStats::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 item_num = 3;
inline bool sWeekStats::has_item_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sWeekStats::set_has_item_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sWeekStats::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sWeekStats::clear_item_num() {
  item_num_ = 0u;
  clear_has_item_num();
}
inline ::google::protobuf::uint32 sWeekStats::item_num() const {
  return item_num_;
}
inline void sWeekStats::set_item_num(::google::protobuf::uint32 value) {
  set_has_item_num();
  item_num_ = value;
}

// optional uint32 vip_lv = 4;
inline bool sWeekStats::has_vip_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sWeekStats::set_has_vip_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sWeekStats::clear_has_vip_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sWeekStats::clear_vip_lv() {
  vip_lv_ = 0u;
  clear_has_vip_lv();
}
inline ::google::protobuf::uint32 sWeekStats::vip_lv() const {
  return vip_lv_;
}
inline void sWeekStats::set_vip_lv(::google::protobuf::uint32 value) {
  set_has_vip_lv();
  vip_lv_ = value;
}

// optional uint32 vip_bonus = 5;
inline bool sWeekStats::has_vip_bonus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sWeekStats::set_has_vip_bonus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sWeekStats::clear_has_vip_bonus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sWeekStats::clear_vip_bonus() {
  vip_bonus_ = 0u;
  clear_has_vip_bonus();
}
inline ::google::protobuf::uint32 sWeekStats::vip_bonus() const {
  return vip_bonus_;
}
inline void sWeekStats::set_vip_bonus(::google::protobuf::uint32 value) {
  set_has_vip_bonus();
  vip_bonus_ = value;
}

// -------------------------------------------------------------------

// sDecomStats

// optional uint32 uid = 1;
inline bool sDecomStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sDecomStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sDecomStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sDecomStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sDecomStats::uid() const {
  return uid_;
}
inline void sDecomStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 item_id = 2;
inline bool sDecomStats::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sDecomStats::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sDecomStats::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sDecomStats::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 sDecomStats::item_id() const {
  return item_id_;
}
inline void sDecomStats::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional .jynetwork.proto.sSimpleItem base_reward = 3;
inline bool sDecomStats::has_base_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sDecomStats::set_has_base_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sDecomStats::clear_has_base_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sDecomStats::clear_base_reward() {
  if (base_reward_ != NULL) base_reward_->::jynetwork::proto::sSimpleItem::Clear();
  clear_has_base_reward();
}
inline const ::jynetwork::proto::sSimpleItem& sDecomStats::base_reward() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return base_reward_ != NULL ? *base_reward_ : *default_instance().base_reward_;
#else
  return base_reward_ != NULL ? *base_reward_ : *default_instance_->base_reward_;
#endif
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::mutable_base_reward() {
  set_has_base_reward();
  if (base_reward_ == NULL) base_reward_ = new ::jynetwork::proto::sSimpleItem;
  return base_reward_;
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::release_base_reward() {
  clear_has_base_reward();
  ::jynetwork::proto::sSimpleItem* temp = base_reward_;
  base_reward_ = NULL;
  return temp;
}
inline void sDecomStats::set_allocated_base_reward(::jynetwork::proto::sSimpleItem* base_reward) {
  delete base_reward_;
  base_reward_ = base_reward;
  if (base_reward) {
    set_has_base_reward();
  } else {
    clear_has_base_reward();
  }
}

// optional .jynetwork.proto.sSimpleItem lv_reward = 4;
inline bool sDecomStats::has_lv_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sDecomStats::set_has_lv_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sDecomStats::clear_has_lv_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sDecomStats::clear_lv_reward() {
  if (lv_reward_ != NULL) lv_reward_->::jynetwork::proto::sSimpleItem::Clear();
  clear_has_lv_reward();
}
inline const ::jynetwork::proto::sSimpleItem& sDecomStats::lv_reward() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return lv_reward_ != NULL ? *lv_reward_ : *default_instance().lv_reward_;
#else
  return lv_reward_ != NULL ? *lv_reward_ : *default_instance_->lv_reward_;
#endif
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::mutable_lv_reward() {
  set_has_lv_reward();
  if (lv_reward_ == NULL) lv_reward_ = new ::jynetwork::proto::sSimpleItem;
  return lv_reward_;
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::release_lv_reward() {
  clear_has_lv_reward();
  ::jynetwork::proto::sSimpleItem* temp = lv_reward_;
  lv_reward_ = NULL;
  return temp;
}
inline void sDecomStats::set_allocated_lv_reward(::jynetwork::proto::sSimpleItem* lv_reward) {
  delete lv_reward_;
  lv_reward_ = lv_reward;
  if (lv_reward) {
    set_has_lv_reward();
  } else {
    clear_has_lv_reward();
  }
}

// optional uint32 lv_gold = 5;
inline bool sDecomStats::has_lv_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sDecomStats::set_has_lv_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sDecomStats::clear_has_lv_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sDecomStats::clear_lv_gold() {
  lv_gold_ = 0u;
  clear_has_lv_gold();
}
inline ::google::protobuf::uint32 sDecomStats::lv_gold() const {
  return lv_gold_;
}
inline void sDecomStats::set_lv_gold(::google::protobuf::uint32 value) {
  set_has_lv_gold();
  lv_gold_ = value;
}

// repeated .jynetwork.proto.sSimpleItem intensify_reward = 6;
inline int sDecomStats::intensify_reward_size() const {
  return intensify_reward_.size();
}
inline void sDecomStats::clear_intensify_reward() {
  intensify_reward_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& sDecomStats::intensify_reward(int index) const {
  return intensify_reward_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::mutable_intensify_reward(int index) {
  return intensify_reward_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::add_intensify_reward() {
  return intensify_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
sDecomStats::intensify_reward() const {
  return intensify_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
sDecomStats::mutable_intensify_reward() {
  return &intensify_reward_;
}

// optional uint32 intensify_gold = 7;
inline bool sDecomStats::has_intensify_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sDecomStats::set_has_intensify_gold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sDecomStats::clear_has_intensify_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sDecomStats::clear_intensify_gold() {
  intensify_gold_ = 0u;
  clear_has_intensify_gold();
}
inline ::google::protobuf::uint32 sDecomStats::intensify_gold() const {
  return intensify_gold_;
}
inline void sDecomStats::set_intensify_gold(::google::protobuf::uint32 value) {
  set_has_intensify_gold();
  intensify_gold_ = value;
}

// optional .jynetwork.proto.sSimpleItem bonus_reward = 8;
inline bool sDecomStats::has_bonus_reward() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sDecomStats::set_has_bonus_reward() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sDecomStats::clear_has_bonus_reward() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sDecomStats::clear_bonus_reward() {
  if (bonus_reward_ != NULL) bonus_reward_->::jynetwork::proto::sSimpleItem::Clear();
  clear_has_bonus_reward();
}
inline const ::jynetwork::proto::sSimpleItem& sDecomStats::bonus_reward() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bonus_reward_ != NULL ? *bonus_reward_ : *default_instance().bonus_reward_;
#else
  return bonus_reward_ != NULL ? *bonus_reward_ : *default_instance_->bonus_reward_;
#endif
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::mutable_bonus_reward() {
  set_has_bonus_reward();
  if (bonus_reward_ == NULL) bonus_reward_ = new ::jynetwork::proto::sSimpleItem;
  return bonus_reward_;
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::release_bonus_reward() {
  clear_has_bonus_reward();
  ::jynetwork::proto::sSimpleItem* temp = bonus_reward_;
  bonus_reward_ = NULL;
  return temp;
}
inline void sDecomStats::set_allocated_bonus_reward(::jynetwork::proto::sSimpleItem* bonus_reward) {
  delete bonus_reward_;
  bonus_reward_ = bonus_reward;
  if (bonus_reward) {
    set_has_bonus_reward();
  } else {
    clear_has_bonus_reward();
  }
}

// optional uint32 bonus_percent = 9;
inline bool sDecomStats::has_bonus_percent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sDecomStats::set_has_bonus_percent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sDecomStats::clear_has_bonus_percent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sDecomStats::clear_bonus_percent() {
  bonus_percent_ = 0u;
  clear_has_bonus_percent();
}
inline ::google::protobuf::uint32 sDecomStats::bonus_percent() const {
  return bonus_percent_;
}
inline void sDecomStats::set_bonus_percent(::google::protobuf::uint32 value) {
  set_has_bonus_percent();
  bonus_percent_ = value;
}

// optional uint32 type_num = 10;
inline bool sDecomStats::has_type_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sDecomStats::set_has_type_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sDecomStats::clear_has_type_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sDecomStats::clear_type_num() {
  type_num_ = 0u;
  clear_has_type_num();
}
inline ::google::protobuf::uint32 sDecomStats::type_num() const {
  return type_num_;
}
inline void sDecomStats::set_type_num(::google::protobuf::uint32 value) {
  set_has_type_num();
  type_num_ = value;
}

// optional .jynetwork.proto.sSimpleItem magic_stone = 11;
inline bool sDecomStats::has_magic_stone() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sDecomStats::set_has_magic_stone() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sDecomStats::clear_has_magic_stone() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sDecomStats::clear_magic_stone() {
  if (magic_stone_ != NULL) magic_stone_->::jynetwork::proto::sSimpleItem::Clear();
  clear_has_magic_stone();
}
inline const ::jynetwork::proto::sSimpleItem& sDecomStats::magic_stone() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return magic_stone_ != NULL ? *magic_stone_ : *default_instance().magic_stone_;
#else
  return magic_stone_ != NULL ? *magic_stone_ : *default_instance_->magic_stone_;
#endif
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::mutable_magic_stone() {
  set_has_magic_stone();
  if (magic_stone_ == NULL) magic_stone_ = new ::jynetwork::proto::sSimpleItem;
  return magic_stone_;
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::release_magic_stone() {
  clear_has_magic_stone();
  ::jynetwork::proto::sSimpleItem* temp = magic_stone_;
  magic_stone_ = NULL;
  return temp;
}
inline void sDecomStats::set_allocated_magic_stone(::jynetwork::proto::sSimpleItem* magic_stone) {
  delete magic_stone_;
  magic_stone_ = magic_stone;
  if (magic_stone) {
    set_has_magic_stone();
  } else {
    clear_has_magic_stone();
  }
}

// optional uint32 stone_percent = 12;
inline bool sDecomStats::has_stone_percent() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sDecomStats::set_has_stone_percent() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sDecomStats::clear_has_stone_percent() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sDecomStats::clear_stone_percent() {
  stone_percent_ = 0u;
  clear_has_stone_percent();
}
inline ::google::protobuf::uint32 sDecomStats::stone_percent() const {
  return stone_percent_;
}
inline void sDecomStats::set_stone_percent(::google::protobuf::uint32 value) {
  set_has_stone_percent();
  stone_percent_ = value;
}

// optional .jynetwork.proto.sSimpleItem shop_stone = 13;
inline bool sDecomStats::has_shop_stone() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sDecomStats::set_has_shop_stone() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sDecomStats::clear_has_shop_stone() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sDecomStats::clear_shop_stone() {
  if (shop_stone_ != NULL) shop_stone_->::jynetwork::proto::sSimpleItem::Clear();
  clear_has_shop_stone();
}
inline const ::jynetwork::proto::sSimpleItem& sDecomStats::shop_stone() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return shop_stone_ != NULL ? *shop_stone_ : *default_instance().shop_stone_;
#else
  return shop_stone_ != NULL ? *shop_stone_ : *default_instance_->shop_stone_;
#endif
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::mutable_shop_stone() {
  set_has_shop_stone();
  if (shop_stone_ == NULL) shop_stone_ = new ::jynetwork::proto::sSimpleItem;
  return shop_stone_;
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::release_shop_stone() {
  clear_has_shop_stone();
  ::jynetwork::proto::sSimpleItem* temp = shop_stone_;
  shop_stone_ = NULL;
  return temp;
}
inline void sDecomStats::set_allocated_shop_stone(::jynetwork::proto::sSimpleItem* shop_stone) {
  delete shop_stone_;
  shop_stone_ = shop_stone;
  if (shop_stone) {
    set_has_shop_stone();
  } else {
    clear_has_shop_stone();
  }
}

// optional .jynetwork.proto.sSimpleItem set_decom = 14;
inline bool sDecomStats::has_set_decom() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sDecomStats::set_has_set_decom() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sDecomStats::clear_has_set_decom() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sDecomStats::clear_set_decom() {
  if (set_decom_ != NULL) set_decom_->::jynetwork::proto::sSimpleItem::Clear();
  clear_has_set_decom();
}
inline const ::jynetwork::proto::sSimpleItem& sDecomStats::set_decom() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return set_decom_ != NULL ? *set_decom_ : *default_instance().set_decom_;
#else
  return set_decom_ != NULL ? *set_decom_ : *default_instance_->set_decom_;
#endif
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::mutable_set_decom() {
  set_has_set_decom();
  if (set_decom_ == NULL) set_decom_ = new ::jynetwork::proto::sSimpleItem;
  return set_decom_;
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::release_set_decom() {
  clear_has_set_decom();
  ::jynetwork::proto::sSimpleItem* temp = set_decom_;
  set_decom_ = NULL;
  return temp;
}
inline void sDecomStats::set_allocated_set_decom(::jynetwork::proto::sSimpleItem* set_decom) {
  delete set_decom_;
  set_decom_ = set_decom;
  if (set_decom) {
    set_has_set_decom();
  } else {
    clear_has_set_decom();
  }
}

// optional uint32 role = 15;
inline bool sDecomStats::has_role() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sDecomStats::set_has_role() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sDecomStats::clear_has_role() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sDecomStats::clear_role() {
  role_ = 0u;
  clear_has_role();
}
inline ::google::protobuf::uint32 sDecomStats::role() const {
  return role_;
}
inline void sDecomStats::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
}

// optional uint32 equip_part = 16;
inline bool sDecomStats::has_equip_part() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sDecomStats::set_has_equip_part() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sDecomStats::clear_has_equip_part() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sDecomStats::clear_equip_part() {
  equip_part_ = 0u;
  clear_has_equip_part();
}
inline ::google::protobuf::uint32 sDecomStats::equip_part() const {
  return equip_part_;
}
inline void sDecomStats::set_equip_part(::google::protobuf::uint32 value) {
  set_has_equip_part();
  equip_part_ = value;
}

// optional uint32 is_group = 17;
inline bool sDecomStats::has_is_group() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sDecomStats::set_has_is_group() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sDecomStats::clear_has_is_group() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sDecomStats::clear_is_group() {
  is_group_ = 0u;
  clear_has_is_group();
}
inline ::google::protobuf::uint32 sDecomStats::is_group() const {
  return is_group_;
}
inline void sDecomStats::set_is_group(::google::protobuf::uint32 value) {
  set_has_is_group();
  is_group_ = value;
}

// optional uint32 equip_star = 18;
inline bool sDecomStats::has_equip_star() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sDecomStats::set_has_equip_star() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sDecomStats::clear_has_equip_star() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sDecomStats::clear_equip_star() {
  equip_star_ = 0u;
  clear_has_equip_star();
}
inline ::google::protobuf::uint32 sDecomStats::equip_star() const {
  return equip_star_;
}
inline void sDecomStats::set_equip_star(::google::protobuf::uint32 value) {
  set_has_equip_star();
  equip_star_ = value;
}

// optional uint32 intensify = 19;
inline bool sDecomStats::has_intensify() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sDecomStats::set_has_intensify() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sDecomStats::clear_has_intensify() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sDecomStats::clear_intensify() {
  intensify_ = 0u;
  clear_has_intensify();
}
inline ::google::protobuf::uint32 sDecomStats::intensify() const {
  return intensify_;
}
inline void sDecomStats::set_intensify(::google::protobuf::uint32 value) {
  set_has_intensify();
  intensify_ = value;
}

// repeated .jynetwork.proto.sSimpleItem new_base_reward = 20;
inline int sDecomStats::new_base_reward_size() const {
  return new_base_reward_.size();
}
inline void sDecomStats::clear_new_base_reward() {
  new_base_reward_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& sDecomStats::new_base_reward(int index) const {
  return new_base_reward_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::mutable_new_base_reward(int index) {
  return new_base_reward_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::add_new_base_reward() {
  return new_base_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
sDecomStats::new_base_reward() const {
  return new_base_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
sDecomStats::mutable_new_base_reward() {
  return &new_base_reward_;
}

// repeated .jynetwork.proto.sSimpleItem new_percent_item = 21;
inline int sDecomStats::new_percent_item_size() const {
  return new_percent_item_.size();
}
inline void sDecomStats::clear_new_percent_item() {
  new_percent_item_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& sDecomStats::new_percent_item(int index) const {
  return new_percent_item_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::mutable_new_percent_item(int index) {
  return new_percent_item_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* sDecomStats::add_new_percent_item() {
  return new_percent_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
sDecomStats::new_percent_item() const {
  return new_percent_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
sDecomStats::mutable_new_percent_item() {
  return &new_percent_item_;
}

// optional uint32 new_percent = 22;
inline bool sDecomStats::has_new_percent() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sDecomStats::set_has_new_percent() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sDecomStats::clear_has_new_percent() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sDecomStats::clear_new_percent() {
  new_percent_ = 0u;
  clear_has_new_percent();
}
inline ::google::protobuf::uint32 sDecomStats::new_percent() const {
  return new_percent_;
}
inline void sDecomStats::set_new_percent(::google::protobuf::uint32 value) {
  set_has_new_percent();
  new_percent_ = value;
}

// optional uint32 new_gold = 23;
inline bool sDecomStats::has_new_gold() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sDecomStats::set_has_new_gold() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sDecomStats::clear_has_new_gold() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sDecomStats::clear_new_gold() {
  new_gold_ = 0u;
  clear_has_new_gold();
}
inline ::google::protobuf::uint32 sDecomStats::new_gold() const {
  return new_gold_;
}
inline void sDecomStats::set_new_gold(::google::protobuf::uint32 value) {
  set_has_new_gold();
  new_gold_ = value;
}

// -------------------------------------------------------------------

// sMaskWordStats

// optional uint32 uid = 1;
inline bool sMaskWordStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sMaskWordStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sMaskWordStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sMaskWordStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sMaskWordStats::uid() const {
  return uid_;
}
inline void sMaskWordStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes txt = 2;
inline bool sMaskWordStats::has_txt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sMaskWordStats::set_has_txt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sMaskWordStats::clear_has_txt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sMaskWordStats::clear_txt() {
  if (txt_ != &::google::protobuf::internal::kEmptyString) {
    txt_->clear();
  }
  clear_has_txt();
}
inline const ::std::string& sMaskWordStats::txt() const {
  return *txt_;
}
inline void sMaskWordStats::set_txt(const ::std::string& value) {
  set_has_txt();
  if (txt_ == &::google::protobuf::internal::kEmptyString) {
    txt_ = new ::std::string;
  }
  txt_->assign(value);
}
inline void sMaskWordStats::set_txt(const char* value) {
  set_has_txt();
  if (txt_ == &::google::protobuf::internal::kEmptyString) {
    txt_ = new ::std::string;
  }
  txt_->assign(value);
}
inline void sMaskWordStats::set_txt(const void* value, size_t size) {
  set_has_txt();
  if (txt_ == &::google::protobuf::internal::kEmptyString) {
    txt_ = new ::std::string;
  }
  txt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sMaskWordStats::mutable_txt() {
  set_has_txt();
  if (txt_ == &::google::protobuf::internal::kEmptyString) {
    txt_ = new ::std::string;
  }
  return txt_;
}
inline ::std::string* sMaskWordStats::release_txt() {
  clear_has_txt();
  if (txt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = txt_;
    txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sMaskWordStats::set_allocated_txt(::std::string* txt) {
  if (txt_ != &::google::protobuf::internal::kEmptyString) {
    delete txt_;
  }
  if (txt) {
    set_has_txt();
    txt_ = txt;
  } else {
    clear_has_txt();
    txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sPartnerStats

// optional uint32 uid = 1;
inline bool sPartnerStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPartnerStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPartnerStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPartnerStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sPartnerStats::uid() const {
  return uid_;
}
inline void sPartnerStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 partner_id = 2;
inline bool sPartnerStats::has_partner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPartnerStats::set_has_partner_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPartnerStats::clear_has_partner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPartnerStats::clear_partner_id() {
  partner_id_ = 0u;
  clear_has_partner_id();
}
inline ::google::protobuf::uint32 sPartnerStats::partner_id() const {
  return partner_id_;
}
inline void sPartnerStats::set_partner_id(::google::protobuf::uint32 value) {
  set_has_partner_id();
  partner_id_ = value;
}

// optional .jynetwork.proto.eRoleType role = 3;
inline bool sPartnerStats::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPartnerStats::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPartnerStats::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPartnerStats::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::jynetwork::proto::eRoleType sPartnerStats::role() const {
  return static_cast< ::jynetwork::proto::eRoleType >(role_);
}
inline void sPartnerStats::set_role(::jynetwork::proto::eRoleType value) {
  assert(::jynetwork::proto::eRoleType_IsValid(value));
  set_has_role();
  role_ = value;
}

// optional uint32 cardname = 4;
inline bool sPartnerStats::has_cardname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sPartnerStats::set_has_cardname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sPartnerStats::clear_has_cardname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sPartnerStats::clear_cardname() {
  cardname_ = 0u;
  clear_has_cardname();
}
inline ::google::protobuf::uint32 sPartnerStats::cardname() const {
  return cardname_;
}
inline void sPartnerStats::set_cardname(::google::protobuf::uint32 value) {
  set_has_cardname();
  cardname_ = value;
}

// optional uint32 star = 5;
inline bool sPartnerStats::has_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sPartnerStats::set_has_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sPartnerStats::clear_has_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sPartnerStats::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 sPartnerStats::star() const {
  return star_;
}
inline void sPartnerStats::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional string skill_res = 6;
inline bool sPartnerStats::has_skill_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sPartnerStats::set_has_skill_res() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sPartnerStats::clear_has_skill_res() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sPartnerStats::clear_skill_res() {
  if (skill_res_ != &::google::protobuf::internal::kEmptyString) {
    skill_res_->clear();
  }
  clear_has_skill_res();
}
inline const ::std::string& sPartnerStats::skill_res() const {
  return *skill_res_;
}
inline void sPartnerStats::set_skill_res(const ::std::string& value) {
  set_has_skill_res();
  if (skill_res_ == &::google::protobuf::internal::kEmptyString) {
    skill_res_ = new ::std::string;
  }
  skill_res_->assign(value);
}
inline void sPartnerStats::set_skill_res(const char* value) {
  set_has_skill_res();
  if (skill_res_ == &::google::protobuf::internal::kEmptyString) {
    skill_res_ = new ::std::string;
  }
  skill_res_->assign(value);
}
inline void sPartnerStats::set_skill_res(const char* value, size_t size) {
  set_has_skill_res();
  if (skill_res_ == &::google::protobuf::internal::kEmptyString) {
    skill_res_ = new ::std::string;
  }
  skill_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPartnerStats::mutable_skill_res() {
  set_has_skill_res();
  if (skill_res_ == &::google::protobuf::internal::kEmptyString) {
    skill_res_ = new ::std::string;
  }
  return skill_res_;
}
inline ::std::string* sPartnerStats::release_skill_res() {
  clear_has_skill_res();
  if (skill_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_res_;
    skill_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sPartnerStats::set_allocated_skill_res(::std::string* skill_res) {
  if (skill_res_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_res_;
  }
  if (skill_res) {
    set_has_skill_res();
    skill_res_ = skill_res;
  } else {
    clear_has_skill_res();
    skill_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 cardmodel = 7;
inline bool sPartnerStats::has_cardmodel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sPartnerStats::set_has_cardmodel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sPartnerStats::clear_has_cardmodel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sPartnerStats::clear_cardmodel() {
  cardmodel_ = 0u;
  clear_has_cardmodel();
}
inline ::google::protobuf::uint32 sPartnerStats::cardmodel() const {
  return cardmodel_;
}
inline void sPartnerStats::set_cardmodel(::google::protobuf::uint32 value) {
  set_has_cardmodel();
  cardmodel_ = value;
}

// optional float scale = 8;
inline bool sPartnerStats::has_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sPartnerStats::set_has_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sPartnerStats::clear_has_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sPartnerStats::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float sPartnerStats::scale() const {
  return scale_;
}
inline void sPartnerStats::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional string cardicon = 9;
inline bool sPartnerStats::has_cardicon() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sPartnerStats::set_has_cardicon() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sPartnerStats::clear_has_cardicon() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sPartnerStats::clear_cardicon() {
  if (cardicon_ != &::google::protobuf::internal::kEmptyString) {
    cardicon_->clear();
  }
  clear_has_cardicon();
}
inline const ::std::string& sPartnerStats::cardicon() const {
  return *cardicon_;
}
inline void sPartnerStats::set_cardicon(const ::std::string& value) {
  set_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    cardicon_ = new ::std::string;
  }
  cardicon_->assign(value);
}
inline void sPartnerStats::set_cardicon(const char* value) {
  set_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    cardicon_ = new ::std::string;
  }
  cardicon_->assign(value);
}
inline void sPartnerStats::set_cardicon(const char* value, size_t size) {
  set_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    cardicon_ = new ::std::string;
  }
  cardicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPartnerStats::mutable_cardicon() {
  set_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    cardicon_ = new ::std::string;
  }
  return cardicon_;
}
inline ::std::string* sPartnerStats::release_cardicon() {
  clear_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardicon_;
    cardicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sPartnerStats::set_allocated_cardicon(::std::string* cardicon) {
  if (cardicon_ != &::google::protobuf::internal::kEmptyString) {
    delete cardicon_;
  }
  if (cardicon) {
    set_has_cardicon();
    cardicon_ = cardicon;
  } else {
    clear_has_cardicon();
    cardicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .jynetwork.proto.ePartnerBuffType buff_type = 10;
inline bool sPartnerStats::has_buff_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sPartnerStats::set_has_buff_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sPartnerStats::clear_has_buff_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sPartnerStats::clear_buff_type() {
  buff_type_ = 1;
  clear_has_buff_type();
}
inline ::jynetwork::proto::ePartnerBuffType sPartnerStats::buff_type() const {
  return static_cast< ::jynetwork::proto::ePartnerBuffType >(buff_type_);
}
inline void sPartnerStats::set_buff_type(::jynetwork::proto::ePartnerBuffType value) {
  assert(::jynetwork::proto::ePartnerBuffType_IsValid(value));
  set_has_buff_type();
  buff_type_ = value;
}

// optional uint32 effect_id = 11;
inline bool sPartnerStats::has_effect_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sPartnerStats::set_has_effect_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sPartnerStats::clear_has_effect_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sPartnerStats::clear_effect_id() {
  effect_id_ = 0u;
  clear_has_effect_id();
}
inline ::google::protobuf::uint32 sPartnerStats::effect_id() const {
  return effect_id_;
}
inline void sPartnerStats::set_effect_id(::google::protobuf::uint32 value) {
  set_has_effect_id();
  effect_id_ = value;
}

// optional uint32 effect_id2 = 32;
inline bool sPartnerStats::has_effect_id2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sPartnerStats::set_has_effect_id2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sPartnerStats::clear_has_effect_id2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sPartnerStats::clear_effect_id2() {
  effect_id2_ = 0u;
  clear_has_effect_id2();
}
inline ::google::protobuf::uint32 sPartnerStats::effect_id2() const {
  return effect_id2_;
}
inline void sPartnerStats::set_effect_id2(::google::protobuf::uint32 value) {
  set_has_effect_id2();
  effect_id2_ = value;
}

// optional uint32 gamestats = 12;
inline bool sPartnerStats::has_gamestats() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sPartnerStats::set_has_gamestats() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sPartnerStats::clear_has_gamestats() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sPartnerStats::clear_gamestats() {
  gamestats_ = 0u;
  clear_has_gamestats();
}
inline ::google::protobuf::uint32 sPartnerStats::gamestats() const {
  return gamestats_;
}
inline void sPartnerStats::set_gamestats(::google::protobuf::uint32 value) {
  set_has_gamestats();
  gamestats_ = value;
}

// optional uint32 gamestats_lvl = 13;
inline bool sPartnerStats::has_gamestats_lvl() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sPartnerStats::set_has_gamestats_lvl() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sPartnerStats::clear_has_gamestats_lvl() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sPartnerStats::clear_gamestats_lvl() {
  gamestats_lvl_ = 0u;
  clear_has_gamestats_lvl();
}
inline ::google::protobuf::uint32 sPartnerStats::gamestats_lvl() const {
  return gamestats_lvl_;
}
inline void sPartnerStats::set_gamestats_lvl(::google::protobuf::uint32 value) {
  set_has_gamestats_lvl();
  gamestats_lvl_ = value;
}

// optional float skill_dmgscale = 14;
inline bool sPartnerStats::has_skill_dmgscale() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sPartnerStats::set_has_skill_dmgscale() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sPartnerStats::clear_has_skill_dmgscale() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sPartnerStats::clear_skill_dmgscale() {
  skill_dmgscale_ = 0;
  clear_has_skill_dmgscale();
}
inline float sPartnerStats::skill_dmgscale() const {
  return skill_dmgscale_;
}
inline void sPartnerStats::set_skill_dmgscale(float value) {
  set_has_skill_dmgscale();
  skill_dmgscale_ = value;
}

// optional float duration = 15;
inline bool sPartnerStats::has_duration() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sPartnerStats::set_has_duration() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sPartnerStats::clear_has_duration() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sPartnerStats::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float sPartnerStats::duration() const {
  return duration_;
}
inline void sPartnerStats::set_duration(float value) {
  set_has_duration();
  duration_ = value;
}

// optional uint32 es_id = 16;
inline bool sPartnerStats::has_es_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sPartnerStats::set_has_es_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sPartnerStats::clear_has_es_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sPartnerStats::clear_es_id() {
  es_id_ = 0u;
  clear_has_es_id();
}
inline ::google::protobuf::uint32 sPartnerStats::es_id() const {
  return es_id_;
}
inline void sPartnerStats::set_es_id(::google::protobuf::uint32 value) {
  set_has_es_id();
  es_id_ = value;
}

// optional uint32 battle_ability = 17;
inline bool sPartnerStats::has_battle_ability() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sPartnerStats::set_has_battle_ability() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sPartnerStats::clear_has_battle_ability() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sPartnerStats::clear_battle_ability() {
  battle_ability_ = 0u;
  clear_has_battle_ability();
}
inline ::google::protobuf::uint32 sPartnerStats::battle_ability() const {
  return battle_ability_;
}
inline void sPartnerStats::set_battle_ability(::google::protobuf::uint32 value) {
  set_has_battle_ability();
  battle_ability_ = value;
}

// optional uint32 skill_desc = 18;
inline bool sPartnerStats::has_skill_desc() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sPartnerStats::set_has_skill_desc() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sPartnerStats::clear_has_skill_desc() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sPartnerStats::clear_skill_desc() {
  skill_desc_ = 0u;
  clear_has_skill_desc();
}
inline ::google::protobuf::uint32 sPartnerStats::skill_desc() const {
  return skill_desc_;
}
inline void sPartnerStats::set_skill_desc(::google::protobuf::uint32 value) {
  set_has_skill_desc();
  skill_desc_ = value;
}

// optional uint32 buff_key = 19;
inline bool sPartnerStats::has_buff_key() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sPartnerStats::set_has_buff_key() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sPartnerStats::clear_has_buff_key() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sPartnerStats::clear_buff_key() {
  buff_key_ = 0u;
  clear_has_buff_key();
}
inline ::google::protobuf::uint32 sPartnerStats::buff_key() const {
  return buff_key_;
}
inline void sPartnerStats::set_buff_key(::google::protobuf::uint32 value) {
  set_has_buff_key();
  buff_key_ = value;
}

// optional string aquire_eff = 20;
inline bool sPartnerStats::has_aquire_eff() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sPartnerStats::set_has_aquire_eff() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sPartnerStats::clear_has_aquire_eff() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sPartnerStats::clear_aquire_eff() {
  if (aquire_eff_ != &::google::protobuf::internal::kEmptyString) {
    aquire_eff_->clear();
  }
  clear_has_aquire_eff();
}
inline const ::std::string& sPartnerStats::aquire_eff() const {
  return *aquire_eff_;
}
inline void sPartnerStats::set_aquire_eff(const ::std::string& value) {
  set_has_aquire_eff();
  if (aquire_eff_ == &::google::protobuf::internal::kEmptyString) {
    aquire_eff_ = new ::std::string;
  }
  aquire_eff_->assign(value);
}
inline void sPartnerStats::set_aquire_eff(const char* value) {
  set_has_aquire_eff();
  if (aquire_eff_ == &::google::protobuf::internal::kEmptyString) {
    aquire_eff_ = new ::std::string;
  }
  aquire_eff_->assign(value);
}
inline void sPartnerStats::set_aquire_eff(const char* value, size_t size) {
  set_has_aquire_eff();
  if (aquire_eff_ == &::google::protobuf::internal::kEmptyString) {
    aquire_eff_ = new ::std::string;
  }
  aquire_eff_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPartnerStats::mutable_aquire_eff() {
  set_has_aquire_eff();
  if (aquire_eff_ == &::google::protobuf::internal::kEmptyString) {
    aquire_eff_ = new ::std::string;
  }
  return aquire_eff_;
}
inline ::std::string* sPartnerStats::release_aquire_eff() {
  clear_has_aquire_eff();
  if (aquire_eff_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aquire_eff_;
    aquire_eff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sPartnerStats::set_allocated_aquire_eff(::std::string* aquire_eff) {
  if (aquire_eff_ != &::google::protobuf::internal::kEmptyString) {
    delete aquire_eff_;
  }
  if (aquire_eff) {
    set_has_aquire_eff();
    aquire_eff_ = aquire_eff;
  } else {
    clear_has_aquire_eff();
    aquire_eff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string buff_icon = 21;
inline bool sPartnerStats::has_buff_icon() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sPartnerStats::set_has_buff_icon() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sPartnerStats::clear_has_buff_icon() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sPartnerStats::clear_buff_icon() {
  if (buff_icon_ != &::google::protobuf::internal::kEmptyString) {
    buff_icon_->clear();
  }
  clear_has_buff_icon();
}
inline const ::std::string& sPartnerStats::buff_icon() const {
  return *buff_icon_;
}
inline void sPartnerStats::set_buff_icon(const ::std::string& value) {
  set_has_buff_icon();
  if (buff_icon_ == &::google::protobuf::internal::kEmptyString) {
    buff_icon_ = new ::std::string;
  }
  buff_icon_->assign(value);
}
inline void sPartnerStats::set_buff_icon(const char* value) {
  set_has_buff_icon();
  if (buff_icon_ == &::google::protobuf::internal::kEmptyString) {
    buff_icon_ = new ::std::string;
  }
  buff_icon_->assign(value);
}
inline void sPartnerStats::set_buff_icon(const char* value, size_t size) {
  set_has_buff_icon();
  if (buff_icon_ == &::google::protobuf::internal::kEmptyString) {
    buff_icon_ = new ::std::string;
  }
  buff_icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPartnerStats::mutable_buff_icon() {
  set_has_buff_icon();
  if (buff_icon_ == &::google::protobuf::internal::kEmptyString) {
    buff_icon_ = new ::std::string;
  }
  return buff_icon_;
}
inline ::std::string* sPartnerStats::release_buff_icon() {
  clear_has_buff_icon();
  if (buff_icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buff_icon_;
    buff_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sPartnerStats::set_allocated_buff_icon(::std::string* buff_icon) {
  if (buff_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete buff_icon_;
  }
  if (buff_icon) {
    set_has_buff_icon();
    buff_icon_ = buff_icon;
  } else {
    clear_has_buff_icon();
    buff_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string buff_show = 22;
inline bool sPartnerStats::has_buff_show() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sPartnerStats::set_has_buff_show() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sPartnerStats::clear_has_buff_show() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sPartnerStats::clear_buff_show() {
  if (buff_show_ != &::google::protobuf::internal::kEmptyString) {
    buff_show_->clear();
  }
  clear_has_buff_show();
}
inline const ::std::string& sPartnerStats::buff_show() const {
  return *buff_show_;
}
inline void sPartnerStats::set_buff_show(const ::std::string& value) {
  set_has_buff_show();
  if (buff_show_ == &::google::protobuf::internal::kEmptyString) {
    buff_show_ = new ::std::string;
  }
  buff_show_->assign(value);
}
inline void sPartnerStats::set_buff_show(const char* value) {
  set_has_buff_show();
  if (buff_show_ == &::google::protobuf::internal::kEmptyString) {
    buff_show_ = new ::std::string;
  }
  buff_show_->assign(value);
}
inline void sPartnerStats::set_buff_show(const char* value, size_t size) {
  set_has_buff_show();
  if (buff_show_ == &::google::protobuf::internal::kEmptyString) {
    buff_show_ = new ::std::string;
  }
  buff_show_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPartnerStats::mutable_buff_show() {
  set_has_buff_show();
  if (buff_show_ == &::google::protobuf::internal::kEmptyString) {
    buff_show_ = new ::std::string;
  }
  return buff_show_;
}
inline ::std::string* sPartnerStats::release_buff_show() {
  clear_has_buff_show();
  if (buff_show_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buff_show_;
    buff_show_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sPartnerStats::set_allocated_buff_show(::std::string* buff_show) {
  if (buff_show_ != &::google::protobuf::internal::kEmptyString) {
    delete buff_show_;
  }
  if (buff_show) {
    set_has_buff_show();
    buff_show_ = buff_show;
  } else {
    clear_has_buff_show();
    buff_show_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 star_desc_lang_id = 23;
inline bool sPartnerStats::has_star_desc_lang_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sPartnerStats::set_has_star_desc_lang_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sPartnerStats::clear_has_star_desc_lang_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sPartnerStats::clear_star_desc_lang_id() {
  star_desc_lang_id_ = 0u;
  clear_has_star_desc_lang_id();
}
inline ::google::protobuf::uint32 sPartnerStats::star_desc_lang_id() const {
  return star_desc_lang_id_;
}
inline void sPartnerStats::set_star_desc_lang_id(::google::protobuf::uint32 value) {
  set_has_star_desc_lang_id();
  star_desc_lang_id_ = value;
}

// optional uint32 partner_skill_lang_id = 24;
inline bool sPartnerStats::has_partner_skill_lang_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sPartnerStats::set_has_partner_skill_lang_id() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sPartnerStats::clear_has_partner_skill_lang_id() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sPartnerStats::clear_partner_skill_lang_id() {
  partner_skill_lang_id_ = 0u;
  clear_has_partner_skill_lang_id();
}
inline ::google::protobuf::uint32 sPartnerStats::partner_skill_lang_id() const {
  return partner_skill_lang_id_;
}
inline void sPartnerStats::set_partner_skill_lang_id(::google::protobuf::uint32 value) {
  set_has_partner_skill_lang_id();
  partner_skill_lang_id_ = value;
}

// optional uint32 partner_skill_up_lang_id = 25;
inline bool sPartnerStats::has_partner_skill_up_lang_id() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sPartnerStats::set_has_partner_skill_up_lang_id() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sPartnerStats::clear_has_partner_skill_up_lang_id() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sPartnerStats::clear_partner_skill_up_lang_id() {
  partner_skill_up_lang_id_ = 0u;
  clear_has_partner_skill_up_lang_id();
}
inline ::google::protobuf::uint32 sPartnerStats::partner_skill_up_lang_id() const {
  return partner_skill_up_lang_id_;
}
inline void sPartnerStats::set_partner_skill_up_lang_id(::google::protobuf::uint32 value) {
  set_has_partner_skill_up_lang_id();
  partner_skill_up_lang_id_ = value;
}

// optional uint32 star_up_lang_id = 26;
inline bool sPartnerStats::has_star_up_lang_id() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void sPartnerStats::set_has_star_up_lang_id() {
  _has_bits_[0] |= 0x04000000u;
}
inline void sPartnerStats::clear_has_star_up_lang_id() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void sPartnerStats::clear_star_up_lang_id() {
  star_up_lang_id_ = 0u;
  clear_has_star_up_lang_id();
}
inline ::google::protobuf::uint32 sPartnerStats::star_up_lang_id() const {
  return star_up_lang_id_;
}
inline void sPartnerStats::set_star_up_lang_id(::google::protobuf::uint32 value) {
  set_has_star_up_lang_id();
  star_up_lang_id_ = value;
}

// optional uint32 star_bnum = 27;
inline bool sPartnerStats::has_star_bnum() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void sPartnerStats::set_has_star_bnum() {
  _has_bits_[0] |= 0x08000000u;
}
inline void sPartnerStats::clear_has_star_bnum() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void sPartnerStats::clear_star_bnum() {
  star_bnum_ = 0u;
  clear_has_star_bnum();
}
inline ::google::protobuf::uint32 sPartnerStats::star_bnum() const {
  return star_bnum_;
}
inline void sPartnerStats::set_star_bnum(::google::protobuf::uint32 value) {
  set_has_star_bnum();
  star_bnum_ = value;
}

// optional uint32 star_anum = 28;
inline bool sPartnerStats::has_star_anum() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void sPartnerStats::set_has_star_anum() {
  _has_bits_[0] |= 0x10000000u;
}
inline void sPartnerStats::clear_has_star_anum() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void sPartnerStats::clear_star_anum() {
  star_anum_ = 0u;
  clear_has_star_anum();
}
inline ::google::protobuf::uint32 sPartnerStats::star_anum() const {
  return star_anum_;
}
inline void sPartnerStats::set_star_anum(::google::protobuf::uint32 value) {
  set_has_star_anum();
  star_anum_ = value;
}

// optional float offset = 29;
inline bool sPartnerStats::has_offset() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void sPartnerStats::set_has_offset() {
  _has_bits_[0] |= 0x20000000u;
}
inline void sPartnerStats::clear_has_offset() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void sPartnerStats::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline float sPartnerStats::offset() const {
  return offset_;
}
inline void sPartnerStats::set_offset(float value) {
  set_has_offset();
  offset_ = value;
}

// optional uint32 is_bind = 30;
inline bool sPartnerStats::has_is_bind() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void sPartnerStats::set_has_is_bind() {
  _has_bits_[0] |= 0x40000000u;
}
inline void sPartnerStats::clear_has_is_bind() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void sPartnerStats::clear_is_bind() {
  is_bind_ = 0u;
  clear_has_is_bind();
}
inline ::google::protobuf::uint32 sPartnerStats::is_bind() const {
  return is_bind_;
}
inline void sPartnerStats::set_is_bind(::google::protobuf::uint32 value) {
  set_has_is_bind();
  is_bind_ = value;
}

// optional string battle_icon = 31;
inline bool sPartnerStats::has_battle_icon() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void sPartnerStats::set_has_battle_icon() {
  _has_bits_[0] |= 0x80000000u;
}
inline void sPartnerStats::clear_has_battle_icon() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void sPartnerStats::clear_battle_icon() {
  if (battle_icon_ != &::google::protobuf::internal::kEmptyString) {
    battle_icon_->clear();
  }
  clear_has_battle_icon();
}
inline const ::std::string& sPartnerStats::battle_icon() const {
  return *battle_icon_;
}
inline void sPartnerStats::set_battle_icon(const ::std::string& value) {
  set_has_battle_icon();
  if (battle_icon_ == &::google::protobuf::internal::kEmptyString) {
    battle_icon_ = new ::std::string;
  }
  battle_icon_->assign(value);
}
inline void sPartnerStats::set_battle_icon(const char* value) {
  set_has_battle_icon();
  if (battle_icon_ == &::google::protobuf::internal::kEmptyString) {
    battle_icon_ = new ::std::string;
  }
  battle_icon_->assign(value);
}
inline void sPartnerStats::set_battle_icon(const char* value, size_t size) {
  set_has_battle_icon();
  if (battle_icon_ == &::google::protobuf::internal::kEmptyString) {
    battle_icon_ = new ::std::string;
  }
  battle_icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPartnerStats::mutable_battle_icon() {
  set_has_battle_icon();
  if (battle_icon_ == &::google::protobuf::internal::kEmptyString) {
    battle_icon_ = new ::std::string;
  }
  return battle_icon_;
}
inline ::std::string* sPartnerStats::release_battle_icon() {
  clear_has_battle_icon();
  if (battle_icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = battle_icon_;
    battle_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sPartnerStats::set_allocated_battle_icon(::std::string* battle_icon) {
  if (battle_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete battle_icon_;
  }
  if (battle_icon) {
    set_has_battle_icon();
    battle_icon_ = battle_icon;
  } else {
    clear_has_battle_icon();
    battle_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sPartnerLvUpStats

// optional uint32 uid = 1;
inline bool sPartnerLvUpStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPartnerLvUpStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPartnerLvUpStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPartnerLvUpStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sPartnerLvUpStats::uid() const {
  return uid_;
}
inline void sPartnerLvUpStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 role = 2;
inline bool sPartnerLvUpStats::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPartnerLvUpStats::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPartnerLvUpStats::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPartnerLvUpStats::clear_role() {
  role_ = 0u;
  clear_has_role();
}
inline ::google::protobuf::uint32 sPartnerLvUpStats::role() const {
  return role_;
}
inline void sPartnerLvUpStats::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
}

// optional uint32 lv = 3;
inline bool sPartnerLvUpStats::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPartnerLvUpStats::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPartnerLvUpStats::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPartnerLvUpStats::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 sPartnerLvUpStats::lv() const {
  return lv_;
}
inline void sPartnerLvUpStats::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 exp = 4;
inline bool sPartnerLvUpStats::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sPartnerLvUpStats::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sPartnerLvUpStats::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sPartnerLvUpStats::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 sPartnerLvUpStats::exp() const {
  return exp_;
}
inline void sPartnerLvUpStats::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 intensify_need = 5;
inline bool sPartnerLvUpStats::has_intensify_need() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sPartnerLvUpStats::set_has_intensify_need() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sPartnerLvUpStats::clear_has_intensify_need() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sPartnerLvUpStats::clear_intensify_need() {
  intensify_need_ = 0u;
  clear_has_intensify_need();
}
inline ::google::protobuf::uint32 sPartnerLvUpStats::intensify_need() const {
  return intensify_need_;
}
inline void sPartnerLvUpStats::set_intensify_need(::google::protobuf::uint32 value) {
  set_has_intensify_need();
  intensify_need_ = value;
}

// optional uint32 battle_ability = 6;
inline bool sPartnerLvUpStats::has_battle_ability() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sPartnerLvUpStats::set_has_battle_ability() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sPartnerLvUpStats::clear_has_battle_ability() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sPartnerLvUpStats::clear_battle_ability() {
  battle_ability_ = 0u;
  clear_has_battle_ability();
}
inline ::google::protobuf::uint32 sPartnerLvUpStats::battle_ability() const {
  return battle_ability_;
}
inline void sPartnerLvUpStats::set_battle_ability(::google::protobuf::uint32 value) {
  set_has_battle_ability();
  battle_ability_ = value;
}

// -------------------------------------------------------------------

// sPartnerIntensifyStats

// optional uint32 uid = 1;
inline bool sPartnerIntensifyStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPartnerIntensifyStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPartnerIntensifyStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPartnerIntensifyStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sPartnerIntensifyStats::uid() const {
  return uid_;
}
inline void sPartnerIntensifyStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 type = 2;
inline bool sPartnerIntensifyStats::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPartnerIntensifyStats::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPartnerIntensifyStats::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPartnerIntensifyStats::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 sPartnerIntensifyStats::type() const {
  return type_;
}
inline void sPartnerIntensifyStats::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 intensify = 3;
inline bool sPartnerIntensifyStats::has_intensify() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPartnerIntensifyStats::set_has_intensify() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPartnerIntensifyStats::clear_has_intensify() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPartnerIntensifyStats::clear_intensify() {
  intensify_ = 0u;
  clear_has_intensify();
}
inline ::google::protobuf::uint32 sPartnerIntensifyStats::intensify() const {
  return intensify_;
}
inline void sPartnerIntensifyStats::set_intensify(::google::protobuf::uint32 value) {
  set_has_intensify();
  intensify_ = value;
}

// repeated .jynetwork.proto.sSimpleItem itemneed = 4;
inline int sPartnerIntensifyStats::itemneed_size() const {
  return itemneed_.size();
}
inline void sPartnerIntensifyStats::clear_itemneed() {
  itemneed_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& sPartnerIntensifyStats::itemneed(int index) const {
  return itemneed_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* sPartnerIntensifyStats::mutable_itemneed(int index) {
  return itemneed_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* sPartnerIntensifyStats::add_itemneed() {
  return itemneed_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
sPartnerIntensifyStats::itemneed() const {
  return itemneed_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
sPartnerIntensifyStats::mutable_itemneed() {
  return &itemneed_;
}

// optional float drop_percent = 5;
inline bool sPartnerIntensifyStats::has_drop_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sPartnerIntensifyStats::set_has_drop_percent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sPartnerIntensifyStats::clear_has_drop_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sPartnerIntensifyStats::clear_drop_percent() {
  drop_percent_ = 0;
  clear_has_drop_percent();
}
inline float sPartnerIntensifyStats::drop_percent() const {
  return drop_percent_;
}
inline void sPartnerIntensifyStats::set_drop_percent(float value) {
  set_has_drop_percent();
  drop_percent_ = value;
}

// optional uint32 battle_ability = 6;
inline bool sPartnerIntensifyStats::has_battle_ability() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sPartnerIntensifyStats::set_has_battle_ability() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sPartnerIntensifyStats::clear_has_battle_ability() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sPartnerIntensifyStats::clear_battle_ability() {
  battle_ability_ = 0u;
  clear_has_battle_ability();
}
inline ::google::protobuf::uint32 sPartnerIntensifyStats::battle_ability() const {
  return battle_ability_;
}
inline void sPartnerIntensifyStats::set_battle_ability(::google::protobuf::uint32 value) {
  set_has_battle_ability();
  battle_ability_ = value;
}

// optional uint32 intensify_des = 7;
inline bool sPartnerIntensifyStats::has_intensify_des() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sPartnerIntensifyStats::set_has_intensify_des() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sPartnerIntensifyStats::clear_has_intensify_des() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sPartnerIntensifyStats::clear_intensify_des() {
  intensify_des_ = 0u;
  clear_has_intensify_des();
}
inline ::google::protobuf::uint32 sPartnerIntensifyStats::intensify_des() const {
  return intensify_des_;
}
inline void sPartnerIntensifyStats::set_intensify_des(::google::protobuf::uint32 value) {
  set_has_intensify_des();
  intensify_des_ = value;
}

// optional uint32 lv_limit = 8;
inline bool sPartnerIntensifyStats::has_lv_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sPartnerIntensifyStats::set_has_lv_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sPartnerIntensifyStats::clear_has_lv_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sPartnerIntensifyStats::clear_lv_limit() {
  lv_limit_ = 0u;
  clear_has_lv_limit();
}
inline ::google::protobuf::uint32 sPartnerIntensifyStats::lv_limit() const {
  return lv_limit_;
}
inline void sPartnerIntensifyStats::set_lv_limit(::google::protobuf::uint32 value) {
  set_has_lv_limit();
  lv_limit_ = value;
}

// -------------------------------------------------------------------

// sPartnerStarStats

// optional uint32 uid = 1;
inline bool sPartnerStarStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPartnerStarStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPartnerStarStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPartnerStarStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sPartnerStarStats::uid() const {
  return uid_;
}
inline void sPartnerStarStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes name = 2;
inline bool sPartnerStarStats::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPartnerStarStats::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPartnerStarStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPartnerStarStats::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sPartnerStarStats::name() const {
  return *name_;
}
inline void sPartnerStarStats::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sPartnerStarStats::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sPartnerStarStats::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPartnerStarStats::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sPartnerStarStats::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sPartnerStarStats::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 partner_id = 3;
inline bool sPartnerStarStats::has_partner_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sPartnerStarStats::set_has_partner_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sPartnerStarStats::clear_has_partner_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sPartnerStarStats::clear_partner_id() {
  partner_id_ = 0u;
  clear_has_partner_id();
}
inline ::google::protobuf::uint32 sPartnerStarStats::partner_id() const {
  return partner_id_;
}
inline void sPartnerStarStats::set_partner_id(::google::protobuf::uint32 value) {
  set_has_partner_id();
  partner_id_ = value;
}

// optional uint32 star = 4;
inline bool sPartnerStarStats::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sPartnerStarStats::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sPartnerStarStats::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sPartnerStarStats::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 sPartnerStarStats::star() const {
  return star_;
}
inline void sPartnerStarStats::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional uint32 item_id = 5;
inline bool sPartnerStarStats::has_item_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sPartnerStarStats::set_has_item_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sPartnerStarStats::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sPartnerStarStats::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 sPartnerStarStats::item_id() const {
  return item_id_;
}
inline void sPartnerStarStats::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// repeated uint32 start_up_count = 6;
inline int sPartnerStarStats::start_up_count_size() const {
  return start_up_count_.size();
}
inline void sPartnerStarStats::clear_start_up_count() {
  start_up_count_.Clear();
}
inline ::google::protobuf::uint32 sPartnerStarStats::start_up_count(int index) const {
  return start_up_count_.Get(index);
}
inline void sPartnerStarStats::set_start_up_count(int index, ::google::protobuf::uint32 value) {
  start_up_count_.Set(index, value);
}
inline void sPartnerStarStats::add_start_up_count(::google::protobuf::uint32 value) {
  start_up_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sPartnerStarStats::start_up_count() const {
  return start_up_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sPartnerStarStats::mutable_start_up_count() {
  return &start_up_count_;
}

// optional uint32 decom_count = 7;
inline bool sPartnerStarStats::has_decom_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sPartnerStarStats::set_has_decom_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sPartnerStarStats::clear_has_decom_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sPartnerStarStats::clear_decom_count() {
  decom_count_ = 0u;
  clear_has_decom_count();
}
inline ::google::protobuf::uint32 sPartnerStarStats::decom_count() const {
  return decom_count_;
}
inline void sPartnerStarStats::set_decom_count(::google::protobuf::uint32 value) {
  set_has_decom_count();
  decom_count_ = value;
}

// optional uint32 lang_id = 8;
inline bool sPartnerStarStats::has_lang_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sPartnerStarStats::set_has_lang_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sPartnerStarStats::clear_has_lang_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sPartnerStarStats::clear_lang_id() {
  lang_id_ = 0u;
  clear_has_lang_id();
}
inline ::google::protobuf::uint32 sPartnerStarStats::lang_id() const {
  return lang_id_;
}
inline void sPartnerStarStats::set_lang_id(::google::protobuf::uint32 value) {
  set_has_lang_id();
  lang_id_ = value;
}

// optional uint32 type = 9;
inline bool sPartnerStarStats::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sPartnerStarStats::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sPartnerStarStats::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sPartnerStarStats::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 sPartnerStarStats::type() const {
  return type_;
}
inline void sPartnerStarStats::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string cardicon = 10;
inline bool sPartnerStarStats::has_cardicon() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sPartnerStarStats::set_has_cardicon() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sPartnerStarStats::clear_has_cardicon() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sPartnerStarStats::clear_cardicon() {
  if (cardicon_ != &::google::protobuf::internal::kEmptyString) {
    cardicon_->clear();
  }
  clear_has_cardicon();
}
inline const ::std::string& sPartnerStarStats::cardicon() const {
  return *cardicon_;
}
inline void sPartnerStarStats::set_cardicon(const ::std::string& value) {
  set_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    cardicon_ = new ::std::string;
  }
  cardicon_->assign(value);
}
inline void sPartnerStarStats::set_cardicon(const char* value) {
  set_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    cardicon_ = new ::std::string;
  }
  cardicon_->assign(value);
}
inline void sPartnerStarStats::set_cardicon(const char* value, size_t size) {
  set_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    cardicon_ = new ::std::string;
  }
  cardicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPartnerStarStats::mutable_cardicon() {
  set_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    cardicon_ = new ::std::string;
  }
  return cardicon_;
}
inline ::std::string* sPartnerStarStats::release_cardicon() {
  clear_has_cardicon();
  if (cardicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardicon_;
    cardicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sPartnerStarStats::set_allocated_cardicon(::std::string* cardicon) {
  if (cardicon_ != &::google::protobuf::internal::kEmptyString) {
    delete cardicon_;
  }
  if (cardicon) {
    set_has_cardicon();
    cardicon_ = cardicon;
  } else {
    clear_has_cardicon();
    cardicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ungetid = 11;
inline bool sPartnerStarStats::has_ungetid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sPartnerStarStats::set_has_ungetid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sPartnerStarStats::clear_has_ungetid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sPartnerStarStats::clear_ungetid() {
  ungetid_ = 0u;
  clear_has_ungetid();
}
inline ::google::protobuf::uint32 sPartnerStarStats::ungetid() const {
  return ungetid_;
}
inline void sPartnerStarStats::set_ungetid(::google::protobuf::uint32 value) {
  set_has_ungetid();
  ungetid_ = value;
}

// -------------------------------------------------------------------

// sActivityStats

// optional uint32 uid = 1;
inline bool sActivityStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sActivityStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sActivityStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sActivityStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sActivityStats::uid() const {
  return uid_;
}
inline void sActivityStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 task_var = 2;
inline bool sActivityStats::has_task_var() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sActivityStats::set_has_task_var() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sActivityStats::clear_has_task_var() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sActivityStats::clear_task_var() {
  task_var_ = 0u;
  clear_has_task_var();
}
inline ::google::protobuf::uint32 sActivityStats::task_var() const {
  return task_var_;
}
inline void sActivityStats::set_task_var(::google::protobuf::uint32 value) {
  set_has_task_var();
  task_var_ = value;
}

// optional uint32 shop_uid = 3;
inline bool sActivityStats::has_shop_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sActivityStats::set_has_shop_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sActivityStats::clear_has_shop_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sActivityStats::clear_shop_uid() {
  shop_uid_ = 0u;
  clear_has_shop_uid();
}
inline ::google::protobuf::uint32 sActivityStats::shop_uid() const {
  return shop_uid_;
}
inline void sActivityStats::set_shop_uid(::google::protobuf::uint32 value) {
  set_has_shop_uid();
  shop_uid_ = value;
}

// optional uint32 ui_type = 4;
inline bool sActivityStats::has_ui_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sActivityStats::set_has_ui_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sActivityStats::clear_has_ui_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sActivityStats::clear_ui_type() {
  ui_type_ = 0u;
  clear_has_ui_type();
}
inline ::google::protobuf::uint32 sActivityStats::ui_type() const {
  return ui_type_;
}
inline void sActivityStats::set_ui_type(::google::protobuf::uint32 value) {
  set_has_ui_type();
  ui_type_ = value;
}

// optional uint32 name = 5;
inline bool sActivityStats::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sActivityStats::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sActivityStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sActivityStats::clear_name() {
  name_ = 0u;
  clear_has_name();
}
inline ::google::protobuf::uint32 sActivityStats::name() const {
  return name_;
}
inline void sActivityStats::set_name(::google::protobuf::uint32 value) {
  set_has_name();
  name_ = value;
}

// optional uint32 label = 6;
inline bool sActivityStats::has_label() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sActivityStats::set_has_label() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sActivityStats::clear_has_label() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sActivityStats::clear_label() {
  label_ = 0u;
  clear_has_label();
}
inline ::google::protobuf::uint32 sActivityStats::label() const {
  return label_;
}
inline void sActivityStats::set_label(::google::protobuf::uint32 value) {
  set_has_label();
  label_ = value;
}

// optional bytes icon = 7;
inline bool sActivityStats::has_icon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sActivityStats::set_has_icon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sActivityStats::clear_has_icon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sActivityStats::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& sActivityStats::icon() const {
  return *icon_;
}
inline void sActivityStats::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void sActivityStats::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void sActivityStats::set_icon(const void* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sActivityStats::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* sActivityStats::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sActivityStats::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes icon2 = 8;
inline bool sActivityStats::has_icon2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sActivityStats::set_has_icon2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sActivityStats::clear_has_icon2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sActivityStats::clear_icon2() {
  if (icon2_ != &::google::protobuf::internal::kEmptyString) {
    icon2_->clear();
  }
  clear_has_icon2();
}
inline const ::std::string& sActivityStats::icon2() const {
  return *icon2_;
}
inline void sActivityStats::set_icon2(const ::std::string& value) {
  set_has_icon2();
  if (icon2_ == &::google::protobuf::internal::kEmptyString) {
    icon2_ = new ::std::string;
  }
  icon2_->assign(value);
}
inline void sActivityStats::set_icon2(const char* value) {
  set_has_icon2();
  if (icon2_ == &::google::protobuf::internal::kEmptyString) {
    icon2_ = new ::std::string;
  }
  icon2_->assign(value);
}
inline void sActivityStats::set_icon2(const void* value, size_t size) {
  set_has_icon2();
  if (icon2_ == &::google::protobuf::internal::kEmptyString) {
    icon2_ = new ::std::string;
  }
  icon2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sActivityStats::mutable_icon2() {
  set_has_icon2();
  if (icon2_ == &::google::protobuf::internal::kEmptyString) {
    icon2_ = new ::std::string;
  }
  return icon2_;
}
inline ::std::string* sActivityStats::release_icon2() {
  clear_has_icon2();
  if (icon2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon2_;
    icon2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sActivityStats::set_allocated_icon2(::std::string* icon2) {
  if (icon2_ != &::google::protobuf::internal::kEmptyString) {
    delete icon2_;
  }
  if (icon2) {
    set_has_icon2();
    icon2_ = icon2;
  } else {
    clear_has_icon2();
    icon2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 type = 9;
inline bool sActivityStats::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sActivityStats::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sActivityStats::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sActivityStats::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 sActivityStats::type() const {
  return type_;
}
inline void sActivityStats::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 map_id = 10;
inline bool sActivityStats::has_map_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sActivityStats::set_has_map_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sActivityStats::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sActivityStats::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 sActivityStats::map_id() const {
  return map_id_;
}
inline void sActivityStats::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional uint32 finish_var = 11;
inline bool sActivityStats::has_finish_var() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sActivityStats::set_has_finish_var() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sActivityStats::clear_has_finish_var() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sActivityStats::clear_finish_var() {
  finish_var_ = 0u;
  clear_has_finish_var();
}
inline ::google::protobuf::uint32 sActivityStats::finish_var() const {
  return finish_var_;
}
inline void sActivityStats::set_finish_var(::google::protobuf::uint32 value) {
  set_has_finish_var();
  finish_var_ = value;
}

// optional uint32 finish_desc_lang_id = 12;
inline bool sActivityStats::has_finish_desc_lang_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sActivityStats::set_has_finish_desc_lang_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sActivityStats::clear_has_finish_desc_lang_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sActivityStats::clear_finish_desc_lang_id() {
  finish_desc_lang_id_ = 0u;
  clear_has_finish_desc_lang_id();
}
inline ::google::protobuf::uint32 sActivityStats::finish_desc_lang_id() const {
  return finish_desc_lang_id_;
}
inline void sActivityStats::set_finish_desc_lang_id(::google::protobuf::uint32 value) {
  set_has_finish_desc_lang_id();
  finish_desc_lang_id_ = value;
}

// optional uint32 start_date = 13;
inline bool sActivityStats::has_start_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sActivityStats::set_has_start_date() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sActivityStats::clear_has_start_date() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sActivityStats::clear_start_date() {
  start_date_ = 0u;
  clear_has_start_date();
}
inline ::google::protobuf::uint32 sActivityStats::start_date() const {
  return start_date_;
}
inline void sActivityStats::set_start_date(::google::protobuf::uint32 value) {
  set_has_start_date();
  start_date_ = value;
}

// optional uint32 start_time = 14;
inline bool sActivityStats::has_start_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sActivityStats::set_has_start_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sActivityStats::clear_has_start_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sActivityStats::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 sActivityStats::start_time() const {
  return start_time_;
}
inline void sActivityStats::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint32 end_date = 15;
inline bool sActivityStats::has_end_date() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sActivityStats::set_has_end_date() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sActivityStats::clear_has_end_date() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sActivityStats::clear_end_date() {
  end_date_ = 0u;
  clear_has_end_date();
}
inline ::google::protobuf::uint32 sActivityStats::end_date() const {
  return end_date_;
}
inline void sActivityStats::set_end_date(::google::protobuf::uint32 value) {
  set_has_end_date();
  end_date_ = value;
}

// optional uint32 end_time = 16;
inline bool sActivityStats::has_end_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sActivityStats::set_has_end_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sActivityStats::clear_has_end_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sActivityStats::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 sActivityStats::end_time() const {
  return end_time_;
}
inline void sActivityStats::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional uint32 lv_min = 17;
inline bool sActivityStats::has_lv_min() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sActivityStats::set_has_lv_min() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sActivityStats::clear_has_lv_min() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sActivityStats::clear_lv_min() {
  lv_min_ = 0u;
  clear_has_lv_min();
}
inline ::google::protobuf::uint32 sActivityStats::lv_min() const {
  return lv_min_;
}
inline void sActivityStats::set_lv_min(::google::protobuf::uint32 value) {
  set_has_lv_min();
  lv_min_ = value;
}

// optional uint32 lv_max = 18;
inline bool sActivityStats::has_lv_max() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sActivityStats::set_has_lv_max() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sActivityStats::clear_has_lv_max() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sActivityStats::clear_lv_max() {
  lv_max_ = 0u;
  clear_has_lv_max();
}
inline ::google::protobuf::uint32 sActivityStats::lv_max() const {
  return lv_max_;
}
inline void sActivityStats::set_lv_max(::google::protobuf::uint32 value) {
  set_has_lv_max();
  lv_max_ = value;
}

// optional uint32 guide = 19;
inline bool sActivityStats::has_guide() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sActivityStats::set_has_guide() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sActivityStats::clear_has_guide() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sActivityStats::clear_guide() {
  guide_ = 0u;
  clear_has_guide();
}
inline ::google::protobuf::uint32 sActivityStats::guide() const {
  return guide_;
}
inline void sActivityStats::set_guide(::google::protobuf::uint32 value) {
  set_has_guide();
  guide_ = value;
}

// repeated .jynetwork.proto.sSimpleItem reward_item = 20;
inline int sActivityStats::reward_item_size() const {
  return reward_item_.size();
}
inline void sActivityStats::clear_reward_item() {
  reward_item_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& sActivityStats::reward_item(int index) const {
  return reward_item_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* sActivityStats::mutable_reward_item(int index) {
  return reward_item_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* sActivityStats::add_reward_item() {
  return reward_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
sActivityStats::reward_item() const {
  return reward_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
sActivityStats::mutable_reward_item() {
  return &reward_item_;
}

// optional uint32 act_type_lang_id = 21;
inline bool sActivityStats::has_act_type_lang_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sActivityStats::set_has_act_type_lang_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sActivityStats::clear_has_act_type_lang_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sActivityStats::clear_act_type_lang_id() {
  act_type_lang_id_ = 0u;
  clear_has_act_type_lang_id();
}
inline ::google::protobuf::uint32 sActivityStats::act_type_lang_id() const {
  return act_type_lang_id_;
}
inline void sActivityStats::set_act_type_lang_id(::google::protobuf::uint32 value) {
  set_has_act_type_lang_id();
  act_type_lang_id_ = value;
}

// optional uint32 act_desc_lang_id = 22;
inline bool sActivityStats::has_act_desc_lang_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sActivityStats::set_has_act_desc_lang_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sActivityStats::clear_has_act_desc_lang_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sActivityStats::clear_act_desc_lang_id() {
  act_desc_lang_id_ = 0u;
  clear_has_act_desc_lang_id();
}
inline ::google::protobuf::uint32 sActivityStats::act_desc_lang_id() const {
  return act_desc_lang_id_;
}
inline void sActivityStats::set_act_desc_lang_id(::google::protobuf::uint32 value) {
  set_has_act_desc_lang_id();
  act_desc_lang_id_ = value;
}

// optional uint32 order = 23;
inline bool sActivityStats::has_order() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sActivityStats::set_has_order() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sActivityStats::clear_has_order() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sActivityStats::clear_order() {
  order_ = 0u;
  clear_has_order();
}
inline ::google::protobuf::uint32 sActivityStats::order() const {
  return order_;
}
inline void sActivityStats::set_order(::google::protobuf::uint32 value) {
  set_has_order();
  order_ = value;
}

// -------------------------------------------------------------------

// sRouletteStats

// optional uint32 uid = 1;
inline bool sRouletteStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sRouletteStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sRouletteStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sRouletteStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sRouletteStats::uid() const {
  return uid_;
}
inline void sRouletteStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 roulette_type = 2;
inline bool sRouletteStats::has_roulette_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sRouletteStats::set_has_roulette_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sRouletteStats::clear_has_roulette_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sRouletteStats::clear_roulette_type() {
  roulette_type_ = 0u;
  clear_has_roulette_type();
}
inline ::google::protobuf::uint32 sRouletteStats::roulette_type() const {
  return roulette_type_;
}
inline void sRouletteStats::set_roulette_type(::google::protobuf::uint32 value) {
  set_has_roulette_type();
  roulette_type_ = value;
}

// repeated uint32 drop_id = 3;
inline int sRouletteStats::drop_id_size() const {
  return drop_id_.size();
}
inline void sRouletteStats::clear_drop_id() {
  drop_id_.Clear();
}
inline ::google::protobuf::uint32 sRouletteStats::drop_id(int index) const {
  return drop_id_.Get(index);
}
inline void sRouletteStats::set_drop_id(int index, ::google::protobuf::uint32 value) {
  drop_id_.Set(index, value);
}
inline void sRouletteStats::add_drop_id(::google::protobuf::uint32 value) {
  drop_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sRouletteStats::drop_id() const {
  return drop_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sRouletteStats::mutable_drop_id() {
  return &drop_id_;
}

// repeated uint32 percent = 4;
inline int sRouletteStats::percent_size() const {
  return percent_.size();
}
inline void sRouletteStats::clear_percent() {
  percent_.Clear();
}
inline ::google::protobuf::uint32 sRouletteStats::percent(int index) const {
  return percent_.Get(index);
}
inline void sRouletteStats::set_percent(int index, ::google::protobuf::uint32 value) {
  percent_.Set(index, value);
}
inline void sRouletteStats::add_percent(::google::protobuf::uint32 value) {
  percent_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sRouletteStats::percent() const {
  return percent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sRouletteStats::mutable_percent() {
  return &percent_;
}

// optional uint32 cost_type = 9;
inline bool sRouletteStats::has_cost_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sRouletteStats::set_has_cost_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sRouletteStats::clear_has_cost_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sRouletteStats::clear_cost_type() {
  cost_type_ = 0u;
  clear_has_cost_type();
}
inline ::google::protobuf::uint32 sRouletteStats::cost_type() const {
  return cost_type_;
}
inline void sRouletteStats::set_cost_type(::google::protobuf::uint32 value) {
  set_has_cost_type();
  cost_type_ = value;
}

// optional uint32 cost_value = 10;
inline bool sRouletteStats::has_cost_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sRouletteStats::set_has_cost_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sRouletteStats::clear_has_cost_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sRouletteStats::clear_cost_value() {
  cost_value_ = 0u;
  clear_has_cost_value();
}
inline ::google::protobuf::uint32 sRouletteStats::cost_value() const {
  return cost_value_;
}
inline void sRouletteStats::set_cost_value(::google::protobuf::uint32 value) {
  set_has_cost_value();
  cost_value_ = value;
}

// optional uint32 cost_item = 11;
inline bool sRouletteStats::has_cost_item() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sRouletteStats::set_has_cost_item() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sRouletteStats::clear_has_cost_item() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sRouletteStats::clear_cost_item() {
  cost_item_ = 0u;
  clear_has_cost_item();
}
inline ::google::protobuf::uint32 sRouletteStats::cost_item() const {
  return cost_item_;
}
inline void sRouletteStats::set_cost_item(::google::protobuf::uint32 value) {
  set_has_cost_item();
  cost_item_ = value;
}

// optional uint32 cost_item_num = 12;
inline bool sRouletteStats::has_cost_item_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sRouletteStats::set_has_cost_item_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sRouletteStats::clear_has_cost_item_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sRouletteStats::clear_cost_item_num() {
  cost_item_num_ = 0u;
  clear_has_cost_item_num();
}
inline ::google::protobuf::uint32 sRouletteStats::cost_item_num() const {
  return cost_item_num_;
}
inline void sRouletteStats::set_cost_item_num(::google::protobuf::uint32 value) {
  set_has_cost_item_num();
  cost_item_num_ = value;
}

// repeated .jynetwork.proto.sSimpleItem items = 13;
inline int sRouletteStats::items_size() const {
  return items_.size();
}
inline void sRouletteStats::clear_items() {
  items_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& sRouletteStats::items(int index) const {
  return items_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* sRouletteStats::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* sRouletteStats::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
sRouletteStats::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
sRouletteStats::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// sResourseDetail

// optional uint32 uid = 1;
inline bool sResourseDetail::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sResourseDetail::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sResourseDetail::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sResourseDetail::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sResourseDetail::uid() const {
  return uid_;
}
inline void sResourseDetail::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 type = 2;
inline bool sResourseDetail::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sResourseDetail::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sResourseDetail::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sResourseDetail::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 sResourseDetail::type() const {
  return type_;
}
inline void sResourseDetail::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// sResourseStats

// optional uint32 uid = 1;
inline bool sResourseStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sResourseStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sResourseStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sResourseStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sResourseStats::uid() const {
  return uid_;
}
inline void sResourseStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes name = 2;
inline bool sResourseStats::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sResourseStats::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sResourseStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sResourseStats::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sResourseStats::name() const {
  return *name_;
}
inline void sResourseStats::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sResourseStats::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sResourseStats::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sResourseStats::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sResourseStats::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sResourseStats::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .jynetwork.proto.sResourseDetail guild_id = 3;
inline int sResourseStats::guild_id_size() const {
  return guild_id_.size();
}
inline void sResourseStats::clear_guild_id() {
  guild_id_.Clear();
}
inline const ::jynetwork::proto::sResourseDetail& sResourseStats::guild_id(int index) const {
  return guild_id_.Get(index);
}
inline ::jynetwork::proto::sResourseDetail* sResourseStats::mutable_guild_id(int index) {
  return guild_id_.Mutable(index);
}
inline ::jynetwork::proto::sResourseDetail* sResourseStats::add_guild_id() {
  return guild_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sResourseDetail >&
sResourseStats::guild_id() const {
  return guild_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sResourseDetail >*
sResourseStats::mutable_guild_id() {
  return &guild_id_;
}

// -------------------------------------------------------------------

// sHomeBackground

// optional uint32 uid = 1;
inline bool sHomeBackground::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sHomeBackground::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sHomeBackground::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sHomeBackground::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sHomeBackground::uid() const {
  return uid_;
}
inline void sHomeBackground::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string name = 2;
inline bool sHomeBackground::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sHomeBackground::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sHomeBackground::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sHomeBackground::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sHomeBackground::name() const {
  return *name_;
}
inline void sHomeBackground::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sHomeBackground::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sHomeBackground::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sHomeBackground::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sHomeBackground::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sHomeBackground::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 layer = 3;
inline bool sHomeBackground::has_layer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sHomeBackground::set_has_layer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sHomeBackground::clear_has_layer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sHomeBackground::clear_layer() {
  layer_ = 0u;
  clear_has_layer();
}
inline ::google::protobuf::uint32 sHomeBackground::layer() const {
  return layer_;
}
inline void sHomeBackground::set_layer(::google::protobuf::uint32 value) {
  set_has_layer();
  layer_ = value;
}

// optional float speed = 4;
inline bool sHomeBackground::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sHomeBackground::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sHomeBackground::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sHomeBackground::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float sHomeBackground::speed() const {
  return speed_;
}
inline void sHomeBackground::set_speed(float value) {
  set_has_speed();
  speed_ = value;
}

// optional uint32 up_limit = 5;
inline bool sHomeBackground::has_up_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sHomeBackground::set_has_up_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sHomeBackground::clear_has_up_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sHomeBackground::clear_up_limit() {
  up_limit_ = 0u;
  clear_has_up_limit();
}
inline ::google::protobuf::uint32 sHomeBackground::up_limit() const {
  return up_limit_;
}
inline void sHomeBackground::set_up_limit(::google::protobuf::uint32 value) {
  set_has_up_limit();
  up_limit_ = value;
}

// optional uint32 down_limit = 6;
inline bool sHomeBackground::has_down_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sHomeBackground::set_has_down_limit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sHomeBackground::clear_has_down_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sHomeBackground::clear_down_limit() {
  down_limit_ = 0u;
  clear_has_down_limit();
}
inline ::google::protobuf::uint32 sHomeBackground::down_limit() const {
  return down_limit_;
}
inline void sHomeBackground::set_down_limit(::google::protobuf::uint32 value) {
  set_has_down_limit();
  down_limit_ = value;
}

// optional uint32 left_limit = 7;
inline bool sHomeBackground::has_left_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sHomeBackground::set_has_left_limit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sHomeBackground::clear_has_left_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sHomeBackground::clear_left_limit() {
  left_limit_ = 0u;
  clear_has_left_limit();
}
inline ::google::protobuf::uint32 sHomeBackground::left_limit() const {
  return left_limit_;
}
inline void sHomeBackground::set_left_limit(::google::protobuf::uint32 value) {
  set_has_left_limit();
  left_limit_ = value;
}

// optional uint32 right_limit = 8;
inline bool sHomeBackground::has_right_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sHomeBackground::set_has_right_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sHomeBackground::clear_has_right_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sHomeBackground::clear_right_limit() {
  right_limit_ = 0u;
  clear_has_right_limit();
}
inline ::google::protobuf::uint32 sHomeBackground::right_limit() const {
  return right_limit_;
}
inline void sHomeBackground::set_right_limit(::google::protobuf::uint32 value) {
  set_has_right_limit();
  right_limit_ = value;
}

// -------------------------------------------------------------------

// sEquipDetail

// optional uint32 uid = 1;
inline bool sEquipDetail::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEquipDetail::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEquipDetail::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEquipDetail::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEquipDetail::uid() const {
  return uid_;
}
inline void sEquipDetail::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// sEquipRecommend

// optional uint32 stage = 1;
inline bool sEquipRecommend::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEquipRecommend::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEquipRecommend::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEquipRecommend::clear_stage() {
  stage_ = 0u;
  clear_has_stage();
}
inline ::google::protobuf::uint32 sEquipRecommend::stage() const {
  return stage_;
}
inline void sEquipRecommend::set_stage(::google::protobuf::uint32 value) {
  set_has_stage();
  stage_ = value;
}

// optional uint32 role = 2;
inline bool sEquipRecommend::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEquipRecommend::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEquipRecommend::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEquipRecommend::clear_role() {
  role_ = 0u;
  clear_has_role();
}
inline ::google::protobuf::uint32 sEquipRecommend::role() const {
  return role_;
}
inline void sEquipRecommend::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
}

// optional uint32 equipset = 3;
inline bool sEquipRecommend::has_equipset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sEquipRecommend::set_has_equipset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sEquipRecommend::clear_has_equipset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sEquipRecommend::clear_equipset() {
  equipset_ = 0u;
  clear_has_equipset();
}
inline ::google::protobuf::uint32 sEquipRecommend::equipset() const {
  return equipset_;
}
inline void sEquipRecommend::set_equipset(::google::protobuf::uint32 value) {
  set_has_equipset();
  equipset_ = value;
}

// repeated .jynetwork.proto.sEquipDetail equip_id = 4;
inline int sEquipRecommend::equip_id_size() const {
  return equip_id_.size();
}
inline void sEquipRecommend::clear_equip_id() {
  equip_id_.Clear();
}
inline const ::jynetwork::proto::sEquipDetail& sEquipRecommend::equip_id(int index) const {
  return equip_id_.Get(index);
}
inline ::jynetwork::proto::sEquipDetail* sEquipRecommend::mutable_equip_id(int index) {
  return equip_id_.Mutable(index);
}
inline ::jynetwork::proto::sEquipDetail* sEquipRecommend::add_equip_id() {
  return equip_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipDetail >&
sEquipRecommend::equip_id() const {
  return equip_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sEquipDetail >*
sEquipRecommend::mutable_equip_id() {
  return &equip_id_;
}

// -------------------------------------------------------------------

// sCastleMonsterInfoStats

// optional uint64 uid = 1;
inline bool sCastleMonsterInfoStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCastleMonsterInfoStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCastleMonsterInfoStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCastleMonsterInfoStats::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 sCastleMonsterInfoStats::uid() const {
  return uid_;
}
inline void sCastleMonsterInfoStats::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 group_id = 2;
inline bool sCastleMonsterInfoStats::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCastleMonsterInfoStats::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCastleMonsterInfoStats::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCastleMonsterInfoStats::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 sCastleMonsterInfoStats::group_id() const {
  return group_id_;
}
inline void sCastleMonsterInfoStats::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional uint32 reward_wave = 3;
inline bool sCastleMonsterInfoStats::has_reward_wave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCastleMonsterInfoStats::set_has_reward_wave() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCastleMonsterInfoStats::clear_has_reward_wave() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCastleMonsterInfoStats::clear_reward_wave() {
  reward_wave_ = 0u;
  clear_has_reward_wave();
}
inline ::google::protobuf::uint32 sCastleMonsterInfoStats::reward_wave() const {
  return reward_wave_;
}
inline void sCastleMonsterInfoStats::set_reward_wave(::google::protobuf::uint32 value) {
  set_has_reward_wave();
  reward_wave_ = value;
}

// optional uint32 unit_type = 4;
inline bool sCastleMonsterInfoStats::has_unit_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCastleMonsterInfoStats::set_has_unit_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCastleMonsterInfoStats::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCastleMonsterInfoStats::clear_unit_type() {
  unit_type_ = 0u;
  clear_has_unit_type();
}
inline ::google::protobuf::uint32 sCastleMonsterInfoStats::unit_type() const {
  return unit_type_;
}
inline void sCastleMonsterInfoStats::set_unit_type(::google::protobuf::uint32 value) {
  set_has_unit_type();
  unit_type_ = value;
}

// optional uint32 map_id = 5;
inline bool sCastleMonsterInfoStats::has_map_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sCastleMonsterInfoStats::set_has_map_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sCastleMonsterInfoStats::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sCastleMonsterInfoStats::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 sCastleMonsterInfoStats::map_id() const {
  return map_id_;
}
inline void sCastleMonsterInfoStats::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional uint32 time = 6;
inline bool sCastleMonsterInfoStats::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sCastleMonsterInfoStats::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sCastleMonsterInfoStats::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sCastleMonsterInfoStats::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 sCastleMonsterInfoStats::time() const {
  return time_;
}
inline void sCastleMonsterInfoStats::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// sConstantsStats

// optional uint64 uid = 1;
inline bool sConstantsStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sConstantsStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sConstantsStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sConstantsStats::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 sConstantsStats::uid() const {
  return uid_;
}
inline void sConstantsStats::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 bonusDiamond = 2;
inline bool sConstantsStats::has_bonusdiamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sConstantsStats::set_has_bonusdiamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sConstantsStats::clear_has_bonusdiamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sConstantsStats::clear_bonusdiamond() {
  bonusdiamond_ = 0u;
  clear_has_bonusdiamond();
}
inline ::google::protobuf::uint32 sConstantsStats::bonusdiamond() const {
  return bonusdiamond_;
}
inline void sConstantsStats::set_bonusdiamond(::google::protobuf::uint32 value) {
  set_has_bonusdiamond();
  bonusdiamond_ = value;
}

// -------------------------------------------------------------------

// NetBattleMove

// optional float delay = 1;
inline bool NetBattleMove::has_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetBattleMove::set_has_delay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetBattleMove::clear_has_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetBattleMove::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline float NetBattleMove::delay() const {
  return delay_;
}
inline void NetBattleMove::set_delay(float value) {
  set_has_delay();
  delay_ = value;
}

// optional float x = 2;
inline bool NetBattleMove::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetBattleMove::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetBattleMove::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetBattleMove::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float NetBattleMove::x() const {
  return x_;
}
inline void NetBattleMove::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 3;
inline bool NetBattleMove::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetBattleMove::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetBattleMove::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetBattleMove::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float NetBattleMove::y() const {
  return y_;
}
inline void NetBattleMove::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// NetCardSkill

// optional float delay = 1;
inline bool NetCardSkill::has_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetCardSkill::set_has_delay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetCardSkill::clear_has_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetCardSkill::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline float NetCardSkill::delay() const {
  return delay_;
}
inline void NetCardSkill::set_delay(float value) {
  set_has_delay();
  delay_ = value;
}

// optional float x = 2;
inline bool NetCardSkill::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetCardSkill::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetCardSkill::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetCardSkill::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float NetCardSkill::x() const {
  return x_;
}
inline void NetCardSkill::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 3;
inline bool NetCardSkill::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetCardSkill::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetCardSkill::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetCardSkill::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float NetCardSkill::y() const {
  return y_;
}
inline void NetCardSkill::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional uint32 card_slot = 4;
inline bool NetCardSkill::has_card_slot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetCardSkill::set_has_card_slot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetCardSkill::clear_has_card_slot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetCardSkill::clear_card_slot() {
  card_slot_ = 0u;
  clear_has_card_slot();
}
inline ::google::protobuf::uint32 NetCardSkill::card_slot() const {
  return card_slot_;
}
inline void NetCardSkill::set_card_slot(::google::protobuf::uint32 value) {
  set_has_card_slot();
  card_slot_ = value;
}

// -------------------------------------------------------------------

// NetBattleOper

// optional .jynetwork.proto.eNetBattleOper oper = 1;
inline bool NetBattleOper::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetBattleOper::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetBattleOper::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetBattleOper::clear_oper() {
  oper_ = 7;
  clear_has_oper();
}
inline ::jynetwork::proto::eNetBattleOper NetBattleOper::oper() const {
  return static_cast< ::jynetwork::proto::eNetBattleOper >(oper_);
}
inline void NetBattleOper::set_oper(::jynetwork::proto::eNetBattleOper value) {
  assert(::jynetwork::proto::eNetBattleOper_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// optional uint32 player_id = 2;
inline bool NetBattleOper::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetBattleOper::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetBattleOper::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetBattleOper::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 NetBattleOper::player_id() const {
  return player_id_;
}
inline void NetBattleOper::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional float x = 5;
inline bool NetBattleOper::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetBattleOper::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetBattleOper::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetBattleOper::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float NetBattleOper::x() const {
  return x_;
}
inline void NetBattleOper::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 6;
inline bool NetBattleOper::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetBattleOper::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetBattleOper::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetBattleOper::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float NetBattleOper::y() const {
  return y_;
}
inline void NetBattleOper::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float hp = 7;
inline bool NetBattleOper::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetBattleOper::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetBattleOper::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetBattleOper::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline float NetBattleOper::hp() const {
  return hp_;
}
inline void NetBattleOper::set_hp(float value) {
  set_has_hp();
  hp_ = value;
}

// optional uint32 monster_id = 3;
inline bool NetBattleOper::has_monster_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetBattleOper::set_has_monster_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetBattleOper::clear_has_monster_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetBattleOper::clear_monster_id() {
  monster_id_ = 0u;
  clear_has_monster_id();
}
inline ::google::protobuf::uint32 NetBattleOper::monster_id() const {
  return monster_id_;
}
inline void NetBattleOper::set_monster_id(::google::protobuf::uint32 value) {
  set_has_monster_id();
  monster_id_ = value;
}

// repeated uint32 skill_id = 4;
inline int NetBattleOper::skill_id_size() const {
  return skill_id_.size();
}
inline void NetBattleOper::clear_skill_id() {
  skill_id_.Clear();
}
inline ::google::protobuf::uint32 NetBattleOper::skill_id(int index) const {
  return skill_id_.Get(index);
}
inline void NetBattleOper::set_skill_id(int index, ::google::protobuf::uint32 value) {
  skill_id_.Set(index, value);
}
inline void NetBattleOper::add_skill_id(::google::protobuf::uint32 value) {
  skill_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NetBattleOper::skill_id() const {
  return skill_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NetBattleOper::mutable_skill_id() {
  return &skill_id_;
}

// repeated uint32 wave_id = 8;
inline int NetBattleOper::wave_id_size() const {
  return wave_id_.size();
}
inline void NetBattleOper::clear_wave_id() {
  wave_id_.Clear();
}
inline ::google::protobuf::uint32 NetBattleOper::wave_id(int index) const {
  return wave_id_.Get(index);
}
inline void NetBattleOper::set_wave_id(int index, ::google::protobuf::uint32 value) {
  wave_id_.Set(index, value);
}
inline void NetBattleOper::add_wave_id(::google::protobuf::uint32 value) {
  wave_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NetBattleOper::wave_id() const {
  return wave_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NetBattleOper::mutable_wave_id() {
  return &wave_id_;
}

// repeated .jynetwork.proto.NetCardSkill card_skill = 9;
inline int NetBattleOper::card_skill_size() const {
  return card_skill_.size();
}
inline void NetBattleOper::clear_card_skill() {
  card_skill_.Clear();
}
inline const ::jynetwork::proto::NetCardSkill& NetBattleOper::card_skill(int index) const {
  return card_skill_.Get(index);
}
inline ::jynetwork::proto::NetCardSkill* NetBattleOper::mutable_card_skill(int index) {
  return card_skill_.Mutable(index);
}
inline ::jynetwork::proto::NetCardSkill* NetBattleOper::add_card_skill() {
  return card_skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetCardSkill >&
NetBattleOper::card_skill() const {
  return card_skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetCardSkill >*
NetBattleOper::mutable_card_skill() {
  return &card_skill_;
}

// repeated .jynetwork.proto.NetBattleMove player_move = 12;
inline int NetBattleOper::player_move_size() const {
  return player_move_.size();
}
inline void NetBattleOper::clear_player_move() {
  player_move_.Clear();
}
inline const ::jynetwork::proto::NetBattleMove& NetBattleOper::player_move(int index) const {
  return player_move_.Get(index);
}
inline ::jynetwork::proto::NetBattleMove* NetBattleOper::mutable_player_move(int index) {
  return player_move_.Mutable(index);
}
inline ::jynetwork::proto::NetBattleMove* NetBattleOper::add_player_move() {
  return player_move_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetBattleMove >&
NetBattleOper::player_move() const {
  return player_move_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::NetBattleMove >*
NetBattleOper::mutable_player_move() {
  return &player_move_;
}

// optional uint32 status = 13;
inline bool NetBattleOper::has_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NetBattleOper::set_has_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NetBattleOper::clear_has_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NetBattleOper::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 NetBattleOper::status() const {
  return status_;
}
inline void NetBattleOper::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional float damage_score = 14;
inline bool NetBattleOper::has_damage_score() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NetBattleOper::set_has_damage_score() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NetBattleOper::clear_has_damage_score() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NetBattleOper::clear_damage_score() {
  damage_score_ = 0;
  clear_has_damage_score();
}
inline float NetBattleOper::damage_score() const {
  return damage_score_;
}
inline void NetBattleOper::set_damage_score(float value) {
  set_has_damage_score();
  damage_score_ = value;
}

// optional uint32 kill_player_id = 15;
inline bool NetBattleOper::has_kill_player_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NetBattleOper::set_has_kill_player_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NetBattleOper::clear_has_kill_player_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NetBattleOper::clear_kill_player_id() {
  kill_player_id_ = 0u;
  clear_has_kill_player_id();
}
inline ::google::protobuf::uint32 NetBattleOper::kill_player_id() const {
  return kill_player_id_;
}
inline void NetBattleOper::set_kill_player_id(::google::protobuf::uint32 value) {
  set_has_kill_player_id();
  kill_player_id_ = value;
}

// optional float now_my_score = 16;
inline bool NetBattleOper::has_now_my_score() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NetBattleOper::set_has_now_my_score() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NetBattleOper::clear_has_now_my_score() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NetBattleOper::clear_now_my_score() {
  now_my_score_ = 0;
  clear_has_now_my_score();
}
inline float NetBattleOper::now_my_score() const {
  return now_my_score_;
}
inline void NetBattleOper::set_now_my_score(float value) {
  set_has_now_my_score();
  now_my_score_ = value;
}

// optional float now_sub_score = 17;
inline bool NetBattleOper::has_now_sub_score() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NetBattleOper::set_has_now_sub_score() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NetBattleOper::clear_has_now_sub_score() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NetBattleOper::clear_now_sub_score() {
  now_sub_score_ = 0;
  clear_has_now_sub_score();
}
inline float NetBattleOper::now_sub_score() const {
  return now_sub_score_;
}
inline void NetBattleOper::set_now_sub_score(float value) {
  set_has_now_sub_score();
  now_sub_score_ = value;
}

// optional float hurt_hp = 18;
inline bool NetBattleOper::has_hurt_hp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NetBattleOper::set_has_hurt_hp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NetBattleOper::clear_has_hurt_hp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NetBattleOper::clear_hurt_hp() {
  hurt_hp_ = 0;
  clear_has_hurt_hp();
}
inline float NetBattleOper::hurt_hp() const {
  return hurt_hp_;
}
inline void NetBattleOper::set_hurt_hp(float value) {
  set_has_hurt_hp();
  hurt_hp_ = value;
}

// optional float arena_hp = 19;
inline bool NetBattleOper::has_arena_hp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NetBattleOper::set_has_arena_hp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NetBattleOper::clear_has_arena_hp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NetBattleOper::clear_arena_hp() {
  arena_hp_ = 0;
  clear_has_arena_hp();
}
inline float NetBattleOper::arena_hp() const {
  return arena_hp_;
}
inline void NetBattleOper::set_arena_hp(float value) {
  set_has_arena_hp();
  arena_hp_ = value;
}

// optional float now_score = 20;
inline bool NetBattleOper::has_now_score() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NetBattleOper::set_has_now_score() {
  _has_bits_[0] |= 0x00020000u;
}
inline void NetBattleOper::clear_has_now_score() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void NetBattleOper::clear_now_score() {
  now_score_ = 0;
  clear_has_now_score();
}
inline float NetBattleOper::now_score() const {
  return now_score_;
}
inline void NetBattleOper::set_now_score(float value) {
  set_has_now_score();
  now_score_ = value;
}

// -------------------------------------------------------------------

// sEquipIdentify

// optional uint32 uid = 1;
inline bool sEquipIdentify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sEquipIdentify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sEquipIdentify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sEquipIdentify::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sEquipIdentify::uid() const {
  return uid_;
}
inline void sEquipIdentify::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 star = 2;
inline bool sEquipIdentify::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sEquipIdentify::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sEquipIdentify::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sEquipIdentify::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 sEquipIdentify::star() const {
  return star_;
}
inline void sEquipIdentify::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional uint32 part = 3;
inline bool sEquipIdentify::has_part() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sEquipIdentify::set_has_part() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sEquipIdentify::clear_has_part() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sEquipIdentify::clear_part() {
  part_ = 0u;
  clear_has_part();
}
inline ::google::protobuf::uint32 sEquipIdentify::part() const {
  return part_;
}
inline void sEquipIdentify::set_part(::google::protobuf::uint32 value) {
  set_has_part();
  part_ = value;
}

// repeated uint32 cost_id = 4;
inline int sEquipIdentify::cost_id_size() const {
  return cost_id_.size();
}
inline void sEquipIdentify::clear_cost_id() {
  cost_id_.Clear();
}
inline ::google::protobuf::uint32 sEquipIdentify::cost_id(int index) const {
  return cost_id_.Get(index);
}
inline void sEquipIdentify::set_cost_id(int index, ::google::protobuf::uint32 value) {
  cost_id_.Set(index, value);
}
inline void sEquipIdentify::add_cost_id(::google::protobuf::uint32 value) {
  cost_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sEquipIdentify::cost_id() const {
  return cost_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sEquipIdentify::mutable_cost_id() {
  return &cost_id_;
}

// repeated uint32 cost_num = 5;
inline int sEquipIdentify::cost_num_size() const {
  return cost_num_.size();
}
inline void sEquipIdentify::clear_cost_num() {
  cost_num_.Clear();
}
inline ::google::protobuf::uint32 sEquipIdentify::cost_num(int index) const {
  return cost_num_.Get(index);
}
inline void sEquipIdentify::set_cost_num(int index, ::google::protobuf::uint32 value) {
  cost_num_.Set(index, value);
}
inline void sEquipIdentify::add_cost_num(::google::protobuf::uint32 value) {
  cost_num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sEquipIdentify::cost_num() const {
  return cost_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sEquipIdentify::mutable_cost_num() {
  return &cost_num_;
}

// repeated uint32 identify_item_id = 6;
inline int sEquipIdentify::identify_item_id_size() const {
  return identify_item_id_.size();
}
inline void sEquipIdentify::clear_identify_item_id() {
  identify_item_id_.Clear();
}
inline ::google::protobuf::uint32 sEquipIdentify::identify_item_id(int index) const {
  return identify_item_id_.Get(index);
}
inline void sEquipIdentify::set_identify_item_id(int index, ::google::protobuf::uint32 value) {
  identify_item_id_.Set(index, value);
}
inline void sEquipIdentify::add_identify_item_id(::google::protobuf::uint32 value) {
  identify_item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sEquipIdentify::identify_item_id() const {
  return identify_item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sEquipIdentify::mutable_identify_item_id() {
  return &identify_item_id_;
}

// repeated uint32 identify_item_num = 7;
inline int sEquipIdentify::identify_item_num_size() const {
  return identify_item_num_.size();
}
inline void sEquipIdentify::clear_identify_item_num() {
  identify_item_num_.Clear();
}
inline ::google::protobuf::uint32 sEquipIdentify::identify_item_num(int index) const {
  return identify_item_num_.Get(index);
}
inline void sEquipIdentify::set_identify_item_num(int index, ::google::protobuf::uint32 value) {
  identify_item_num_.Set(index, value);
}
inline void sEquipIdentify::add_identify_item_num(::google::protobuf::uint32 value) {
  identify_item_num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sEquipIdentify::identify_item_num() const {
  return identify_item_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sEquipIdentify::mutable_identify_item_num() {
  return &identify_item_num_;
}

// -------------------------------------------------------------------

// sAttributeBase

// optional uint32 uid = 1;
inline bool sAttributeBase::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sAttributeBase::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sAttributeBase::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sAttributeBase::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sAttributeBase::uid() const {
  return uid_;
}
inline void sAttributeBase::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 part = 2;
inline bool sAttributeBase::has_part() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sAttributeBase::set_has_part() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sAttributeBase::clear_has_part() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sAttributeBase::clear_part() {
  part_ = 0u;
  clear_has_part();
}
inline ::google::protobuf::uint32 sAttributeBase::part() const {
  return part_;
}
inline void sAttributeBase::set_part(::google::protobuf::uint32 value) {
  set_has_part();
  part_ = value;
}

// optional uint32 star = 3;
inline bool sAttributeBase::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sAttributeBase::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sAttributeBase::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sAttributeBase::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 sAttributeBase::star() const {
  return star_;
}
inline void sAttributeBase::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional uint32 att_id = 4;
inline bool sAttributeBase::has_att_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sAttributeBase::set_has_att_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sAttributeBase::clear_has_att_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sAttributeBase::clear_att_id() {
  att_id_ = 0u;
  clear_has_att_id();
}
inline ::google::protobuf::uint32 sAttributeBase::att_id() const {
  return att_id_;
}
inline void sAttributeBase::set_att_id(::google::protobuf::uint32 value) {
  set_has_att_id();
  att_id_ = value;
}

// optional uint32 att_max = 5;
inline bool sAttributeBase::has_att_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sAttributeBase::set_has_att_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sAttributeBase::clear_has_att_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sAttributeBase::clear_att_max() {
  att_max_ = 0u;
  clear_has_att_max();
}
inline ::google::protobuf::uint32 sAttributeBase::att_max() const {
  return att_max_;
}
inline void sAttributeBase::set_att_max(::google::protobuf::uint32 value) {
  set_has_att_max();
  att_max_ = value;
}

// optional uint32 att_weight = 6;
inline bool sAttributeBase::has_att_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sAttributeBase::set_has_att_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sAttributeBase::clear_has_att_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sAttributeBase::clear_att_weight() {
  att_weight_ = 0u;
  clear_has_att_weight();
}
inline ::google::protobuf::uint32 sAttributeBase::att_weight() const {
  return att_weight_;
}
inline void sAttributeBase::set_att_weight(::google::protobuf::uint32 value) {
  set_has_att_weight();
  att_weight_ = value;
}

// optional uint32 skill_id = 7;
inline bool sAttributeBase::has_skill_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sAttributeBase::set_has_skill_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sAttributeBase::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sAttributeBase::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 sAttributeBase::skill_id() const {
  return skill_id_;
}
inline void sAttributeBase::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional uint32 ability = 8;
inline bool sAttributeBase::has_ability() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sAttributeBase::set_has_ability() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sAttributeBase::clear_has_ability() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sAttributeBase::clear_ability() {
  ability_ = 0u;
  clear_has_ability();
}
inline ::google::protobuf::uint32 sAttributeBase::ability() const {
  return ability_;
}
inline void sAttributeBase::set_ability(::google::protobuf::uint32 value) {
  set_has_ability();
  ability_ = value;
}

// -------------------------------------------------------------------

// sCorpsLevel

// optional uint32 lv = 1;
inline bool sCorpsLevel::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCorpsLevel::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCorpsLevel::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCorpsLevel::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 sCorpsLevel::lv() const {
  return lv_;
}
inline void sCorpsLevel::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 exp = 2;
inline bool sCorpsLevel::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCorpsLevel::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCorpsLevel::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCorpsLevel::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 sCorpsLevel::exp() const {
  return exp_;
}
inline void sCorpsLevel::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 member_count = 3;
inline bool sCorpsLevel::has_member_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCorpsLevel::set_has_member_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCorpsLevel::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCorpsLevel::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
inline ::google::protobuf::uint32 sCorpsLevel::member_count() const {
  return member_count_;
}
inline void sCorpsLevel::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
}

// -------------------------------------------------------------------

// sVipStats

// optional uint32 vip_lv = 1;
inline bool sVipStats::has_vip_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sVipStats::set_has_vip_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sVipStats::clear_has_vip_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sVipStats::clear_vip_lv() {
  vip_lv_ = 0u;
  clear_has_vip_lv();
}
inline ::google::protobuf::uint32 sVipStats::vip_lv() const {
  return vip_lv_;
}
inline void sVipStats::set_vip_lv(::google::protobuf::uint32 value) {
  set_has_vip_lv();
  vip_lv_ = value;
}

// optional uint32 vip_exp = 2;
inline bool sVipStats::has_vip_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sVipStats::set_has_vip_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sVipStats::clear_has_vip_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sVipStats::clear_vip_exp() {
  vip_exp_ = 0u;
  clear_has_vip_exp();
}
inline ::google::protobuf::uint32 sVipStats::vip_exp() const {
  return vip_exp_;
}
inline void sVipStats::set_vip_exp(::google::protobuf::uint32 value) {
  set_has_vip_exp();
  vip_exp_ = value;
}

// repeated uint32 vip_oper_times = 3;
inline int sVipStats::vip_oper_times_size() const {
  return vip_oper_times_.size();
}
inline void sVipStats::clear_vip_oper_times() {
  vip_oper_times_.Clear();
}
inline ::google::protobuf::uint32 sVipStats::vip_oper_times(int index) const {
  return vip_oper_times_.Get(index);
}
inline void sVipStats::set_vip_oper_times(int index, ::google::protobuf::uint32 value) {
  vip_oper_times_.Set(index, value);
}
inline void sVipStats::add_vip_oper_times(::google::protobuf::uint32 value) {
  vip_oper_times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sVipStats::vip_oper_times() const {
  return vip_oper_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sVipStats::mutable_vip_oper_times() {
  return &vip_oper_times_;
}

// repeated uint32 vip_function = 4;
inline int sVipStats::vip_function_size() const {
  return vip_function_.size();
}
inline void sVipStats::clear_vip_function() {
  vip_function_.Clear();
}
inline ::google::protobuf::uint32 sVipStats::vip_function(int index) const {
  return vip_function_.Get(index);
}
inline void sVipStats::set_vip_function(int index, ::google::protobuf::uint32 value) {
  vip_function_.Set(index, value);
}
inline void sVipStats::add_vip_function(::google::protobuf::uint32 value) {
  vip_function_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
sVipStats::vip_function() const {
  return vip_function_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
sVipStats::mutable_vip_function() {
  return &vip_function_;
}

// -------------------------------------------------------------------

// sVipCostStats

// optional uint32 times = 1;
inline bool sVipCostStats::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sVipCostStats::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sVipCostStats::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sVipCostStats::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 sVipCostStats::times() const {
  return times_;
}
inline void sVipCostStats::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// optional .jynetwork.proto.eVipOper oper = 2;
inline bool sVipCostStats::has_oper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sVipCostStats::set_has_oper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sVipCostStats::clear_has_oper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sVipCostStats::clear_oper() {
  oper_ = 0;
  clear_has_oper();
}
inline ::jynetwork::proto::eVipOper sVipCostStats::oper() const {
  return static_cast< ::jynetwork::proto::eVipOper >(oper_);
}
inline void sVipCostStats::set_oper(::jynetwork::proto::eVipOper value) {
  assert(::jynetwork::proto::eVipOper_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// optional uint32 vip_cost = 3;
inline bool sVipCostStats::has_vip_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sVipCostStats::set_has_vip_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sVipCostStats::clear_has_vip_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sVipCostStats::clear_vip_cost() {
  vip_cost_ = 0u;
  clear_has_vip_cost();
}
inline ::google::protobuf::uint32 sVipCostStats::vip_cost() const {
  return vip_cost_;
}
inline void sVipCostStats::set_vip_cost(::google::protobuf::uint32 value) {
  set_has_vip_cost();
  vip_cost_ = value;
}

// -------------------------------------------------------------------

// sServerStats

// optional uint32 uid = 1;
inline bool sServerStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sServerStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sServerStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sServerStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sServerStats::uid() const {
  return uid_;
}
inline void sServerStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes name = 2;
inline bool sServerStats::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sServerStats::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sServerStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sServerStats::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sServerStats::name() const {
  return *name_;
}
inline void sServerStats::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sServerStats::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sServerStats::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sServerStats::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sServerStats::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sServerStats::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes ip = 3;
inline bool sServerStats::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sServerStats::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sServerStats::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sServerStats::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& sServerStats::ip() const {
  return *ip_;
}
inline void sServerStats::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void sServerStats::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void sServerStats::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sServerStats::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* sServerStats::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sServerStats::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 isRecommend = 4;
inline bool sServerStats::has_isrecommend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sServerStats::set_has_isrecommend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sServerStats::clear_has_isrecommend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sServerStats::clear_isrecommend() {
  isrecommend_ = 0u;
  clear_has_isrecommend();
}
inline ::google::protobuf::uint32 sServerStats::isrecommend() const {
  return isrecommend_;
}
inline void sServerStats::set_isrecommend(::google::protobuf::uint32 value) {
  set_has_isrecommend();
  isrecommend_ = value;
}

// optional uint32 status = 5;
inline bool sServerStats::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sServerStats::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sServerStats::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sServerStats::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 sServerStats::status() const {
  return status_;
}
inline void sServerStats::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// sServerItems

// repeated .jynetwork.proto.sServerStats serverItem = 1;
inline int sServerItems::serveritem_size() const {
  return serveritem_.size();
}
inline void sServerItems::clear_serveritem() {
  serveritem_.Clear();
}
inline const ::jynetwork::proto::sServerStats& sServerItems::serveritem(int index) const {
  return serveritem_.Get(index);
}
inline ::jynetwork::proto::sServerStats* sServerItems::mutable_serveritem(int index) {
  return serveritem_.Mutable(index);
}
inline ::jynetwork::proto::sServerStats* sServerItems::add_serveritem() {
  return serveritem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sServerStats >&
sServerItems::serveritem() const {
  return serveritem_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sServerStats >*
sServerItems::mutable_serveritem() {
  return &serveritem_;
}

// -------------------------------------------------------------------

// CorpsBossRewardStats

// optional uint32 rank = 1;
inline bool CorpsBossRewardStats::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CorpsBossRewardStats::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CorpsBossRewardStats::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CorpsBossRewardStats::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CorpsBossRewardStats::rank() const {
  return rank_;
}
inline void CorpsBossRewardStats::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 drop = 2;
inline bool CorpsBossRewardStats::has_drop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CorpsBossRewardStats::set_has_drop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CorpsBossRewardStats::clear_has_drop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CorpsBossRewardStats::clear_drop() {
  drop_ = 0u;
  clear_has_drop();
}
inline ::google::protobuf::uint32 CorpsBossRewardStats::drop() const {
  return drop_;
}
inline void CorpsBossRewardStats::set_drop(::google::protobuf::uint32 value) {
  set_has_drop();
  drop_ = value;
}

// repeated .jynetwork.proto.sSimpleItem items = 3;
inline int CorpsBossRewardStats::items_size() const {
  return items_.size();
}
inline void CorpsBossRewardStats::clear_items() {
  items_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& CorpsBossRewardStats::items(int index) const {
  return items_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* CorpsBossRewardStats::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* CorpsBossRewardStats::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
CorpsBossRewardStats::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
CorpsBossRewardStats::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// CorpsBossMapStats

// optional uint32 map_id = 1;
inline bool CorpsBossMapStats::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CorpsBossMapStats::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CorpsBossMapStats::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CorpsBossMapStats::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 CorpsBossMapStats::map_id() const {
  return map_id_;
}
inline void CorpsBossMapStats::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional uint32 drop_id = 2;
inline bool CorpsBossMapStats::has_drop_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CorpsBossMapStats::set_has_drop_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CorpsBossMapStats::clear_has_drop_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CorpsBossMapStats::clear_drop_id() {
  drop_id_ = 0u;
  clear_has_drop_id();
}
inline ::google::protobuf::uint32 CorpsBossMapStats::drop_id() const {
  return drop_id_;
}
inline void CorpsBossMapStats::set_drop_id(::google::protobuf::uint32 value) {
  set_has_drop_id();
  drop_id_ = value;
}

// optional uint32 kill_drop_id = 3;
inline bool CorpsBossMapStats::has_kill_drop_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CorpsBossMapStats::set_has_kill_drop_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CorpsBossMapStats::clear_has_kill_drop_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CorpsBossMapStats::clear_kill_drop_id() {
  kill_drop_id_ = 0u;
  clear_has_kill_drop_id();
}
inline ::google::protobuf::uint32 CorpsBossMapStats::kill_drop_id() const {
  return kill_drop_id_;
}
inline void CorpsBossMapStats::set_kill_drop_id(::google::protobuf::uint32 value) {
  set_has_kill_drop_id();
  kill_drop_id_ = value;
}

// optional uint32 hunter_point = 4;
inline bool CorpsBossMapStats::has_hunter_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CorpsBossMapStats::set_has_hunter_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CorpsBossMapStats::clear_has_hunter_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CorpsBossMapStats::clear_hunter_point() {
  hunter_point_ = 0u;
  clear_has_hunter_point();
}
inline ::google::protobuf::uint32 CorpsBossMapStats::hunter_point() const {
  return hunter_point_;
}
inline void CorpsBossMapStats::set_hunter_point(::google::protobuf::uint32 value) {
  set_has_hunter_point();
  hunter_point_ = value;
}

// repeated .jynetwork.proto.sSimpleItem kill_items = 5;
inline int CorpsBossMapStats::kill_items_size() const {
  return kill_items_.size();
}
inline void CorpsBossMapStats::clear_kill_items() {
  kill_items_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& CorpsBossMapStats::kill_items(int index) const {
  return kill_items_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* CorpsBossMapStats::mutable_kill_items(int index) {
  return kill_items_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* CorpsBossMapStats::add_kill_items() {
  return kill_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
CorpsBossMapStats::kill_items() const {
  return kill_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
CorpsBossMapStats::mutable_kill_items() {
  return &kill_items_;
}

// repeated .jynetwork.proto.sSimpleItem items = 6;
inline int CorpsBossMapStats::items_size() const {
  return items_.size();
}
inline void CorpsBossMapStats::clear_items() {
  items_.Clear();
}
inline const ::jynetwork::proto::sSimpleItem& CorpsBossMapStats::items(int index) const {
  return items_.Get(index);
}
inline ::jynetwork::proto::sSimpleItem* CorpsBossMapStats::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::jynetwork::proto::sSimpleItem* CorpsBossMapStats::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >&
CorpsBossMapStats::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::jynetwork::proto::sSimpleItem >*
CorpsBossMapStats::mutable_items() {
  return &items_;
}

// optional uint32 boss_hp = 7;
inline bool CorpsBossMapStats::has_boss_hp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CorpsBossMapStats::set_has_boss_hp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CorpsBossMapStats::clear_has_boss_hp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CorpsBossMapStats::clear_boss_hp() {
  boss_hp_ = 0u;
  clear_has_boss_hp();
}
inline ::google::protobuf::uint32 CorpsBossMapStats::boss_hp() const {
  return boss_hp_;
}
inline void CorpsBossMapStats::set_boss_hp(::google::protobuf::uint32 value) {
  set_has_boss_hp();
  boss_hp_ = value;
}

// -------------------------------------------------------------------

// sArenaStats

// optional uint32 uid = 1;
inline bool sArenaStats::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sArenaStats::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sArenaStats::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sArenaStats::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 sArenaStats::uid() const {
  return uid_;
}
inline void sArenaStats::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 add_min = 2;
inline bool sArenaStats::has_add_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sArenaStats::set_has_add_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sArenaStats::clear_has_add_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sArenaStats::clear_add_min() {
  add_min_ = 0u;
  clear_has_add_min();
}
inline ::google::protobuf::uint32 sArenaStats::add_min() const {
  return add_min_;
}
inline void sArenaStats::set_add_min(::google::protobuf::uint32 value) {
  set_has_add_min();
  add_min_ = value;
}

// optional uint32 add_max = 3;
inline bool sArenaStats::has_add_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sArenaStats::set_has_add_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sArenaStats::clear_has_add_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sArenaStats::clear_add_max() {
  add_max_ = 0u;
  clear_has_add_max();
}
inline ::google::protobuf::uint32 sArenaStats::add_max() const {
  return add_max_;
}
inline void sArenaStats::set_add_max(::google::protobuf::uint32 value) {
  set_has_add_max();
  add_max_ = value;
}

// optional .jynetwork.proto.sGameStats game_stat = 4;
inline bool sArenaStats::has_game_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sArenaStats::set_has_game_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sArenaStats::clear_has_game_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sArenaStats::clear_game_stat() {
  if (game_stat_ != NULL) game_stat_->::jynetwork::proto::sGameStats::Clear();
  clear_has_game_stat();
}
inline const ::jynetwork::proto::sGameStats& sArenaStats::game_stat() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return game_stat_ != NULL ? *game_stat_ : *default_instance().game_stat_;
#else
  return game_stat_ != NULL ? *game_stat_ : *default_instance_->game_stat_;
#endif
}
inline ::jynetwork::proto::sGameStats* sArenaStats::mutable_game_stat() {
  set_has_game_stat();
  if (game_stat_ == NULL) game_stat_ = new ::jynetwork::proto::sGameStats;
  return game_stat_;
}
inline ::jynetwork::proto::sGameStats* sArenaStats::release_game_stat() {
  clear_has_game_stat();
  ::jynetwork::proto::sGameStats* temp = game_stat_;
  game_stat_ = NULL;
  return temp;
}
inline void sArenaStats::set_allocated_game_stat(::jynetwork::proto::sGameStats* game_stat) {
  delete game_stat_;
  game_stat_ = game_stat;
  if (game_stat) {
    set_has_game_stat();
  } else {
    clear_has_game_stat();
  }
}

// optional uint32 monster_lv = 5;
inline bool sArenaStats::has_monster_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sArenaStats::set_has_monster_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sArenaStats::clear_has_monster_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sArenaStats::clear_monster_lv() {
  monster_lv_ = 0u;
  clear_has_monster_lv();
}
inline ::google::protobuf::uint32 sArenaStats::monster_lv() const {
  return monster_lv_;
}
inline void sArenaStats::set_monster_lv(::google::protobuf::uint32 value) {
  set_has_monster_lv();
  monster_lv_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace jynetwork

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_XML_2eproto__INCLUDED
