// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scbase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scbase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace jynetwork {
namespace proto {

void protobuf_ShutdownFile_scbase_2eproto() {
  delete STexturePng::default_instance_;
  delete SPlistTexture::default_instance_;
  delete SPlistDB::default_instance_;
  delete sSimpleItem::default_instance_;
  delete sChaosStats::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_scbase_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_scbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  STexturePng::default_instance_ = new STexturePng();
  SPlistTexture::default_instance_ = new SPlistTexture();
  SPlistDB::default_instance_ = new SPlistDB();
  sSimpleItem::default_instance_ = new sSimpleItem();
  sChaosStats::default_instance_ = new sChaosStats();
  STexturePng::default_instance_->InitAsDefaultInstance();
  SPlistTexture::default_instance_->InitAsDefaultInstance();
  SPlistDB::default_instance_->InitAsDefaultInstance();
  sSimpleItem::default_instance_->InitAsDefaultInstance();
  sChaosStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_scbase_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_scbase_2eproto_once_);
void protobuf_AddDesc_scbase_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_scbase_2eproto_once_,
                 &protobuf_AddDesc_scbase_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_scbase_2eproto {
  StaticDescriptorInitializer_scbase_2eproto() {
    protobuf_AddDesc_scbase_2eproto();
  }
} static_descriptor_initializer_scbase_2eproto_;
#endif
bool eCampBelong_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool eBattleGroup_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool eMonsterAttackMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool ePackType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool eItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

bool eItemFuncType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

bool eQuipPart_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool eEffectPosType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool eEffectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

bool eAssitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool ePartnerBuffType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool eEffectScreenType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool eTargetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool eMovementType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

bool eAiId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool eActorLvlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool eCameraMoveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool eRoleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool eCardQuality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool eWeekdayLimit_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

bool eGroupShape_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool ePersonalOpertionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool eTaskType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool eTaskFinishType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
      return true;
    default:
      return false;
  }
}

bool emExtAttrType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int STexturePng::kPngnameFieldNumber;
const int STexturePng::kPlistnameFieldNumber;
const int STexturePng::kNwidthFieldNumber;
const int STexturePng::kNheightFieldNumber;
#endif  // !_MSC_VER

STexturePng::STexturePng()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void STexturePng::InitAsDefaultInstance() {
}

STexturePng::STexturePng(const STexturePng& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void STexturePng::SharedCtor() {
  _cached_size_ = 0;
  pngname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plistname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nwidth_ = 0u;
  nheight_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STexturePng::~STexturePng() {
  SharedDtor();
}

void STexturePng::SharedDtor() {
  if (pngname_ != &::google::protobuf::internal::kEmptyString) {
    delete pngname_;
  }
  if (plistname_ != &::google::protobuf::internal::kEmptyString) {
    delete plistname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void STexturePng::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const STexturePng& STexturePng::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_scbase_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_scbase_2eproto();
#endif
  return *default_instance_;
}

STexturePng* STexturePng::default_instance_ = NULL;

STexturePng* STexturePng::New() const {
  return new STexturePng;
}

void STexturePng::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pngname()) {
      if (pngname_ != &::google::protobuf::internal::kEmptyString) {
        pngname_->clear();
      }
    }
    if (has_plistname()) {
      if (plistname_ != &::google::protobuf::internal::kEmptyString) {
        plistname_->clear();
      }
    }
    nwidth_ = 0u;
    nheight_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool STexturePng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pngname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pngname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plistname;
        break;
      }

      // optional string plistname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plistname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plistname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nwidth;
        break;
      }

      // optional uint32 nwidth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nwidth_)));
          set_has_nwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nheight;
        break;
      }

      // optional uint32 nheight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nheight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nheight_)));
          set_has_nheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void STexturePng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pngname = 1;
  if (has_pngname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pngname(), output);
  }

  // optional string plistname = 2;
  if (has_plistname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->plistname(), output);
  }

  // optional uint32 nwidth = 3;
  if (has_nwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nwidth(), output);
  }

  // optional uint32 nheight = 4;
  if (has_nheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nheight(), output);
  }

}

int STexturePng::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pngname = 1;
    if (has_pngname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pngname());
    }

    // optional string plistname = 2;
    if (has_plistname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plistname());
    }

    // optional uint32 nwidth = 3;
    if (has_nwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nwidth());
    }

    // optional uint32 nheight = 4;
    if (has_nheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nheight());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STexturePng::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const STexturePng*>(&from));
}

void STexturePng::MergeFrom(const STexturePng& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pngname()) {
      set_pngname(from.pngname());
    }
    if (from.has_plistname()) {
      set_plistname(from.plistname());
    }
    if (from.has_nwidth()) {
      set_nwidth(from.nwidth());
    }
    if (from.has_nheight()) {
      set_nheight(from.nheight());
    }
  }
}

void STexturePng::CopyFrom(const STexturePng& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STexturePng::IsInitialized() const {

  return true;
}

void STexturePng::Swap(STexturePng* other) {
  if (other != this) {
    std::swap(pngname_, other->pngname_);
    std::swap(plistname_, other->plistname_);
    std::swap(nwidth_, other->nwidth_);
    std::swap(nheight_, other->nheight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string STexturePng::GetTypeName() const {
  return "jynetwork.proto.STexturePng";
}


// ===================================================================

#ifndef _MSC_VER
const int SPlistTexture::kPlistFieldNumber;
const int SPlistTexture::kTextureFieldNumber;
#endif  // !_MSC_VER

SPlistTexture::SPlistTexture()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SPlistTexture::InitAsDefaultInstance() {
}

SPlistTexture::SPlistTexture(const SPlistTexture& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SPlistTexture::SharedCtor() {
  _cached_size_ = 0;
  plist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  texture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPlistTexture::~SPlistTexture() {
  SharedDtor();
}

void SPlistTexture::SharedDtor() {
  if (plist_ != &::google::protobuf::internal::kEmptyString) {
    delete plist_;
  }
  if (texture_ != &::google::protobuf::internal::kEmptyString) {
    delete texture_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SPlistTexture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SPlistTexture& SPlistTexture::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_scbase_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_scbase_2eproto();
#endif
  return *default_instance_;
}

SPlistTexture* SPlistTexture::default_instance_ = NULL;

SPlistTexture* SPlistTexture::New() const {
  return new SPlistTexture;
}

void SPlistTexture::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_plist()) {
      if (plist_ != &::google::protobuf::internal::kEmptyString) {
        plist_->clear();
      }
    }
    if (has_texture()) {
      if (texture_ != &::google::protobuf::internal::kEmptyString) {
        texture_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SPlistTexture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string plist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_texture;
        break;
      }

      // optional string texture = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_texture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPlistTexture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string plist = 1;
  if (has_plist()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->plist(), output);
  }

  // optional string texture = 2;
  if (has_texture()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->texture(), output);
  }

}

int SPlistTexture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string plist = 1;
    if (has_plist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plist());
    }

    // optional string texture = 2;
    if (has_texture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->texture());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPlistTexture::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SPlistTexture*>(&from));
}

void SPlistTexture::MergeFrom(const SPlistTexture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plist()) {
      set_plist(from.plist());
    }
    if (from.has_texture()) {
      set_texture(from.texture());
    }
  }
}

void SPlistTexture::CopyFrom(const SPlistTexture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPlistTexture::IsInitialized() const {

  return true;
}

void SPlistTexture::Swap(SPlistTexture* other) {
  if (other != this) {
    std::swap(plist_, other->plist_);
    std::swap(texture_, other->texture_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SPlistTexture::GetTypeName() const {
  return "jynetwork.proto.SPlistTexture";
}


// ===================================================================

#ifndef _MSC_VER
const int SPlistDB::kPlistdbFieldNumber;
const int SPlistDB::kPlistTextureFieldNumber;
#endif  // !_MSC_VER

SPlistDB::SPlistDB()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SPlistDB::InitAsDefaultInstance() {
}

SPlistDB::SPlistDB(const SPlistDB& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SPlistDB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPlistDB::~SPlistDB() {
  SharedDtor();
}

void SPlistDB::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SPlistDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SPlistDB& SPlistDB::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_scbase_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_scbase_2eproto();
#endif
  return *default_instance_;
}

SPlistDB* SPlistDB::default_instance_ = NULL;

SPlistDB* SPlistDB::New() const {
  return new SPlistDB;
}

void SPlistDB::Clear() {
  plistdb_.Clear();
  plist_texture_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SPlistDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jynetwork.proto.STexturePng plistdb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plistdb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plistdb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_plistdb;
        if (input->ExpectTag(18)) goto parse_plist_texture;
        break;
      }

      // repeated .jynetwork.proto.SPlistTexture plist_texture = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plist_texture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plist_texture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plist_texture;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPlistDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jynetwork.proto.STexturePng plistdb = 1;
  for (int i = 0; i < this->plistdb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->plistdb(i), output);
  }

  // repeated .jynetwork.proto.SPlistTexture plist_texture = 2;
  for (int i = 0; i < this->plist_texture_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->plist_texture(i), output);
  }

}

int SPlistDB::ByteSize() const {
  int total_size = 0;

  // repeated .jynetwork.proto.STexturePng plistdb = 1;
  total_size += 1 * this->plistdb_size();
  for (int i = 0; i < this->plistdb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plistdb(i));
  }

  // repeated .jynetwork.proto.SPlistTexture plist_texture = 2;
  total_size += 1 * this->plist_texture_size();
  for (int i = 0; i < this->plist_texture_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plist_texture(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPlistDB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SPlistDB*>(&from));
}

void SPlistDB::MergeFrom(const SPlistDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  plistdb_.MergeFrom(from.plistdb_);
  plist_texture_.MergeFrom(from.plist_texture_);
}

void SPlistDB::CopyFrom(const SPlistDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPlistDB::IsInitialized() const {

  return true;
}

void SPlistDB::Swap(SPlistDB* other) {
  if (other != this) {
    plistdb_.Swap(&other->plistdb_);
    plist_texture_.Swap(&other->plist_texture_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SPlistDB::GetTypeName() const {
  return "jynetwork.proto.SPlistDB";
}


// ===================================================================

#ifndef _MSC_VER
const int sSimpleItem::kItemidFieldNumber;
const int sSimpleItem::kItemnumFieldNumber;
const int sSimpleItem::kItempricetypeFieldNumber;
const int sSimpleItem::kItempriceFieldNumber;
const int sSimpleItem::kIssoldFieldNumber;
const int sSimpleItem::kItemuidFieldNumber;
const int sSimpleItem::kShoporderFieldNumber;
const int sSimpleItem::kDecomCardFieldNumber;
const int sSimpleItem::kShopIdFieldNumber;
const int sSimpleItem::kBuyTimesFieldNumber;
#endif  // !_MSC_VER

sSimpleItem::sSimpleItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sSimpleItem::InitAsDefaultInstance() {
}

sSimpleItem::sSimpleItem(const sSimpleItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sSimpleItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemnum_ = 0u;
  itempricetype_ = 0u;
  itemprice_ = 0u;
  issold_ = 0u;
  itemuid_ = 0u;
  shoporder_ = 0u;
  decom_card_ = 0u;
  shop_id_ = 0u;
  buy_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sSimpleItem::~sSimpleItem() {
  SharedDtor();
}

void sSimpleItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sSimpleItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sSimpleItem& sSimpleItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_scbase_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_scbase_2eproto();
#endif
  return *default_instance_;
}

sSimpleItem* sSimpleItem::default_instance_ = NULL;

sSimpleItem* sSimpleItem::New() const {
  return new sSimpleItem;
}

void sSimpleItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemnum_ = 0u;
    itempricetype_ = 0u;
    itemprice_ = 0u;
    issold_ = 0u;
    itemuid_ = 0u;
    shoporder_ = 0u;
    decom_card_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    shop_id_ = 0u;
    buy_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sSimpleItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemnum;
        break;
      }

      // optional uint32 itemnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itempricetype;
        break;
      }

      // optional uint32 itempricetype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itempricetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itempricetype_)));
          set_has_itempricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemprice;
        break;
      }

      // optional uint32 itemprice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemprice_)));
          set_has_itemprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_issold;
        break;
      }

      // optional uint32 issold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_issold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &issold_)));
          set_has_issold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_itemuid;
        break;
      }

      // optional uint32 itemuid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemuid_)));
          set_has_itemuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_shoporder;
        break;
      }

      // optional uint32 shoporder = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoporder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoporder_)));
          set_has_shoporder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_decom_card;
        break;
      }

      // optional uint32 decom_card = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decom_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decom_card_)));
          set_has_decom_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_shop_id;
        break;
      }

      // optional uint32 shop_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_id_)));
          set_has_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_buy_times;
        break;
      }

      // optional uint32 buy_times = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sSimpleItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 itemnum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }

  // optional uint32 itempricetype = 3;
  if (has_itempricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itempricetype(), output);
  }

  // optional uint32 itemprice = 4;
  if (has_itemprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemprice(), output);
  }

  // optional uint32 issold = 5;
  if (has_issold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->issold(), output);
  }

  // optional uint32 itemuid = 6;
  if (has_itemuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->itemuid(), output);
  }

  // optional uint32 shoporder = 7;
  if (has_shoporder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->shoporder(), output);
  }

  // optional uint32 decom_card = 8;
  if (has_decom_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->decom_card(), output);
  }

  // optional uint32 shop_id = 9;
  if (has_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->shop_id(), output);
  }

  // optional uint32 buy_times = 10;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->buy_times(), output);
  }

}

int sSimpleItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 itemnum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

    // optional uint32 itempricetype = 3;
    if (has_itempricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itempricetype());
    }

    // optional uint32 itemprice = 4;
    if (has_itemprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemprice());
    }

    // optional uint32 issold = 5;
    if (has_issold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->issold());
    }

    // optional uint32 itemuid = 6;
    if (has_itemuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemuid());
    }

    // optional uint32 shoporder = 7;
    if (has_shoporder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoporder());
    }

    // optional uint32 decom_card = 8;
    if (has_decom_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decom_card());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 shop_id = 9;
    if (has_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_id());
    }

    // optional uint32 buy_times = 10;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_times());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sSimpleItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sSimpleItem*>(&from));
}

void sSimpleItem::MergeFrom(const sSimpleItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_itempricetype()) {
      set_itempricetype(from.itempricetype());
    }
    if (from.has_itemprice()) {
      set_itemprice(from.itemprice());
    }
    if (from.has_issold()) {
      set_issold(from.issold());
    }
    if (from.has_itemuid()) {
      set_itemuid(from.itemuid());
    }
    if (from.has_shoporder()) {
      set_shoporder(from.shoporder());
    }
    if (from.has_decom_card()) {
      set_decom_card(from.decom_card());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shop_id()) {
      set_shop_id(from.shop_id());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
  }
}

void sSimpleItem::CopyFrom(const sSimpleItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sSimpleItem::IsInitialized() const {

  return true;
}

void sSimpleItem::Swap(sSimpleItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(itempricetype_, other->itempricetype_);
    std::swap(itemprice_, other->itemprice_);
    std::swap(issold_, other->issold_);
    std::swap(itemuid_, other->itemuid_);
    std::swap(shoporder_, other->shoporder_);
    std::swap(decom_card_, other->decom_card_);
    std::swap(shop_id_, other->shop_id_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sSimpleItem::GetTypeName() const {
  return "jynetwork.proto.sSimpleItem";
}


// ===================================================================

#ifndef _MSC_VER
const int sChaosStats::kPercentFieldNumber;
const int sChaosStats::kMapUidFieldNumber;
#endif  // !_MSC_VER

sChaosStats::sChaosStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sChaosStats::InitAsDefaultInstance() {
}

sChaosStats::sChaosStats(const sChaosStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sChaosStats::SharedCtor() {
  _cached_size_ = 0;
  percent_ = 0u;
  map_uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sChaosStats::~sChaosStats() {
  SharedDtor();
}

void sChaosStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sChaosStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sChaosStats& sChaosStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_scbase_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_scbase_2eproto();
#endif
  return *default_instance_;
}

sChaosStats* sChaosStats::default_instance_ = NULL;

sChaosStats* sChaosStats::New() const {
  return new sChaosStats;
}

void sChaosStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    percent_ = 0u;
    map_uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sChaosStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 percent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_uid;
        break;
      }

      // optional uint32 map_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_uid_)));
          set_has_map_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sChaosStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 percent = 1;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->percent(), output);
  }

  // optional uint32 map_uid = 2;
  if (has_map_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_uid(), output);
  }

}

int sChaosStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 percent = 1;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->percent());
    }

    // optional uint32 map_uid = 2;
    if (has_map_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_uid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sChaosStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sChaosStats*>(&from));
}

void sChaosStats::MergeFrom(const sChaosStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_percent()) {
      set_percent(from.percent());
    }
    if (from.has_map_uid()) {
      set_map_uid(from.map_uid());
    }
  }
}

void sChaosStats::CopyFrom(const sChaosStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sChaosStats::IsInitialized() const {

  return true;
}

void sChaosStats::Swap(sChaosStats* other) {
  if (other != this) {
    std::swap(percent_, other->percent_);
    std::swap(map_uid_, other->map_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sChaosStats::GetTypeName() const {
  return "jynetwork.proto.sChaosStats";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace jynetwork

// @@protoc_insertion_point(global_scope)
