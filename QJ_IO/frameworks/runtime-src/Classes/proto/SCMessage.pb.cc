// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SCMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SCMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace jynetwork {
namespace proto {

void protobuf_ShutdownFile_SCMessage_2eproto() {
  delete SCMessageNetBattlePrepare::default_instance_;
  delete SCMessageNetBattleOper::default_instance_;
  delete SCMessageBattleReward::default_instance_;
  delete SCMessageLoginAuth::default_instance_;
  delete SCMessageGateAuth::default_instance_;
  delete sPlaneEquipStats::default_instance_;
  delete SCUserDetailInfo::default_instance_;
  delete SCMessageOperationResult::default_instance_;
  delete SCMessageShopItem::default_instance_;
  delete SCMessageBattleSweepReward::default_instance_;
  delete SCMessageBattleSweepReward_RewardInfo::default_instance_;
  delete SCMessageBattleRewardEnd::default_instance_;
  delete sPlayerSave::default_instance_;
  delete SCOpponentDetailInfo::default_instance_;
  delete SCQueryDetailInfo::default_instance_;
  delete SCMessagePong::default_instance_;
  delete SCMessageBattlePrepare::default_instance_;
  delete SysNotice::default_instance_;
  delete SCMessageSysNotice::default_instance_;
  delete SysMail::default_instance_;
  delete SCMessageMail::default_instance_;
  delete SCMessageRankList::default_instance_;
  delete SCMessageRankList_RankInfo::default_instance_;
  delete SCMessageBattleCheck::default_instance_;
  delete SCMessageCorpsOper::default_instance_;
  delete CorpsInfo::default_instance_;
  delete SCMessageCorpsInfo::default_instance_;
  delete CorpsBossInfo::default_instance_;
  delete CorpsBossPlayerInfo::default_instance_;
  delete SCMessageCorpsBossInfo::default_instance_;
  delete SCMessageCorpsList::default_instance_;
  delete MessagePKOper::default_instance_;
  delete SCMessagePKOperResult::default_instance_;
  delete SCMessageFriendList::default_instance_;
  delete SCMessageFriendList_FriendInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_SCMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_SCMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::jynetwork::proto::protobuf_AddDesc_scbase_2eproto();
  ::jynetwork::proto::protobuf_AddDesc_XML_2eproto();
  ::jynetwork::proto::protobuf_AddDesc_StoC_2eproto();
  ::jynetwork::proto::protobuf_AddDesc_MessageHeader_2eproto();
  SCMessageNetBattlePrepare::default_instance_ = new SCMessageNetBattlePrepare();
  SCMessageNetBattleOper::default_instance_ = new SCMessageNetBattleOper();
  SCMessageBattleReward::default_instance_ = new SCMessageBattleReward();
  SCMessageLoginAuth::default_instance_ = new SCMessageLoginAuth();
  SCMessageGateAuth::default_instance_ = new SCMessageGateAuth();
  sPlaneEquipStats::default_instance_ = new sPlaneEquipStats();
  SCUserDetailInfo::default_instance_ = new SCUserDetailInfo();
  SCMessageOperationResult::default_instance_ = new SCMessageOperationResult();
  SCMessageShopItem::default_instance_ = new SCMessageShopItem();
  SCMessageBattleSweepReward::default_instance_ = new SCMessageBattleSweepReward();
  SCMessageBattleSweepReward_RewardInfo::default_instance_ = new SCMessageBattleSweepReward_RewardInfo();
  SCMessageBattleRewardEnd::default_instance_ = new SCMessageBattleRewardEnd();
  sPlayerSave::default_instance_ = new sPlayerSave();
  SCOpponentDetailInfo::default_instance_ = new SCOpponentDetailInfo();
  SCQueryDetailInfo::default_instance_ = new SCQueryDetailInfo();
  SCMessagePong::default_instance_ = new SCMessagePong();
  SCMessageBattlePrepare::default_instance_ = new SCMessageBattlePrepare();
  SysNotice::default_instance_ = new SysNotice();
  SCMessageSysNotice::default_instance_ = new SCMessageSysNotice();
  SysMail::default_instance_ = new SysMail();
  SCMessageMail::default_instance_ = new SCMessageMail();
  SCMessageRankList::default_instance_ = new SCMessageRankList();
  SCMessageRankList_RankInfo::default_instance_ = new SCMessageRankList_RankInfo();
  SCMessageBattleCheck::default_instance_ = new SCMessageBattleCheck();
  SCMessageCorpsOper::default_instance_ = new SCMessageCorpsOper();
  CorpsInfo::default_instance_ = new CorpsInfo();
  SCMessageCorpsInfo::default_instance_ = new SCMessageCorpsInfo();
  CorpsBossInfo::default_instance_ = new CorpsBossInfo();
  CorpsBossPlayerInfo::default_instance_ = new CorpsBossPlayerInfo();
  SCMessageCorpsBossInfo::default_instance_ = new SCMessageCorpsBossInfo();
  SCMessageCorpsList::default_instance_ = new SCMessageCorpsList();
  MessagePKOper::default_instance_ = new MessagePKOper();
  SCMessagePKOperResult::default_instance_ = new SCMessagePKOperResult();
  SCMessageFriendList::default_instance_ = new SCMessageFriendList();
  SCMessageFriendList_FriendInfo::default_instance_ = new SCMessageFriendList_FriendInfo();
  SCMessageNetBattlePrepare::default_instance_->InitAsDefaultInstance();
  SCMessageNetBattleOper::default_instance_->InitAsDefaultInstance();
  SCMessageBattleReward::default_instance_->InitAsDefaultInstance();
  SCMessageLoginAuth::default_instance_->InitAsDefaultInstance();
  SCMessageGateAuth::default_instance_->InitAsDefaultInstance();
  sPlaneEquipStats::default_instance_->InitAsDefaultInstance();
  SCUserDetailInfo::default_instance_->InitAsDefaultInstance();
  SCMessageOperationResult::default_instance_->InitAsDefaultInstance();
  SCMessageShopItem::default_instance_->InitAsDefaultInstance();
  SCMessageBattleSweepReward::default_instance_->InitAsDefaultInstance();
  SCMessageBattleSweepReward_RewardInfo::default_instance_->InitAsDefaultInstance();
  SCMessageBattleRewardEnd::default_instance_->InitAsDefaultInstance();
  sPlayerSave::default_instance_->InitAsDefaultInstance();
  SCOpponentDetailInfo::default_instance_->InitAsDefaultInstance();
  SCQueryDetailInfo::default_instance_->InitAsDefaultInstance();
  SCMessagePong::default_instance_->InitAsDefaultInstance();
  SCMessageBattlePrepare::default_instance_->InitAsDefaultInstance();
  SysNotice::default_instance_->InitAsDefaultInstance();
  SCMessageSysNotice::default_instance_->InitAsDefaultInstance();
  SysMail::default_instance_->InitAsDefaultInstance();
  SCMessageMail::default_instance_->InitAsDefaultInstance();
  SCMessageRankList::default_instance_->InitAsDefaultInstance();
  SCMessageRankList_RankInfo::default_instance_->InitAsDefaultInstance();
  SCMessageBattleCheck::default_instance_->InitAsDefaultInstance();
  SCMessageCorpsOper::default_instance_->InitAsDefaultInstance();
  CorpsInfo::default_instance_->InitAsDefaultInstance();
  SCMessageCorpsInfo::default_instance_->InitAsDefaultInstance();
  CorpsBossInfo::default_instance_->InitAsDefaultInstance();
  CorpsBossPlayerInfo::default_instance_->InitAsDefaultInstance();
  SCMessageCorpsBossInfo::default_instance_->InitAsDefaultInstance();
  SCMessageCorpsList::default_instance_->InitAsDefaultInstance();
  MessagePKOper::default_instance_->InitAsDefaultInstance();
  SCMessagePKOperResult::default_instance_->InitAsDefaultInstance();
  SCMessageFriendList::default_instance_->InitAsDefaultInstance();
  SCMessageFriendList_FriendInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SCMessage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SCMessage_2eproto_once_);
void protobuf_AddDesc_SCMessage_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SCMessage_2eproto_once_,
                 &protobuf_AddDesc_SCMessage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SCMessage_2eproto {
  StaticDescriptorInitializer_SCMessage_2eproto() {
    protobuf_AddDesc_SCMessage_2eproto();
  }
} static_descriptor_initializer_SCMessage_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SCMessageNetBattlePrepare::kMapIdFieldNumber;
const int SCMessageNetBattlePrepare::kFriendDetailFieldNumber;
const int SCMessageNetBattlePrepare::kResultFieldNumber;
const int SCMessageNetBattlePrepare::kRandNumFieldNumber;
#endif  // !_MSC_VER

SCMessageNetBattlePrepare::SCMessageNetBattlePrepare()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageNetBattlePrepare::InitAsDefaultInstance() {
}

SCMessageNetBattlePrepare::SCMessageNetBattlePrepare(const SCMessageNetBattlePrepare& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageNetBattlePrepare::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  result_ = 1;
  rand_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageNetBattlePrepare::~SCMessageNetBattlePrepare() {
  SharedDtor();
}

void SCMessageNetBattlePrepare::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageNetBattlePrepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageNetBattlePrepare& SCMessageNetBattlePrepare::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageNetBattlePrepare* SCMessageNetBattlePrepare::default_instance_ = NULL;

SCMessageNetBattlePrepare* SCMessageNetBattlePrepare::New() const {
  return new SCMessageNetBattlePrepare;
}

void SCMessageNetBattlePrepare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    result_ = 1;
    rand_num_ = 0u;
  }
  friend_detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageNetBattlePrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friend_detail;
        break;
      }

      // repeated .jynetwork.proto.SCQueryDetailInfo friend_detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friend_detail;
        if (input->ExpectTag(24)) goto parse_rand_num;
        break;
      }

      // optional uint32 rand_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_num_)));
          set_has_rand_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .jynetwork.proto.eOpertionResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eOpertionResult_IsValid(value)) {
            set_result(static_cast< ::jynetwork::proto::eOpertionResult >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageNetBattlePrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // repeated .jynetwork.proto.SCQueryDetailInfo friend_detail = 2;
  for (int i = 0; i < this->friend_detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->friend_detail(i), output);
  }

  // optional uint32 rand_num = 3;
  if (has_rand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rand_num(), output);
  }

  // optional .jynetwork.proto.eOpertionResult result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

}

int SCMessageNetBattlePrepare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional .jynetwork.proto.eOpertionResult result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 rand_num = 3;
    if (has_rand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_num());
    }

  }
  // repeated .jynetwork.proto.SCQueryDetailInfo friend_detail = 2;
  total_size += 1 * this->friend_detail_size();
  for (int i = 0; i < this->friend_detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_detail(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageNetBattlePrepare::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageNetBattlePrepare*>(&from));
}

void SCMessageNetBattlePrepare::MergeFrom(const SCMessageNetBattlePrepare& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_detail_.MergeFrom(from.friend_detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rand_num()) {
      set_rand_num(from.rand_num());
    }
  }
}

void SCMessageNetBattlePrepare::CopyFrom(const SCMessageNetBattlePrepare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageNetBattlePrepare::IsInitialized() const {

  return true;
}

void SCMessageNetBattlePrepare::Swap(SCMessageNetBattlePrepare* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    friend_detail_.Swap(&other->friend_detail_);
    std::swap(result_, other->result_);
    std::swap(rand_num_, other->rand_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageNetBattlePrepare::GetTypeName() const {
  return "jynetwork.proto.SCMessageNetBattlePrepare";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageNetBattleOper::kOpersFieldNumber;
const int SCMessageNetBattleOper::kBattleTimeFieldNumber;
#endif  // !_MSC_VER

SCMessageNetBattleOper::SCMessageNetBattleOper()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageNetBattleOper::InitAsDefaultInstance() {
}

SCMessageNetBattleOper::SCMessageNetBattleOper(const SCMessageNetBattleOper& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageNetBattleOper::SharedCtor() {
  _cached_size_ = 0;
  battle_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageNetBattleOper::~SCMessageNetBattleOper() {
  SharedDtor();
}

void SCMessageNetBattleOper::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageNetBattleOper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageNetBattleOper& SCMessageNetBattleOper::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageNetBattleOper* SCMessageNetBattleOper::default_instance_ = NULL;

SCMessageNetBattleOper* SCMessageNetBattleOper::New() const {
  return new SCMessageNetBattleOper;
}

void SCMessageNetBattleOper::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    battle_time_ = 0u;
  }
  opers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageNetBattleOper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jynetwork.proto.NetBattleOper opers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_opers;
        if (input->ExpectTag(16)) goto parse_battle_time;
        break;
      }

      // optional uint32 battle_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_time_)));
          set_has_battle_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageNetBattleOper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jynetwork.proto.NetBattleOper opers = 1;
  for (int i = 0; i < this->opers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->opers(i), output);
  }

  // optional uint32 battle_time = 2;
  if (has_battle_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battle_time(), output);
  }

}

int SCMessageNetBattleOper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 battle_time = 2;
    if (has_battle_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_time());
    }

  }
  // repeated .jynetwork.proto.NetBattleOper opers = 1;
  total_size += 1 * this->opers_size();
  for (int i = 0; i < this->opers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageNetBattleOper::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageNetBattleOper*>(&from));
}

void SCMessageNetBattleOper::MergeFrom(const SCMessageNetBattleOper& from) {
  GOOGLE_CHECK_NE(&from, this);
  opers_.MergeFrom(from.opers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_battle_time()) {
      set_battle_time(from.battle_time());
    }
  }
}

void SCMessageNetBattleOper::CopyFrom(const SCMessageNetBattleOper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageNetBattleOper::IsInitialized() const {

  return true;
}

void SCMessageNetBattleOper::Swap(SCMessageNetBattleOper* other) {
  if (other != this) {
    opers_.Swap(&other->opers_);
    std::swap(battle_time_, other->battle_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageNetBattleOper::GetTypeName() const {
  return "jynetwork.proto.SCMessageNetBattleOper";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageBattleReward::kMapIdFieldNumber;
const int SCMessageBattleReward::kScoreFieldNumber;
const int SCMessageBattleReward::kExpFieldNumber;
const int SCMessageBattleReward::kEquipFieldNumber;
const int SCMessageBattleReward::kItemFieldNumber;
const int SCMessageBattleReward::kDifficultFieldNumber;
const int SCMessageBattleReward::kBattleScoreFieldNumber;
const int SCMessageBattleReward::kBattleMoneyFieldNumber;
const int SCMessageBattleReward::kBattleStarFieldNumber;
const int SCMessageBattleReward::kOldLevelFieldNumber;
const int SCMessageBattleReward::kOldExpFieldNumber;
const int SCMessageBattleReward::kCardExpFieldNumber;
const int SCMessageBattleReward::kResultFieldNumber;
const int SCMessageBattleReward::kHitScoreFieldNumber;
const int SCMessageBattleReward::kTimeScoreFieldNumber;
const int SCMessageBattleReward::kCatlogFieldNumber;
const int SCMessageBattleReward::kEndlessWaveFieldNumber;
const int SCMessageBattleReward::kDoubleDamageScoreFieldNumber;
const int SCMessageBattleReward::kDoubleKillScoreFieldNumber;
const int SCMessageBattleReward::kDoubleBossScoreFieldNumber;
const int SCMessageBattleReward::kMvpItemFieldNumber;
const int SCMessageBattleReward::kBossSingleFieldNumber;
const int SCMessageBattleReward::kBossTotalFieldNumber;
const int SCMessageBattleReward::kBossRankFieldNumber;
const int SCMessageBattleReward::kWaitPlayerRewardFieldNumber;
const int SCMessageBattleReward::kArenaScoreFieldNumber;
const int SCMessageBattleReward::kArenaResultFieldNumber;
const int SCMessageBattleReward::kArenaContinueWinFieldNumber;
#endif  // !_MSC_VER

SCMessageBattleReward::SCMessageBattleReward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageBattleReward::InitAsDefaultInstance() {
}

SCMessageBattleReward::SCMessageBattleReward(const SCMessageBattleReward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageBattleReward::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  score_ = 0u;
  exp_ = 0u;
  difficult_ = 0u;
  battle_score_ = 0u;
  battle_money_ = 0u;
  battle_star_ = 0u;
  old_level_ = 0u;
  old_exp_ = 0u;
  card_exp_ = 0u;
  result_ = 1;
  hit_score_ = 0u;
  time_score_ = 0u;
  catlog_ = 0u;
  endless_wave_ = 0u;
  boss_single_ = 0u;
  boss_total_ = 0u;
  boss_rank_ = 0u;
  wait_player_reward_ = 0u;
  arena_score_ = 0;
  arena_result_ = 0u;
  arena_continue_win_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageBattleReward::~SCMessageBattleReward() {
  SharedDtor();
}

void SCMessageBattleReward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageBattleReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageBattleReward& SCMessageBattleReward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageBattleReward* SCMessageBattleReward::default_instance_ = NULL;

SCMessageBattleReward* SCMessageBattleReward::New() const {
  return new SCMessageBattleReward;
}

void SCMessageBattleReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    score_ = 0u;
    exp_ = 0u;
    difficult_ = 0u;
    battle_score_ = 0u;
    battle_money_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    battle_star_ = 0u;
    old_level_ = 0u;
    old_exp_ = 0u;
    card_exp_ = 0u;
    result_ = 1;
    hit_score_ = 0u;
    time_score_ = 0u;
    catlog_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    endless_wave_ = 0u;
    boss_single_ = 0u;
    boss_total_ = 0u;
    boss_rank_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    wait_player_reward_ = 0u;
    arena_score_ = 0;
    arena_result_ = 0u;
    arena_continue_win_ = 0u;
  }
  equip_.Clear();
  item_.Clear();
  double_damage_score_.Clear();
  double_kill_score_.Clear();
  double_boss_score_.Clear();
  mvp_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageBattleReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip;
        break;
      }

      // repeated .jynetwork.proto.sPersonEquipStats equip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip;
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // repeated .jynetwork.proto.sPersonItemStats item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item;
        if (input->ExpectTag(40)) goto parse_difficult;
        break;
      }

      // optional uint32 difficult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficult_)));
          set_has_difficult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battle_score;
        break;
      }

      // optional uint32 battle_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_score_)));
          set_has_battle_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battle_money;
        break;
      }

      // optional uint32 battle_money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_money_)));
          set_has_battle_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battle_star;
        break;
      }

      // optional uint32 battle_star = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_star_)));
          set_has_battle_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_old_level;
        break;
      }

      // optional uint32 old_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_level_)));
          set_has_old_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_old_exp;
        break;
      }

      // optional uint32 old_exp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_exp_)));
          set_has_old_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_card_exp;
        break;
      }

      // optional uint32 card_exp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_exp_)));
          set_has_card_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_result;
        break;
      }

      // optional .jynetwork.proto.eOpertionResult result = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eOpertionResult_IsValid(value)) {
            set_result(static_cast< ::jynetwork::proto::eOpertionResult >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hit_score;
        break;
      }

      // optional uint32 hit_score = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_score_)));
          set_has_hit_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_time_score;
        break;
      }

      // optional uint32 time_score = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_score_)));
          set_has_time_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_catlog;
        break;
      }

      // optional uint32 catlog = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_catlog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catlog_)));
          set_has_catlog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_endless_wave;
        break;
      }

      // optional uint32 endless_wave = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endless_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endless_wave_)));
          set_has_endless_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_double_damage_score;
        break;
      }

      // repeated uint32 double_damage_score = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_double_damage_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_double_damage_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_double_damage_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_double_damage_score;
        if (input->ExpectTag(144)) goto parse_double_kill_score;
        break;
      }

      // repeated uint32 double_kill_score = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_double_kill_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_double_kill_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_double_kill_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_double_kill_score;
        if (input->ExpectTag(152)) goto parse_double_boss_score;
        break;
      }

      // repeated uint32 double_boss_score = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_double_boss_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_double_boss_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_double_boss_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_double_boss_score;
        if (input->ExpectTag(162)) goto parse_mvp_item;
        break;
      }

      // repeated .jynetwork.proto.sPersonItemStats mvp_item = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mvp_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mvp_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_mvp_item;
        if (input->ExpectTag(168)) goto parse_boss_single;
        break;
      }

      // optional uint32 boss_single = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_single:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_single_)));
          set_has_boss_single();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_boss_total;
        break;
      }

      // optional uint32 boss_total = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_total_)));
          set_has_boss_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_boss_rank;
        break;
      }

      // optional uint32 boss_rank = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_rank_)));
          set_has_boss_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_wait_player_reward;
        break;
      }

      // optional uint32 wait_player_reward = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_player_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wait_player_reward_)));
          set_has_wait_player_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_arena_score;
        break;
      }

      // optional int32 arena_score = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_score_)));
          set_has_arena_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_arena_result;
        break;
      }

      // optional uint32 arena_result = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arena_result_)));
          set_has_arena_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_arena_continue_win;
        break;
      }

      // optional uint32 arena_continue_win = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_continue_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arena_continue_win_)));
          set_has_arena_continue_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_score;
        break;
      }

      // optional uint32 score = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageBattleReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // repeated .jynetwork.proto.sPersonEquipStats equip = 3;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->equip(i), output);
  }

  // repeated .jynetwork.proto.sPersonItemStats item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->item(i), output);
  }

  // optional uint32 difficult = 5;
  if (has_difficult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->difficult(), output);
  }

  // optional uint32 battle_score = 6;
  if (has_battle_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battle_score(), output);
  }

  // optional uint32 battle_money = 7;
  if (has_battle_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battle_money(), output);
  }

  // optional uint32 battle_star = 8;
  if (has_battle_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->battle_star(), output);
  }

  // optional uint32 old_level = 9;
  if (has_old_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->old_level(), output);
  }

  // optional uint32 old_exp = 10;
  if (has_old_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->old_exp(), output);
  }

  // optional uint32 card_exp = 11;
  if (has_card_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_exp(), output);
  }

  // optional .jynetwork.proto.eOpertionResult result = 12;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->result(), output);
  }

  // optional uint32 hit_score = 13;
  if (has_hit_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->hit_score(), output);
  }

  // optional uint32 time_score = 14;
  if (has_time_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->time_score(), output);
  }

  // optional uint32 catlog = 15;
  if (has_catlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->catlog(), output);
  }

  // optional uint32 endless_wave = 16;
  if (has_endless_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->endless_wave(), output);
  }

  // repeated uint32 double_damage_score = 17;
  for (int i = 0; i < this->double_damage_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->double_damage_score(i), output);
  }

  // repeated uint32 double_kill_score = 18;
  for (int i = 0; i < this->double_kill_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->double_kill_score(i), output);
  }

  // repeated uint32 double_boss_score = 19;
  for (int i = 0; i < this->double_boss_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->double_boss_score(i), output);
  }

  // repeated .jynetwork.proto.sPersonItemStats mvp_item = 20;
  for (int i = 0; i < this->mvp_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->mvp_item(i), output);
  }

  // optional uint32 boss_single = 21;
  if (has_boss_single()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->boss_single(), output);
  }

  // optional uint32 boss_total = 22;
  if (has_boss_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->boss_total(), output);
  }

  // optional uint32 boss_rank = 23;
  if (has_boss_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->boss_rank(), output);
  }

  // optional uint32 wait_player_reward = 24;
  if (has_wait_player_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->wait_player_reward(), output);
  }

  // optional int32 arena_score = 25;
  if (has_arena_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->arena_score(), output);
  }

  // optional uint32 arena_result = 26;
  if (has_arena_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->arena_result(), output);
  }

  // optional uint32 arena_continue_win = 27;
  if (has_arena_continue_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->arena_continue_win(), output);
  }

  // optional uint32 score = 28;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->score(), output);
  }

}

int SCMessageBattleReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 score = 28;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 difficult = 5;
    if (has_difficult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficult());
    }

    // optional uint32 battle_score = 6;
    if (has_battle_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_score());
    }

    // optional uint32 battle_money = 7;
    if (has_battle_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_money());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 battle_star = 8;
    if (has_battle_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_star());
    }

    // optional uint32 old_level = 9;
    if (has_old_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_level());
    }

    // optional uint32 old_exp = 10;
    if (has_old_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_exp());
    }

    // optional uint32 card_exp = 11;
    if (has_card_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_exp());
    }

    // optional .jynetwork.proto.eOpertionResult result = 12;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 hit_score = 13;
    if (has_hit_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit_score());
    }

    // optional uint32 time_score = 14;
    if (has_time_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_score());
    }

    // optional uint32 catlog = 15;
    if (has_catlog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catlog());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 endless_wave = 16;
    if (has_endless_wave()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endless_wave());
    }

    // optional uint32 boss_single = 21;
    if (has_boss_single()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_single());
    }

    // optional uint32 boss_total = 22;
    if (has_boss_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_total());
    }

    // optional uint32 boss_rank = 23;
    if (has_boss_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_rank());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 wait_player_reward = 24;
    if (has_wait_player_reward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wait_player_reward());
    }

    // optional int32 arena_score = 25;
    if (has_arena_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_score());
    }

    // optional uint32 arena_result = 26;
    if (has_arena_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arena_result());
    }

    // optional uint32 arena_continue_win = 27;
    if (has_arena_continue_win()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arena_continue_win());
    }

  }
  // repeated .jynetwork.proto.sPersonEquipStats equip = 3;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .jynetwork.proto.sPersonItemStats item = 4;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated uint32 double_damage_score = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->double_damage_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->double_damage_score(i));
    }
    total_size += 2 * this->double_damage_score_size() + data_size;
  }

  // repeated uint32 double_kill_score = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->double_kill_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->double_kill_score(i));
    }
    total_size += 2 * this->double_kill_score_size() + data_size;
  }

  // repeated uint32 double_boss_score = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->double_boss_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->double_boss_score(i));
    }
    total_size += 2 * this->double_boss_score_size() + data_size;
  }

  // repeated .jynetwork.proto.sPersonItemStats mvp_item = 20;
  total_size += 2 * this->mvp_item_size();
  for (int i = 0; i < this->mvp_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mvp_item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageBattleReward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageBattleReward*>(&from));
}

void SCMessageBattleReward::MergeFrom(const SCMessageBattleReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  item_.MergeFrom(from.item_);
  double_damage_score_.MergeFrom(from.double_damage_score_);
  double_kill_score_.MergeFrom(from.double_kill_score_);
  double_boss_score_.MergeFrom(from.double_boss_score_);
  mvp_item_.MergeFrom(from.mvp_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_difficult()) {
      set_difficult(from.difficult());
    }
    if (from.has_battle_score()) {
      set_battle_score(from.battle_score());
    }
    if (from.has_battle_money()) {
      set_battle_money(from.battle_money());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battle_star()) {
      set_battle_star(from.battle_star());
    }
    if (from.has_old_level()) {
      set_old_level(from.old_level());
    }
    if (from.has_old_exp()) {
      set_old_exp(from.old_exp());
    }
    if (from.has_card_exp()) {
      set_card_exp(from.card_exp());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_hit_score()) {
      set_hit_score(from.hit_score());
    }
    if (from.has_time_score()) {
      set_time_score(from.time_score());
    }
    if (from.has_catlog()) {
      set_catlog(from.catlog());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_endless_wave()) {
      set_endless_wave(from.endless_wave());
    }
    if (from.has_boss_single()) {
      set_boss_single(from.boss_single());
    }
    if (from.has_boss_total()) {
      set_boss_total(from.boss_total());
    }
    if (from.has_boss_rank()) {
      set_boss_rank(from.boss_rank());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_wait_player_reward()) {
      set_wait_player_reward(from.wait_player_reward());
    }
    if (from.has_arena_score()) {
      set_arena_score(from.arena_score());
    }
    if (from.has_arena_result()) {
      set_arena_result(from.arena_result());
    }
    if (from.has_arena_continue_win()) {
      set_arena_continue_win(from.arena_continue_win());
    }
  }
}

void SCMessageBattleReward::CopyFrom(const SCMessageBattleReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageBattleReward::IsInitialized() const {

  return true;
}

void SCMessageBattleReward::Swap(SCMessageBattleReward* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(score_, other->score_);
    std::swap(exp_, other->exp_);
    equip_.Swap(&other->equip_);
    item_.Swap(&other->item_);
    std::swap(difficult_, other->difficult_);
    std::swap(battle_score_, other->battle_score_);
    std::swap(battle_money_, other->battle_money_);
    std::swap(battle_star_, other->battle_star_);
    std::swap(old_level_, other->old_level_);
    std::swap(old_exp_, other->old_exp_);
    std::swap(card_exp_, other->card_exp_);
    std::swap(result_, other->result_);
    std::swap(hit_score_, other->hit_score_);
    std::swap(time_score_, other->time_score_);
    std::swap(catlog_, other->catlog_);
    std::swap(endless_wave_, other->endless_wave_);
    double_damage_score_.Swap(&other->double_damage_score_);
    double_kill_score_.Swap(&other->double_kill_score_);
    double_boss_score_.Swap(&other->double_boss_score_);
    mvp_item_.Swap(&other->mvp_item_);
    std::swap(boss_single_, other->boss_single_);
    std::swap(boss_total_, other->boss_total_);
    std::swap(boss_rank_, other->boss_rank_);
    std::swap(wait_player_reward_, other->wait_player_reward_);
    std::swap(arena_score_, other->arena_score_);
    std::swap(arena_result_, other->arena_result_);
    std::swap(arena_continue_win_, other->arena_continue_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageBattleReward::GetTypeName() const {
  return "jynetwork.proto.SCMessageBattleReward";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageLoginAuth::kResultFieldNumber;
const int SCMessageLoginAuth::kAccIdFieldNumber;
const int SCMessageLoginAuth::kSessionKeyFieldNumber;
const int SCMessageLoginAuth::kPortFieldNumber;
const int SCMessageLoginAuth::kGateIpFieldNumber;
const int SCMessageLoginAuth::kUserNameFieldNumber;
const int SCMessageLoginAuth::kSdkIdFieldNumber;
const int SCMessageLoginAuth::kIsNeedDisconnectFieldNumber;
const int SCMessageLoginAuth::kLangIdFieldNumber;
#endif  // !_MSC_VER

SCMessageLoginAuth::SCMessageLoginAuth()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageLoginAuth::InitAsDefaultInstance() {
}

SCMessageLoginAuth::SCMessageLoginAuth(const SCMessageLoginAuth& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageLoginAuth::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  acc_id_ = 0;
  session_key_ = 0u;
  port_ = 0u;
  gate_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sdk_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_need_disconnect_ = 0u;
  lang_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageLoginAuth::~SCMessageLoginAuth() {
  SharedDtor();
}

void SCMessageLoginAuth::SharedDtor() {
  if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_ip_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (sdk_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageLoginAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageLoginAuth& SCMessageLoginAuth::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageLoginAuth* SCMessageLoginAuth::default_instance_ = NULL;

SCMessageLoginAuth* SCMessageLoginAuth::New() const {
  return new SCMessageLoginAuth;
}

void SCMessageLoginAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    acc_id_ = 0;
    session_key_ = 0u;
    port_ = 0u;
    if (has_gate_ip()) {
      if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
        gate_ip_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_sdk_id()) {
      if (sdk_id_ != &::google::protobuf::internal::kEmptyString) {
        sdk_id_->clear();
      }
    }
    is_need_disconnect_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lang_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageLoginAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .jynetwork.proto.eLoginResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eLoginResult_IsValid(value)) {
            set_result(static_cast< ::jynetwork::proto::eLoginResult >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_acc_id;
        break;
      }

      // optional int32 acc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_session_key;
        break;
      }

      // optional uint32 session_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_key_)));
          set_has_session_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gate_ip;
        break;
      }

      // optional string gate_ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gate_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sdk_id;
        break;
      }

      // optional string sdk_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdk_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_need_disconnect;
        break;
      }

      // optional uint32 is_need_disconnect = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_need_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_need_disconnect_)));
          set_has_is_need_disconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lang_id;
        break;
      }

      // optional uint32 lang_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lang_id_)));
          set_has_lang_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageLoginAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .jynetwork.proto.eLoginResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int32 acc_id = 2;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->acc_id(), output);
  }

  // optional uint32 session_key = 3;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_key(), output);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // optional string gate_ip = 5;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gate_ip(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }

  // optional string sdk_id = 7;
  if (has_sdk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sdk_id(), output);
  }

  // optional uint32 is_need_disconnect = 8;
  if (has_is_need_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->is_need_disconnect(), output);
  }

  // optional uint32 lang_id = 9;
  if (has_lang_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->lang_id(), output);
  }

}

int SCMessageLoginAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .jynetwork.proto.eLoginResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 acc_id = 2;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acc_id());
    }

    // optional uint32 session_key = 3;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_key());
    }

    // optional uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional string gate_ip = 5;
    if (has_gate_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gate_ip());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string sdk_id = 7;
    if (has_sdk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk_id());
    }

    // optional uint32 is_need_disconnect = 8;
    if (has_is_need_disconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_need_disconnect());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 lang_id = 9;
    if (has_lang_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lang_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageLoginAuth::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageLoginAuth*>(&from));
}

void SCMessageLoginAuth::MergeFrom(const SCMessageLoginAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_gate_ip()) {
      set_gate_ip(from.gate_ip());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_sdk_id()) {
      set_sdk_id(from.sdk_id());
    }
    if (from.has_is_need_disconnect()) {
      set_is_need_disconnect(from.is_need_disconnect());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lang_id()) {
      set_lang_id(from.lang_id());
    }
  }
}

void SCMessageLoginAuth::CopyFrom(const SCMessageLoginAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageLoginAuth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCMessageLoginAuth::Swap(SCMessageLoginAuth* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(acc_id_, other->acc_id_);
    std::swap(session_key_, other->session_key_);
    std::swap(port_, other->port_);
    std::swap(gate_ip_, other->gate_ip_);
    std::swap(user_name_, other->user_name_);
    std::swap(sdk_id_, other->sdk_id_);
    std::swap(is_need_disconnect_, other->is_need_disconnect_);
    std::swap(lang_id_, other->lang_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageLoginAuth::GetTypeName() const {
  return "jynetwork.proto.SCMessageLoginAuth";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageGateAuth::kResultFieldNumber;
const int SCMessageGateAuth::kAccIdFieldNumber;
#endif  // !_MSC_VER

SCMessageGateAuth::SCMessageGateAuth()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageGateAuth::InitAsDefaultInstance() {
}

SCMessageGateAuth::SCMessageGateAuth(const SCMessageGateAuth& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageGateAuth::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  acc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageGateAuth::~SCMessageGateAuth() {
  SharedDtor();
}

void SCMessageGateAuth::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageGateAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageGateAuth& SCMessageGateAuth::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageGateAuth* SCMessageGateAuth::default_instance_ = NULL;

SCMessageGateAuth* SCMessageGateAuth::New() const {
  return new SCMessageGateAuth;
}

void SCMessageGateAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    acc_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageGateAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .jynetwork.proto.eLoginResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eLoginResult_IsValid(value)) {
            set_result(static_cast< ::jynetwork::proto::eLoginResult >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_acc_id;
        break;
      }

      // optional uint32 acc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageGateAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .jynetwork.proto.eLoginResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 acc_id = 2;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->acc_id(), output);
  }

}

int SCMessageGateAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .jynetwork.proto.eLoginResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 acc_id = 2;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageGateAuth::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageGateAuth*>(&from));
}

void SCMessageGateAuth::MergeFrom(const SCMessageGateAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
  }
}

void SCMessageGateAuth::CopyFrom(const SCMessageGateAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageGateAuth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCMessageGateAuth::Swap(SCMessageGateAuth* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(acc_id_, other->acc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageGateAuth::GetTypeName() const {
  return "jynetwork.proto.SCMessageGateAuth";
}


// ===================================================================

#ifndef _MSC_VER
const int sPlaneEquipStats::kUidFieldNumber;
const int sPlaneEquipStats::kEquipidFieldNumber;
const int sPlaneEquipStats::kLevelFieldNumber;
const int sPlaneEquipStats::kIntensifyFieldNumber;
const int sPlaneEquipStats::kExpFieldNumber;
const int sPlaneEquipStats::kStarlvFieldNumber;
const int sPlaneEquipStats::kOperFieldNumber;
#endif  // !_MSC_VER

sPlaneEquipStats::sPlaneEquipStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPlaneEquipStats::InitAsDefaultInstance() {
}

sPlaneEquipStats::sPlaneEquipStats(const sPlaneEquipStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPlaneEquipStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  equipid_ = 0u;
  level_ = 0u;
  intensify_ = 0u;
  exp_ = 0u;
  starlv_ = 0u;
  oper_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPlaneEquipStats::~sPlaneEquipStats() {
  SharedDtor();
}

void sPlaneEquipStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sPlaneEquipStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPlaneEquipStats& sPlaneEquipStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

sPlaneEquipStats* sPlaneEquipStats::default_instance_ = NULL;

sPlaneEquipStats* sPlaneEquipStats::New() const {
  return new sPlaneEquipStats;
}

void sPlaneEquipStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    equipid_ = 0u;
    level_ = 0u;
    intensify_ = 0u;
    exp_ = 0u;
    starlv_ = 0u;
    oper_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPlaneEquipStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipid;
        break;
      }

      // optional uint32 equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_intensify;
        break;
      }

      // optional uint32 intensify = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensify_)));
          set_has_intensify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_starlv;
        break;
      }

      // optional uint32 starlv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_oper;
        break;
      }

      // optional .jynetwork.proto.ePersonalOpertionType oper = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::ePersonalOpertionType_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::ePersonalOpertionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPlaneEquipStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equipid(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 intensify = 4;
  if (has_intensify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->intensify(), output);
  }

  // optional uint32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->exp(), output);
  }

  // optional uint32 starlv = 6;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->starlv(), output);
  }

  // optional .jynetwork.proto.ePersonalOpertionType oper = 7;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->oper(), output);
  }

}

int sPlaneEquipStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 intensify = 4;
    if (has_intensify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensify());
    }

    // optional uint32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 starlv = 6;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlv());
    }

    // optional .jynetwork.proto.ePersonalOpertionType oper = 7;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPlaneEquipStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPlaneEquipStats*>(&from));
}

void sPlaneEquipStats::MergeFrom(const sPlaneEquipStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_intensify()) {
      set_intensify(from.intensify());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
}

void sPlaneEquipStats::CopyFrom(const sPlaneEquipStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPlaneEquipStats::IsInitialized() const {

  return true;
}

void sPlaneEquipStats::Swap(sPlaneEquipStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(equipid_, other->equipid_);
    std::swap(level_, other->level_);
    std::swap(intensify_, other->intensify_);
    std::swap(exp_, other->exp_);
    std::swap(starlv_, other->starlv_);
    std::swap(oper_, other->oper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPlaneEquipStats::GetTypeName() const {
  return "jynetwork.proto.sPlaneEquipStats";
}


// ===================================================================

#ifndef _MSC_VER
const int SCUserDetailInfo::kAccIdFieldNumber;
const int SCUserDetailInfo::kIsnewcharFieldNumber;
const int SCUserDetailInfo::kIsfulldataFieldNumber;
const int SCUserDetailInfo::kSnameFieldNumber;
const int SCUserDetailInfo::kEquipIdFieldNumber;
const int SCUserDetailInfo::kTeamLvFieldNumber;
const int SCUserDetailInfo::kTeamExpFieldNumber;
const int SCUserDetailInfo::kCupScoreTotalFieldNumber;
const int SCUserDetailInfo::kCupScoreFieldNumber;
const int SCUserDetailInfo::kLeagueScoreTotalFieldNumber;
const int SCUserDetailInfo::kLeagueScoreFieldNumber;
const int SCUserDetailInfo::kWinTotalFieldNumber;
const int SCUserDetailInfo::kLostTotalFieldNumber;
const int SCUserDetailInfo::kEquipFieldNumber;
const int SCUserDetailInfo::kStatNumFieldNumber;
const int SCUserDetailInfo::kGuildidFieldNumber;
const int SCUserDetailInfo::kViplevelFieldNumber;
const int SCUserDetailInfo::kVipexpFieldNumber;
const int SCUserDetailInfo::kMoneyFieldNumber;
const int SCUserDetailInfo::kDiamondsFieldNumber;
const int SCUserDetailInfo::kCharslotFieldNumber;
const int SCUserDetailInfo::kGuideFieldNumber;
const int SCUserDetailInfo::kCharsFieldNumber;
const int SCUserDetailInfo::kCardsFieldNumber;
const int SCUserDetailInfo::kItemFieldNumber;
const int SCUserDetailInfo::kCastlesFieldNumber;
const int SCUserDetailInfo::kStaminanowFieldNumber;
const int SCUserDetailInfo::kStaminamaxFieldNumber;
const int SCUserDetailInfo::kSkillsFieldNumber;
const int SCUserDetailInfo::kTasksFieldNumber;
const int SCUserDetailInfo::kBuyStaminaFieldNumber;
const int SCUserDetailInfo::kBuyGoldFieldNumber;
const int SCUserDetailInfo::kRefreshShopFieldNumber;
const int SCUserDetailInfo::kLastCastleFieldNumber;
const int SCUserDetailInfo::kShowNewMapFieldNumber;
const int SCUserDetailInfo::kWeekLoginFieldNumber;
const int SCUserDetailInfo::kWeekDayLoginFieldNumber;
const int SCUserDetailInfo::kWeekItemFieldNumber;
const int SCUserDetailInfo::kOperIndexFieldNumber;
const int SCUserDetailInfo::kResetFreeFieldNumber;
const int SCUserDetailInfo::kResetTimeFieldNumber;
const int SCUserDetailInfo::kEndlessWaveFieldNumber;
const int SCUserDetailInfo::kCorpsGuideFieldNumber;
const int SCUserDetailInfo::kTotalChargeFieldNumber;
const int SCUserDetailInfo::kDayChargeFieldNumber;
const int SCUserDetailInfo::kMonthCardFieldNumber;
const int SCUserDetailInfo::kForeverCardFieldNumber;
const int SCUserDetailInfo::kSysSettingFieldNumber;
const int SCUserDetailInfo::kTodayRouletteFieldNumber;
const int SCUserDetailInfo::kTodayTenRouletteFieldNumber;
const int SCUserDetailInfo::kTodaySmallChargeFieldNumber;
const int SCUserDetailInfo::kCrystalFieldNumber;
const int SCUserDetailInfo::kDoubleOpenFieldNumber;
const int SCUserDetailInfo::kEndlessCheckWaveFieldNumber;
const int SCUserDetailInfo::kEndlessCheckScoreFieldNumber;
const int SCUserDetailInfo::kCheckPointFieldNumber;
const int SCUserDetailInfo::kIsCheatFieldNumber;
const int SCUserDetailInfo::kServerLocalTimeFieldNumber;
const int SCUserDetailInfo::kCreateTimeFieldNumber;
const int SCUserDetailInfo::kLoginTimeFieldNumber;
#endif  // !_MSC_VER

SCUserDetailInfo::SCUserDetailInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCUserDetailInfo::InitAsDefaultInstance() {
}

SCUserDetailInfo::SCUserDetailInfo(const SCUserDetailInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCUserDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  acc_id_ = 0u;
  isnewchar_ = 0u;
  isfulldata_ = 0u;
  sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_lv_ = 0u;
  team_exp_ = 0u;
  cup_score_total_ = 0u;
  cup_score_ = 0u;
  league_score_total_ = 0u;
  league_score_ = 0u;
  win_total_ = 0u;
  lost_total_ = 0u;
  stat_num_ = GOOGLE_ULONGLONG(0);
  guildid_ = 0u;
  viplevel_ = 0u;
  vipexp_ = 0u;
  money_ = 0;
  diamonds_ = 0;
  charslot_ = 0u;
  guide_ = 0u;
  staminanow_ = 0u;
  staminamax_ = 0u;
  buy_stamina_ = 0u;
  buy_gold_ = 0u;
  show_new_map_ = 0u;
  week_login_ = 0u;
  week_day_login_ = 0u;
  oper_index_ = 0u;
  endless_wave_ = 0u;
  corps_guide_ = 0u;
  total_charge_ = 0u;
  day_charge_ = 0u;
  month_card_ = 0u;
  forever_card_ = 0u;
  sys_setting_ = 0u;
  today_roulette_ = 0u;
  today_ten_roulette_ = 0u;
  today_small_charge_ = 0u;
  crystal_ = 0u;
  double_open_ = 0u;
  endless_check_wave_ = 0u;
  endless_check_score_ = 0u;
  check_point_ = 0u;
  is_cheat_ = 0u;
  server_local_time_ = 0u;
  create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCUserDetailInfo::~SCUserDetailInfo() {
  SharedDtor();
}

void SCUserDetailInfo::SharedDtor() {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    delete sname_;
  }
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_;
  }
  if (login_time_ != &::google::protobuf::internal::kEmptyString) {
    delete login_time_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCUserDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCUserDetailInfo& SCUserDetailInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCUserDetailInfo* SCUserDetailInfo::default_instance_ = NULL;

SCUserDetailInfo* SCUserDetailInfo::New() const {
  return new SCUserDetailInfo;
}

void SCUserDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    acc_id_ = 0u;
    isnewchar_ = 0u;
    isfulldata_ = 0u;
    if (has_sname()) {
      if (sname_ != &::google::protobuf::internal::kEmptyString) {
        sname_->clear();
      }
    }
    team_lv_ = 0u;
    team_exp_ = 0u;
    cup_score_total_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cup_score_ = 0u;
    league_score_total_ = 0u;
    league_score_ = 0u;
    win_total_ = 0u;
    lost_total_ = 0u;
    stat_num_ = GOOGLE_ULONGLONG(0);
    guildid_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    viplevel_ = 0u;
    vipexp_ = 0u;
    money_ = 0;
    diamonds_ = 0;
    charslot_ = 0u;
    guide_ = 0u;
  }
  if (_has_bits_[26 / 32] & (0xffu << (26 % 32))) {
    staminanow_ = 0u;
    staminamax_ = 0u;
    buy_stamina_ = 0u;
    buy_gold_ = 0u;
  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    show_new_map_ = 0u;
    week_login_ = 0u;
    week_day_login_ = 0u;
    oper_index_ = 0u;
  }
  if (_has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    endless_wave_ = 0u;
    corps_guide_ = 0u;
    total_charge_ = 0u;
    day_charge_ = 0u;
    month_card_ = 0u;
    forever_card_ = 0u;
    sys_setting_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    today_roulette_ = 0u;
    today_ten_roulette_ = 0u;
    today_small_charge_ = 0u;
    crystal_ = 0u;
    double_open_ = 0u;
    endless_check_wave_ = 0u;
    endless_check_score_ = 0u;
    check_point_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    is_cheat_ = 0u;
    server_local_time_ = 0u;
    if (has_create_time()) {
      if (create_time_ != &::google::protobuf::internal::kEmptyString) {
        create_time_->clear();
      }
    }
    if (has_login_time()) {
      if (login_time_ != &::google::protobuf::internal::kEmptyString) {
        login_time_->clear();
      }
    }
  }
  equip_id_.Clear();
  equip_.Clear();
  chars_.Clear();
  cards_.Clear();
  item_.Clear();
  castles_.Clear();
  skills_.Clear();
  tasks_.Clear();
  refresh_shop_.Clear();
  last_castle_.Clear();
  week_item_.Clear();
  reset_free_.Clear();
  reset_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCUserDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 acc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isnewchar;
        break;
      }

      // optional uint32 isnewchar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isnewchar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isnewchar_)));
          set_has_isnewchar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isfulldata;
        break;
      }

      // optional uint32 isfulldata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isfulldata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfulldata_)));
          set_has_isfulldata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sname;
        break;
      }

      // optional string sname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equip_id;
        break;
      }

      // repeated uint32 equip_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_equip_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equip_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equip_id;
        if (input->ExpectTag(48)) goto parse_team_lv;
        break;
      }

      // optional uint32 team_lv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_lv_)));
          set_has_team_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_team_exp;
        break;
      }

      // optional uint32 team_exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_exp_)));
          set_has_team_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cup_score_total;
        break;
      }

      // optional uint32 cup_score_total = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cup_score_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cup_score_total_)));
          set_has_cup_score_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cup_score;
        break;
      }

      // optional uint32 cup_score = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cup_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cup_score_)));
          set_has_cup_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_league_score_total;
        break;
      }

      // optional uint32 league_score_total = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_score_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_score_total_)));
          set_has_league_score_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_league_score;
        break;
      }

      // optional uint32 league_score = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_score_)));
          set_has_league_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_win_total;
        break;
      }

      // optional uint32 win_total = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_total_)));
          set_has_win_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_lost_total;
        break;
      }

      // optional uint32 lost_total = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lost_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lost_total_)));
          set_has_lost_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_equip;
        break;
      }

      // repeated .jynetwork.proto.sPlaneEquipStats equip = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_equip;
        if (input->ExpectTag(120)) goto parse_stat_num;
        break;
      }

      // optional uint64 stat_num = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stat_num_)));
          set_has_stat_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7248)) goto parse_guildid;
        break;
      }

      // optional uint32 guildid = 906;
      case 906: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7256)) goto parse_viplevel;
        break;
      }

      // optional uint32 viplevel = 907;
      case 907: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7264)) goto parse_vipexp;
        break;
      }

      // optional uint32 vipexp = 908;
      case 908: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7272)) goto parse_money;
        break;
      }

      // optional int32 money = 909;
      case 909: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7280)) goto parse_diamonds;
        break;
      }

      // optional int32 diamonds = 910;
      case 910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamonds_)));
          set_has_diamonds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7288)) goto parse_charslot;
        break;
      }

      // optional uint32 charslot = 911;
      case 911: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charslot_)));
          set_has_charslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7296)) goto parse_guide;
        break;
      }

      // optional uint32 guide = 912;
      case 912: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guide_)));
          set_has_guide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7306)) goto parse_chars;
        break;
      }

      // repeated .jynetwork.proto.sCharactorInit chars = 913;
      case 913: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7306)) goto parse_chars;
        if (input->ExpectTag(7314)) goto parse_cards;
        break;
      }

      // repeated .jynetwork.proto.sPersonCardStats cards = 914;
      case 914: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7314)) goto parse_cards;
        if (input->ExpectTag(7330)) goto parse_item;
        break;
      }

      // repeated .jynetwork.proto.sPersonItemStats item = 916;
      case 916: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7330)) goto parse_item;
        if (input->ExpectTag(7338)) goto parse_castles;
        break;
      }

      // repeated .jynetwork.proto.sCastleInfo castles = 917;
      case 917: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_castles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_castles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7338)) goto parse_castles;
        if (input->ExpectTag(7344)) goto parse_staminanow;
        break;
      }

      // optional uint32 staminanow = 918;
      case 918: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_staminanow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &staminanow_)));
          set_has_staminanow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7352)) goto parse_staminamax;
        break;
      }

      // optional uint32 staminamax = 919;
      case 919: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_staminamax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &staminamax_)));
          set_has_staminamax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7362)) goto parse_skills;
        break;
      }

      // repeated .jynetwork.proto.sPersonSkillStats skills = 920;
      case 920: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7362)) goto parse_skills;
        if (input->ExpectTag(7370)) goto parse_tasks;
        break;
      }

      // repeated .jynetwork.proto.sPersonTaskStats tasks = 921;
      case 921: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7370)) goto parse_tasks;
        if (input->ExpectTag(7376)) goto parse_buy_stamina;
        break;
      }

      // optional uint32 buy_stamina = 922;
      case 922: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_stamina_)));
          set_has_buy_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7384)) goto parse_buy_gold;
        break;
      }

      // optional uint32 buy_gold = 923;
      case 923: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_gold_)));
          set_has_buy_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7392)) goto parse_refresh_shop;
        break;
      }

      // repeated uint32 refresh_shop = 924;
      case 924: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_shop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 7392, input, this->mutable_refresh_shop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_refresh_shop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7392)) goto parse_refresh_shop;
        if (input->ExpectTag(7482)) goto parse_last_castle;
        break;
      }

      // repeated .jynetwork.proto.sCastleInfo last_castle = 935;
      case 935: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_castle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last_castle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7482)) goto parse_last_castle;
        if (input->ExpectTag(7488)) goto parse_show_new_map;
        break;
      }

      // optional uint32 show_new_map = 936;
      case 936: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_new_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_new_map_)));
          set_has_show_new_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7496)) goto parse_week_login;
        break;
      }

      // optional uint32 week_login = 937;
      case 937: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_login_)));
          set_has_week_login();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7504)) goto parse_week_day_login;
        break;
      }

      // optional uint32 week_day_login = 938;
      case 938: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_day_login_)));
          set_has_week_day_login();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7514)) goto parse_week_item;
        break;
      }

      // repeated .jynetwork.proto.sPersonItemStats week_item = 939;
      case 939: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_week_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_week_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7514)) goto parse_week_item;
        if (input->ExpectTag(7520)) goto parse_oper_index;
        break;
      }

      // optional uint32 oper_index = 940;
      case 940: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_index_)));
          set_has_oper_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7528)) goto parse_reset_free;
        break;
      }

      // repeated uint32 reset_free = 941;
      case 941: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 7528, input, this->mutable_reset_free())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reset_free())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7528)) goto parse_reset_free;
        if (input->ExpectTag(7544)) goto parse_reset_time;
        break;
      }

      // repeated uint32 reset_time = 943;
      case 943: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 7544, input, this->mutable_reset_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reset_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7544)) goto parse_reset_time;
        if (input->ExpectTag(7552)) goto parse_endless_wave;
        break;
      }

      // optional uint32 endless_wave = 944;
      case 944: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endless_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endless_wave_)));
          set_has_endless_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7560)) goto parse_corps_guide;
        break;
      }

      // optional uint32 corps_guide = 945;
      case 945: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps_guide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_guide_)));
          set_has_corps_guide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7568)) goto parse_total_charge;
        break;
      }

      // optional uint32 total_charge = 946;
      case 946: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_charge_)));
          set_has_total_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7576)) goto parse_day_charge;
        break;
      }

      // optional uint32 day_charge = 947;
      case 947: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_charge_)));
          set_has_day_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7584)) goto parse_month_card;
        break;
      }

      // optional uint32 month_card = 948;
      case 948: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_card_)));
          set_has_month_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7592)) goto parse_forever_card;
        break;
      }

      // optional uint32 forever_card = 949;
      case 949: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forever_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forever_card_)));
          set_has_forever_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7600)) goto parse_sys_setting;
        break;
      }

      // optional uint32 sys_setting = 950;
      case 950: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sys_setting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sys_setting_)));
          set_has_sys_setting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7608)) goto parse_today_roulette;
        break;
      }

      // optional uint32 today_roulette = 951;
      case 951: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_roulette:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_roulette_)));
          set_has_today_roulette();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7616)) goto parse_today_ten_roulette;
        break;
      }

      // optional uint32 today_ten_roulette = 952;
      case 952: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_ten_roulette:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_ten_roulette_)));
          set_has_today_ten_roulette();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7624)) goto parse_today_small_charge;
        break;
      }

      // optional uint32 today_small_charge = 953;
      case 953: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_small_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_small_charge_)));
          set_has_today_small_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7632)) goto parse_crystal;
        break;
      }

      // optional uint32 crystal = 954;
      case 954: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystal_)));
          set_has_crystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7640)) goto parse_double_open;
        break;
      }

      // optional uint32 double_open = 955;
      case 955: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_double_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &double_open_)));
          set_has_double_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7648)) goto parse_endless_check_wave;
        break;
      }

      // optional uint32 endless_check_wave = 956;
      case 956: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endless_check_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endless_check_wave_)));
          set_has_endless_check_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7656)) goto parse_endless_check_score;
        break;
      }

      // optional uint32 endless_check_score = 957;
      case 957: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endless_check_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endless_check_score_)));
          set_has_endless_check_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7664)) goto parse_check_point;
        break;
      }

      // optional uint32 check_point = 958;
      case 958: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_point_)));
          set_has_check_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7992)) goto parse_is_cheat;
        break;
      }

      // optional uint32 is_cheat = 999;
      case 999: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_cheat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_cheat_)));
          set_has_is_cheat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80800)) goto parse_server_local_time;
        break;
      }

      // optional uint32 server_local_time = 10100;
      case 10100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_local_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_local_time_)));
          set_has_server_local_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80810)) goto parse_create_time;
        break;
      }

      // optional string create_time = 10101;
      case 10101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80818)) goto parse_login_time;
        break;
      }

      // optional string login_time = 10102;
      case 10102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCUserDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 acc_id = 1;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->acc_id(), output);
  }

  // optional uint32 isnewchar = 2;
  if (has_isnewchar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isnewchar(), output);
  }

  // optional uint32 isfulldata = 3;
  if (has_isfulldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isfulldata(), output);
  }

  // optional string sname = 4;
  if (has_sname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sname(), output);
  }

  // repeated uint32 equip_id = 5;
  for (int i = 0; i < this->equip_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->equip_id(i), output);
  }

  // optional uint32 team_lv = 6;
  if (has_team_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_lv(), output);
  }

  // optional uint32 team_exp = 7;
  if (has_team_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team_exp(), output);
  }

  // optional uint32 cup_score_total = 8;
  if (has_cup_score_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cup_score_total(), output);
  }

  // optional uint32 cup_score = 9;
  if (has_cup_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cup_score(), output);
  }

  // optional uint32 league_score_total = 10;
  if (has_league_score_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->league_score_total(), output);
  }

  // optional uint32 league_score = 11;
  if (has_league_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->league_score(), output);
  }

  // optional uint32 win_total = 12;
  if (has_win_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->win_total(), output);
  }

  // optional uint32 lost_total = 13;
  if (has_lost_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->lost_total(), output);
  }

  // repeated .jynetwork.proto.sPlaneEquipStats equip = 14;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->equip(i), output);
  }

  // optional uint64 stat_num = 15;
  if (has_stat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->stat_num(), output);
  }

  // optional uint32 guildid = 906;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(906, this->guildid(), output);
  }

  // optional uint32 viplevel = 907;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(907, this->viplevel(), output);
  }

  // optional uint32 vipexp = 908;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(908, this->vipexp(), output);
  }

  // optional int32 money = 909;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(909, this->money(), output);
  }

  // optional int32 diamonds = 910;
  if (has_diamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(910, this->diamonds(), output);
  }

  // optional uint32 charslot = 911;
  if (has_charslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(911, this->charslot(), output);
  }

  // optional uint32 guide = 912;
  if (has_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(912, this->guide(), output);
  }

  // repeated .jynetwork.proto.sCharactorInit chars = 913;
  for (int i = 0; i < this->chars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      913, this->chars(i), output);
  }

  // repeated .jynetwork.proto.sPersonCardStats cards = 914;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      914, this->cards(i), output);
  }

  // repeated .jynetwork.proto.sPersonItemStats item = 916;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      916, this->item(i), output);
  }

  // repeated .jynetwork.proto.sCastleInfo castles = 917;
  for (int i = 0; i < this->castles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      917, this->castles(i), output);
  }

  // optional uint32 staminanow = 918;
  if (has_staminanow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(918, this->staminanow(), output);
  }

  // optional uint32 staminamax = 919;
  if (has_staminamax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(919, this->staminamax(), output);
  }

  // repeated .jynetwork.proto.sPersonSkillStats skills = 920;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      920, this->skills(i), output);
  }

  // repeated .jynetwork.proto.sPersonTaskStats tasks = 921;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      921, this->tasks(i), output);
  }

  // optional uint32 buy_stamina = 922;
  if (has_buy_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(922, this->buy_stamina(), output);
  }

  // optional uint32 buy_gold = 923;
  if (has_buy_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(923, this->buy_gold(), output);
  }

  // repeated uint32 refresh_shop = 924;
  for (int i = 0; i < this->refresh_shop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      924, this->refresh_shop(i), output);
  }

  // repeated .jynetwork.proto.sCastleInfo last_castle = 935;
  for (int i = 0; i < this->last_castle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      935, this->last_castle(i), output);
  }

  // optional uint32 show_new_map = 936;
  if (has_show_new_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(936, this->show_new_map(), output);
  }

  // optional uint32 week_login = 937;
  if (has_week_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(937, this->week_login(), output);
  }

  // optional uint32 week_day_login = 938;
  if (has_week_day_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(938, this->week_day_login(), output);
  }

  // repeated .jynetwork.proto.sPersonItemStats week_item = 939;
  for (int i = 0; i < this->week_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      939, this->week_item(i), output);
  }

  // optional uint32 oper_index = 940;
  if (has_oper_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(940, this->oper_index(), output);
  }

  // repeated uint32 reset_free = 941;
  for (int i = 0; i < this->reset_free_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      941, this->reset_free(i), output);
  }

  // repeated uint32 reset_time = 943;
  for (int i = 0; i < this->reset_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      943, this->reset_time(i), output);
  }

  // optional uint32 endless_wave = 944;
  if (has_endless_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(944, this->endless_wave(), output);
  }

  // optional uint32 corps_guide = 945;
  if (has_corps_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(945, this->corps_guide(), output);
  }

  // optional uint32 total_charge = 946;
  if (has_total_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(946, this->total_charge(), output);
  }

  // optional uint32 day_charge = 947;
  if (has_day_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(947, this->day_charge(), output);
  }

  // optional uint32 month_card = 948;
  if (has_month_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(948, this->month_card(), output);
  }

  // optional uint32 forever_card = 949;
  if (has_forever_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(949, this->forever_card(), output);
  }

  // optional uint32 sys_setting = 950;
  if (has_sys_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(950, this->sys_setting(), output);
  }

  // optional uint32 today_roulette = 951;
  if (has_today_roulette()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(951, this->today_roulette(), output);
  }

  // optional uint32 today_ten_roulette = 952;
  if (has_today_ten_roulette()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(952, this->today_ten_roulette(), output);
  }

  // optional uint32 today_small_charge = 953;
  if (has_today_small_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(953, this->today_small_charge(), output);
  }

  // optional uint32 crystal = 954;
  if (has_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(954, this->crystal(), output);
  }

  // optional uint32 double_open = 955;
  if (has_double_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(955, this->double_open(), output);
  }

  // optional uint32 endless_check_wave = 956;
  if (has_endless_check_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(956, this->endless_check_wave(), output);
  }

  // optional uint32 endless_check_score = 957;
  if (has_endless_check_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(957, this->endless_check_score(), output);
  }

  // optional uint32 check_point = 958;
  if (has_check_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(958, this->check_point(), output);
  }

  // optional uint32 is_cheat = 999;
  if (has_is_cheat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(999, this->is_cheat(), output);
  }

  // optional uint32 server_local_time = 10100;
  if (has_server_local_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10100, this->server_local_time(), output);
  }

  // optional string create_time = 10101;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10101, this->create_time(), output);
  }

  // optional string login_time = 10102;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10102, this->login_time(), output);
  }

}

int SCUserDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 acc_id = 1;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_id());
    }

    // optional uint32 isnewchar = 2;
    if (has_isnewchar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isnewchar());
    }

    // optional uint32 isfulldata = 3;
    if (has_isfulldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfulldata());
    }

    // optional string sname = 4;
    if (has_sname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sname());
    }

    // optional uint32 team_lv = 6;
    if (has_team_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_lv());
    }

    // optional uint32 team_exp = 7;
    if (has_team_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_exp());
    }

    // optional uint32 cup_score_total = 8;
    if (has_cup_score_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cup_score_total());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 cup_score = 9;
    if (has_cup_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cup_score());
    }

    // optional uint32 league_score_total = 10;
    if (has_league_score_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_score_total());
    }

    // optional uint32 league_score = 11;
    if (has_league_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_score());
    }

    // optional uint32 win_total = 12;
    if (has_win_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_total());
    }

    // optional uint32 lost_total = 13;
    if (has_lost_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lost_total());
    }

    // optional uint64 stat_num = 15;
    if (has_stat_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stat_num());
    }

    // optional uint32 guildid = 906;
    if (has_guildid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 viplevel = 907;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint32 vipexp = 908;
    if (has_vipexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipexp());
    }

    // optional int32 money = 909;
    if (has_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 diamonds = 910;
    if (has_diamonds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamonds());
    }

    // optional uint32 charslot = 911;
    if (has_charslot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charslot());
    }

    // optional uint32 guide = 912;
    if (has_guide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guide());
    }

  }
  if (_has_bits_[26 / 32] & (0xffu << (26 % 32))) {
    // optional uint32 staminanow = 918;
    if (has_staminanow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->staminanow());
    }

    // optional uint32 staminamax = 919;
    if (has_staminamax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->staminamax());
    }

    // optional uint32 buy_stamina = 922;
    if (has_buy_stamina()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_stamina());
    }

    // optional uint32 buy_gold = 923;
    if (has_buy_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_gold());
    }

  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    // optional uint32 show_new_map = 936;
    if (has_show_new_map()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_new_map());
    }

    // optional uint32 week_login = 937;
    if (has_week_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_login());
    }

    // optional uint32 week_day_login = 938;
    if (has_week_day_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_day_login());
    }

    // optional uint32 oper_index = 940;
    if (has_oper_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_index());
    }

  }
  if (_has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    // optional uint32 endless_wave = 944;
    if (has_endless_wave()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endless_wave());
    }

    // optional uint32 corps_guide = 945;
    if (has_corps_guide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_guide());
    }

    // optional uint32 total_charge = 946;
    if (has_total_charge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_charge());
    }

    // optional uint32 day_charge = 947;
    if (has_day_charge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day_charge());
    }

    // optional uint32 month_card = 948;
    if (has_month_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month_card());
    }

    // optional uint32 forever_card = 949;
    if (has_forever_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forever_card());
    }

    // optional uint32 sys_setting = 950;
    if (has_sys_setting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sys_setting());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 today_roulette = 951;
    if (has_today_roulette()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_roulette());
    }

    // optional uint32 today_ten_roulette = 952;
    if (has_today_ten_roulette()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_ten_roulette());
    }

    // optional uint32 today_small_charge = 953;
    if (has_today_small_charge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_small_charge());
    }

    // optional uint32 crystal = 954;
    if (has_crystal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystal());
    }

    // optional uint32 double_open = 955;
    if (has_double_open()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->double_open());
    }

    // optional uint32 endless_check_wave = 956;
    if (has_endless_check_wave()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endless_check_wave());
    }

    // optional uint32 endless_check_score = 957;
    if (has_endless_check_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endless_check_score());
    }

    // optional uint32 check_point = 958;
    if (has_check_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check_point());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 is_cheat = 999;
    if (has_is_cheat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_cheat());
    }

    // optional uint32 server_local_time = 10100;
    if (has_server_local_time()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_local_time());
    }

    // optional string create_time = 10101;
    if (has_create_time()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_time());
    }

    // optional string login_time = 10102;
    if (has_login_time()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_time());
    }

  }
  // repeated uint32 equip_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->equip_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equip_id(i));
    }
    total_size += 1 * this->equip_id_size() + data_size;
  }

  // repeated .jynetwork.proto.sPlaneEquipStats equip = 14;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .jynetwork.proto.sCharactorInit chars = 913;
  total_size += 2 * this->chars_size();
  for (int i = 0; i < this->chars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chars(i));
  }

  // repeated .jynetwork.proto.sPersonCardStats cards = 914;
  total_size += 2 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  // repeated .jynetwork.proto.sPersonItemStats item = 916;
  total_size += 2 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .jynetwork.proto.sCastleInfo castles = 917;
  total_size += 2 * this->castles_size();
  for (int i = 0; i < this->castles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->castles(i));
  }

  // repeated .jynetwork.proto.sPersonSkillStats skills = 920;
  total_size += 2 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  // repeated .jynetwork.proto.sPersonTaskStats tasks = 921;
  total_size += 2 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  // repeated uint32 refresh_shop = 924;
  {
    int data_size = 0;
    for (int i = 0; i < this->refresh_shop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->refresh_shop(i));
    }
    total_size += 2 * this->refresh_shop_size() + data_size;
  }

  // repeated .jynetwork.proto.sCastleInfo last_castle = 935;
  total_size += 2 * this->last_castle_size();
  for (int i = 0; i < this->last_castle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->last_castle(i));
  }

  // repeated .jynetwork.proto.sPersonItemStats week_item = 939;
  total_size += 2 * this->week_item_size();
  for (int i = 0; i < this->week_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->week_item(i));
  }

  // repeated uint32 reset_free = 941;
  {
    int data_size = 0;
    for (int i = 0; i < this->reset_free_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reset_free(i));
    }
    total_size += 2 * this->reset_free_size() + data_size;
  }

  // repeated uint32 reset_time = 943;
  {
    int data_size = 0;
    for (int i = 0; i < this->reset_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reset_time(i));
    }
    total_size += 2 * this->reset_time_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCUserDetailInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCUserDetailInfo*>(&from));
}

void SCUserDetailInfo::MergeFrom(const SCUserDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_id_.MergeFrom(from.equip_id_);
  equip_.MergeFrom(from.equip_);
  chars_.MergeFrom(from.chars_);
  cards_.MergeFrom(from.cards_);
  item_.MergeFrom(from.item_);
  castles_.MergeFrom(from.castles_);
  skills_.MergeFrom(from.skills_);
  tasks_.MergeFrom(from.tasks_);
  refresh_shop_.MergeFrom(from.refresh_shop_);
  last_castle_.MergeFrom(from.last_castle_);
  week_item_.MergeFrom(from.week_item_);
  reset_free_.MergeFrom(from.reset_free_);
  reset_time_.MergeFrom(from.reset_time_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_isnewchar()) {
      set_isnewchar(from.isnewchar());
    }
    if (from.has_isfulldata()) {
      set_isfulldata(from.isfulldata());
    }
    if (from.has_sname()) {
      set_sname(from.sname());
    }
    if (from.has_team_lv()) {
      set_team_lv(from.team_lv());
    }
    if (from.has_team_exp()) {
      set_team_exp(from.team_exp());
    }
    if (from.has_cup_score_total()) {
      set_cup_score_total(from.cup_score_total());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cup_score()) {
      set_cup_score(from.cup_score());
    }
    if (from.has_league_score_total()) {
      set_league_score_total(from.league_score_total());
    }
    if (from.has_league_score()) {
      set_league_score(from.league_score());
    }
    if (from.has_win_total()) {
      set_win_total(from.win_total());
    }
    if (from.has_lost_total()) {
      set_lost_total(from.lost_total());
    }
    if (from.has_stat_num()) {
      set_stat_num(from.stat_num());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_diamonds()) {
      set_diamonds(from.diamonds());
    }
    if (from.has_charslot()) {
      set_charslot(from.charslot());
    }
    if (from.has_guide()) {
      set_guide(from.guide());
    }
  }
  if (from._has_bits_[26 / 32] & (0xffu << (26 % 32))) {
    if (from.has_staminanow()) {
      set_staminanow(from.staminanow());
    }
    if (from.has_staminamax()) {
      set_staminamax(from.staminamax());
    }
    if (from.has_buy_stamina()) {
      set_buy_stamina(from.buy_stamina());
    }
    if (from.has_buy_gold()) {
      set_buy_gold(from.buy_gold());
    }
  }
  if (from._has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (from.has_show_new_map()) {
      set_show_new_map(from.show_new_map());
    }
    if (from.has_week_login()) {
      set_week_login(from.week_login());
    }
    if (from.has_week_day_login()) {
      set_week_day_login(from.week_day_login());
    }
    if (from.has_oper_index()) {
      set_oper_index(from.oper_index());
    }
  }
  if (from._has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    if (from.has_endless_wave()) {
      set_endless_wave(from.endless_wave());
    }
    if (from.has_corps_guide()) {
      set_corps_guide(from.corps_guide());
    }
    if (from.has_total_charge()) {
      set_total_charge(from.total_charge());
    }
    if (from.has_day_charge()) {
      set_day_charge(from.day_charge());
    }
    if (from.has_month_card()) {
      set_month_card(from.month_card());
    }
    if (from.has_forever_card()) {
      set_forever_card(from.forever_card());
    }
    if (from.has_sys_setting()) {
      set_sys_setting(from.sys_setting());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_today_roulette()) {
      set_today_roulette(from.today_roulette());
    }
    if (from.has_today_ten_roulette()) {
      set_today_ten_roulette(from.today_ten_roulette());
    }
    if (from.has_today_small_charge()) {
      set_today_small_charge(from.today_small_charge());
    }
    if (from.has_crystal()) {
      set_crystal(from.crystal());
    }
    if (from.has_double_open()) {
      set_double_open(from.double_open());
    }
    if (from.has_endless_check_wave()) {
      set_endless_check_wave(from.endless_check_wave());
    }
    if (from.has_endless_check_score()) {
      set_endless_check_score(from.endless_check_score());
    }
    if (from.has_check_point()) {
      set_check_point(from.check_point());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_is_cheat()) {
      set_is_cheat(from.is_cheat());
    }
    if (from.has_server_local_time()) {
      set_server_local_time(from.server_local_time());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
  }
}

void SCUserDetailInfo::CopyFrom(const SCUserDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserDetailInfo::IsInitialized() const {

  return true;
}

void SCUserDetailInfo::Swap(SCUserDetailInfo* other) {
  if (other != this) {
    std::swap(acc_id_, other->acc_id_);
    std::swap(isnewchar_, other->isnewchar_);
    std::swap(isfulldata_, other->isfulldata_);
    std::swap(sname_, other->sname_);
    equip_id_.Swap(&other->equip_id_);
    std::swap(team_lv_, other->team_lv_);
    std::swap(team_exp_, other->team_exp_);
    std::swap(cup_score_total_, other->cup_score_total_);
    std::swap(cup_score_, other->cup_score_);
    std::swap(league_score_total_, other->league_score_total_);
    std::swap(league_score_, other->league_score_);
    std::swap(win_total_, other->win_total_);
    std::swap(lost_total_, other->lost_total_);
    equip_.Swap(&other->equip_);
    std::swap(stat_num_, other->stat_num_);
    std::swap(guildid_, other->guildid_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(money_, other->money_);
    std::swap(diamonds_, other->diamonds_);
    std::swap(charslot_, other->charslot_);
    std::swap(guide_, other->guide_);
    chars_.Swap(&other->chars_);
    cards_.Swap(&other->cards_);
    item_.Swap(&other->item_);
    castles_.Swap(&other->castles_);
    std::swap(staminanow_, other->staminanow_);
    std::swap(staminamax_, other->staminamax_);
    skills_.Swap(&other->skills_);
    tasks_.Swap(&other->tasks_);
    std::swap(buy_stamina_, other->buy_stamina_);
    std::swap(buy_gold_, other->buy_gold_);
    refresh_shop_.Swap(&other->refresh_shop_);
    last_castle_.Swap(&other->last_castle_);
    std::swap(show_new_map_, other->show_new_map_);
    std::swap(week_login_, other->week_login_);
    std::swap(week_day_login_, other->week_day_login_);
    week_item_.Swap(&other->week_item_);
    std::swap(oper_index_, other->oper_index_);
    reset_free_.Swap(&other->reset_free_);
    reset_time_.Swap(&other->reset_time_);
    std::swap(endless_wave_, other->endless_wave_);
    std::swap(corps_guide_, other->corps_guide_);
    std::swap(total_charge_, other->total_charge_);
    std::swap(day_charge_, other->day_charge_);
    std::swap(month_card_, other->month_card_);
    std::swap(forever_card_, other->forever_card_);
    std::swap(sys_setting_, other->sys_setting_);
    std::swap(today_roulette_, other->today_roulette_);
    std::swap(today_ten_roulette_, other->today_ten_roulette_);
    std::swap(today_small_charge_, other->today_small_charge_);
    std::swap(crystal_, other->crystal_);
    std::swap(double_open_, other->double_open_);
    std::swap(endless_check_wave_, other->endless_check_wave_);
    std::swap(endless_check_score_, other->endless_check_score_);
    std::swap(check_point_, other->check_point_);
    std::swap(is_cheat_, other->is_cheat_);
    std::swap(server_local_time_, other->server_local_time_);
    std::swap(create_time_, other->create_time_);
    std::swap(login_time_, other->login_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCUserDetailInfo::GetTypeName() const {
  return "jynetwork.proto.SCUserDetailInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageOperationResult::kResultFieldNumber;
const int SCMessageOperationResult::kOperatinFieldNumber;
const int SCMessageOperationResult::kAccIdFieldNumber;
const int SCMessageOperationResult::kBonusFieldNumber;
const int SCMessageOperationResult::kNextItemFieldNumber;
const int SCMessageOperationResult::kOperValueFieldNumber;
const int SCMessageOperationResult::kSimpleItemFieldNumber;
const int SCMessageOperationResult::kOperValue2FieldNumber;
#endif  // !_MSC_VER

SCMessageOperationResult::SCMessageOperationResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageOperationResult::InitAsDefaultInstance() {
}

SCMessageOperationResult::SCMessageOperationResult(const SCMessageOperationResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageOperationResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  operatin_ = 1;
  acc_id_ = 0u;
  bonus_ = 0u;
  next_item_ = 0u;
  oper_value_ = 0u;
  oper_value2_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageOperationResult::~SCMessageOperationResult() {
  SharedDtor();
}

void SCMessageOperationResult::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageOperationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageOperationResult& SCMessageOperationResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageOperationResult* SCMessageOperationResult::default_instance_ = NULL;

SCMessageOperationResult* SCMessageOperationResult::New() const {
  return new SCMessageOperationResult;
}

void SCMessageOperationResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    operatin_ = 1;
    acc_id_ = 0u;
    bonus_ = 0u;
    next_item_ = 0u;
    oper_value_ = 0u;
    oper_value2_ = GOOGLE_ULONGLONG(0);
  }
  simple_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageOperationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .jynetwork.proto.eOpertionResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eOpertionResult_IsValid(value)) {
            set_result(static_cast< ::jynetwork::proto::eOpertionResult >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operatin;
        break;
      }

      // required .jynetwork.proto.eOpertionType operatin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operatin:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eOpertionType_IsValid(value)) {
            set_operatin(static_cast< ::jynetwork::proto::eOpertionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_acc_id;
        break;
      }

      // optional uint32 acc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bonus;
        break;
      }

      // optional uint32 bonus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_)));
          set_has_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_next_item;
        break;
      }

      // optional uint32 next_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_item_)));
          set_has_next_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_oper_value;
        break;
      }

      // optional uint32 oper_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_value_)));
          set_has_oper_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_simple_item;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem simple_item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simple_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_simple_item;
        if (input->ExpectTag(64)) goto parse_oper_value2;
        break;
      }

      // optional uint64 oper_value2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &oper_value2_)));
          set_has_oper_value2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageOperationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .jynetwork.proto.eOpertionResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required .jynetwork.proto.eOpertionType operatin = 2;
  if (has_operatin()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operatin(), output);
  }

  // optional uint32 acc_id = 3;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->acc_id(), output);
  }

  // optional uint32 bonus = 4;
  if (has_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bonus(), output);
  }

  // optional uint32 next_item = 5;
  if (has_next_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->next_item(), output);
  }

  // optional uint32 oper_value = 6;
  if (has_oper_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->oper_value(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem simple_item = 7;
  for (int i = 0; i < this->simple_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->simple_item(i), output);
  }

  // optional uint64 oper_value2 = 8;
  if (has_oper_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->oper_value2(), output);
  }

}

int SCMessageOperationResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .jynetwork.proto.eOpertionResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required .jynetwork.proto.eOpertionType operatin = 2;
    if (has_operatin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operatin());
    }

    // optional uint32 acc_id = 3;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_id());
    }

    // optional uint32 bonus = 4;
    if (has_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus());
    }

    // optional uint32 next_item = 5;
    if (has_next_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_item());
    }

    // optional uint32 oper_value = 6;
    if (has_oper_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_value());
    }

    // optional uint64 oper_value2 = 8;
    if (has_oper_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->oper_value2());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem simple_item = 7;
  total_size += 1 * this->simple_item_size();
  for (int i = 0; i < this->simple_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simple_item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageOperationResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageOperationResult*>(&from));
}

void SCMessageOperationResult::MergeFrom(const SCMessageOperationResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  simple_item_.MergeFrom(from.simple_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_operatin()) {
      set_operatin(from.operatin());
    }
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_bonus()) {
      set_bonus(from.bonus());
    }
    if (from.has_next_item()) {
      set_next_item(from.next_item());
    }
    if (from.has_oper_value()) {
      set_oper_value(from.oper_value());
    }
    if (from.has_oper_value2()) {
      set_oper_value2(from.oper_value2());
    }
  }
}

void SCMessageOperationResult::CopyFrom(const SCMessageOperationResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageOperationResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SCMessageOperationResult::Swap(SCMessageOperationResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(operatin_, other->operatin_);
    std::swap(acc_id_, other->acc_id_);
    std::swap(bonus_, other->bonus_);
    std::swap(next_item_, other->next_item_);
    std::swap(oper_value_, other->oper_value_);
    simple_item_.Swap(&other->simple_item_);
    std::swap(oper_value2_, other->oper_value2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageOperationResult::GetTypeName() const {
  return "jynetwork.proto.SCMessageOperationResult";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageShopItem::kShopTypeFieldNumber;
const int SCMessageShopItem::kItemFieldNumber;
#endif  // !_MSC_VER

SCMessageShopItem::SCMessageShopItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageShopItem::InitAsDefaultInstance() {
}

SCMessageShopItem::SCMessageShopItem(const SCMessageShopItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageShopItem::SharedCtor() {
  _cached_size_ = 0;
  shop_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageShopItem::~SCMessageShopItem() {
  SharedDtor();
}

void SCMessageShopItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageShopItem& SCMessageShopItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageShopItem* SCMessageShopItem::default_instance_ = NULL;

SCMessageShopItem* SCMessageShopItem::New() const {
  return new SCMessageShopItem;
}

void SCMessageShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_type_ = 0u;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shop_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_type_)));
          set_has_shop_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shop_type = 1;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shop_type(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->item(i), output);
  }

}

int SCMessageShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shop_type = 1;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_type());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageShopItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageShopItem*>(&from));
}

void SCMessageShopItem::MergeFrom(const SCMessageShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
  }
}

void SCMessageShopItem::CopyFrom(const SCMessageShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageShopItem::IsInitialized() const {

  return true;
}

void SCMessageShopItem::Swap(SCMessageShopItem* other) {
  if (other != this) {
    std::swap(shop_type_, other->shop_type_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageShopItem::GetTypeName() const {
  return "jynetwork.proto.SCMessageShopItem";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageBattleSweepReward_RewardInfo::kEquipFieldNumber;
const int SCMessageBattleSweepReward_RewardInfo::kItemFieldNumber;
#endif  // !_MSC_VER

SCMessageBattleSweepReward_RewardInfo::SCMessageBattleSweepReward_RewardInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageBattleSweepReward_RewardInfo::InitAsDefaultInstance() {
}

SCMessageBattleSweepReward_RewardInfo::SCMessageBattleSweepReward_RewardInfo(const SCMessageBattleSweepReward_RewardInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageBattleSweepReward_RewardInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageBattleSweepReward_RewardInfo::~SCMessageBattleSweepReward_RewardInfo() {
  SharedDtor();
}

void SCMessageBattleSweepReward_RewardInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageBattleSweepReward_RewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageBattleSweepReward_RewardInfo& SCMessageBattleSweepReward_RewardInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageBattleSweepReward_RewardInfo* SCMessageBattleSweepReward_RewardInfo::default_instance_ = NULL;

SCMessageBattleSweepReward_RewardInfo* SCMessageBattleSweepReward_RewardInfo::New() const {
  return new SCMessageBattleSweepReward_RewardInfo;
}

void SCMessageBattleSweepReward_RewardInfo::Clear() {
  equip_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageBattleSweepReward_RewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jynetwork.proto.sPersonEquipStats equip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equip;
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .jynetwork.proto.sPersonItemStats item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageBattleSweepReward_RewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jynetwork.proto.sPersonEquipStats equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equip(i), output);
  }

  // repeated .jynetwork.proto.sPersonItemStats item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->item(i), output);
  }

}

int SCMessageBattleSweepReward_RewardInfo::ByteSize() const {
  int total_size = 0;

  // repeated .jynetwork.proto.sPersonEquipStats equip = 1;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .jynetwork.proto.sPersonItemStats item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageBattleSweepReward_RewardInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageBattleSweepReward_RewardInfo*>(&from));
}

void SCMessageBattleSweepReward_RewardInfo::MergeFrom(const SCMessageBattleSweepReward_RewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  item_.MergeFrom(from.item_);
}

void SCMessageBattleSweepReward_RewardInfo::CopyFrom(const SCMessageBattleSweepReward_RewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageBattleSweepReward_RewardInfo::IsInitialized() const {

  return true;
}

void SCMessageBattleSweepReward_RewardInfo::Swap(SCMessageBattleSweepReward_RewardInfo* other) {
  if (other != this) {
    equip_.Swap(&other->equip_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageBattleSweepReward_RewardInfo::GetTypeName() const {
  return "jynetwork.proto.SCMessageBattleSweepReward.RewardInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SCMessageBattleSweepReward::kMapIdFieldNumber;
const int SCMessageBattleSweepReward::kDifficultFieldNumber;
const int SCMessageBattleSweepReward::kExpFieldNumber;
const int SCMessageBattleSweepReward::kBattleMoneyFieldNumber;
const int SCMessageBattleSweepReward::kRewardFieldNumber;
const int SCMessageBattleSweepReward::kBattleStarFieldNumber;
const int SCMessageBattleSweepReward::kOldLevelFieldNumber;
const int SCMessageBattleSweepReward::kOldExpFieldNumber;
const int SCMessageBattleSweepReward::kCardExpFieldNumber;
const int SCMessageBattleSweepReward::kResultFieldNumber;
const int SCMessageBattleSweepReward::kCatlogFieldNumber;
#endif  // !_MSC_VER

SCMessageBattleSweepReward::SCMessageBattleSweepReward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageBattleSweepReward::InitAsDefaultInstance() {
}

SCMessageBattleSweepReward::SCMessageBattleSweepReward(const SCMessageBattleSweepReward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageBattleSweepReward::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  difficult_ = 0u;
  exp_ = 0u;
  battle_money_ = 0u;
  battle_star_ = 0u;
  old_level_ = 0u;
  old_exp_ = 0u;
  card_exp_ = 0u;
  result_ = 1;
  catlog_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageBattleSweepReward::~SCMessageBattleSweepReward() {
  SharedDtor();
}

void SCMessageBattleSweepReward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageBattleSweepReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageBattleSweepReward& SCMessageBattleSweepReward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageBattleSweepReward* SCMessageBattleSweepReward::default_instance_ = NULL;

SCMessageBattleSweepReward* SCMessageBattleSweepReward::New() const {
  return new SCMessageBattleSweepReward;
}

void SCMessageBattleSweepReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    difficult_ = 0u;
    exp_ = 0u;
    battle_money_ = 0u;
    battle_star_ = 0u;
    old_level_ = 0u;
    old_exp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    card_exp_ = 0u;
    result_ = 1;
    catlog_ = 0u;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageBattleSweepReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_difficult;
        break;
      }

      // optional uint32 difficult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficult_)));
          set_has_difficult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battle_money;
        break;
      }

      // optional uint32 battle_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_money_)));
          set_has_battle_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // repeated .jynetwork.proto.SCMessageBattleSweepReward.RewardInfo reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        if (input->ExpectTag(48)) goto parse_battle_star;
        break;
      }

      // optional uint32 battle_star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_star_)));
          set_has_battle_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_old_level;
        break;
      }

      // optional uint32 old_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_level_)));
          set_has_old_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_old_exp;
        break;
      }

      // optional uint32 old_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_exp_)));
          set_has_old_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_card_exp;
        break;
      }

      // optional uint32 card_exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_exp_)));
          set_has_card_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_result;
        break;
      }

      // optional .jynetwork.proto.eOpertionResult result = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eOpertionResult_IsValid(value)) {
            set_result(static_cast< ::jynetwork::proto::eOpertionResult >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_catlog;
        break;
      }

      // optional uint32 catlog = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_catlog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catlog_)));
          set_has_catlog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageBattleSweepReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional uint32 difficult = 2;
  if (has_difficult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->difficult(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 battle_money = 4;
  if (has_battle_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->battle_money(), output);
  }

  // repeated .jynetwork.proto.SCMessageBattleSweepReward.RewardInfo reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->reward(i), output);
  }

  // optional uint32 battle_star = 6;
  if (has_battle_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battle_star(), output);
  }

  // optional uint32 old_level = 7;
  if (has_old_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->old_level(), output);
  }

  // optional uint32 old_exp = 8;
  if (has_old_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->old_exp(), output);
  }

  // optional uint32 card_exp = 9;
  if (has_card_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->card_exp(), output);
  }

  // optional .jynetwork.proto.eOpertionResult result = 10;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->result(), output);
  }

  // optional uint32 catlog = 11;
  if (has_catlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->catlog(), output);
  }

}

int SCMessageBattleSweepReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 difficult = 2;
    if (has_difficult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficult());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 battle_money = 4;
    if (has_battle_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_money());
    }

    // optional uint32 battle_star = 6;
    if (has_battle_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_star());
    }

    // optional uint32 old_level = 7;
    if (has_old_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_level());
    }

    // optional uint32 old_exp = 8;
    if (has_old_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 card_exp = 9;
    if (has_card_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_exp());
    }

    // optional .jynetwork.proto.eOpertionResult result = 10;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 catlog = 11;
    if (has_catlog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catlog());
    }

  }
  // repeated .jynetwork.proto.SCMessageBattleSweepReward.RewardInfo reward = 5;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageBattleSweepReward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageBattleSweepReward*>(&from));
}

void SCMessageBattleSweepReward::MergeFrom(const SCMessageBattleSweepReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_difficult()) {
      set_difficult(from.difficult());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_battle_money()) {
      set_battle_money(from.battle_money());
    }
    if (from.has_battle_star()) {
      set_battle_star(from.battle_star());
    }
    if (from.has_old_level()) {
      set_old_level(from.old_level());
    }
    if (from.has_old_exp()) {
      set_old_exp(from.old_exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_card_exp()) {
      set_card_exp(from.card_exp());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_catlog()) {
      set_catlog(from.catlog());
    }
  }
}

void SCMessageBattleSweepReward::CopyFrom(const SCMessageBattleSweepReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageBattleSweepReward::IsInitialized() const {

  return true;
}

void SCMessageBattleSweepReward::Swap(SCMessageBattleSweepReward* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(difficult_, other->difficult_);
    std::swap(exp_, other->exp_);
    std::swap(battle_money_, other->battle_money_);
    reward_.Swap(&other->reward_);
    std::swap(battle_star_, other->battle_star_);
    std::swap(old_level_, other->old_level_);
    std::swap(old_exp_, other->old_exp_);
    std::swap(card_exp_, other->card_exp_);
    std::swap(result_, other->result_);
    std::swap(catlog_, other->catlog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageBattleSweepReward::GetTypeName() const {
  return "jynetwork.proto.SCMessageBattleSweepReward";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageBattleRewardEnd::kMapIdFieldNumber;
const int SCMessageBattleRewardEnd::kDifficultFieldNumber;
const int SCMessageBattleRewardEnd::kCatlogFieldNumber;
#endif  // !_MSC_VER

SCMessageBattleRewardEnd::SCMessageBattleRewardEnd()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageBattleRewardEnd::InitAsDefaultInstance() {
}

SCMessageBattleRewardEnd::SCMessageBattleRewardEnd(const SCMessageBattleRewardEnd& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageBattleRewardEnd::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  difficult_ = 0u;
  catlog_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageBattleRewardEnd::~SCMessageBattleRewardEnd() {
  SharedDtor();
}

void SCMessageBattleRewardEnd::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageBattleRewardEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageBattleRewardEnd& SCMessageBattleRewardEnd::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageBattleRewardEnd* SCMessageBattleRewardEnd::default_instance_ = NULL;

SCMessageBattleRewardEnd* SCMessageBattleRewardEnd::New() const {
  return new SCMessageBattleRewardEnd;
}

void SCMessageBattleRewardEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    difficult_ = 0u;
    catlog_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageBattleRewardEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_difficult;
        break;
      }

      // optional uint32 difficult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficult_)));
          set_has_difficult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_catlog;
        break;
      }

      // optional uint32 catlog = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_catlog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catlog_)));
          set_has_catlog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageBattleRewardEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional uint32 difficult = 2;
  if (has_difficult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->difficult(), output);
  }

  // optional uint32 catlog = 3;
  if (has_catlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->catlog(), output);
  }

}

int SCMessageBattleRewardEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 difficult = 2;
    if (has_difficult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficult());
    }

    // optional uint32 catlog = 3;
    if (has_catlog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catlog());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageBattleRewardEnd::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageBattleRewardEnd*>(&from));
}

void SCMessageBattleRewardEnd::MergeFrom(const SCMessageBattleRewardEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_difficult()) {
      set_difficult(from.difficult());
    }
    if (from.has_catlog()) {
      set_catlog(from.catlog());
    }
  }
}

void SCMessageBattleRewardEnd::CopyFrom(const SCMessageBattleRewardEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageBattleRewardEnd::IsInitialized() const {

  return true;
}

void SCMessageBattleRewardEnd::Swap(SCMessageBattleRewardEnd* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(difficult_, other->difficult_);
    std::swap(catlog_, other->catlog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageBattleRewardEnd::GetTypeName() const {
  return "jynetwork.proto.SCMessageBattleRewardEnd";
}


// ===================================================================

#ifndef _MSC_VER
const int sPlayerSave::kUdiFieldNumber;
const int sPlayerSave::kCcFieldNumber;
const int sPlayerSave::kOtherequipFieldNumber;
const int sPlayerSave::kVersionFieldNumber;
const int sPlayerSave::kItemdbidFieldNumber;
const int sPlayerSave::kEquipdbidFieldNumber;
const int sPlayerSave::kDropquipFieldNumber;
const int sPlayerSave::kDropitemFieldNumber;
#endif  // !_MSC_VER

sPlayerSave::sPlayerSave()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPlayerSave::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  udi_ = const_cast< ::jynetwork::proto::SCUserDetailInfo*>(
      ::jynetwork::proto::SCUserDetailInfo::internal_default_instance());
#else
  udi_ = const_cast< ::jynetwork::proto::SCUserDetailInfo*>(&::jynetwork::proto::SCUserDetailInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cc_ = const_cast< ::jynetwork::proto::sCastleComplete*>(
      ::jynetwork::proto::sCastleComplete::internal_default_instance());
#else
  cc_ = const_cast< ::jynetwork::proto::sCastleComplete*>(&::jynetwork::proto::sCastleComplete::default_instance());
#endif
}

sPlayerSave::sPlayerSave(const sPlayerSave& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPlayerSave::SharedCtor() {
  _cached_size_ = 0;
  udi_ = NULL;
  cc_ = NULL;
  version_ = 0u;
  itemdbid_ = 0u;
  equipdbid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPlayerSave::~sPlayerSave() {
  SharedDtor();
}

void sPlayerSave::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete udi_;
    delete cc_;
  }
}

void sPlayerSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPlayerSave& sPlayerSave::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

sPlayerSave* sPlayerSave::default_instance_ = NULL;

sPlayerSave* sPlayerSave::New() const {
  return new sPlayerSave;
}

void sPlayerSave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_udi()) {
      if (udi_ != NULL) udi_->::jynetwork::proto::SCUserDetailInfo::Clear();
    }
    if (has_cc()) {
      if (cc_ != NULL) cc_->::jynetwork::proto::sCastleComplete::Clear();
    }
    version_ = 0u;
    itemdbid_ = 0u;
    equipdbid_ = 0u;
  }
  otherequip_.Clear();
  dropquip_.Clear();
  dropitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPlayerSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jynetwork.proto.SCUserDetailInfo udi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_udi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cc;
        break;
      }

      // optional .jynetwork.proto.sCastleComplete cc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_otherequip;
        break;
      }

      // repeated .jynetwork.proto.sPersonEquipStats otherequip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otherequip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_otherequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_otherequip;
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }

      // optional uint32 version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemdbid;
        break;
      }

      // optional uint32 itemdbid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemdbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemdbid_)));
          set_has_itemdbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equipdbid;
        break;
      }

      // optional uint32 equipdbid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipdbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipdbid_)));
          set_has_equipdbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dropquip;
        break;
      }

      // repeated .jynetwork.proto.sPersonEquipStats dropquip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropquip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dropquip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dropquip;
        if (input->ExpectTag(66)) goto parse_dropitem;
        break;
      }

      // repeated .jynetwork.proto.sPersonItemStats dropitem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dropitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_dropitem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPlayerSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .jynetwork.proto.SCUserDetailInfo udi = 1;
  if (has_udi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->udi(), output);
  }

  // optional .jynetwork.proto.sCastleComplete cc = 2;
  if (has_cc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->cc(), output);
  }

  // repeated .jynetwork.proto.sPersonEquipStats otherequip = 3;
  for (int i = 0; i < this->otherequip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->otherequip(i), output);
  }

  // optional uint32 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->version(), output);
  }

  // optional uint32 itemdbid = 5;
  if (has_itemdbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemdbid(), output);
  }

  // optional uint32 equipdbid = 6;
  if (has_equipdbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->equipdbid(), output);
  }

  // repeated .jynetwork.proto.sPersonEquipStats dropquip = 7;
  for (int i = 0; i < this->dropquip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->dropquip(i), output);
  }

  // repeated .jynetwork.proto.sPersonItemStats dropitem = 8;
  for (int i = 0; i < this->dropitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->dropitem(i), output);
  }

}

int sPlayerSave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .jynetwork.proto.SCUserDetailInfo udi = 1;
    if (has_udi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->udi());
    }

    // optional .jynetwork.proto.sCastleComplete cc = 2;
    if (has_cc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cc());
    }

    // optional uint32 version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 itemdbid = 5;
    if (has_itemdbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemdbid());
    }

    // optional uint32 equipdbid = 6;
    if (has_equipdbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipdbid());
    }

  }
  // repeated .jynetwork.proto.sPersonEquipStats otherequip = 3;
  total_size += 1 * this->otherequip_size();
  for (int i = 0; i < this->otherequip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->otherequip(i));
  }

  // repeated .jynetwork.proto.sPersonEquipStats dropquip = 7;
  total_size += 1 * this->dropquip_size();
  for (int i = 0; i < this->dropquip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dropquip(i));
  }

  // repeated .jynetwork.proto.sPersonItemStats dropitem = 8;
  total_size += 1 * this->dropitem_size();
  for (int i = 0; i < this->dropitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dropitem(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPlayerSave::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPlayerSave*>(&from));
}

void sPlayerSave::MergeFrom(const sPlayerSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherequip_.MergeFrom(from.otherequip_);
  dropquip_.MergeFrom(from.dropquip_);
  dropitem_.MergeFrom(from.dropitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_udi()) {
      mutable_udi()->::jynetwork::proto::SCUserDetailInfo::MergeFrom(from.udi());
    }
    if (from.has_cc()) {
      mutable_cc()->::jynetwork::proto::sCastleComplete::MergeFrom(from.cc());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_itemdbid()) {
      set_itemdbid(from.itemdbid());
    }
    if (from.has_equipdbid()) {
      set_equipdbid(from.equipdbid());
    }
  }
}

void sPlayerSave::CopyFrom(const sPlayerSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPlayerSave::IsInitialized() const {

  return true;
}

void sPlayerSave::Swap(sPlayerSave* other) {
  if (other != this) {
    std::swap(udi_, other->udi_);
    std::swap(cc_, other->cc_);
    otherequip_.Swap(&other->otherequip_);
    std::swap(version_, other->version_);
    std::swap(itemdbid_, other->itemdbid_);
    std::swap(equipdbid_, other->equipdbid_);
    dropquip_.Swap(&other->dropquip_);
    dropitem_.Swap(&other->dropitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPlayerSave::GetTypeName() const {
  return "jynetwork.proto.sPlayerSave";
}


// ===================================================================

#ifndef _MSC_VER
const int SCOpponentDetailInfo::kAccIdFieldNumber;
const int SCOpponentDetailInfo::kSnameFieldNumber;
const int SCOpponentDetailInfo::kCampbelongFieldNumber;
const int SCOpponentDetailInfo::kGuildidFieldNumber;
const int SCOpponentDetailInfo::kViplevelFieldNumber;
const int SCOpponentDetailInfo::kCharslotFieldNumber;
const int SCOpponentDetailInfo::kCharsFieldNumber;
const int SCOpponentDetailInfo::kCardsFieldNumber;
const int SCOpponentDetailInfo::kEquipFieldNumber;
const int SCOpponentDetailInfo::kSkillsFieldNumber;
#endif  // !_MSC_VER

SCOpponentDetailInfo::SCOpponentDetailInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCOpponentDetailInfo::InitAsDefaultInstance() {
}

SCOpponentDetailInfo::SCOpponentDetailInfo(const SCOpponentDetailInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCOpponentDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  acc_id_ = 0u;
  sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  campbelong_ = 0;
  guildid_ = 0u;
  viplevel_ = 0u;
  charslot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCOpponentDetailInfo::~SCOpponentDetailInfo() {
  SharedDtor();
}

void SCOpponentDetailInfo::SharedDtor() {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    delete sname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCOpponentDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCOpponentDetailInfo& SCOpponentDetailInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCOpponentDetailInfo* SCOpponentDetailInfo::default_instance_ = NULL;

SCOpponentDetailInfo* SCOpponentDetailInfo::New() const {
  return new SCOpponentDetailInfo;
}

void SCOpponentDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    acc_id_ = 0u;
    if (has_sname()) {
      if (sname_ != &::google::protobuf::internal::kEmptyString) {
        sname_->clear();
      }
    }
    campbelong_ = 0;
    guildid_ = 0u;
    viplevel_ = 0u;
    charslot_ = 0u;
  }
  chars_.Clear();
  cards_.Clear();
  equip_.Clear();
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCOpponentDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 acc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sname;
        break;
      }

      // optional bytes sname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_campbelong;
        break;
      }

      // optional .jynetwork.proto.eCampBelong campbelong = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campbelong:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eCampBelong_IsValid(value)) {
            set_campbelong(static_cast< ::jynetwork::proto::eCampBelong >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // optional uint32 guildid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_viplevel;
        break;
      }

      // optional uint32 viplevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_charslot;
        break;
      }

      // optional uint32 charslot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charslot_)));
          set_has_charslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chars;
        break;
      }

      // repeated .jynetwork.proto.sCharactorInit chars = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chars;
        if (input->ExpectTag(66)) goto parse_cards;
        break;
      }

      // repeated .jynetwork.proto.sPersonCardStats cards = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cards;
        if (input->ExpectTag(74)) goto parse_equip;
        break;
      }

      // repeated .jynetwork.proto.sPersonEquipStats equip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equip;
        if (input->ExpectTag(82)) goto parse_skills;
        break;
      }

      // repeated .jynetwork.proto.sPersonSkillStats skills = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCOpponentDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 acc_id = 1;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->acc_id(), output);
  }

  // optional bytes sname = 2;
  if (has_sname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sname(), output);
  }

  // optional .jynetwork.proto.eCampBelong campbelong = 3;
  if (has_campbelong()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->campbelong(), output);
  }

  // optional uint32 guildid = 4;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->guildid(), output);
  }

  // optional uint32 viplevel = 5;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplevel(), output);
  }

  // optional uint32 charslot = 6;
  if (has_charslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->charslot(), output);
  }

  // repeated .jynetwork.proto.sCharactorInit chars = 7;
  for (int i = 0; i < this->chars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->chars(i), output);
  }

  // repeated .jynetwork.proto.sPersonCardStats cards = 8;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->cards(i), output);
  }

  // repeated .jynetwork.proto.sPersonEquipStats equip = 9;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->equip(i), output);
  }

  // repeated .jynetwork.proto.sPersonSkillStats skills = 10;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->skills(i), output);
  }

}

int SCOpponentDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 acc_id = 1;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_id());
    }

    // optional bytes sname = 2;
    if (has_sname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sname());
    }

    // optional .jynetwork.proto.eCampBelong campbelong = 3;
    if (has_campbelong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->campbelong());
    }

    // optional uint32 guildid = 4;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional uint32 viplevel = 5;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint32 charslot = 6;
    if (has_charslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charslot());
    }

  }
  // repeated .jynetwork.proto.sCharactorInit chars = 7;
  total_size += 1 * this->chars_size();
  for (int i = 0; i < this->chars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chars(i));
  }

  // repeated .jynetwork.proto.sPersonCardStats cards = 8;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  // repeated .jynetwork.proto.sPersonEquipStats equip = 9;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .jynetwork.proto.sPersonSkillStats skills = 10;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCOpponentDetailInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCOpponentDetailInfo*>(&from));
}

void SCOpponentDetailInfo::MergeFrom(const SCOpponentDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  chars_.MergeFrom(from.chars_);
  cards_.MergeFrom(from.cards_);
  equip_.MergeFrom(from.equip_);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_sname()) {
      set_sname(from.sname());
    }
    if (from.has_campbelong()) {
      set_campbelong(from.campbelong());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_charslot()) {
      set_charslot(from.charslot());
    }
  }
}

void SCOpponentDetailInfo::CopyFrom(const SCOpponentDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOpponentDetailInfo::IsInitialized() const {

  return true;
}

void SCOpponentDetailInfo::Swap(SCOpponentDetailInfo* other) {
  if (other != this) {
    std::swap(acc_id_, other->acc_id_);
    std::swap(sname_, other->sname_);
    std::swap(campbelong_, other->campbelong_);
    std::swap(guildid_, other->guildid_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(charslot_, other->charslot_);
    chars_.Swap(&other->chars_);
    cards_.Swap(&other->cards_);
    equip_.Swap(&other->equip_);
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCOpponentDetailInfo::GetTypeName() const {
  return "jynetwork.proto.SCOpponentDetailInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SCQueryDetailInfo::kAccIdFieldNumber;
const int SCQueryDetailInfo::kSnameFieldNumber;
const int SCQueryDetailInfo::kGuildidFieldNumber;
const int SCQueryDetailInfo::kViplevelFieldNumber;
const int SCQueryDetailInfo::kCharLvFieldNumber;
const int SCQueryDetailInfo::kIsAiFieldNumber;
const int SCQueryDetailInfo::kCharslotFieldNumber;
const int SCQueryDetailInfo::kCharsFieldNumber;
const int SCQueryDetailInfo::kCardsFieldNumber;
const int SCQueryDetailInfo::kEquipFieldNumber;
const int SCQueryDetailInfo::kSkillsFieldNumber;
const int SCQueryDetailInfo::kQueryTypeFieldNumber;
const int SCQueryDetailInfo::kQueryJobFieldNumber;
const int SCQueryDetailInfo::kMyAccIdFieldNumber;
const int SCQueryDetailInfo::kCharPowerFieldNumber;
const int SCQueryDetailInfo::kPositionFieldNumber;
const int SCQueryDetailInfo::kCostStaminaFieldNumber;
const int SCQueryDetailInfo::kCharPower1FieldNumber;
const int SCQueryDetailInfo::kCharPower2FieldNumber;
const int SCQueryDetailInfo::kCharPower3FieldNumber;
const int SCQueryDetailInfo::kLocalNameFieldNumber;
const int SCQueryDetailInfo::kMaxHardStageFieldNumber;
#endif  // !_MSC_VER

SCQueryDetailInfo::SCQueryDetailInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCQueryDetailInfo::InitAsDefaultInstance() {
}

SCQueryDetailInfo::SCQueryDetailInfo(const SCQueryDetailInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCQueryDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  acc_id_ = 0u;
  sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildid_ = 0u;
  viplevel_ = 0u;
  char_lv_ = 0u;
  is_ai_ = 0u;
  charslot_ = 0u;
  query_type_ = 0u;
  query_job_ = 0u;
  my_acc_id_ = 0u;
  char_power_ = 0u;
  position_ = 0u;
  cost_stamina_ = 0u;
  char_power_1_ = 0u;
  char_power_2_ = 0u;
  char_power_3_ = 0u;
  local_name_ = 0u;
  max_hard_stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCQueryDetailInfo::~SCQueryDetailInfo() {
  SharedDtor();
}

void SCQueryDetailInfo::SharedDtor() {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    delete sname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCQueryDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCQueryDetailInfo& SCQueryDetailInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCQueryDetailInfo* SCQueryDetailInfo::default_instance_ = NULL;

SCQueryDetailInfo* SCQueryDetailInfo::New() const {
  return new SCQueryDetailInfo;
}

void SCQueryDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    acc_id_ = 0u;
    if (has_sname()) {
      if (sname_ != &::google::protobuf::internal::kEmptyString) {
        sname_->clear();
      }
    }
    guildid_ = 0u;
    viplevel_ = 0u;
    char_lv_ = 0u;
    is_ai_ = 0u;
    charslot_ = 0u;
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    query_type_ = 0u;
    query_job_ = 0u;
    my_acc_id_ = 0u;
    char_power_ = 0u;
    position_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    cost_stamina_ = 0u;
    char_power_1_ = 0u;
    char_power_2_ = 0u;
    char_power_3_ = 0u;
    local_name_ = 0u;
    max_hard_stage_ = 0u;
  }
  chars_.Clear();
  cards_.Clear();
  equip_.Clear();
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCQueryDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 acc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sname;
        break;
      }

      // optional bytes sname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // optional uint32 guildid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_viplevel;
        break;
      }

      // optional uint32 viplevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_charslot;
        break;
      }

      // optional uint32 charslot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charslot_)));
          set_has_charslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chars;
        break;
      }

      // repeated .jynetwork.proto.sCharactorInit chars = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chars;
        if (input->ExpectTag(66)) goto parse_cards;
        break;
      }

      // repeated .jynetwork.proto.sPersonCardStats cards = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cards;
        if (input->ExpectTag(74)) goto parse_equip;
        break;
      }

      // repeated .jynetwork.proto.sPersonEquipStats equip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equip;
        if (input->ExpectTag(82)) goto parse_skills;
        break;
      }

      // repeated .jynetwork.proto.sPersonSkillStats skills = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_skills;
        if (input->ExpectTag(88)) goto parse_query_type;
        break;
      }

      // optional uint32 query_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_type_)));
          set_has_query_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_query_job;
        break;
      }

      // optional uint32 query_job = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_job_)));
          set_has_query_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_my_acc_id;
        break;
      }

      // optional uint32 my_acc_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_acc_id_)));
          set_has_my_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_char_lv;
        break;
      }

      // optional uint32 char_lv = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_lv_)));
          set_has_char_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_char_power;
        break;
      }

      // optional uint32 char_power = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_power_)));
          set_has_char_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_position;
        break;
      }

      // optional uint32 position = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cost_stamina;
        break;
      }

      // optional uint32 cost_stamina = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_stamina_)));
          set_has_cost_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_char_power_1;
        break;
      }

      // optional uint32 char_power_1 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_power_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_power_1_)));
          set_has_char_power_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_char_power_2;
        break;
      }

      // optional uint32 char_power_2 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_power_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_power_2_)));
          set_has_char_power_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_char_power_3;
        break;
      }

      // optional uint32 char_power_3 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_power_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_power_3_)));
          set_has_char_power_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_local_name;
        break;
      }

      // optional uint32 local_name = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_name_)));
          set_has_local_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_max_hard_stage;
        break;
      }

      // optional uint32 max_hard_stage = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hard_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hard_stage_)));
          set_has_max_hard_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_is_ai;
        break;
      }

      // optional uint32 is_ai = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_ai_)));
          set_has_is_ai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCQueryDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 acc_id = 1;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->acc_id(), output);
  }

  // optional bytes sname = 2;
  if (has_sname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sname(), output);
  }

  // optional uint32 guildid = 4;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->guildid(), output);
  }

  // optional uint32 viplevel = 5;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplevel(), output);
  }

  // optional uint32 charslot = 6;
  if (has_charslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->charslot(), output);
  }

  // repeated .jynetwork.proto.sCharactorInit chars = 7;
  for (int i = 0; i < this->chars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->chars(i), output);
  }

  // repeated .jynetwork.proto.sPersonCardStats cards = 8;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->cards(i), output);
  }

  // repeated .jynetwork.proto.sPersonEquipStats equip = 9;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->equip(i), output);
  }

  // repeated .jynetwork.proto.sPersonSkillStats skills = 10;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->skills(i), output);
  }

  // optional uint32 query_type = 11;
  if (has_query_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->query_type(), output);
  }

  // optional uint32 query_job = 12;
  if (has_query_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->query_job(), output);
  }

  // optional uint32 my_acc_id = 13;
  if (has_my_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->my_acc_id(), output);
  }

  // optional uint32 char_lv = 14;
  if (has_char_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->char_lv(), output);
  }

  // optional uint32 char_power = 15;
  if (has_char_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->char_power(), output);
  }

  // optional uint32 position = 16;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->position(), output);
  }

  // optional uint32 cost_stamina = 17;
  if (has_cost_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->cost_stamina(), output);
  }

  // optional uint32 char_power_1 = 18;
  if (has_char_power_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->char_power_1(), output);
  }

  // optional uint32 char_power_2 = 19;
  if (has_char_power_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->char_power_2(), output);
  }

  // optional uint32 char_power_3 = 20;
  if (has_char_power_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->char_power_3(), output);
  }

  // optional uint32 local_name = 21;
  if (has_local_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->local_name(), output);
  }

  // optional uint32 max_hard_stage = 22;
  if (has_max_hard_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->max_hard_stage(), output);
  }

  // optional uint32 is_ai = 23;
  if (has_is_ai()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->is_ai(), output);
  }

}

int SCQueryDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 acc_id = 1;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_id());
    }

    // optional bytes sname = 2;
    if (has_sname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sname());
    }

    // optional uint32 guildid = 4;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional uint32 viplevel = 5;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint32 char_lv = 14;
    if (has_char_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_lv());
    }

    // optional uint32 is_ai = 23;
    if (has_is_ai()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_ai());
    }

    // optional uint32 charslot = 6;
    if (has_charslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charslot());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional uint32 query_type = 11;
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_type());
    }

    // optional uint32 query_job = 12;
    if (has_query_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_job());
    }

    // optional uint32 my_acc_id = 13;
    if (has_my_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_acc_id());
    }

    // optional uint32 char_power = 15;
    if (has_char_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_power());
    }

    // optional uint32 position = 16;
    if (has_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 cost_stamina = 17;
    if (has_cost_stamina()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_stamina());
    }

    // optional uint32 char_power_1 = 18;
    if (has_char_power_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_power_1());
    }

    // optional uint32 char_power_2 = 19;
    if (has_char_power_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_power_2());
    }

    // optional uint32 char_power_3 = 20;
    if (has_char_power_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_power_3());
    }

    // optional uint32 local_name = 21;
    if (has_local_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_name());
    }

    // optional uint32 max_hard_stage = 22;
    if (has_max_hard_stage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hard_stage());
    }

  }
  // repeated .jynetwork.proto.sCharactorInit chars = 7;
  total_size += 1 * this->chars_size();
  for (int i = 0; i < this->chars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chars(i));
  }

  // repeated .jynetwork.proto.sPersonCardStats cards = 8;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  // repeated .jynetwork.proto.sPersonEquipStats equip = 9;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .jynetwork.proto.sPersonSkillStats skills = 10;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCQueryDetailInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCQueryDetailInfo*>(&from));
}

void SCQueryDetailInfo::MergeFrom(const SCQueryDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  chars_.MergeFrom(from.chars_);
  cards_.MergeFrom(from.cards_);
  equip_.MergeFrom(from.equip_);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_sname()) {
      set_sname(from.sname());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_char_lv()) {
      set_char_lv(from.char_lv());
    }
    if (from.has_is_ai()) {
      set_is_ai(from.is_ai());
    }
    if (from.has_charslot()) {
      set_charslot(from.charslot());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_query_type()) {
      set_query_type(from.query_type());
    }
    if (from.has_query_job()) {
      set_query_job(from.query_job());
    }
    if (from.has_my_acc_id()) {
      set_my_acc_id(from.my_acc_id());
    }
    if (from.has_char_power()) {
      set_char_power(from.char_power());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cost_stamina()) {
      set_cost_stamina(from.cost_stamina());
    }
    if (from.has_char_power_1()) {
      set_char_power_1(from.char_power_1());
    }
    if (from.has_char_power_2()) {
      set_char_power_2(from.char_power_2());
    }
    if (from.has_char_power_3()) {
      set_char_power_3(from.char_power_3());
    }
    if (from.has_local_name()) {
      set_local_name(from.local_name());
    }
    if (from.has_max_hard_stage()) {
      set_max_hard_stage(from.max_hard_stage());
    }
  }
}

void SCQueryDetailInfo::CopyFrom(const SCQueryDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCQueryDetailInfo::IsInitialized() const {

  return true;
}

void SCQueryDetailInfo::Swap(SCQueryDetailInfo* other) {
  if (other != this) {
    std::swap(acc_id_, other->acc_id_);
    std::swap(sname_, other->sname_);
    std::swap(guildid_, other->guildid_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(char_lv_, other->char_lv_);
    std::swap(is_ai_, other->is_ai_);
    std::swap(charslot_, other->charslot_);
    chars_.Swap(&other->chars_);
    cards_.Swap(&other->cards_);
    equip_.Swap(&other->equip_);
    skills_.Swap(&other->skills_);
    std::swap(query_type_, other->query_type_);
    std::swap(query_job_, other->query_job_);
    std::swap(my_acc_id_, other->my_acc_id_);
    std::swap(char_power_, other->char_power_);
    std::swap(position_, other->position_);
    std::swap(cost_stamina_, other->cost_stamina_);
    std::swap(char_power_1_, other->char_power_1_);
    std::swap(char_power_2_, other->char_power_2_);
    std::swap(char_power_3_, other->char_power_3_);
    std::swap(local_name_, other->local_name_);
    std::swap(max_hard_stage_, other->max_hard_stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCQueryDetailInfo::GetTypeName() const {
  return "jynetwork.proto.SCQueryDetailInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessagePong::kTimestampFieldNumber;
#endif  // !_MSC_VER

SCMessagePong::SCMessagePong()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessagePong::InitAsDefaultInstance() {
}

SCMessagePong::SCMessagePong(const SCMessagePong& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessagePong::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessagePong::~SCMessagePong() {
  SharedDtor();
}

void SCMessagePong::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessagePong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessagePong& SCMessagePong::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessagePong* SCMessagePong::default_instance_ = NULL;

SCMessagePong* SCMessagePong::New() const {
  return new SCMessagePong;
}

void SCMessagePong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessagePong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessagePong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

}

int SCMessagePong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessagePong::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessagePong*>(&from));
}

void SCMessagePong::MergeFrom(const SCMessagePong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void SCMessagePong::CopyFrom(const SCMessagePong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessagePong::IsInitialized() const {

  return true;
}

void SCMessagePong::Swap(SCMessagePong* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessagePong::GetTypeName() const {
  return "jynetwork.proto.SCMessagePong";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageBattlePrepare::kMapIdFieldNumber;
const int SCMessageBattlePrepare::kRandNumFieldNumber;
const int SCMessageBattlePrepare::kEquipFieldNumber;
const int SCMessageBattlePrepare::kItemFieldNumber;
const int SCMessageBattlePrepare::kDifficultFieldNumber;
const int SCMessageBattlePrepare::kResultFieldNumber;
const int SCMessageBattlePrepare::kDropmiddleFieldNumber;
const int SCMessageBattlePrepare::kDropgoblinFieldNumber;
const int SCMessageBattlePrepare::kTotalMoneyFieldNumber;
const int SCMessageBattlePrepare::kCatlogFieldNumber;
const int SCMessageBattlePrepare::kStartPosFieldNumber;
const int SCMessageBattlePrepare::kFriendDetailFieldNumber;
const int SCMessageBattlePrepare::kOppoDetailFieldNumber;
const int SCMessageBattlePrepare::kPosxFieldNumber;
const int SCMessageBattlePrepare::kPosyFieldNumber;
const int SCMessageBattlePrepare::kGroupFieldNumber;
const int SCMessageBattlePrepare::kEndlessMoneyFieldNumber;
const int SCMessageBattlePrepare::kArenaStatsFieldNumber;
const int SCMessageBattlePrepare::kMonsterLvFieldNumber;
#endif  // !_MSC_VER

SCMessageBattlePrepare::SCMessageBattlePrepare()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageBattlePrepare::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  arena_stats_ = const_cast< ::jynetwork::proto::sGameStats*>(
      ::jynetwork::proto::sGameStats::internal_default_instance());
#else
  arena_stats_ = const_cast< ::jynetwork::proto::sGameStats*>(&::jynetwork::proto::sGameStats::default_instance());
#endif
}

SCMessageBattlePrepare::SCMessageBattlePrepare(const SCMessageBattlePrepare& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageBattlePrepare::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  rand_num_ = 0u;
  difficult_ = 0u;
  result_ = 1;
  dropmiddle_ = 0u;
  dropgoblin_ = 0u;
  total_money_ = 0u;
  catlog_ = 0u;
  start_pos_ = 0u;
  posx_ = 0;
  posy_ = 0;
  group_ = 0u;
  endless_money_ = 0u;
  arena_stats_ = NULL;
  monster_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageBattlePrepare::~SCMessageBattlePrepare() {
  SharedDtor();
}

void SCMessageBattlePrepare::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete arena_stats_;
  }
}

void SCMessageBattlePrepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageBattlePrepare& SCMessageBattlePrepare::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageBattlePrepare* SCMessageBattlePrepare::default_instance_ = NULL;

SCMessageBattlePrepare* SCMessageBattlePrepare::New() const {
  return new SCMessageBattlePrepare;
}

void SCMessageBattlePrepare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    rand_num_ = 0u;
    difficult_ = 0u;
    result_ = 1;
    dropmiddle_ = 0u;
    dropgoblin_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_money_ = 0u;
    catlog_ = 0u;
    start_pos_ = 0u;
    posx_ = 0;
    posy_ = 0;
    group_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    endless_money_ = 0u;
    if (has_arena_stats()) {
      if (arena_stats_ != NULL) arena_stats_->::jynetwork::proto::sGameStats::Clear();
    }
    monster_lv_ = 0u;
  }
  equip_.Clear();
  item_.Clear();
  friend_detail_.Clear();
  oppo_detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageBattlePrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rand_num;
        break;
      }

      // optional uint32 rand_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_num_)));
          set_has_rand_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip;
        break;
      }

      // repeated .jynetwork.proto.sPersonEquipStats equip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip;
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // repeated .jynetwork.proto.sPersonItemStats item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item;
        if (input->ExpectTag(40)) goto parse_difficult;
        break;
      }

      // optional uint32 difficult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficult_)));
          set_has_difficult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // optional .jynetwork.proto.eOpertionResult result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eOpertionResult_IsValid(value)) {
            set_result(static_cast< ::jynetwork::proto::eOpertionResult >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dropmiddle;
        break;
      }

      // optional uint32 dropmiddle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropmiddle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropmiddle_)));
          set_has_dropmiddle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dropgoblin;
        break;
      }

      // optional uint32 dropgoblin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropgoblin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropgoblin_)));
          set_has_dropgoblin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_total_money;
        break;
      }

      // optional uint32 total_money = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_money_)));
          set_has_total_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_catlog;
        break;
      }

      // optional uint32 catlog = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_catlog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catlog_)));
          set_has_catlog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_start_pos;
        break;
      }

      // optional uint32 start_pos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_pos_)));
          set_has_start_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_friend_detail;
        break;
      }

      // repeated .jynetwork.proto.SCQueryDetailInfo friend_detail = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_friend_detail;
        if (input->ExpectTag(106)) goto parse_oppo_detail;
        break;
      }

      // repeated .jynetwork.proto.SCQueryDetailInfo oppo_detail = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oppo_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_oppo_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_oppo_detail;
        if (input->ExpectTag(112)) goto parse_posx;
        break;
      }

      // optional int32 posx = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_posy;
        break;
      }

      // optional int32 posy = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_group;
        break;
      }

      // optional uint32 group = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_endless_money;
        break;
      }

      // optional uint32 endless_money = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endless_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endless_money_)));
          set_has_endless_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_arena_stats;
        break;
      }

      // optional .jynetwork.proto.sGameStats arena_stats = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_monster_lv;
        break;
      }

      // optional uint32 monster_lv = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_lv_)));
          set_has_monster_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageBattlePrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional uint32 rand_num = 2;
  if (has_rand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rand_num(), output);
  }

  // repeated .jynetwork.proto.sPersonEquipStats equip = 3;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->equip(i), output);
  }

  // repeated .jynetwork.proto.sPersonItemStats item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->item(i), output);
  }

  // optional uint32 difficult = 5;
  if (has_difficult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->difficult(), output);
  }

  // optional .jynetwork.proto.eOpertionResult result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->result(), output);
  }

  // optional uint32 dropmiddle = 7;
  if (has_dropmiddle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dropmiddle(), output);
  }

  // optional uint32 dropgoblin = 8;
  if (has_dropgoblin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dropgoblin(), output);
  }

  // optional uint32 total_money = 9;
  if (has_total_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->total_money(), output);
  }

  // optional uint32 catlog = 10;
  if (has_catlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->catlog(), output);
  }

  // optional uint32 start_pos = 11;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->start_pos(), output);
  }

  // repeated .jynetwork.proto.SCQueryDetailInfo friend_detail = 12;
  for (int i = 0; i < this->friend_detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->friend_detail(i), output);
  }

  // repeated .jynetwork.proto.SCQueryDetailInfo oppo_detail = 13;
  for (int i = 0; i < this->oppo_detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->oppo_detail(i), output);
  }

  // optional int32 posx = 14;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->posx(), output);
  }

  // optional int32 posy = 15;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->posy(), output);
  }

  // optional uint32 group = 16;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->group(), output);
  }

  // optional uint32 endless_money = 17;
  if (has_endless_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->endless_money(), output);
  }

  // optional .jynetwork.proto.sGameStats arena_stats = 18;
  if (has_arena_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->arena_stats(), output);
  }

  // optional uint32 monster_lv = 19;
  if (has_monster_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->monster_lv(), output);
  }

}

int SCMessageBattlePrepare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 rand_num = 2;
    if (has_rand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_num());
    }

    // optional uint32 difficult = 5;
    if (has_difficult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficult());
    }

    // optional .jynetwork.proto.eOpertionResult result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 dropmiddle = 7;
    if (has_dropmiddle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropmiddle());
    }

    // optional uint32 dropgoblin = 8;
    if (has_dropgoblin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropgoblin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 total_money = 9;
    if (has_total_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_money());
    }

    // optional uint32 catlog = 10;
    if (has_catlog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catlog());
    }

    // optional uint32 start_pos = 11;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_pos());
    }

    // optional int32 posx = 14;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posy = 15;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional uint32 group = 16;
    if (has_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 endless_money = 17;
    if (has_endless_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endless_money());
    }

    // optional .jynetwork.proto.sGameStats arena_stats = 18;
    if (has_arena_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena_stats());
    }

    // optional uint32 monster_lv = 19;
    if (has_monster_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_lv());
    }

  }
  // repeated .jynetwork.proto.sPersonEquipStats equip = 3;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .jynetwork.proto.sPersonItemStats item = 4;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .jynetwork.proto.SCQueryDetailInfo friend_detail = 12;
  total_size += 1 * this->friend_detail_size();
  for (int i = 0; i < this->friend_detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_detail(i));
  }

  // repeated .jynetwork.proto.SCQueryDetailInfo oppo_detail = 13;
  total_size += 1 * this->oppo_detail_size();
  for (int i = 0; i < this->oppo_detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->oppo_detail(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageBattlePrepare::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageBattlePrepare*>(&from));
}

void SCMessageBattlePrepare::MergeFrom(const SCMessageBattlePrepare& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  item_.MergeFrom(from.item_);
  friend_detail_.MergeFrom(from.friend_detail_);
  oppo_detail_.MergeFrom(from.oppo_detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_rand_num()) {
      set_rand_num(from.rand_num());
    }
    if (from.has_difficult()) {
      set_difficult(from.difficult());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dropmiddle()) {
      set_dropmiddle(from.dropmiddle());
    }
    if (from.has_dropgoblin()) {
      set_dropgoblin(from.dropgoblin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_money()) {
      set_total_money(from.total_money());
    }
    if (from.has_catlog()) {
      set_catlog(from.catlog());
    }
    if (from.has_start_pos()) {
      set_start_pos(from.start_pos());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_endless_money()) {
      set_endless_money(from.endless_money());
    }
    if (from.has_arena_stats()) {
      mutable_arena_stats()->::jynetwork::proto::sGameStats::MergeFrom(from.arena_stats());
    }
    if (from.has_monster_lv()) {
      set_monster_lv(from.monster_lv());
    }
  }
}

void SCMessageBattlePrepare::CopyFrom(const SCMessageBattlePrepare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageBattlePrepare::IsInitialized() const {

  return true;
}

void SCMessageBattlePrepare::Swap(SCMessageBattlePrepare* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(rand_num_, other->rand_num_);
    equip_.Swap(&other->equip_);
    item_.Swap(&other->item_);
    std::swap(difficult_, other->difficult_);
    std::swap(result_, other->result_);
    std::swap(dropmiddle_, other->dropmiddle_);
    std::swap(dropgoblin_, other->dropgoblin_);
    std::swap(total_money_, other->total_money_);
    std::swap(catlog_, other->catlog_);
    std::swap(start_pos_, other->start_pos_);
    friend_detail_.Swap(&other->friend_detail_);
    oppo_detail_.Swap(&other->oppo_detail_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(group_, other->group_);
    std::swap(endless_money_, other->endless_money_);
    std::swap(arena_stats_, other->arena_stats_);
    std::swap(monster_lv_, other->monster_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageBattlePrepare::GetTypeName() const {
  return "jynetwork.proto.SCMessageBattlePrepare";
}


// ===================================================================

#ifndef _MSC_VER
const int SysNotice::kSnameFieldNumber;
const int SysNotice::kLangIdFieldNumber;
const int SysNotice::kValue1FieldNumber;
const int SysNotice::kValue2FieldNumber;
const int SysNotice::kValue3FieldNumber;
#endif  // !_MSC_VER

SysNotice::SysNotice()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SysNotice::InitAsDefaultInstance() {
}

SysNotice::SysNotice(const SysNotice& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SysNotice::SharedCtor() {
  _cached_size_ = 0;
  sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lang_id_ = 0;
  value1_ = 0;
  value2_ = 0;
  value3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysNotice::~SysNotice() {
  SharedDtor();
}

void SysNotice::SharedDtor() {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    delete sname_;
  }
  if (value3_ != &::google::protobuf::internal::kEmptyString) {
    delete value3_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SysNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SysNotice& SysNotice::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SysNotice* SysNotice::default_instance_ = NULL;

SysNotice* SysNotice::New() const {
  return new SysNotice;
}

void SysNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sname()) {
      if (sname_ != &::google::protobuf::internal::kEmptyString) {
        sname_->clear();
      }
    }
    lang_id_ = 0;
    value1_ = 0;
    value2_ = 0;
    if (has_value3()) {
      if (value3_ != &::google::protobuf::internal::kEmptyString) {
        value3_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SysNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lang_id;
        break;
      }

      // optional int32 lang_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lang_id_)));
          set_has_lang_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value1;
        break;
      }

      // optional int32 value1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value2;
        break;
      }

      // optional int32 value2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value3;
        break;
      }

      // optional bytes value3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes sname = 1;
  if (has_sname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sname(), output);
  }

  // optional int32 lang_id = 2;
  if (has_lang_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lang_id(), output);
  }

  // optional int32 value1 = 3;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value1(), output);
  }

  // optional int32 value2 = 4;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value2(), output);
  }

  // optional bytes value3 = 5;
  if (has_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->value3(), output);
  }

}

int SysNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes sname = 1;
    if (has_sname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sname());
    }

    // optional int32 lang_id = 2;
    if (has_lang_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lang_id());
    }

    // optional int32 value1 = 3;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value1());
    }

    // optional int32 value2 = 4;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value2());
    }

    // optional bytes value3 = 5;
    if (has_value3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value3());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysNotice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SysNotice*>(&from));
}

void SysNotice::MergeFrom(const SysNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sname()) {
      set_sname(from.sname());
    }
    if (from.has_lang_id()) {
      set_lang_id(from.lang_id());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_value3()) {
      set_value3(from.value3());
    }
  }
}

void SysNotice::CopyFrom(const SysNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysNotice::IsInitialized() const {

  return true;
}

void SysNotice::Swap(SysNotice* other) {
  if (other != this) {
    std::swap(sname_, other->sname_);
    std::swap(lang_id_, other->lang_id_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(value3_, other->value3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SysNotice::GetTypeName() const {
  return "jynetwork.proto.SysNotice";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageSysNotice::kEquipFieldNumber;
#endif  // !_MSC_VER

SCMessageSysNotice::SCMessageSysNotice()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageSysNotice::InitAsDefaultInstance() {
}

SCMessageSysNotice::SCMessageSysNotice(const SCMessageSysNotice& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageSysNotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageSysNotice::~SCMessageSysNotice() {
  SharedDtor();
}

void SCMessageSysNotice::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageSysNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageSysNotice& SCMessageSysNotice::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageSysNotice* SCMessageSysNotice::default_instance_ = NULL;

SCMessageSysNotice* SCMessageSysNotice::New() const {
  return new SCMessageSysNotice;
}

void SCMessageSysNotice::Clear() {
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageSysNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jynetwork.proto.SysNotice equip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equip;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageSysNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jynetwork.proto.SysNotice equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equip(i), output);
  }

}

int SCMessageSysNotice::ByteSize() const {
  int total_size = 0;

  // repeated .jynetwork.proto.SysNotice equip = 1;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageSysNotice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageSysNotice*>(&from));
}

void SCMessageSysNotice::MergeFrom(const SCMessageSysNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
}

void SCMessageSysNotice::CopyFrom(const SCMessageSysNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageSysNotice::IsInitialized() const {

  return true;
}

void SCMessageSysNotice::Swap(SCMessageSysNotice* other) {
  if (other != this) {
    equip_.Swap(&other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageSysNotice::GetTypeName() const {
  return "jynetwork.proto.SCMessageSysNotice";
}


// ===================================================================

#ifndef _MSC_VER
const int SysMail::kMailIdFieldNumber;
const int SysMail::kMailTitleFieldNumber;
const int SysMail::kMailContentFieldNumber;
const int SysMail::kMailItemFieldNumber;
const int SysMail::kHasReadFieldNumber;
const int SysMail::kMailTypeFieldNumber;
const int SysMail::kRewardItemFieldNumber;
const int SysMail::kOperFieldNumber;
const int SysMail::kMapIdFieldNumber;
#endif  // !_MSC_VER

SysMail::SysMail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SysMail::InitAsDefaultInstance() {
}

SysMail::SysMail(const SysMail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SysMail::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_LONGLONG(0);
  mail_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_item_ = 0u;
  has_read_ = 0;
  mail_type_ = 0;
  oper_ = 1;
  map_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysMail::~SysMail() {
  SharedDtor();
}

void SysMail::SharedDtor() {
  if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_title_;
  }
  if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SysMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SysMail& SysMail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SysMail* SysMail::default_instance_ = NULL;

SysMail* SysMail::New() const {
  return new SysMail;
}

void SysMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_LONGLONG(0);
    if (has_mail_title()) {
      if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
        mail_title_->clear();
      }
    }
    if (has_mail_content()) {
      if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
        mail_content_->clear();
      }
    }
    mail_item_ = 0u;
    has_read_ = 0;
    mail_type_ = 0;
    oper_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    map_id_ = 0;
  }
  reward_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SysMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail_title;
        break;
      }

      // optional bytes mail_title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mail_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mail_content;
        break;
      }

      // optional bytes mail_content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mail_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mail_item;
        break;
      }

      // optional uint32 mail_item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_item_)));
          set_has_mail_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_has_read;
        break;
      }

      // optional int32 has_read = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_read_)));
          set_has_has_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mail_type;
        break;
      }

      // optional int32 mail_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_reward_item;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem reward_item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_reward_item;
        if (input->ExpectTag(64)) goto parse_oper;
        break;
      }

      // optional .jynetwork.proto.ePersonalOpertionType oper = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::ePersonalOpertionType_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::ePersonalOpertionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mail_id(), output);
  }

  // optional bytes mail_title = 2;
  if (has_mail_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->mail_title(), output);
  }

  // optional bytes mail_content = 3;
  if (has_mail_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->mail_content(), output);
  }

  // optional uint32 mail_item = 4;
  if (has_mail_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mail_item(), output);
  }

  // optional int32 has_read = 5;
  if (has_has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->has_read(), output);
  }

  // optional int32 mail_type = 6;
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mail_type(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem reward_item = 7;
  for (int i = 0; i < this->reward_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->reward_item(i), output);
  }

  // optional .jynetwork.proto.ePersonalOpertionType oper = 8;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->oper(), output);
  }

  // optional int32 map_id = 9;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->map_id(), output);
  }

}

int SysMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mail_id());
    }

    // optional bytes mail_title = 2;
    if (has_mail_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mail_title());
    }

    // optional bytes mail_content = 3;
    if (has_mail_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mail_content());
    }

    // optional uint32 mail_item = 4;
    if (has_mail_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_item());
    }

    // optional int32 has_read = 5;
    if (has_has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->has_read());
    }

    // optional int32 mail_type = 6;
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_type());
    }

    // optional .jynetwork.proto.ePersonalOpertionType oper = 8;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 map_id = 9;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem reward_item = 7;
  total_size += 1 * this->reward_item_size();
  for (int i = 0; i < this->reward_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysMail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SysMail*>(&from));
}

void SysMail::MergeFrom(const SysMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_item_.MergeFrom(from.reward_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_mail_title()) {
      set_mail_title(from.mail_title());
    }
    if (from.has_mail_content()) {
      set_mail_content(from.mail_content());
    }
    if (from.has_mail_item()) {
      set_mail_item(from.mail_item());
    }
    if (from.has_has_read()) {
      set_has_read(from.has_read());
    }
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
}

void SysMail::CopyFrom(const SysMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysMail::IsInitialized() const {

  return true;
}

void SysMail::Swap(SysMail* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(mail_title_, other->mail_title_);
    std::swap(mail_content_, other->mail_content_);
    std::swap(mail_item_, other->mail_item_);
    std::swap(has_read_, other->has_read_);
    std::swap(mail_type_, other->mail_type_);
    reward_item_.Swap(&other->reward_item_);
    std::swap(oper_, other->oper_);
    std::swap(map_id_, other->map_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SysMail::GetTypeName() const {
  return "jynetwork.proto.SysMail";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageMail::kMailFieldNumber;
const int SCMessageMail::kIsLastOneFieldNumber;
const int SCMessageMail::kHasNewMailFieldNumber;
const int SCMessageMail::kNewMailTypeFieldNumber;
#endif  // !_MSC_VER

SCMessageMail::SCMessageMail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageMail::InitAsDefaultInstance() {
}

SCMessageMail::SCMessageMail(const SCMessageMail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageMail::SharedCtor() {
  _cached_size_ = 0;
  is_last_one_ = 0;
  has_new_mail_ = 0;
  new_mail_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageMail::~SCMessageMail() {
  SharedDtor();
}

void SCMessageMail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageMail& SCMessageMail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageMail* SCMessageMail::default_instance_ = NULL;

SCMessageMail* SCMessageMail::New() const {
  return new SCMessageMail;
}

void SCMessageMail::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    is_last_one_ = 0;
    has_new_mail_ = 0;
    new_mail_type_ = 0;
  }
  mail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jynetwork.proto.SysMail mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mail;
        if (input->ExpectTag(16)) goto parse_is_last_one;
        break;
      }

      // optional int32 is_last_one = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_last_one:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_last_one_)));
          set_has_is_last_one();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_has_new_mail;
        break;
      }

      // optional int32 has_new_mail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_new_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_new_mail_)));
          set_has_has_new_mail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new_mail_type;
        break;
      }

      // optional int32 new_mail_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_mail_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_mail_type_)));
          set_has_new_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jynetwork.proto.SysMail mail = 1;
  for (int i = 0; i < this->mail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->mail(i), output);
  }

  // optional int32 is_last_one = 2;
  if (has_is_last_one()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_last_one(), output);
  }

  // optional int32 has_new_mail = 3;
  if (has_has_new_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->has_new_mail(), output);
  }

  // optional int32 new_mail_type = 4;
  if (has_new_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->new_mail_type(), output);
  }

}

int SCMessageMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 is_last_one = 2;
    if (has_is_last_one()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_last_one());
    }

    // optional int32 has_new_mail = 3;
    if (has_has_new_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->has_new_mail());
    }

    // optional int32 new_mail_type = 4;
    if (has_new_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_mail_type());
    }

  }
  // repeated .jynetwork.proto.SysMail mail = 1;
  total_size += 1 * this->mail_size();
  for (int i = 0; i < this->mail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageMail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageMail*>(&from));
}

void SCMessageMail::MergeFrom(const SCMessageMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_.MergeFrom(from.mail_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_last_one()) {
      set_is_last_one(from.is_last_one());
    }
    if (from.has_has_new_mail()) {
      set_has_new_mail(from.has_new_mail());
    }
    if (from.has_new_mail_type()) {
      set_new_mail_type(from.new_mail_type());
    }
  }
}

void SCMessageMail::CopyFrom(const SCMessageMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageMail::IsInitialized() const {

  return true;
}

void SCMessageMail::Swap(SCMessageMail* other) {
  if (other != this) {
    mail_.Swap(&other->mail_);
    std::swap(is_last_one_, other->is_last_one_);
    std::swap(has_new_mail_, other->has_new_mail_);
    std::swap(new_mail_type_, other->new_mail_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageMail::GetTypeName() const {
  return "jynetwork.proto.SCMessageMail";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageRankList_RankInfo::kCharIdFieldNumber;
const int SCMessageRankList_RankInfo::kNameFieldNumber;
const int SCMessageRankList_RankInfo::kRankFieldNumber;
const int SCMessageRankList_RankInfo::kLevelFieldNumber;
const int SCMessageRankList_RankInfo::kSexFieldNumber;
const int SCMessageRankList_RankInfo::kJobFieldNumber;
const int SCMessageRankList_RankInfo::kRankValueFieldNumber;
const int SCMessageRankList_RankInfo::kCorpsIdFieldNumber;
const int SCMessageRankList_RankInfo::kRankValue2FieldNumber;
const int SCMessageRankList_RankInfo::kRankValue3FieldNumber;
const int SCMessageRankList_RankInfo::kRankValue4FieldNumber;
const int SCMessageRankList_RankInfo::kRankValue5FieldNumber;
#endif  // !_MSC_VER

SCMessageRankList_RankInfo::SCMessageRankList_RankInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageRankList_RankInfo::InitAsDefaultInstance() {
}

SCMessageRankList_RankInfo::SCMessageRankList_RankInfo(const SCMessageRankList_RankInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageRankList_RankInfo::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0u;
  level_ = 0u;
  sex_ = 0u;
  job_ = 0u;
  rank_value_ = 0u;
  corps_id_ = 0u;
  rank_value2_ = GOOGLE_ULONGLONG(0);
  rank_value3_ = GOOGLE_ULONGLONG(0);
  rank_value4_ = GOOGLE_ULONGLONG(0);
  rank_value5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageRankList_RankInfo::~SCMessageRankList_RankInfo() {
  SharedDtor();
}

void SCMessageRankList_RankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (rank_value5_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_value5_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageRankList_RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageRankList_RankInfo& SCMessageRankList_RankInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageRankList_RankInfo* SCMessageRankList_RankInfo::default_instance_ = NULL;

SCMessageRankList_RankInfo* SCMessageRankList_RankInfo::New() const {
  return new SCMessageRankList_RankInfo;
}

void SCMessageRankList_RankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rank_ = 0u;
    level_ = 0u;
    sex_ = 0u;
    job_ = 0u;
    rank_value_ = 0u;
    corps_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rank_value2_ = GOOGLE_ULONGLONG(0);
    rank_value3_ = GOOGLE_ULONGLONG(0);
    rank_value4_ = GOOGLE_ULONGLONG(0);
    if (has_rank_value5()) {
      if (rank_value5_ != &::google::protobuf::internal::kEmptyString) {
        rank_value5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageRankList_RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_job;
        break;
      }

      // optional uint32 job = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rank_value;
        break;
      }

      // optional uint32 rank_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_value_)));
          set_has_rank_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_corps_id;
        break;
      }

      // optional uint32 corps_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_id_)));
          set_has_corps_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rank_value2;
        break;
      }

      // optional uint64 rank_value2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rank_value2_)));
          set_has_rank_value2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rank_value3;
        break;
      }

      // optional uint64 rank_value3 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rank_value3_)));
          set_has_rank_value3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rank_value4;
        break;
      }

      // optional uint64 rank_value4 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_value4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rank_value4_)));
          set_has_rank_value4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_rank_value5;
        break;
      }

      // optional bytes rank_value5 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_value5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rank_value5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageRankList_RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 job = 6;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->job(), output);
  }

  // optional uint32 rank_value = 7;
  if (has_rank_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rank_value(), output);
  }

  // optional uint32 corps_id = 8;
  if (has_corps_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->corps_id(), output);
  }

  // optional uint64 rank_value2 = 9;
  if (has_rank_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->rank_value2(), output);
  }

  // optional uint64 rank_value3 = 10;
  if (has_rank_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->rank_value3(), output);
  }

  // optional uint64 rank_value4 = 11;
  if (has_rank_value4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->rank_value4(), output);
  }

  // optional bytes rank_value5 = 12;
  if (has_rank_value5()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->rank_value5(), output);
  }

}

int SCMessageRankList_RankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 job = 6;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 rank_value = 7;
    if (has_rank_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_value());
    }

    // optional uint32 corps_id = 8;
    if (has_corps_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 rank_value2 = 9;
    if (has_rank_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rank_value2());
    }

    // optional uint64 rank_value3 = 10;
    if (has_rank_value3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rank_value3());
    }

    // optional uint64 rank_value4 = 11;
    if (has_rank_value4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rank_value4());
    }

    // optional bytes rank_value5 = 12;
    if (has_rank_value5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rank_value5());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageRankList_RankInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageRankList_RankInfo*>(&from));
}

void SCMessageRankList_RankInfo::MergeFrom(const SCMessageRankList_RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_rank_value()) {
      set_rank_value(from.rank_value());
    }
    if (from.has_corps_id()) {
      set_corps_id(from.corps_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rank_value2()) {
      set_rank_value2(from.rank_value2());
    }
    if (from.has_rank_value3()) {
      set_rank_value3(from.rank_value3());
    }
    if (from.has_rank_value4()) {
      set_rank_value4(from.rank_value4());
    }
    if (from.has_rank_value5()) {
      set_rank_value5(from.rank_value5());
    }
  }
}

void SCMessageRankList_RankInfo::CopyFrom(const SCMessageRankList_RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageRankList_RankInfo::IsInitialized() const {

  return true;
}

void SCMessageRankList_RankInfo::Swap(SCMessageRankList_RankInfo* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(name_, other->name_);
    std::swap(rank_, other->rank_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(job_, other->job_);
    std::swap(rank_value_, other->rank_value_);
    std::swap(corps_id_, other->corps_id_);
    std::swap(rank_value2_, other->rank_value2_);
    std::swap(rank_value3_, other->rank_value3_);
    std::swap(rank_value4_, other->rank_value4_);
    std::swap(rank_value5_, other->rank_value5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageRankList_RankInfo::GetTypeName() const {
  return "jynetwork.proto.SCMessageRankList.RankInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SCMessageRankList::kRankInfoFieldNumber;
const int SCMessageRankList::kRankTimeFieldNumber;
const int SCMessageRankList::kMyRankFieldNumber;
const int SCMessageRankList::kPageFieldNumber;
const int SCMessageRankList::kRankTypeFieldNumber;
const int SCMessageRankList::kBossHpFieldNumber;
const int SCMessageRankList::kRemainBossTimeFieldNumber;
const int SCMessageRankList::kArenaScoreFieldNumber;
const int SCMessageRankList::kArenaRankFieldNumber;
const int SCMessageRankList::kArenaRankOldFieldNumber;
const int SCMessageRankList::kArenaCdFieldNumber;
#endif  // !_MSC_VER

SCMessageRankList::SCMessageRankList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageRankList::InitAsDefaultInstance() {
}

SCMessageRankList::SCMessageRankList(const SCMessageRankList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageRankList::SharedCtor() {
  _cached_size_ = 0;
  rank_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  my_rank_ = 0u;
  page_ = 0u;
  rank_type_ = 0u;
  boss_hp_ = 0;
  remain_boss_time_ = 0u;
  arena_score_ = GOOGLE_ULONGLONG(0);
  arena_rank_ = GOOGLE_ULONGLONG(0);
  arena_rank_old_ = GOOGLE_ULONGLONG(0);
  arena_cd_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageRankList::~SCMessageRankList() {
  SharedDtor();
}

void SCMessageRankList::SharedDtor() {
  if (rank_time_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_time_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageRankList& SCMessageRankList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageRankList* SCMessageRankList::default_instance_ = NULL;

SCMessageRankList* SCMessageRankList::New() const {
  return new SCMessageRankList;
}

void SCMessageRankList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_rank_time()) {
      if (rank_time_ != &::google::protobuf::internal::kEmptyString) {
        rank_time_->clear();
      }
    }
    my_rank_ = 0u;
    page_ = 0u;
    rank_type_ = 0u;
    boss_hp_ = 0;
    remain_boss_time_ = 0u;
    arena_score_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    arena_rank_ = GOOGLE_ULONGLONG(0);
    arena_rank_old_ = GOOGLE_ULONGLONG(0);
    arena_cd_ = GOOGLE_ULONGLONG(0);
  }
  rank_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jynetwork.proto.SCMessageRankList.RankInfo rank_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank_info;
        if (input->ExpectTag(18)) goto parse_rank_time;
        break;
      }

      // optional bytes rank_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rank_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_my_rank;
        break;
      }

      // optional uint32 my_rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_rank_)));
          set_has_my_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_page;
        break;
      }

      // optional uint32 page = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank_type;
        break;
      }

      // optional uint32 rank_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_boss_hp;
        break;
      }

      // optional float boss_hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_boss_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boss_hp_)));
          set_has_boss_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_remain_boss_time;
        break;
      }

      // optional uint32 remain_boss_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_boss_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_boss_time_)));
          set_has_remain_boss_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_arena_score;
        break;
      }

      // optional uint64 arena_score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arena_score_)));
          set_has_arena_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_arena_rank;
        break;
      }

      // optional uint64 arena_rank = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arena_rank_)));
          set_has_arena_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_arena_rank_old;
        break;
      }

      // optional uint64 arena_rank_old = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_rank_old:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arena_rank_old_)));
          set_has_arena_rank_old();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_arena_cd;
        break;
      }

      // optional uint64 arena_cd = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arena_cd_)));
          set_has_arena_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jynetwork.proto.SCMessageRankList.RankInfo rank_info = 1;
  for (int i = 0; i < this->rank_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->rank_info(i), output);
  }

  // optional bytes rank_time = 2;
  if (has_rank_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->rank_time(), output);
  }

  // optional uint32 my_rank = 3;
  if (has_my_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->my_rank(), output);
  }

  // optional uint32 page = 4;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->page(), output);
  }

  // optional uint32 rank_type = 5;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rank_type(), output);
  }

  // optional float boss_hp = 6;
  if (has_boss_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->boss_hp(), output);
  }

  // optional uint32 remain_boss_time = 7;
  if (has_remain_boss_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->remain_boss_time(), output);
  }

  // optional uint64 arena_score = 8;
  if (has_arena_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->arena_score(), output);
  }

  // optional uint64 arena_rank = 9;
  if (has_arena_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->arena_rank(), output);
  }

  // optional uint64 arena_rank_old = 10;
  if (has_arena_rank_old()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->arena_rank_old(), output);
  }

  // optional uint64 arena_cd = 11;
  if (has_arena_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->arena_cd(), output);
  }

}

int SCMessageRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes rank_time = 2;
    if (has_rank_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rank_time());
    }

    // optional uint32 my_rank = 3;
    if (has_my_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_rank());
    }

    // optional uint32 page = 4;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional uint32 rank_type = 5;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_type());
    }

    // optional float boss_hp = 6;
    if (has_boss_hp()) {
      total_size += 1 + 4;
    }

    // optional uint32 remain_boss_time = 7;
    if (has_remain_boss_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_boss_time());
    }

    // optional uint64 arena_score = 8;
    if (has_arena_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arena_score());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 arena_rank = 9;
    if (has_arena_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arena_rank());
    }

    // optional uint64 arena_rank_old = 10;
    if (has_arena_rank_old()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arena_rank_old());
    }

    // optional uint64 arena_cd = 11;
    if (has_arena_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arena_cd());
    }

  }
  // repeated .jynetwork.proto.SCMessageRankList.RankInfo rank_info = 1;
  total_size += 1 * this->rank_info_size();
  for (int i = 0; i < this->rank_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageRankList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageRankList*>(&from));
}

void SCMessageRankList::MergeFrom(const SCMessageRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_info_.MergeFrom(from.rank_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rank_time()) {
      set_rank_time(from.rank_time());
    }
    if (from.has_my_rank()) {
      set_my_rank(from.my_rank());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_boss_hp()) {
      set_boss_hp(from.boss_hp());
    }
    if (from.has_remain_boss_time()) {
      set_remain_boss_time(from.remain_boss_time());
    }
    if (from.has_arena_score()) {
      set_arena_score(from.arena_score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arena_rank()) {
      set_arena_rank(from.arena_rank());
    }
    if (from.has_arena_rank_old()) {
      set_arena_rank_old(from.arena_rank_old());
    }
    if (from.has_arena_cd()) {
      set_arena_cd(from.arena_cd());
    }
  }
}

void SCMessageRankList::CopyFrom(const SCMessageRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageRankList::IsInitialized() const {

  return true;
}

void SCMessageRankList::Swap(SCMessageRankList* other) {
  if (other != this) {
    rank_info_.Swap(&other->rank_info_);
    std::swap(rank_time_, other->rank_time_);
    std::swap(my_rank_, other->my_rank_);
    std::swap(page_, other->page_);
    std::swap(rank_type_, other->rank_type_);
    std::swap(boss_hp_, other->boss_hp_);
    std::swap(remain_boss_time_, other->remain_boss_time_);
    std::swap(arena_score_, other->arena_score_);
    std::swap(arena_rank_, other->arena_rank_);
    std::swap(arena_rank_old_, other->arena_rank_old_);
    std::swap(arena_cd_, other->arena_cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageRankList::GetTypeName() const {
  return "jynetwork.proto.SCMessageRankList";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageBattleCheck::kCheckIdFieldNumber;
#endif  // !_MSC_VER

SCMessageBattleCheck::SCMessageBattleCheck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageBattleCheck::InitAsDefaultInstance() {
}

SCMessageBattleCheck::SCMessageBattleCheck(const SCMessageBattleCheck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageBattleCheck::SharedCtor() {
  _cached_size_ = 0;
  check_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageBattleCheck::~SCMessageBattleCheck() {
  SharedDtor();
}

void SCMessageBattleCheck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageBattleCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageBattleCheck& SCMessageBattleCheck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageBattleCheck* SCMessageBattleCheck::default_instance_ = NULL;

SCMessageBattleCheck* SCMessageBattleCheck::New() const {
  return new SCMessageBattleCheck;
}

void SCMessageBattleCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    check_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageBattleCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 check_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_id_)));
          set_has_check_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageBattleCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 check_id = 1;
  if (has_check_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->check_id(), output);
  }

}

int SCMessageBattleCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 check_id = 1;
    if (has_check_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageBattleCheck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageBattleCheck*>(&from));
}

void SCMessageBattleCheck::MergeFrom(const SCMessageBattleCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_check_id()) {
      set_check_id(from.check_id());
    }
  }
}

void SCMessageBattleCheck::CopyFrom(const SCMessageBattleCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageBattleCheck::IsInitialized() const {

  return true;
}

void SCMessageBattleCheck::Swap(SCMessageBattleCheck* other) {
  if (other != this) {
    std::swap(check_id_, other->check_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageBattleCheck::GetTypeName() const {
  return "jynetwork.proto.SCMessageBattleCheck";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageCorpsOper::kOperFieldNumber;
const int SCMessageCorpsOper::kCorpsIdFieldNumber;
const int SCMessageCorpsOper::kCharIdFieldNumber;
const int SCMessageCorpsOper::kNameFieldNumber;
const int SCMessageCorpsOper::kResultFieldNumber;
#endif  // !_MSC_VER

SCMessageCorpsOper::SCMessageCorpsOper()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageCorpsOper::InitAsDefaultInstance() {
}

SCMessageCorpsOper::SCMessageCorpsOper(const SCMessageCorpsOper& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageCorpsOper::SharedCtor() {
  _cached_size_ = 0;
  oper_ = 1;
  corps_id_ = 0u;
  char_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageCorpsOper::~SCMessageCorpsOper() {
  SharedDtor();
}

void SCMessageCorpsOper::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageCorpsOper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageCorpsOper& SCMessageCorpsOper::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageCorpsOper* SCMessageCorpsOper::default_instance_ = NULL;

SCMessageCorpsOper* SCMessageCorpsOper::New() const {
  return new SCMessageCorpsOper;
}

void SCMessageCorpsOper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_ = 1;
    corps_id_ = 0u;
    char_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageCorpsOper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .jynetwork.proto.eCorpsOpertionType oper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eCorpsOpertionType_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::eCorpsOpertionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_corps_id;
        break;
      }

      // optional uint32 corps_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_id_)));
          set_has_corps_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_char_id;
        break;
      }

      // optional uint32 char_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .jynetwork.proto.eOpertionResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eOpertionResult_IsValid(value)) {
            set_result(static_cast< ::jynetwork::proto::eOpertionResult >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageCorpsOper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .jynetwork.proto.eCorpsOpertionType oper = 1;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // optional uint32 corps_id = 2;
  if (has_corps_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->corps_id(), output);
  }

  // optional uint32 char_id = 3;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->char_id(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // optional .jynetwork.proto.eOpertionResult result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

}

int SCMessageCorpsOper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .jynetwork.proto.eCorpsOpertionType oper = 1;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional uint32 corps_id = 2;
    if (has_corps_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_id());
    }

    // optional uint32 char_id = 3;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional .jynetwork.proto.eOpertionResult result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageCorpsOper::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageCorpsOper*>(&from));
}

void SCMessageCorpsOper::MergeFrom(const SCMessageCorpsOper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_corps_id()) {
      set_corps_id(from.corps_id());
    }
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void SCMessageCorpsOper::CopyFrom(const SCMessageCorpsOper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageCorpsOper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCMessageCorpsOper::Swap(SCMessageCorpsOper* other) {
  if (other != this) {
    std::swap(oper_, other->oper_);
    std::swap(corps_id_, other->corps_id_);
    std::swap(char_id_, other->char_id_);
    std::swap(name_, other->name_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageCorpsOper::GetTypeName() const {
  return "jynetwork.proto.SCMessageCorpsOper";
}


// ===================================================================

#ifndef _MSC_VER
const int CorpsInfo::kCorpsIdFieldNumber;
const int CorpsInfo::kCorpsNameFieldNumber;
const int CorpsInfo::kCorpsLvFieldNumber;
const int CorpsInfo::kCorpsExpFieldNumber;
const int CorpsInfo::kCorpsIntroFieldNumber;
const int CorpsInfo::kCorpsPowerFieldNumber;
const int CorpsInfo::kCorpsMemberCountFieldNumber;
const int CorpsInfo::kCorpsMemberMaxFieldNumber;
const int CorpsInfo::kCorpsJoinFieldNumber;
const int CorpsInfo::kIsApplyFieldNumber;
const int CorpsInfo::kCorpsRankFieldNumber;
const int CorpsInfo::kHunterPointFieldNumber;
#endif  // !_MSC_VER

CorpsInfo::CorpsInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CorpsInfo::InitAsDefaultInstance() {
}

CorpsInfo::CorpsInfo(const CorpsInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CorpsInfo::SharedCtor() {
  _cached_size_ = 0;
  corps_id_ = 0u;
  corps_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  corps_lv_ = 0u;
  corps_exp_ = 0u;
  corps_intro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  corps_power_ = 0u;
  corps_member_count_ = 0u;
  corps_member_max_ = 0u;
  corps_join_ = 0u;
  is_apply_ = 0u;
  corps_rank_ = 0u;
  hunter_point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorpsInfo::~CorpsInfo() {
  SharedDtor();
}

void CorpsInfo::SharedDtor() {
  if (corps_name_ != &::google::protobuf::internal::kEmptyString) {
    delete corps_name_;
  }
  if (corps_intro_ != &::google::protobuf::internal::kEmptyString) {
    delete corps_intro_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CorpsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CorpsInfo& CorpsInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

CorpsInfo* CorpsInfo::default_instance_ = NULL;

CorpsInfo* CorpsInfo::New() const {
  return new CorpsInfo;
}

void CorpsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corps_id_ = 0u;
    if (has_corps_name()) {
      if (corps_name_ != &::google::protobuf::internal::kEmptyString) {
        corps_name_->clear();
      }
    }
    corps_lv_ = 0u;
    corps_exp_ = 0u;
    if (has_corps_intro()) {
      if (corps_intro_ != &::google::protobuf::internal::kEmptyString) {
        corps_intro_->clear();
      }
    }
    corps_power_ = 0u;
    corps_member_count_ = 0u;
    corps_member_max_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    corps_join_ = 0u;
    is_apply_ = 0u;
    corps_rank_ = 0u;
    hunter_point_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CorpsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 corps_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_id_)));
          set_has_corps_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_corps_name;
        break;
      }

      // optional bytes corps_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corps_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_corps_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_corps_lv;
        break;
      }

      // optional uint32 corps_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_lv_)));
          set_has_corps_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_corps_exp;
        break;
      }

      // optional uint32 corps_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_exp_)));
          set_has_corps_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_corps_intro;
        break;
      }

      // optional bytes corps_intro = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corps_intro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_corps_intro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_corps_power;
        break;
      }

      // optional uint32 corps_power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_power_)));
          set_has_corps_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_corps_member_count;
        break;
      }

      // optional uint32 corps_member_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_member_count_)));
          set_has_corps_member_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_corps_member_max;
        break;
      }

      // optional uint32 corps_member_max = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps_member_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_member_max_)));
          set_has_corps_member_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_corps_join;
        break;
      }

      // optional uint32 corps_join = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps_join:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_join_)));
          set_has_corps_join();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_apply;
        break;
      }

      // optional uint32 is_apply = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_apply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_apply_)));
          set_has_is_apply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_corps_rank;
        break;
      }

      // optional uint32 corps_rank = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_rank_)));
          set_has_corps_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hunter_point;
        break;
      }

      // optional uint32 hunter_point = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hunter_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hunter_point_)));
          set_has_hunter_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CorpsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 corps_id = 1;
  if (has_corps_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->corps_id(), output);
  }

  // optional bytes corps_name = 2;
  if (has_corps_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->corps_name(), output);
  }

  // optional uint32 corps_lv = 3;
  if (has_corps_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->corps_lv(), output);
  }

  // optional uint32 corps_exp = 4;
  if (has_corps_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->corps_exp(), output);
  }

  // optional bytes corps_intro = 5;
  if (has_corps_intro()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->corps_intro(), output);
  }

  // optional uint32 corps_power = 6;
  if (has_corps_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->corps_power(), output);
  }

  // optional uint32 corps_member_count = 7;
  if (has_corps_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->corps_member_count(), output);
  }

  // optional uint32 corps_member_max = 8;
  if (has_corps_member_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->corps_member_max(), output);
  }

  // optional uint32 corps_join = 9;
  if (has_corps_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->corps_join(), output);
  }

  // optional uint32 is_apply = 10;
  if (has_is_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->is_apply(), output);
  }

  // optional uint32 corps_rank = 11;
  if (has_corps_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->corps_rank(), output);
  }

  // optional uint32 hunter_point = 12;
  if (has_hunter_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->hunter_point(), output);
  }

}

int CorpsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 corps_id = 1;
    if (has_corps_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_id());
    }

    // optional bytes corps_name = 2;
    if (has_corps_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->corps_name());
    }

    // optional uint32 corps_lv = 3;
    if (has_corps_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_lv());
    }

    // optional uint32 corps_exp = 4;
    if (has_corps_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_exp());
    }

    // optional bytes corps_intro = 5;
    if (has_corps_intro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->corps_intro());
    }

    // optional uint32 corps_power = 6;
    if (has_corps_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_power());
    }

    // optional uint32 corps_member_count = 7;
    if (has_corps_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_member_count());
    }

    // optional uint32 corps_member_max = 8;
    if (has_corps_member_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_member_max());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 corps_join = 9;
    if (has_corps_join()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_join());
    }

    // optional uint32 is_apply = 10;
    if (has_is_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_apply());
    }

    // optional uint32 corps_rank = 11;
    if (has_corps_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_rank());
    }

    // optional uint32 hunter_point = 12;
    if (has_hunter_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hunter_point());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorpsInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CorpsInfo*>(&from));
}

void CorpsInfo::MergeFrom(const CorpsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_corps_id()) {
      set_corps_id(from.corps_id());
    }
    if (from.has_corps_name()) {
      set_corps_name(from.corps_name());
    }
    if (from.has_corps_lv()) {
      set_corps_lv(from.corps_lv());
    }
    if (from.has_corps_exp()) {
      set_corps_exp(from.corps_exp());
    }
    if (from.has_corps_intro()) {
      set_corps_intro(from.corps_intro());
    }
    if (from.has_corps_power()) {
      set_corps_power(from.corps_power());
    }
    if (from.has_corps_member_count()) {
      set_corps_member_count(from.corps_member_count());
    }
    if (from.has_corps_member_max()) {
      set_corps_member_max(from.corps_member_max());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_corps_join()) {
      set_corps_join(from.corps_join());
    }
    if (from.has_is_apply()) {
      set_is_apply(from.is_apply());
    }
    if (from.has_corps_rank()) {
      set_corps_rank(from.corps_rank());
    }
    if (from.has_hunter_point()) {
      set_hunter_point(from.hunter_point());
    }
  }
}

void CorpsInfo::CopyFrom(const CorpsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorpsInfo::IsInitialized() const {

  return true;
}

void CorpsInfo::Swap(CorpsInfo* other) {
  if (other != this) {
    std::swap(corps_id_, other->corps_id_);
    std::swap(corps_name_, other->corps_name_);
    std::swap(corps_lv_, other->corps_lv_);
    std::swap(corps_exp_, other->corps_exp_);
    std::swap(corps_intro_, other->corps_intro_);
    std::swap(corps_power_, other->corps_power_);
    std::swap(corps_member_count_, other->corps_member_count_);
    std::swap(corps_member_max_, other->corps_member_max_);
    std::swap(corps_join_, other->corps_join_);
    std::swap(is_apply_, other->is_apply_);
    std::swap(corps_rank_, other->corps_rank_);
    std::swap(hunter_point_, other->hunter_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CorpsInfo::GetTypeName() const {
  return "jynetwork.proto.CorpsInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageCorpsInfo::kInfoFieldNumber;
const int SCMessageCorpsInfo::kCharInfoFieldNumber;
const int SCMessageCorpsInfo::kMyAccIdFieldNumber;
#endif  // !_MSC_VER

SCMessageCorpsInfo::SCMessageCorpsInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageCorpsInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::jynetwork::proto::CorpsInfo*>(
      ::jynetwork::proto::CorpsInfo::internal_default_instance());
#else
  info_ = const_cast< ::jynetwork::proto::CorpsInfo*>(&::jynetwork::proto::CorpsInfo::default_instance());
#endif
}

SCMessageCorpsInfo::SCMessageCorpsInfo(const SCMessageCorpsInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageCorpsInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  my_acc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageCorpsInfo::~SCMessageCorpsInfo() {
  SharedDtor();
}

void SCMessageCorpsInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void SCMessageCorpsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageCorpsInfo& SCMessageCorpsInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageCorpsInfo* SCMessageCorpsInfo::default_instance_ = NULL;

SCMessageCorpsInfo* SCMessageCorpsInfo::New() const {
  return new SCMessageCorpsInfo;
}

void SCMessageCorpsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::jynetwork::proto::CorpsInfo::Clear();
    }
    my_acc_id_ = 0u;
  }
  char_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageCorpsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jynetwork.proto.CorpsInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_char_info;
        break;
      }

      // repeated .jynetwork.proto.SCQueryDetailInfo char_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_char_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_char_info;
        if (input->ExpectTag(24)) goto parse_my_acc_id;
        break;
      }

      // optional uint32 my_acc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_acc_id_)));
          set_has_my_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageCorpsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .jynetwork.proto.CorpsInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info(), output);
  }

  // repeated .jynetwork.proto.SCQueryDetailInfo char_info = 2;
  for (int i = 0; i < this->char_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->char_info(i), output);
  }

  // optional uint32 my_acc_id = 3;
  if (has_my_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->my_acc_id(), output);
  }

}

int SCMessageCorpsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .jynetwork.proto.CorpsInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 my_acc_id = 3;
    if (has_my_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_acc_id());
    }

  }
  // repeated .jynetwork.proto.SCQueryDetailInfo char_info = 2;
  total_size += 1 * this->char_info_size();
  for (int i = 0; i < this->char_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->char_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageCorpsInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageCorpsInfo*>(&from));
}

void SCMessageCorpsInfo::MergeFrom(const SCMessageCorpsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  char_info_.MergeFrom(from.char_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::jynetwork::proto::CorpsInfo::MergeFrom(from.info());
    }
    if (from.has_my_acc_id()) {
      set_my_acc_id(from.my_acc_id());
    }
  }
}

void SCMessageCorpsInfo::CopyFrom(const SCMessageCorpsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageCorpsInfo::IsInitialized() const {

  return true;
}

void SCMessageCorpsInfo::Swap(SCMessageCorpsInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    char_info_.Swap(&other->char_info_);
    std::swap(my_acc_id_, other->my_acc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageCorpsInfo::GetTypeName() const {
  return "jynetwork.proto.SCMessageCorpsInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CorpsBossInfo::kMapIdFieldNumber;
const int CorpsBossInfo::kAttackIdFieldNumber;
const int CorpsBossInfo::kPlayerInfoFieldNumber;
const int CorpsBossInfo::kIsOpenFieldNumber;
const int CorpsBossInfo::kHpFieldNumber;
#endif  // !_MSC_VER

CorpsBossInfo::CorpsBossInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CorpsBossInfo::InitAsDefaultInstance() {
}

CorpsBossInfo::CorpsBossInfo(const CorpsBossInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CorpsBossInfo::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  attack_id_ = 0u;
  is_open_ = 0u;
  hp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorpsBossInfo::~CorpsBossInfo() {
  SharedDtor();
}

void CorpsBossInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CorpsBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CorpsBossInfo& CorpsBossInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

CorpsBossInfo* CorpsBossInfo::default_instance_ = NULL;

CorpsBossInfo* CorpsBossInfo::New() const {
  return new CorpsBossInfo;
}

void CorpsBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    attack_id_ = 0u;
    is_open_ = 0u;
    hp_ = GOOGLE_ULONGLONG(0);
  }
  player_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CorpsBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attack_id;
        break;
      }

      // optional uint32 attack_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_id_)));
          set_has_attack_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_info;
        break;
      }

      // repeated .jynetwork.proto.CorpsBossPlayerInfo player_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_info;
        if (input->ExpectTag(32)) goto parse_is_open;
        break;
      }

      // optional uint32 is_open = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // optional uint64 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CorpsBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional uint32 attack_id = 2;
  if (has_attack_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attack_id(), output);
  }

  // repeated .jynetwork.proto.CorpsBossPlayerInfo player_info = 3;
  for (int i = 0; i < this->player_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->player_info(i), output);
  }

  // optional uint32 is_open = 4;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_open(), output);
  }

  // optional uint64 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->hp(), output);
  }

}

int CorpsBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 attack_id = 2;
    if (has_attack_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_id());
    }

    // optional uint32 is_open = 4;
    if (has_is_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_open());
    }

    // optional uint64 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

  }
  // repeated .jynetwork.proto.CorpsBossPlayerInfo player_info = 3;
  total_size += 1 * this->player_info_size();
  for (int i = 0; i < this->player_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorpsBossInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CorpsBossInfo*>(&from));
}

void CorpsBossInfo::MergeFrom(const CorpsBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_info_.MergeFrom(from.player_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_attack_id()) {
      set_attack_id(from.attack_id());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
}

void CorpsBossInfo::CopyFrom(const CorpsBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorpsBossInfo::IsInitialized() const {

  return true;
}

void CorpsBossInfo::Swap(CorpsBossInfo* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(attack_id_, other->attack_id_);
    player_info_.Swap(&other->player_info_);
    std::swap(is_open_, other->is_open_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CorpsBossInfo::GetTypeName() const {
  return "jynetwork.proto.CorpsBossInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CorpsBossPlayerInfo::kPlayerIdFieldNumber;
const int CorpsBossPlayerInfo::kPlayerNameFieldNumber;
const int CorpsBossPlayerInfo::kScoreFieldNumber;
const int CorpsBossPlayerInfo::kRankFieldNumber;
#endif  // !_MSC_VER

CorpsBossPlayerInfo::CorpsBossPlayerInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CorpsBossPlayerInfo::InitAsDefaultInstance() {
}

CorpsBossPlayerInfo::CorpsBossPlayerInfo(const CorpsBossPlayerInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CorpsBossPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorpsBossPlayerInfo::~CorpsBossPlayerInfo() {
  SharedDtor();
}

void CorpsBossPlayerInfo::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CorpsBossPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CorpsBossPlayerInfo& CorpsBossPlayerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

CorpsBossPlayerInfo* CorpsBossPlayerInfo::default_instance_ = NULL;

CorpsBossPlayerInfo* CorpsBossPlayerInfo::New() const {
  return new CorpsBossPlayerInfo;
}

void CorpsBossPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    score_ = 0u;
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CorpsBossPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional bytes player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional uint32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CorpsBossPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional bytes player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->player_name(), output);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // optional uint32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank(), output);
  }

}

int CorpsBossPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional bytes player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_name());
    }

    // optional uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorpsBossPlayerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CorpsBossPlayerInfo*>(&from));
}

void CorpsBossPlayerInfo::MergeFrom(const CorpsBossPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
}

void CorpsBossPlayerInfo::CopyFrom(const CorpsBossPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorpsBossPlayerInfo::IsInitialized() const {

  return true;
}

void CorpsBossPlayerInfo::Swap(CorpsBossPlayerInfo* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(score_, other->score_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CorpsBossPlayerInfo::GetTypeName() const {
  return "jynetwork.proto.CorpsBossPlayerInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageCorpsBossInfo::kInfoFieldNumber;
const int SCMessageCorpsBossInfo::kMyAccIdFieldNumber;
#endif  // !_MSC_VER

SCMessageCorpsBossInfo::SCMessageCorpsBossInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageCorpsBossInfo::InitAsDefaultInstance() {
}

SCMessageCorpsBossInfo::SCMessageCorpsBossInfo(const SCMessageCorpsBossInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageCorpsBossInfo::SharedCtor() {
  _cached_size_ = 0;
  my_acc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageCorpsBossInfo::~SCMessageCorpsBossInfo() {
  SharedDtor();
}

void SCMessageCorpsBossInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageCorpsBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageCorpsBossInfo& SCMessageCorpsBossInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageCorpsBossInfo* SCMessageCorpsBossInfo::default_instance_ = NULL;

SCMessageCorpsBossInfo* SCMessageCorpsBossInfo::New() const {
  return new SCMessageCorpsBossInfo;
}

void SCMessageCorpsBossInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    my_acc_id_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageCorpsBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jynetwork.proto.CorpsBossInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_my_acc_id;
        break;
      }

      // optional uint32 my_acc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_acc_id_)));
          set_has_my_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageCorpsBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jynetwork.proto.CorpsBossInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info(i), output);
  }

  // optional uint32 my_acc_id = 3;
  if (has_my_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->my_acc_id(), output);
  }

}

int SCMessageCorpsBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 my_acc_id = 3;
    if (has_my_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_acc_id());
    }

  }
  // repeated .jynetwork.proto.CorpsBossInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageCorpsBossInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageCorpsBossInfo*>(&from));
}

void SCMessageCorpsBossInfo::MergeFrom(const SCMessageCorpsBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_my_acc_id()) {
      set_my_acc_id(from.my_acc_id());
    }
  }
}

void SCMessageCorpsBossInfo::CopyFrom(const SCMessageCorpsBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageCorpsBossInfo::IsInitialized() const {

  return true;
}

void SCMessageCorpsBossInfo::Swap(SCMessageCorpsBossInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(my_acc_id_, other->my_acc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageCorpsBossInfo::GetTypeName() const {
  return "jynetwork.proto.SCMessageCorpsBossInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageCorpsList::kCorpsInfoFieldNumber;
const int SCMessageCorpsList::kRankFieldNumber;
const int SCMessageCorpsList::kMyAccIdFieldNumber;
const int SCMessageCorpsList::kApplyListFieldNumber;
#endif  // !_MSC_VER

SCMessageCorpsList::SCMessageCorpsList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageCorpsList::InitAsDefaultInstance() {
}

SCMessageCorpsList::SCMessageCorpsList(const SCMessageCorpsList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageCorpsList::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  my_acc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageCorpsList::~SCMessageCorpsList() {
  SharedDtor();
}

void SCMessageCorpsList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageCorpsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageCorpsList& SCMessageCorpsList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageCorpsList* SCMessageCorpsList::default_instance_ = NULL;

SCMessageCorpsList* SCMessageCorpsList::New() const {
  return new SCMessageCorpsList;
}

void SCMessageCorpsList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    rank_ = 0u;
    my_acc_id_ = 0u;
  }
  corps_info_.Clear();
  apply_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageCorpsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jynetwork.proto.CorpsInfo corps_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corps_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_corps_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_corps_info;
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_my_acc_id;
        break;
      }

      // optional uint32 my_acc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_acc_id_)));
          set_has_my_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_apply_list;
        break;
      }

      // repeated uint32 apply_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_apply_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apply_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_apply_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageCorpsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jynetwork.proto.CorpsInfo corps_info = 1;
  for (int i = 0; i < this->corps_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->corps_info(i), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 my_acc_id = 3;
  if (has_my_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->my_acc_id(), output);
  }

  // repeated uint32 apply_list = 4;
  for (int i = 0; i < this->apply_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->apply_list(i), output);
  }

}

int SCMessageCorpsList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 my_acc_id = 3;
    if (has_my_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_acc_id());
    }

  }
  // repeated .jynetwork.proto.CorpsInfo corps_info = 1;
  total_size += 1 * this->corps_info_size();
  for (int i = 0; i < this->corps_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->corps_info(i));
  }

  // repeated uint32 apply_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->apply_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->apply_list(i));
    }
    total_size += 1 * this->apply_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageCorpsList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageCorpsList*>(&from));
}

void SCMessageCorpsList::MergeFrom(const SCMessageCorpsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  corps_info_.MergeFrom(from.corps_info_);
  apply_list_.MergeFrom(from.apply_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_my_acc_id()) {
      set_my_acc_id(from.my_acc_id());
    }
  }
}

void SCMessageCorpsList::CopyFrom(const SCMessageCorpsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageCorpsList::IsInitialized() const {

  return true;
}

void SCMessageCorpsList::Swap(SCMessageCorpsList* other) {
  if (other != this) {
    corps_info_.Swap(&other->corps_info_);
    std::swap(rank_, other->rank_);
    std::swap(my_acc_id_, other->my_acc_id_);
    apply_list_.Swap(&other->apply_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageCorpsList::GetTypeName() const {
  return "jynetwork.proto.SCMessageCorpsList";
}


// ===================================================================

#ifndef _MSC_VER
const int MessagePKOper::kOperFieldNumber;
const int MessagePKOper::kSkillIdFieldNumber;
const int MessagePKOper::kHpFieldNumber;
const int MessagePKOper::kPosxFieldNumber;
const int MessagePKOper::kPosyFieldNumber;
#endif  // !_MSC_VER

MessagePKOper::MessagePKOper()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MessagePKOper::InitAsDefaultInstance() {
}

MessagePKOper::MessagePKOper(const MessagePKOper& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MessagePKOper::SharedCtor() {
  _cached_size_ = 0;
  oper_ = 1;
  skill_id_ = 0u;
  hp_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagePKOper::~MessagePKOper() {
  SharedDtor();
}

void MessagePKOper::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MessagePKOper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MessagePKOper& MessagePKOper::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

MessagePKOper* MessagePKOper::default_instance_ = NULL;

MessagePKOper* MessagePKOper::New() const {
  return new MessagePKOper;
}

void MessagePKOper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_ = 1;
    skill_id_ = 0u;
    hp_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MessagePKOper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jynetwork.proto.ePKOperationOper oper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::ePKOperationOper_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::ePKOperationOper >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posx;
        break;
      }

      // optional uint32 posx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_posy;
        break;
      }

      // optional uint32 posy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessagePKOper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .jynetwork.proto.ePKOperationOper oper = 1;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // optional uint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_id(), output);
  }

  // optional uint32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }

  // optional uint32 posx = 4;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->posx(), output);
  }

  // optional uint32 posy = 5;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->posy(), output);
  }

}

int MessagePKOper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .jynetwork.proto.ePKOperationOper oper = 1;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional uint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional uint32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 posx = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posx());
    }

    // optional uint32 posy = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posy());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePKOper::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessagePKOper*>(&from));
}

void MessagePKOper::MergeFrom(const MessagePKOper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
}

void MessagePKOper::CopyFrom(const MessagePKOper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePKOper::IsInitialized() const {

  return true;
}

void MessagePKOper::Swap(MessagePKOper* other) {
  if (other != this) {
    std::swap(oper_, other->oper_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(hp_, other->hp_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MessagePKOper::GetTypeName() const {
  return "jynetwork.proto.MessagePKOper";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessagePKOperResult::kOperFieldNumber;
const int SCMessagePKOperResult::kResultFieldNumber;
#endif  // !_MSC_VER

SCMessagePKOperResult::SCMessagePKOperResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessagePKOperResult::InitAsDefaultInstance() {
}

SCMessagePKOperResult::SCMessagePKOperResult(const SCMessagePKOperResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessagePKOperResult::SharedCtor() {
  _cached_size_ = 0;
  oper_ = 1;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessagePKOperResult::~SCMessagePKOperResult() {
  SharedDtor();
}

void SCMessagePKOperResult::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessagePKOperResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessagePKOperResult& SCMessagePKOperResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessagePKOperResult* SCMessagePKOperResult::default_instance_ = NULL;

SCMessagePKOperResult* SCMessagePKOperResult::New() const {
  return new SCMessagePKOperResult;
}

void SCMessagePKOperResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_ = 1;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessagePKOperResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jynetwork.proto.ePKOperationOper oper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::ePKOperationOper_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::ePKOperationOper >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .jynetwork.proto.eOpertionResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eOpertionResult_IsValid(value)) {
            set_result(static_cast< ::jynetwork::proto::eOpertionResult >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessagePKOperResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .jynetwork.proto.ePKOperationOper oper = 1;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // optional .jynetwork.proto.eOpertionResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

}

int SCMessagePKOperResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .jynetwork.proto.ePKOperationOper oper = 1;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional .jynetwork.proto.eOpertionResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessagePKOperResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessagePKOperResult*>(&from));
}

void SCMessagePKOperResult::MergeFrom(const SCMessagePKOperResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void SCMessagePKOperResult::CopyFrom(const SCMessagePKOperResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessagePKOperResult::IsInitialized() const {

  return true;
}

void SCMessagePKOperResult::Swap(SCMessagePKOperResult* other) {
  if (other != this) {
    std::swap(oper_, other->oper_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessagePKOperResult::GetTypeName() const {
  return "jynetwork.proto.SCMessagePKOperResult";
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessageFriendList_FriendInfo::kAccIdFieldNumber;
const int SCMessageFriendList_FriendInfo::kNameFieldNumber;
const int SCMessageFriendList_FriendInfo::kLevelFieldNumber;
const int SCMessageFriendList_FriendInfo::kJobFieldNumber;
const int SCMessageFriendList_FriendInfo::kLastMapFieldNumber;
const int SCMessageFriendList_FriendInfo::kStateFieldNumber;
const int SCMessageFriendList_FriendInfo::kFriendTypeFieldNumber;
const int SCMessageFriendList_FriendInfo::kFightPowerFieldNumber;
const int SCMessageFriendList_FriendInfo::kLastNormalMapFieldNumber;
#endif  // !_MSC_VER

SCMessageFriendList_FriendInfo::SCMessageFriendList_FriendInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageFriendList_FriendInfo::InitAsDefaultInstance() {
}

SCMessageFriendList_FriendInfo::SCMessageFriendList_FriendInfo(const SCMessageFriendList_FriendInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageFriendList_FriendInfo::SharedCtor() {
  _cached_size_ = 0;
  acc_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  last_map_ = 0u;
  state_ = 0u;
  friend_type_ = 0u;
  fight_power_ = 0u;
  last_normal_map_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageFriendList_FriendInfo::~SCMessageFriendList_FriendInfo() {
  SharedDtor();
}

void SCMessageFriendList_FriendInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageFriendList_FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageFriendList_FriendInfo& SCMessageFriendList_FriendInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageFriendList_FriendInfo* SCMessageFriendList_FriendInfo::default_instance_ = NULL;

SCMessageFriendList_FriendInfo* SCMessageFriendList_FriendInfo::New() const {
  return new SCMessageFriendList_FriendInfo;
}

void SCMessageFriendList_FriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    acc_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    last_map_ = 0u;
    state_ = 0u;
    friend_type_ = 0u;
    fight_power_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_normal_map_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageFriendList_FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 acc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_map;
        break;
      }

      // optional uint32 last_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_map_)));
          set_has_last_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional uint32 state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_friend_type;
        break;
      }

      // optional uint32 friend_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_type_)));
          set_has_friend_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight_power;
        break;
      }

      // optional uint32 fight_power = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_normal_map;
        break;
      }

      // optional uint32 last_normal_map = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_normal_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_normal_map_)));
          set_has_last_normal_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageFriendList_FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 acc_id = 1;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->acc_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 last_map = 5;
  if (has_last_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_map(), output);
  }

  // optional uint32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->state(), output);
  }

  // optional uint32 friend_type = 7;
  if (has_friend_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->friend_type(), output);
  }

  // optional uint32 fight_power = 8;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fight_power(), output);
  }

  // optional uint32 last_normal_map = 9;
  if (has_last_normal_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->last_normal_map(), output);
  }

}

int SCMessageFriendList_FriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 acc_id = 1;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 last_map = 5;
    if (has_last_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_map());
    }

    // optional uint32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 friend_type = 7;
    if (has_friend_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_type());
    }

    // optional uint32 fight_power = 8;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 last_normal_map = 9;
    if (has_last_normal_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_normal_map());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageFriendList_FriendInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageFriendList_FriendInfo*>(&from));
}

void SCMessageFriendList_FriendInfo::MergeFrom(const SCMessageFriendList_FriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_last_map()) {
      set_last_map(from.last_map());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_friend_type()) {
      set_friend_type(from.friend_type());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_normal_map()) {
      set_last_normal_map(from.last_normal_map());
    }
  }
}

void SCMessageFriendList_FriendInfo::CopyFrom(const SCMessageFriendList_FriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageFriendList_FriendInfo::IsInitialized() const {

  return true;
}

void SCMessageFriendList_FriendInfo::Swap(SCMessageFriendList_FriendInfo* other) {
  if (other != this) {
    std::swap(acc_id_, other->acc_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(last_map_, other->last_map_);
    std::swap(state_, other->state_);
    std::swap(friend_type_, other->friend_type_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(last_normal_map_, other->last_normal_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageFriendList_FriendInfo::GetTypeName() const {
  return "jynetwork.proto.SCMessageFriendList.FriendInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SCMessageFriendList::kFriendInfoFieldNumber;
const int SCMessageFriendList::kCorpsInfoFieldNumber;
const int SCMessageFriendList::kFromAccIdFieldNumber;
#endif  // !_MSC_VER

SCMessageFriendList::SCMessageFriendList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SCMessageFriendList::InitAsDefaultInstance() {
}

SCMessageFriendList::SCMessageFriendList(const SCMessageFriendList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessageFriendList::SharedCtor() {
  _cached_size_ = 0;
  from_acc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessageFriendList::~SCMessageFriendList() {
  SharedDtor();
}

void SCMessageFriendList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SCMessageFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SCMessageFriendList& SCMessageFriendList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SCMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SCMessage_2eproto();
#endif
  return *default_instance_;
}

SCMessageFriendList* SCMessageFriendList::default_instance_ = NULL;

SCMessageFriendList* SCMessageFriendList::New() const {
  return new SCMessageFriendList;
}

void SCMessageFriendList::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    from_acc_id_ = 0u;
  }
  friend_info_.Clear();
  corps_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SCMessageFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jynetwork.proto.SCMessageFriendList.FriendInfo friend_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friend_info;
        if (input->ExpectTag(18)) goto parse_corps_info;
        break;
      }

      // repeated .jynetwork.proto.SCMessageFriendList.FriendInfo corps_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corps_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_corps_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_corps_info;
        if (input->ExpectTag(24)) goto parse_from_acc_id;
        break;
      }

      // optional uint32 from_acc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_acc_id_)));
          set_has_from_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessageFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jynetwork.proto.SCMessageFriendList.FriendInfo friend_info = 1;
  for (int i = 0; i < this->friend_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->friend_info(i), output);
  }

  // repeated .jynetwork.proto.SCMessageFriendList.FriendInfo corps_info = 2;
  for (int i = 0; i < this->corps_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->corps_info(i), output);
  }

  // optional uint32 from_acc_id = 3;
  if (has_from_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from_acc_id(), output);
  }

}

int SCMessageFriendList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 from_acc_id = 3;
    if (has_from_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_acc_id());
    }

  }
  // repeated .jynetwork.proto.SCMessageFriendList.FriendInfo friend_info = 1;
  total_size += 1 * this->friend_info_size();
  for (int i = 0; i < this->friend_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_info(i));
  }

  // repeated .jynetwork.proto.SCMessageFriendList.FriendInfo corps_info = 2;
  total_size += 1 * this->corps_info_size();
  for (int i = 0; i < this->corps_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->corps_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessageFriendList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SCMessageFriendList*>(&from));
}

void SCMessageFriendList::MergeFrom(const SCMessageFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_info_.MergeFrom(from.friend_info_);
  corps_info_.MergeFrom(from.corps_info_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_from_acc_id()) {
      set_from_acc_id(from.from_acc_id());
    }
  }
}

void SCMessageFriendList::CopyFrom(const SCMessageFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessageFriendList::IsInitialized() const {

  return true;
}

void SCMessageFriendList::Swap(SCMessageFriendList* other) {
  if (other != this) {
    friend_info_.Swap(&other->friend_info_);
    corps_info_.Swap(&other->corps_info_);
    std::swap(from_acc_id_, other->from_acc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SCMessageFriendList::GetTypeName() const {
  return "jynetwork.proto.SCMessageFriendList";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace jynetwork

// @@protoc_insertion_point(global_scope)
