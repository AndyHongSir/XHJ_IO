// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace jynetwork {
namespace proto {

void protobuf_ShutdownFile_CSMessage_2eproto() {
  delete CSMessageNetBattleBegin::default_instance_;
  delete CSMessageNetBattleOper::default_instance_;
  delete CSMessageLoginAuth::default_instance_;
  delete CSMessageGateAuth::default_instance_;
  delete CSMessageCreateCharInfo::default_instance_;
  delete CSMessageCreateCharJob::default_instance_;
  delete batchInject::default_instance_;
  delete CSMessageClientOperation::default_instance_;
  delete CSMessageBattleBegin::default_instance_;
  delete BattleTime::default_instance_;
  delete BattleAttr::default_instance_;
  delete CSMessageBattleCheck::default_instance_;
  delete BatttleSkillStatistics::default_instance_;
  delete DamageScore::default_instance_;
  delete CSMessageBattleResult::default_instance_;
  delete CSMessagePing::default_instance_;
  delete CSMessageGMCommond::default_instance_;
  delete CSMessageRankList::default_instance_;
  delete CSMessagePlayerQuery::default_instance_;
  delete CSMessageCorpsOper::default_instance_;
  delete CSMessageChat::default_instance_;
  delete CSMessageArenaBattleBegin::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::jynetwork::proto::protobuf_AddDesc_MessageHeader_2eproto();
  ::jynetwork::proto::protobuf_AddDesc_XML_2eproto();
  ::jynetwork::proto::protobuf_AddDesc_StoC_2eproto();
  CSMessageNetBattleBegin::default_instance_ = new CSMessageNetBattleBegin();
  CSMessageNetBattleOper::default_instance_ = new CSMessageNetBattleOper();
  CSMessageLoginAuth::default_instance_ = new CSMessageLoginAuth();
  CSMessageGateAuth::default_instance_ = new CSMessageGateAuth();
  CSMessageCreateCharInfo::default_instance_ = new CSMessageCreateCharInfo();
  CSMessageCreateCharJob::default_instance_ = new CSMessageCreateCharJob();
  batchInject::default_instance_ = new batchInject();
  CSMessageClientOperation::default_instance_ = new CSMessageClientOperation();
  CSMessageBattleBegin::default_instance_ = new CSMessageBattleBegin();
  BattleTime::default_instance_ = new BattleTime();
  BattleAttr::default_instance_ = new BattleAttr();
  CSMessageBattleCheck::default_instance_ = new CSMessageBattleCheck();
  BatttleSkillStatistics::default_instance_ = new BatttleSkillStatistics();
  DamageScore::default_instance_ = new DamageScore();
  CSMessageBattleResult::default_instance_ = new CSMessageBattleResult();
  CSMessagePing::default_instance_ = new CSMessagePing();
  CSMessageGMCommond::default_instance_ = new CSMessageGMCommond();
  CSMessageRankList::default_instance_ = new CSMessageRankList();
  CSMessagePlayerQuery::default_instance_ = new CSMessagePlayerQuery();
  CSMessageCorpsOper::default_instance_ = new CSMessageCorpsOper();
  CSMessageChat::default_instance_ = new CSMessageChat();
  CSMessageArenaBattleBegin::default_instance_ = new CSMessageArenaBattleBegin();
  CSMessageNetBattleBegin::default_instance_->InitAsDefaultInstance();
  CSMessageNetBattleOper::default_instance_->InitAsDefaultInstance();
  CSMessageLoginAuth::default_instance_->InitAsDefaultInstance();
  CSMessageGateAuth::default_instance_->InitAsDefaultInstance();
  CSMessageCreateCharInfo::default_instance_->InitAsDefaultInstance();
  CSMessageCreateCharJob::default_instance_->InitAsDefaultInstance();
  batchInject::default_instance_->InitAsDefaultInstance();
  CSMessageClientOperation::default_instance_->InitAsDefaultInstance();
  CSMessageBattleBegin::default_instance_->InitAsDefaultInstance();
  BattleTime::default_instance_->InitAsDefaultInstance();
  BattleAttr::default_instance_->InitAsDefaultInstance();
  CSMessageBattleCheck::default_instance_->InitAsDefaultInstance();
  BatttleSkillStatistics::default_instance_->InitAsDefaultInstance();
  DamageScore::default_instance_->InitAsDefaultInstance();
  CSMessageBattleResult::default_instance_->InitAsDefaultInstance();
  CSMessagePing::default_instance_->InitAsDefaultInstance();
  CSMessageGMCommond::default_instance_->InitAsDefaultInstance();
  CSMessageRankList::default_instance_->InitAsDefaultInstance();
  CSMessagePlayerQuery::default_instance_->InitAsDefaultInstance();
  CSMessageCorpsOper::default_instance_->InitAsDefaultInstance();
  CSMessageChat::default_instance_->InitAsDefaultInstance();
  CSMessageArenaBattleBegin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSMessage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSMessage_2eproto_once_);
void protobuf_AddDesc_CSMessage_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSMessage_2eproto_once_,
                 &protobuf_AddDesc_CSMessage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSMessage_2eproto {
  StaticDescriptorInitializer_CSMessage_2eproto() {
    protobuf_AddDesc_CSMessage_2eproto();
  }
} static_descriptor_initializer_CSMessage_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSMessageNetBattleBegin::kMapIdFieldNumber;
const int CSMessageNetBattleBegin::kNetTypeFieldNumber;
const int CSMessageNetBattleBegin::kCiFieldNumber;
#endif  // !_MSC_VER

CSMessageNetBattleBegin::CSMessageNetBattleBegin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageNetBattleBegin::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ci_ = const_cast< ::jynetwork::proto::sCharactorInit*>(
      ::jynetwork::proto::sCharactorInit::internal_default_instance());
#else
  ci_ = const_cast< ::jynetwork::proto::sCharactorInit*>(&::jynetwork::proto::sCharactorInit::default_instance());
#endif
}

CSMessageNetBattleBegin::CSMessageNetBattleBegin(const CSMessageNetBattleBegin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageNetBattleBegin::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  net_type_ = 0u;
  ci_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageNetBattleBegin::~CSMessageNetBattleBegin() {
  SharedDtor();
}

void CSMessageNetBattleBegin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ci_;
  }
}

void CSMessageNetBattleBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageNetBattleBegin& CSMessageNetBattleBegin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageNetBattleBegin* CSMessageNetBattleBegin::default_instance_ = NULL;

CSMessageNetBattleBegin* CSMessageNetBattleBegin::New() const {
  return new CSMessageNetBattleBegin;
}

void CSMessageNetBattleBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    net_type_ = 0u;
    if (has_ci()) {
      if (ci_ != NULL) ci_->::jynetwork::proto::sCharactorInit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageNetBattleBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_net_type;
        break;
      }

      // optional uint32 net_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_type_)));
          set_has_net_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ci;
        break;
      }

      // optional .jynetwork.proto.sCharactorInit ci = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ci:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ci()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageNetBattleBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional uint32 net_type = 2;
  if (has_net_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->net_type(), output);
  }

  // optional .jynetwork.proto.sCharactorInit ci = 4;
  if (has_ci()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ci(), output);
  }

}

int CSMessageNetBattleBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 net_type = 2;
    if (has_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_type());
    }

    // optional .jynetwork.proto.sCharactorInit ci = 4;
    if (has_ci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ci());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageNetBattleBegin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageNetBattleBegin*>(&from));
}

void CSMessageNetBattleBegin::MergeFrom(const CSMessageNetBattleBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_net_type()) {
      set_net_type(from.net_type());
    }
    if (from.has_ci()) {
      mutable_ci()->::jynetwork::proto::sCharactorInit::MergeFrom(from.ci());
    }
  }
}

void CSMessageNetBattleBegin::CopyFrom(const CSMessageNetBattleBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageNetBattleBegin::IsInitialized() const {

  return true;
}

void CSMessageNetBattleBegin::Swap(CSMessageNetBattleBegin* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(net_type_, other->net_type_);
    std::swap(ci_, other->ci_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageNetBattleBegin::GetTypeName() const {
  return "jynetwork.proto.CSMessageNetBattleBegin";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageNetBattleOper::kOpersFieldNumber;
const int CSMessageNetBattleOper::kBattleTimeFieldNumber;
#endif  // !_MSC_VER

CSMessageNetBattleOper::CSMessageNetBattleOper()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageNetBattleOper::InitAsDefaultInstance() {
}

CSMessageNetBattleOper::CSMessageNetBattleOper(const CSMessageNetBattleOper& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageNetBattleOper::SharedCtor() {
  _cached_size_ = 0;
  battle_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageNetBattleOper::~CSMessageNetBattleOper() {
  SharedDtor();
}

void CSMessageNetBattleOper::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessageNetBattleOper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageNetBattleOper& CSMessageNetBattleOper::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageNetBattleOper* CSMessageNetBattleOper::default_instance_ = NULL;

CSMessageNetBattleOper* CSMessageNetBattleOper::New() const {
  return new CSMessageNetBattleOper;
}

void CSMessageNetBattleOper::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    battle_time_ = 0u;
  }
  opers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageNetBattleOper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jynetwork.proto.NetBattleOper opers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_opers;
        if (input->ExpectTag(16)) goto parse_battle_time;
        break;
      }

      // optional uint32 battle_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_time_)));
          set_has_battle_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageNetBattleOper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jynetwork.proto.NetBattleOper opers = 1;
  for (int i = 0; i < this->opers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->opers(i), output);
  }

  // optional uint32 battle_time = 2;
  if (has_battle_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battle_time(), output);
  }

}

int CSMessageNetBattleOper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 battle_time = 2;
    if (has_battle_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_time());
    }

  }
  // repeated .jynetwork.proto.NetBattleOper opers = 1;
  total_size += 1 * this->opers_size();
  for (int i = 0; i < this->opers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageNetBattleOper::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageNetBattleOper*>(&from));
}

void CSMessageNetBattleOper::MergeFrom(const CSMessageNetBattleOper& from) {
  GOOGLE_CHECK_NE(&from, this);
  opers_.MergeFrom(from.opers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_battle_time()) {
      set_battle_time(from.battle_time());
    }
  }
}

void CSMessageNetBattleOper::CopyFrom(const CSMessageNetBattleOper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageNetBattleOper::IsInitialized() const {

  return true;
}

void CSMessageNetBattleOper::Swap(CSMessageNetBattleOper* other) {
  if (other != this) {
    opers_.Swap(&other->opers_);
    std::swap(battle_time_, other->battle_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageNetBattleOper::GetTypeName() const {
  return "jynetwork.proto.CSMessageNetBattleOper";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageLoginAuth::kVerMainFieldNumber;
const int CSMessageLoginAuth::kVerSubFieldNumber;
const int CSMessageLoginAuth::kVerTypeFieldNumber;
const int CSMessageLoginAuth::kUserNameFieldNumber;
const int CSMessageLoginAuth::kUserPassFieldNumber;
const int CSMessageLoginAuth::kGmCheckFieldNumber;
const int CSMessageLoginAuth::kIsCreateFieldNumber;
const int CSMessageLoginAuth::kPacketidFieldNumber;
const int CSMessageLoginAuth::kOpenIdFieldNumber;
const int CSMessageLoginAuth::kTokenFieldNumber;
const int CSMessageLoginAuth::kDeviceIdFieldNumber;
const int CSMessageLoginAuth::kInnerCrcFieldNumber;
const int CSMessageLoginAuth::kOuterCrcFieldNumber;
const int CSMessageLoginAuth::kIdfaFieldNumber;
const int CSMessageLoginAuth::kIpFieldNumber;
const int CSMessageLoginAuth::kTestKeyFieldNumber;
const int CSMessageLoginAuth::kLilithPacketNameFieldNumber;
const int CSMessageLoginAuth::kLilithChannelIdFieldNumber;
const int CSMessageLoginAuth::kLilithIdfaFieldNumber;
const int CSMessageLoginAuth::kLilithAndriodIdFieldNumber;
const int CSMessageLoginAuth::kLilithGoogleIdFieldNumber;
const int CSMessageLoginAuth::kLilithOsTypeFieldNumber;
const int CSMessageLoginAuth::kLilithOsVersionFieldNumber;
const int CSMessageLoginAuth::kLilithAppVersionFieldNumber;
const int CSMessageLoginAuth::kLilithDeviceModelFieldNumber;
#endif  // !_MSC_VER

CSMessageLoginAuth::CSMessageLoginAuth()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageLoginAuth::InitAsDefaultInstance() {
}

CSMessageLoginAuth::CSMessageLoginAuth(const CSMessageLoginAuth& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageLoginAuth::SharedCtor() {
  _cached_size_ = 0;
  ver_main_ = 0u;
  ver_sub_ = 0u;
  ver_type_ = 0u;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gm_check_ = 0u;
  is_create_ = 0u;
  packetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  open_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inner_crc_ = 0u;
  outer_crc_ = 0u;
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  test_key_ = 0u;
  lilith_packet_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lilith_channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lilith_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lilith_andriod_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lilith_google_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lilith_os_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lilith_os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lilith_app_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lilith_device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageLoginAuth::~CSMessageLoginAuth() {
  SharedDtor();
}

void CSMessageLoginAuth::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_pass_ != &::google::protobuf::internal::kEmptyString) {
    delete user_pass_;
  }
  if (packetid_ != &::google::protobuf::internal::kEmptyString) {
    delete packetid_;
  }
  if (open_id_ != &::google::protobuf::internal::kEmptyString) {
    delete open_id_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (lilith_packet_name_ != &::google::protobuf::internal::kEmptyString) {
    delete lilith_packet_name_;
  }
  if (lilith_channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete lilith_channel_id_;
  }
  if (lilith_idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete lilith_idfa_;
  }
  if (lilith_andriod_id_ != &::google::protobuf::internal::kEmptyString) {
    delete lilith_andriod_id_;
  }
  if (lilith_google_id_ != &::google::protobuf::internal::kEmptyString) {
    delete lilith_google_id_;
  }
  if (lilith_os_type_ != &::google::protobuf::internal::kEmptyString) {
    delete lilith_os_type_;
  }
  if (lilith_os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete lilith_os_version_;
  }
  if (lilith_app_version_ != &::google::protobuf::internal::kEmptyString) {
    delete lilith_app_version_;
  }
  if (lilith_device_model_ != &::google::protobuf::internal::kEmptyString) {
    delete lilith_device_model_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessageLoginAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageLoginAuth& CSMessageLoginAuth::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageLoginAuth* CSMessageLoginAuth::default_instance_ = NULL;

CSMessageLoginAuth* CSMessageLoginAuth::New() const {
  return new CSMessageLoginAuth;
}

void CSMessageLoginAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ver_main_ = 0u;
    ver_sub_ = 0u;
    ver_type_ = 0u;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_user_pass()) {
      if (user_pass_ != &::google::protobuf::internal::kEmptyString) {
        user_pass_->clear();
      }
    }
    gm_check_ = 0u;
    is_create_ = 0u;
    if (has_packetid()) {
      if (packetid_ != &::google::protobuf::internal::kEmptyString) {
        packetid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_open_id()) {
      if (open_id_ != &::google::protobuf::internal::kEmptyString) {
        open_id_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    inner_crc_ = 0u;
    outer_crc_ = 0u;
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    test_key_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_lilith_packet_name()) {
      if (lilith_packet_name_ != &::google::protobuf::internal::kEmptyString) {
        lilith_packet_name_->clear();
      }
    }
    if (has_lilith_channel_id()) {
      if (lilith_channel_id_ != &::google::protobuf::internal::kEmptyString) {
        lilith_channel_id_->clear();
      }
    }
    if (has_lilith_idfa()) {
      if (lilith_idfa_ != &::google::protobuf::internal::kEmptyString) {
        lilith_idfa_->clear();
      }
    }
    if (has_lilith_andriod_id()) {
      if (lilith_andriod_id_ != &::google::protobuf::internal::kEmptyString) {
        lilith_andriod_id_->clear();
      }
    }
    if (has_lilith_google_id()) {
      if (lilith_google_id_ != &::google::protobuf::internal::kEmptyString) {
        lilith_google_id_->clear();
      }
    }
    if (has_lilith_os_type()) {
      if (lilith_os_type_ != &::google::protobuf::internal::kEmptyString) {
        lilith_os_type_->clear();
      }
    }
    if (has_lilith_os_version()) {
      if (lilith_os_version_ != &::google::protobuf::internal::kEmptyString) {
        lilith_os_version_->clear();
      }
    }
    if (has_lilith_app_version()) {
      if (lilith_app_version_ != &::google::protobuf::internal::kEmptyString) {
        lilith_app_version_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_lilith_device_model()) {
      if (lilith_device_model_ != &::google::protobuf::internal::kEmptyString) {
        lilith_device_model_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageLoginAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ver_main = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_main_)));
          set_has_ver_main();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ver_sub;
        break;
      }

      // optional uint32 ver_sub = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver_sub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_sub_)));
          set_has_ver_sub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ver_type;
        break;
      }

      // optional uint32 ver_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_type_)));
          set_has_ver_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_name;
        break;
      }

      // optional string user_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_pass;
        break;
      }

      // optional bytes user_pass = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_pass()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gm_check;
        break;
      }

      // optional uint32 gm_check = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gm_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gm_check_)));
          set_has_gm_check();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_create;
        break;
      }

      // optional uint32 is_create = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_create:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_create_)));
          set_has_is_create();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_packetid;
        break;
      }

      // optional string packetid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packetid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packetid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_open_id;
        break;
      }

      // optional string open_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_token;
        break;
      }

      // optional string token = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_device_id;
        break;
      }

      // optional bytes device_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_inner_crc;
        break;
      }

      // optional fixed32 inner_crc = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_inner_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &inner_crc_)));
          set_has_inner_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_outer_crc;
        break;
      }

      // optional fixed32 outer_crc = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_outer_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &outer_crc_)));
          set_has_outer_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_idfa;
        break;
      }

      // optional bytes idfa = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_idfa()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ip;
        break;
      }

      // optional bytes ip = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_test_key;
        break;
      }

      // optional uint32 test_key = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test_key_)));
          set_has_test_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_lilith_packet_name;
        break;
      }

      // optional bytes lilith_packet_name = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lilith_packet_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lilith_packet_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_lilith_channel_id;
        break;
      }

      // optional bytes lilith_channel_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lilith_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lilith_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_lilith_idfa;
        break;
      }

      // optional bytes lilith_idfa = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lilith_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lilith_idfa()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_lilith_andriod_id;
        break;
      }

      // optional bytes lilith_andriod_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lilith_andriod_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lilith_andriod_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_lilith_google_id;
        break;
      }

      // optional bytes lilith_google_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lilith_google_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lilith_google_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_lilith_os_type;
        break;
      }

      // optional bytes lilith_os_type = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lilith_os_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lilith_os_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_lilith_os_version;
        break;
      }

      // optional bytes lilith_os_version = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lilith_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lilith_os_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_lilith_app_version;
        break;
      }

      // optional bytes lilith_app_version = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lilith_app_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lilith_app_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_lilith_device_model;
        break;
      }

      // optional bytes lilith_device_model = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lilith_device_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lilith_device_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageLoginAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ver_main = 1;
  if (has_ver_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver_main(), output);
  }

  // optional uint32 ver_sub = 2;
  if (has_ver_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ver_sub(), output);
  }

  // optional uint32 ver_type = 3;
  if (has_ver_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ver_type(), output);
  }

  // optional string user_name = 4;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_name(), output);
  }

  // optional bytes user_pass = 5;
  if (has_user_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->user_pass(), output);
  }

  // optional uint32 gm_check = 6;
  if (has_gm_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gm_check(), output);
  }

  // optional uint32 is_create = 7;
  if (has_is_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->is_create(), output);
  }

  // optional string packetid = 8;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->packetid(), output);
  }

  // optional string open_id = 9;
  if (has_open_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->open_id(), output);
  }

  // optional string token = 10;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->token(), output);
  }

  // optional bytes device_id = 11;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->device_id(), output);
  }

  // optional fixed32 inner_crc = 12;
  if (has_inner_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->inner_crc(), output);
  }

  // optional fixed32 outer_crc = 13;
  if (has_outer_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->outer_crc(), output);
  }

  // optional bytes idfa = 14;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->idfa(), output);
  }

  // optional bytes ip = 15;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->ip(), output);
  }

  // optional uint32 test_key = 16;
  if (has_test_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->test_key(), output);
  }

  // optional bytes lilith_packet_name = 17;
  if (has_lilith_packet_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->lilith_packet_name(), output);
  }

  // optional bytes lilith_channel_id = 18;
  if (has_lilith_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->lilith_channel_id(), output);
  }

  // optional bytes lilith_idfa = 19;
  if (has_lilith_idfa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      19, this->lilith_idfa(), output);
  }

  // optional bytes lilith_andriod_id = 20;
  if (has_lilith_andriod_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->lilith_andriod_id(), output);
  }

  // optional bytes lilith_google_id = 21;
  if (has_lilith_google_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      21, this->lilith_google_id(), output);
  }

  // optional bytes lilith_os_type = 22;
  if (has_lilith_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      22, this->lilith_os_type(), output);
  }

  // optional bytes lilith_os_version = 23;
  if (has_lilith_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      23, this->lilith_os_version(), output);
  }

  // optional bytes lilith_app_version = 24;
  if (has_lilith_app_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      24, this->lilith_app_version(), output);
  }

  // optional bytes lilith_device_model = 25;
  if (has_lilith_device_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      25, this->lilith_device_model(), output);
  }

}

int CSMessageLoginAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ver_main = 1;
    if (has_ver_main()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver_main());
    }

    // optional uint32 ver_sub = 2;
    if (has_ver_sub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver_sub());
    }

    // optional uint32 ver_type = 3;
    if (has_ver_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver_type());
    }

    // optional string user_name = 4;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional bytes user_pass = 5;
    if (has_user_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_pass());
    }

    // optional uint32 gm_check = 6;
    if (has_gm_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gm_check());
    }

    // optional uint32 is_create = 7;
    if (has_is_create()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_create());
    }

    // optional string packetid = 8;
    if (has_packetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packetid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string open_id = 9;
    if (has_open_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_id());
    }

    // optional string token = 10;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional bytes device_id = 11;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_id());
    }

    // optional fixed32 inner_crc = 12;
    if (has_inner_crc()) {
      total_size += 1 + 4;
    }

    // optional fixed32 outer_crc = 13;
    if (has_outer_crc()) {
      total_size += 1 + 4;
    }

    // optional bytes idfa = 14;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->idfa());
    }

    // optional bytes ip = 15;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional uint32 test_key = 16;
    if (has_test_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test_key());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes lilith_packet_name = 17;
    if (has_lilith_packet_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lilith_packet_name());
    }

    // optional bytes lilith_channel_id = 18;
    if (has_lilith_channel_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lilith_channel_id());
    }

    // optional bytes lilith_idfa = 19;
    if (has_lilith_idfa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lilith_idfa());
    }

    // optional bytes lilith_andriod_id = 20;
    if (has_lilith_andriod_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lilith_andriod_id());
    }

    // optional bytes lilith_google_id = 21;
    if (has_lilith_google_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lilith_google_id());
    }

    // optional bytes lilith_os_type = 22;
    if (has_lilith_os_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lilith_os_type());
    }

    // optional bytes lilith_os_version = 23;
    if (has_lilith_os_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lilith_os_version());
    }

    // optional bytes lilith_app_version = 24;
    if (has_lilith_app_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lilith_app_version());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bytes lilith_device_model = 25;
    if (has_lilith_device_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lilith_device_model());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageLoginAuth::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageLoginAuth*>(&from));
}

void CSMessageLoginAuth::MergeFrom(const CSMessageLoginAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver_main()) {
      set_ver_main(from.ver_main());
    }
    if (from.has_ver_sub()) {
      set_ver_sub(from.ver_sub());
    }
    if (from.has_ver_type()) {
      set_ver_type(from.ver_type());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_user_pass()) {
      set_user_pass(from.user_pass());
    }
    if (from.has_gm_check()) {
      set_gm_check(from.gm_check());
    }
    if (from.has_is_create()) {
      set_is_create(from.is_create());
    }
    if (from.has_packetid()) {
      set_packetid(from.packetid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_open_id()) {
      set_open_id(from.open_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_inner_crc()) {
      set_inner_crc(from.inner_crc());
    }
    if (from.has_outer_crc()) {
      set_outer_crc(from.outer_crc());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_test_key()) {
      set_test_key(from.test_key());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lilith_packet_name()) {
      set_lilith_packet_name(from.lilith_packet_name());
    }
    if (from.has_lilith_channel_id()) {
      set_lilith_channel_id(from.lilith_channel_id());
    }
    if (from.has_lilith_idfa()) {
      set_lilith_idfa(from.lilith_idfa());
    }
    if (from.has_lilith_andriod_id()) {
      set_lilith_andriod_id(from.lilith_andriod_id());
    }
    if (from.has_lilith_google_id()) {
      set_lilith_google_id(from.lilith_google_id());
    }
    if (from.has_lilith_os_type()) {
      set_lilith_os_type(from.lilith_os_type());
    }
    if (from.has_lilith_os_version()) {
      set_lilith_os_version(from.lilith_os_version());
    }
    if (from.has_lilith_app_version()) {
      set_lilith_app_version(from.lilith_app_version());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lilith_device_model()) {
      set_lilith_device_model(from.lilith_device_model());
    }
  }
}

void CSMessageLoginAuth::CopyFrom(const CSMessageLoginAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageLoginAuth::IsInitialized() const {

  return true;
}

void CSMessageLoginAuth::Swap(CSMessageLoginAuth* other) {
  if (other != this) {
    std::swap(ver_main_, other->ver_main_);
    std::swap(ver_sub_, other->ver_sub_);
    std::swap(ver_type_, other->ver_type_);
    std::swap(user_name_, other->user_name_);
    std::swap(user_pass_, other->user_pass_);
    std::swap(gm_check_, other->gm_check_);
    std::swap(is_create_, other->is_create_);
    std::swap(packetid_, other->packetid_);
    std::swap(open_id_, other->open_id_);
    std::swap(token_, other->token_);
    std::swap(device_id_, other->device_id_);
    std::swap(inner_crc_, other->inner_crc_);
    std::swap(outer_crc_, other->outer_crc_);
    std::swap(idfa_, other->idfa_);
    std::swap(ip_, other->ip_);
    std::swap(test_key_, other->test_key_);
    std::swap(lilith_packet_name_, other->lilith_packet_name_);
    std::swap(lilith_channel_id_, other->lilith_channel_id_);
    std::swap(lilith_idfa_, other->lilith_idfa_);
    std::swap(lilith_andriod_id_, other->lilith_andriod_id_);
    std::swap(lilith_google_id_, other->lilith_google_id_);
    std::swap(lilith_os_type_, other->lilith_os_type_);
    std::swap(lilith_os_version_, other->lilith_os_version_);
    std::swap(lilith_app_version_, other->lilith_app_version_);
    std::swap(lilith_device_model_, other->lilith_device_model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageLoginAuth::GetTypeName() const {
  return "jynetwork.proto.CSMessageLoginAuth";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageGateAuth::kAccIdFieldNumber;
const int CSMessageGateAuth::kSessionKeyFieldNumber;
const int CSMessageGateAuth::kNeedFullDataFieldNumber;
const int CSMessageGateAuth::kPushTokenFieldNumber;
const int CSMessageGateAuth::kPushTypeFieldNumber;
#endif  // !_MSC_VER

CSMessageGateAuth::CSMessageGateAuth()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageGateAuth::InitAsDefaultInstance() {
}

CSMessageGateAuth::CSMessageGateAuth(const CSMessageGateAuth& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageGateAuth::SharedCtor() {
  _cached_size_ = 0;
  acc_id_ = 0u;
  session_key_ = 0u;
  need_full_data_ = 0u;
  push_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  push_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageGateAuth::~CSMessageGateAuth() {
  SharedDtor();
}

void CSMessageGateAuth::SharedDtor() {
  if (push_token_ != &::google::protobuf::internal::kEmptyString) {
    delete push_token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessageGateAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageGateAuth& CSMessageGateAuth::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageGateAuth* CSMessageGateAuth::default_instance_ = NULL;

CSMessageGateAuth* CSMessageGateAuth::New() const {
  return new CSMessageGateAuth;
}

void CSMessageGateAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    acc_id_ = 0u;
    session_key_ = 0u;
    need_full_data_ = 0u;
    if (has_push_token()) {
      if (push_token_ != &::google::protobuf::internal::kEmptyString) {
        push_token_->clear();
      }
    }
    push_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageGateAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 acc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_session_key;
        break;
      }

      // required uint32 session_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_key_)));
          set_has_session_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_need_full_data;
        break;
      }

      // optional uint32 need_full_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_full_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_full_data_)));
          set_has_need_full_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_push_token;
        break;
      }

      // optional bytes push_token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_push_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_push_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_push_type;
        break;
      }

      // optional uint32 push_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_push_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &push_type_)));
          set_has_push_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageGateAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 acc_id = 1;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->acc_id(), output);
  }

  // required uint32 session_key = 2;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_key(), output);
  }

  // optional uint32 need_full_data = 3;
  if (has_need_full_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->need_full_data(), output);
  }

  // optional bytes push_token = 4;
  if (has_push_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->push_token(), output);
  }

  // optional uint32 push_type = 5;
  if (has_push_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->push_type(), output);
  }

}

int CSMessageGateAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 acc_id = 1;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_id());
    }

    // required uint32 session_key = 2;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_key());
    }

    // optional uint32 need_full_data = 3;
    if (has_need_full_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_full_data());
    }

    // optional bytes push_token = 4;
    if (has_push_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->push_token());
    }

    // optional uint32 push_type = 5;
    if (has_push_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->push_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageGateAuth::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageGateAuth*>(&from));
}

void CSMessageGateAuth::MergeFrom(const CSMessageGateAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_need_full_data()) {
      set_need_full_data(from.need_full_data());
    }
    if (from.has_push_token()) {
      set_push_token(from.push_token());
    }
    if (from.has_push_type()) {
      set_push_type(from.push_type());
    }
  }
}

void CSMessageGateAuth::CopyFrom(const CSMessageGateAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageGateAuth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSMessageGateAuth::Swap(CSMessageGateAuth* other) {
  if (other != this) {
    std::swap(acc_id_, other->acc_id_);
    std::swap(session_key_, other->session_key_);
    std::swap(need_full_data_, other->need_full_data_);
    std::swap(push_token_, other->push_token_);
    std::swap(push_type_, other->push_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageGateAuth::GetTypeName() const {
  return "jynetwork.proto.CSMessageGateAuth";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageCreateCharInfo::kCharNameFieldNumber;
const int CSMessageCreateCharInfo::kCharCampFieldNumber;
const int CSMessageCreateCharInfo::kAccIdFieldNumber;
#endif  // !_MSC_VER

CSMessageCreateCharInfo::CSMessageCreateCharInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageCreateCharInfo::InitAsDefaultInstance() {
}

CSMessageCreateCharInfo::CSMessageCreateCharInfo(const CSMessageCreateCharInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageCreateCharInfo::SharedCtor() {
  _cached_size_ = 0;
  char_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  char_camp_ = 0u;
  acc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageCreateCharInfo::~CSMessageCreateCharInfo() {
  SharedDtor();
}

void CSMessageCreateCharInfo::SharedDtor() {
  if (char_name_ != &::google::protobuf::internal::kEmptyString) {
    delete char_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessageCreateCharInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageCreateCharInfo& CSMessageCreateCharInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageCreateCharInfo* CSMessageCreateCharInfo::default_instance_ = NULL;

CSMessageCreateCharInfo* CSMessageCreateCharInfo::New() const {
  return new CSMessageCreateCharInfo;
}

void CSMessageCreateCharInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_char_name()) {
      if (char_name_ != &::google::protobuf::internal::kEmptyString) {
        char_name_->clear();
      }
    }
    char_camp_ = 0u;
    acc_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageCreateCharInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes char_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_char_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_camp;
        break;
      }

      // optional uint32 char_camp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_camp_)));
          set_has_char_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_acc_id;
        break;
      }

      // optional uint32 acc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageCreateCharInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes char_name = 1;
  if (has_char_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->char_name(), output);
  }

  // optional uint32 char_camp = 2;
  if (has_char_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_camp(), output);
  }

  // optional uint32 acc_id = 3;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->acc_id(), output);
  }

}

int CSMessageCreateCharInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes char_name = 1;
    if (has_char_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->char_name());
    }

    // optional uint32 char_camp = 2;
    if (has_char_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_camp());
    }

    // optional uint32 acc_id = 3;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageCreateCharInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageCreateCharInfo*>(&from));
}

void CSMessageCreateCharInfo::MergeFrom(const CSMessageCreateCharInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_name()) {
      set_char_name(from.char_name());
    }
    if (from.has_char_camp()) {
      set_char_camp(from.char_camp());
    }
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
  }
}

void CSMessageCreateCharInfo::CopyFrom(const CSMessageCreateCharInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageCreateCharInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSMessageCreateCharInfo::Swap(CSMessageCreateCharInfo* other) {
  if (other != this) {
    std::swap(char_name_, other->char_name_);
    std::swap(char_camp_, other->char_camp_);
    std::swap(acc_id_, other->acc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageCreateCharInfo::GetTypeName() const {
  return "jynetwork.proto.CSMessageCreateCharInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageCreateCharJob::kCharJobFieldNumber;
const int CSMessageCreateCharJob::kAccIdFieldNumber;
#endif  // !_MSC_VER

CSMessageCreateCharJob::CSMessageCreateCharJob()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageCreateCharJob::InitAsDefaultInstance() {
}

CSMessageCreateCharJob::CSMessageCreateCharJob(const CSMessageCreateCharJob& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageCreateCharJob::SharedCtor() {
  _cached_size_ = 0;
  char_job_ = 0u;
  acc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageCreateCharJob::~CSMessageCreateCharJob() {
  SharedDtor();
}

void CSMessageCreateCharJob::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessageCreateCharJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageCreateCharJob& CSMessageCreateCharJob::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageCreateCharJob* CSMessageCreateCharJob::default_instance_ = NULL;

CSMessageCreateCharJob* CSMessageCreateCharJob::New() const {
  return new CSMessageCreateCharJob;
}

void CSMessageCreateCharJob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_job_ = 0u;
    acc_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageCreateCharJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 char_job = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_job_)));
          set_has_char_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_acc_id;
        break;
      }

      // optional uint32 acc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageCreateCharJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 char_job = 1;
  if (has_char_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_job(), output);
  }

  // optional uint32 acc_id = 2;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->acc_id(), output);
  }

}

int CSMessageCreateCharJob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 char_job = 1;
    if (has_char_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_job());
    }

    // optional uint32 acc_id = 2;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageCreateCharJob::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageCreateCharJob*>(&from));
}

void CSMessageCreateCharJob::MergeFrom(const CSMessageCreateCharJob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_job()) {
      set_char_job(from.char_job());
    }
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
  }
}

void CSMessageCreateCharJob::CopyFrom(const CSMessageCreateCharJob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageCreateCharJob::IsInitialized() const {

  return true;
}

void CSMessageCreateCharJob::Swap(CSMessageCreateCharJob* other) {
  if (other != this) {
    std::swap(char_job_, other->char_job_);
    std::swap(acc_id_, other->acc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageCreateCharJob::GetTypeName() const {
  return "jynetwork.proto.CSMessageCreateCharJob";
}


// ===================================================================

#ifndef _MSC_VER
const int batchInject::kOpvalue1FieldNumber;
const int batchInject::kOpvalue4FieldNumber;
const int batchInject::kOpvalue5FieldNumber;
#endif  // !_MSC_VER

batchInject::batchInject()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void batchInject::InitAsDefaultInstance() {
}

batchInject::batchInject(const batchInject& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void batchInject::SharedCtor() {
  _cached_size_ = 0;
  opvalue1_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

batchInject::~batchInject() {
  SharedDtor();
}

void batchInject::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void batchInject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const batchInject& batchInject::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

batchInject* batchInject::default_instance_ = NULL;

batchInject* batchInject::New() const {
  return new batchInject;
}

void batchInject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opvalue1_ = GOOGLE_ULONGLONG(0);
  }
  opvalue4_.Clear();
  opvalue5_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool batchInject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 opvalue1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opvalue1_)));
          set_has_opvalue1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opvalue4;
        break;
      }

      // repeated uint64 opvalue4 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opvalue4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_opvalue4())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_opvalue4())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opvalue4;
        if (input->ExpectTag(24)) goto parse_opvalue5;
        break;
      }

      // repeated uint64 opvalue5 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opvalue5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_opvalue5())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_opvalue5())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opvalue5;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void batchInject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 opvalue1 = 1;
  if (has_opvalue1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->opvalue1(), output);
  }

  // repeated uint64 opvalue4 = 2;
  for (int i = 0; i < this->opvalue4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->opvalue4(i), output);
  }

  // repeated uint64 opvalue5 = 3;
  for (int i = 0; i < this->opvalue5_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->opvalue5(i), output);
  }

}

int batchInject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 opvalue1 = 1;
    if (has_opvalue1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opvalue1());
    }

  }
  // repeated uint64 opvalue4 = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->opvalue4_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->opvalue4(i));
    }
    total_size += 1 * this->opvalue4_size() + data_size;
  }

  // repeated uint64 opvalue5 = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->opvalue5_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->opvalue5(i));
    }
    total_size += 1 * this->opvalue5_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void batchInject::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const batchInject*>(&from));
}

void batchInject::MergeFrom(const batchInject& from) {
  GOOGLE_CHECK_NE(&from, this);
  opvalue4_.MergeFrom(from.opvalue4_);
  opvalue5_.MergeFrom(from.opvalue5_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opvalue1()) {
      set_opvalue1(from.opvalue1());
    }
  }
}

void batchInject::CopyFrom(const batchInject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool batchInject::IsInitialized() const {

  return true;
}

void batchInject::Swap(batchInject* other) {
  if (other != this) {
    std::swap(opvalue1_, other->opvalue1_);
    opvalue4_.Swap(&other->opvalue4_);
    opvalue5_.Swap(&other->opvalue5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string batchInject::GetTypeName() const {
  return "jynetwork.proto.batchInject";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageClientOperation::kOperFieldNumber;
const int CSMessageClientOperation::kOpvalue1FieldNumber;
const int CSMessageClientOperation::kOpvalue2FieldNumber;
const int CSMessageClientOperation::kOpvalue3FieldNumber;
const int CSMessageClientOperation::kAccIdFieldNumber;
const int CSMessageClientOperation::kOpvalue4FieldNumber;
const int CSMessageClientOperation::kOpvalue5FieldNumber;
const int CSMessageClientOperation::kOperIndexFieldNumber;
const int CSMessageClientOperation::kOpvalue6FieldNumber;
const int CSMessageClientOperation::kOpvalue7FieldNumber;
const int CSMessageClientOperation::kOpvalue8FieldNumber;
#endif  // !_MSC_VER

CSMessageClientOperation::CSMessageClientOperation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageClientOperation::InitAsDefaultInstance() {
}

CSMessageClientOperation::CSMessageClientOperation(const CSMessageClientOperation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageClientOperation::SharedCtor() {
  _cached_size_ = 0;
  oper_ = 1;
  opvalue1_ = GOOGLE_ULONGLONG(0);
  opvalue2_ = GOOGLE_ULONGLONG(0);
  opvalue3_ = GOOGLE_ULONGLONG(0);
  acc_id_ = 0u;
  oper_index_ = 0u;
  opvalue6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opvalue8_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageClientOperation::~CSMessageClientOperation() {
  SharedDtor();
}

void CSMessageClientOperation::SharedDtor() {
  if (opvalue6_ != &::google::protobuf::internal::kEmptyString) {
    delete opvalue6_;
  }
  if (opvalue8_ != &::google::protobuf::internal::kEmptyString) {
    delete opvalue8_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessageClientOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageClientOperation& CSMessageClientOperation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageClientOperation* CSMessageClientOperation::default_instance_ = NULL;

CSMessageClientOperation* CSMessageClientOperation::New() const {
  return new CSMessageClientOperation;
}

void CSMessageClientOperation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_ = 1;
    opvalue1_ = GOOGLE_ULONGLONG(0);
    opvalue2_ = GOOGLE_ULONGLONG(0);
    opvalue3_ = GOOGLE_ULONGLONG(0);
    acc_id_ = 0u;
    oper_index_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_opvalue6()) {
      if (opvalue6_ != &::google::protobuf::internal::kEmptyString) {
        opvalue6_->clear();
      }
    }
    if (has_opvalue8()) {
      if (opvalue8_ != &::google::protobuf::internal::kEmptyString) {
        opvalue8_->clear();
      }
    }
  }
  opvalue4_.Clear();
  opvalue5_.Clear();
  opvalue7_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageClientOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .jynetwork.proto.eOpertionType oper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eOpertionType_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::eOpertionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opvalue1;
        break;
      }

      // optional uint64 opvalue1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opvalue1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opvalue1_)));
          set_has_opvalue1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opvalue2;
        break;
      }

      // optional uint64 opvalue2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opvalue2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opvalue2_)));
          set_has_opvalue2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opvalue3;
        break;
      }

      // optional uint64 opvalue3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opvalue3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opvalue3_)));
          set_has_opvalue3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_acc_id;
        break;
      }

      // optional uint32 acc_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_opvalue4;
        break;
      }

      // repeated uint64 opvalue4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opvalue4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_opvalue4())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_opvalue4())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_opvalue4;
        if (input->ExpectTag(56)) goto parse_opvalue5;
        break;
      }

      // repeated uint64 opvalue5 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opvalue5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_opvalue5())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_opvalue5())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_opvalue5;
        if (input->ExpectTag(64)) goto parse_oper_index;
        break;
      }

      // optional uint32 oper_index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_index_)));
          set_has_oper_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_opvalue6;
        break;
      }

      // optional bytes opvalue6 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opvalue6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_opvalue6()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_opvalue7;
        break;
      }

      // repeated .jynetwork.proto.batchInject opvalue7 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opvalue7:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opvalue7()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_opvalue7;
        if (input->ExpectTag(90)) goto parse_opvalue8;
        break;
      }

      // optional bytes opvalue8 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opvalue8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_opvalue8()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageClientOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .jynetwork.proto.eOpertionType oper = 1;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // optional uint64 opvalue1 = 2;
  if (has_opvalue1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->opvalue1(), output);
  }

  // optional uint64 opvalue2 = 3;
  if (has_opvalue2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->opvalue2(), output);
  }

  // optional uint64 opvalue3 = 4;
  if (has_opvalue3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->opvalue3(), output);
  }

  // optional uint32 acc_id = 5;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->acc_id(), output);
  }

  // repeated uint64 opvalue4 = 6;
  for (int i = 0; i < this->opvalue4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->opvalue4(i), output);
  }

  // repeated uint64 opvalue5 = 7;
  for (int i = 0; i < this->opvalue5_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->opvalue5(i), output);
  }

  // optional uint32 oper_index = 8;
  if (has_oper_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->oper_index(), output);
  }

  // optional bytes opvalue6 = 9;
  if (has_opvalue6()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->opvalue6(), output);
  }

  // repeated .jynetwork.proto.batchInject opvalue7 = 10;
  for (int i = 0; i < this->opvalue7_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->opvalue7(i), output);
  }

  // optional bytes opvalue8 = 11;
  if (has_opvalue8()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->opvalue8(), output);
  }

}

int CSMessageClientOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .jynetwork.proto.eOpertionType oper = 1;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional uint64 opvalue1 = 2;
    if (has_opvalue1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opvalue1());
    }

    // optional uint64 opvalue2 = 3;
    if (has_opvalue2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opvalue2());
    }

    // optional uint64 opvalue3 = 4;
    if (has_opvalue3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opvalue3());
    }

    // optional uint32 acc_id = 5;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_id());
    }

    // optional uint32 oper_index = 8;
    if (has_oper_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_index());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes opvalue6 = 9;
    if (has_opvalue6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->opvalue6());
    }

    // optional bytes opvalue8 = 11;
    if (has_opvalue8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->opvalue8());
    }

  }
  // repeated uint64 opvalue4 = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->opvalue4_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->opvalue4(i));
    }
    total_size += 1 * this->opvalue4_size() + data_size;
  }

  // repeated uint64 opvalue5 = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->opvalue5_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->opvalue5(i));
    }
    total_size += 1 * this->opvalue5_size() + data_size;
  }

  // repeated .jynetwork.proto.batchInject opvalue7 = 10;
  total_size += 1 * this->opvalue7_size();
  for (int i = 0; i < this->opvalue7_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opvalue7(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageClientOperation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageClientOperation*>(&from));
}

void CSMessageClientOperation::MergeFrom(const CSMessageClientOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  opvalue4_.MergeFrom(from.opvalue4_);
  opvalue5_.MergeFrom(from.opvalue5_);
  opvalue7_.MergeFrom(from.opvalue7_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_opvalue1()) {
      set_opvalue1(from.opvalue1());
    }
    if (from.has_opvalue2()) {
      set_opvalue2(from.opvalue2());
    }
    if (from.has_opvalue3()) {
      set_opvalue3(from.opvalue3());
    }
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_oper_index()) {
      set_oper_index(from.oper_index());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opvalue6()) {
      set_opvalue6(from.opvalue6());
    }
    if (from.has_opvalue8()) {
      set_opvalue8(from.opvalue8());
    }
  }
}

void CSMessageClientOperation::CopyFrom(const CSMessageClientOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageClientOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSMessageClientOperation::Swap(CSMessageClientOperation* other) {
  if (other != this) {
    std::swap(oper_, other->oper_);
    std::swap(opvalue1_, other->opvalue1_);
    std::swap(opvalue2_, other->opvalue2_);
    std::swap(opvalue3_, other->opvalue3_);
    std::swap(acc_id_, other->acc_id_);
    opvalue4_.Swap(&other->opvalue4_);
    opvalue5_.Swap(&other->opvalue5_);
    std::swap(oper_index_, other->oper_index_);
    std::swap(opvalue6_, other->opvalue6_);
    opvalue7_.Swap(&other->opvalue7_);
    std::swap(opvalue8_, other->opvalue8_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageClientOperation::GetTypeName() const {
  return "jynetwork.proto.CSMessageClientOperation";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageBattleBegin::kMapIdFieldNumber;
const int CSMessageBattleBegin::kDifficultFieldNumber;
const int CSMessageBattleBegin::kCatlogFieldNumber;
const int CSMessageBattleBegin::kCiFieldNumber;
const int CSMessageBattleBegin::kEndlessContinueFieldNumber;
#endif  // !_MSC_VER

CSMessageBattleBegin::CSMessageBattleBegin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageBattleBegin::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ci_ = const_cast< ::jynetwork::proto::sCharactorInit*>(
      ::jynetwork::proto::sCharactorInit::internal_default_instance());
#else
  ci_ = const_cast< ::jynetwork::proto::sCharactorInit*>(&::jynetwork::proto::sCharactorInit::default_instance());
#endif
}

CSMessageBattleBegin::CSMessageBattleBegin(const CSMessageBattleBegin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageBattleBegin::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  difficult_ = 0u;
  catlog_ = 0u;
  ci_ = NULL;
  endless_continue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageBattleBegin::~CSMessageBattleBegin() {
  SharedDtor();
}

void CSMessageBattleBegin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ci_;
  }
}

void CSMessageBattleBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageBattleBegin& CSMessageBattleBegin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageBattleBegin* CSMessageBattleBegin::default_instance_ = NULL;

CSMessageBattleBegin* CSMessageBattleBegin::New() const {
  return new CSMessageBattleBegin;
}

void CSMessageBattleBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    difficult_ = 0u;
    catlog_ = 0u;
    if (has_ci()) {
      if (ci_ != NULL) ci_->::jynetwork::proto::sCharactorInit::Clear();
    }
    endless_continue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageBattleBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_difficult;
        break;
      }

      // optional uint32 difficult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficult_)));
          set_has_difficult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_catlog;
        break;
      }

      // optional uint32 catlog = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_catlog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catlog_)));
          set_has_catlog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ci;
        break;
      }

      // optional .jynetwork.proto.sCharactorInit ci = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ci:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ci()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endless_continue;
        break;
      }

      // optional uint32 endless_continue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endless_continue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endless_continue_)));
          set_has_endless_continue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageBattleBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional uint32 difficult = 2;
  if (has_difficult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->difficult(), output);
  }

  // optional uint32 catlog = 3;
  if (has_catlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->catlog(), output);
  }

  // optional .jynetwork.proto.sCharactorInit ci = 4;
  if (has_ci()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ci(), output);
  }

  // optional uint32 endless_continue = 5;
  if (has_endless_continue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endless_continue(), output);
  }

}

int CSMessageBattleBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 difficult = 2;
    if (has_difficult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficult());
    }

    // optional uint32 catlog = 3;
    if (has_catlog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catlog());
    }

    // optional .jynetwork.proto.sCharactorInit ci = 4;
    if (has_ci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ci());
    }

    // optional uint32 endless_continue = 5;
    if (has_endless_continue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endless_continue());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageBattleBegin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageBattleBegin*>(&from));
}

void CSMessageBattleBegin::MergeFrom(const CSMessageBattleBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_difficult()) {
      set_difficult(from.difficult());
    }
    if (from.has_catlog()) {
      set_catlog(from.catlog());
    }
    if (from.has_ci()) {
      mutable_ci()->::jynetwork::proto::sCharactorInit::MergeFrom(from.ci());
    }
    if (from.has_endless_continue()) {
      set_endless_continue(from.endless_continue());
    }
  }
}

void CSMessageBattleBegin::CopyFrom(const CSMessageBattleBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageBattleBegin::IsInitialized() const {

  return true;
}

void CSMessageBattleBegin::Swap(CSMessageBattleBegin* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(difficult_, other->difficult_);
    std::swap(catlog_, other->catlog_);
    std::swap(ci_, other->ci_);
    std::swap(endless_continue_, other->endless_continue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageBattleBegin::GetTypeName() const {
  return "jynetwork.proto.CSMessageBattleBegin";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleTime::kTimeFieldNumber;
const int BattleTime::kNetTimeFieldNumber;
#endif  // !_MSC_VER

BattleTime::BattleTime()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleTime::InitAsDefaultInstance() {
}

BattleTime::BattleTime(const BattleTime& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleTime::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  net_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleTime::~BattleTime() {
  SharedDtor();
}

void BattleTime::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleTime& BattleTime::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

BattleTime* BattleTime::default_instance_ = NULL;

BattleTime* BattleTime::New() const {
  return new BattleTime;
}

void BattleTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    net_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_net_time;
        break;
      }

      // optional uint32 net_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_time_)));
          set_has_net_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional uint32 net_time = 2;
  if (has_net_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->net_time(), output);
  }

}

int BattleTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 net_time = 2;
    if (has_net_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleTime::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleTime*>(&from));
}

void BattleTime::MergeFrom(const BattleTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_net_time()) {
      set_net_time(from.net_time());
    }
  }
}

void BattleTime::CopyFrom(const BattleTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleTime::IsInitialized() const {

  return true;
}

void BattleTime::Swap(BattleTime* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(net_time_, other->net_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleTime::GetTypeName() const {
  return "jynetwork.proto.BattleTime";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleAttr::kAttrIdFieldNumber;
const int BattleAttr::kAttrValueFieldNumber;
#endif  // !_MSC_VER

BattleAttr::BattleAttr()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleAttr::InitAsDefaultInstance() {
}

BattleAttr::BattleAttr(const BattleAttr& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleAttr::SharedCtor() {
  _cached_size_ = 0;
  attr_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleAttr::~BattleAttr() {
  SharedDtor();
}

void BattleAttr::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleAttr& BattleAttr::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

BattleAttr* BattleAttr::default_instance_ = NULL;

BattleAttr* BattleAttr::New() const {
  return new BattleAttr;
}

void BattleAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_id_ = 0u;
  }
  attr_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attr_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_id_)));
          set_has_attr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr_value;
        break;
      }

      // repeated uint32 attr_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_attr_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attr_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attr_id = 1;
  if (has_attr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attr_id(), output);
  }

  // repeated uint32 attr_value = 2;
  for (int i = 0; i < this->attr_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->attr_value(i), output);
  }

}

int BattleAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attr_id = 1;
    if (has_attr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_id());
    }

  }
  // repeated uint32 attr_value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attr_value(i));
    }
    total_size += 1 * this->attr_value_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleAttr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleAttr*>(&from));
}

void BattleAttr::MergeFrom(const BattleAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_value_.MergeFrom(from.attr_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_id()) {
      set_attr_id(from.attr_id());
    }
  }
}

void BattleAttr::CopyFrom(const BattleAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleAttr::IsInitialized() const {

  return true;
}

void BattleAttr::Swap(BattleAttr* other) {
  if (other != this) {
    std::swap(attr_id_, other->attr_id_);
    attr_value_.Swap(&other->attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleAttr::GetTypeName() const {
  return "jynetwork.proto.BattleAttr";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageBattleCheck::kCheckIdFieldNumber;
const int CSMessageBattleCheck::kBattleTimeFieldNumber;
const int CSMessageBattleCheck::kBattleAttrFieldNumber;
const int CSMessageBattleCheck::kGamestatsFieldNumber;
const int CSMessageBattleCheck::kBattleModifyFieldNumber;
#endif  // !_MSC_VER

CSMessageBattleCheck::CSMessageBattleCheck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageBattleCheck::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(
      ::jynetwork::proto::sGameStats::internal_default_instance());
#else
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(&::jynetwork::proto::sGameStats::default_instance());
#endif
}

CSMessageBattleCheck::CSMessageBattleCheck(const CSMessageBattleCheck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageBattleCheck::SharedCtor() {
  _cached_size_ = 0;
  check_id_ = 0u;
  gamestats_ = NULL;
  battle_modify_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageBattleCheck::~CSMessageBattleCheck() {
  SharedDtor();
}

void CSMessageBattleCheck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete gamestats_;
  }
}

void CSMessageBattleCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageBattleCheck& CSMessageBattleCheck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageBattleCheck* CSMessageBattleCheck::default_instance_ = NULL;

CSMessageBattleCheck* CSMessageBattleCheck::New() const {
  return new CSMessageBattleCheck;
}

void CSMessageBattleCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    check_id_ = 0u;
    if (has_gamestats()) {
      if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
    }
    battle_modify_ = 0;
  }
  battle_time_.Clear();
  battle_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageBattleCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 check_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_id_)));
          set_has_check_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_time;
        break;
      }

      // repeated .jynetwork.proto.BattleTime battle_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_time;
        if (input->ExpectTag(26)) goto parse_battle_attr;
        break;
      }

      // repeated .jynetwork.proto.BattleAttr battle_attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_attr;
        if (input->ExpectTag(34)) goto parse_gamestats;
        break;
      }

      // optional .jynetwork.proto.sGameStats gamestats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamestats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_battle_modify;
        break;
      }

      // optional float battle_modify = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_battle_modify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &battle_modify_)));
          set_has_battle_modify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageBattleCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 check_id = 1;
  if (has_check_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->check_id(), output);
  }

  // repeated .jynetwork.proto.BattleTime battle_time = 2;
  for (int i = 0; i < this->battle_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->battle_time(i), output);
  }

  // repeated .jynetwork.proto.BattleAttr battle_attr = 3;
  for (int i = 0; i < this->battle_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->battle_attr(i), output);
  }

  // optional .jynetwork.proto.sGameStats gamestats = 4;
  if (has_gamestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->gamestats(), output);
  }

  // optional float battle_modify = 5;
  if (has_battle_modify()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->battle_modify(), output);
  }

}

int CSMessageBattleCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 check_id = 1;
    if (has_check_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check_id());
    }

    // optional .jynetwork.proto.sGameStats gamestats = 4;
    if (has_gamestats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestats());
    }

    // optional float battle_modify = 5;
    if (has_battle_modify()) {
      total_size += 1 + 4;
    }

  }
  // repeated .jynetwork.proto.BattleTime battle_time = 2;
  total_size += 1 * this->battle_time_size();
  for (int i = 0; i < this->battle_time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_time(i));
  }

  // repeated .jynetwork.proto.BattleAttr battle_attr = 3;
  total_size += 1 * this->battle_attr_size();
  for (int i = 0; i < this->battle_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_attr(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageBattleCheck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageBattleCheck*>(&from));
}

void CSMessageBattleCheck::MergeFrom(const CSMessageBattleCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_time_.MergeFrom(from.battle_time_);
  battle_attr_.MergeFrom(from.battle_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_check_id()) {
      set_check_id(from.check_id());
    }
    if (from.has_gamestats()) {
      mutable_gamestats()->::jynetwork::proto::sGameStats::MergeFrom(from.gamestats());
    }
    if (from.has_battle_modify()) {
      set_battle_modify(from.battle_modify());
    }
  }
}

void CSMessageBattleCheck::CopyFrom(const CSMessageBattleCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageBattleCheck::IsInitialized() const {

  return true;
}

void CSMessageBattleCheck::Swap(CSMessageBattleCheck* other) {
  if (other != this) {
    std::swap(check_id_, other->check_id_);
    battle_time_.Swap(&other->battle_time_);
    battle_attr_.Swap(&other->battle_attr_);
    std::swap(gamestats_, other->gamestats_);
    std::swap(battle_modify_, other->battle_modify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageBattleCheck::GetTypeName() const {
  return "jynetwork.proto.CSMessageBattleCheck";
}


// ===================================================================

#ifndef _MSC_VER
const int BatttleSkillStatistics::kSkillIdFieldNumber;
const int BatttleSkillStatistics::kSkillAutoFieldNumber;
const int BatttleSkillStatistics::kSkillManualFieldNumber;
#endif  // !_MSC_VER

BatttleSkillStatistics::BatttleSkillStatistics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BatttleSkillStatistics::InitAsDefaultInstance() {
}

BatttleSkillStatistics::BatttleSkillStatistics(const BatttleSkillStatistics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BatttleSkillStatistics::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  skill_auto_ = 0u;
  skill_manual_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatttleSkillStatistics::~BatttleSkillStatistics() {
  SharedDtor();
}

void BatttleSkillStatistics::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BatttleSkillStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BatttleSkillStatistics& BatttleSkillStatistics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

BatttleSkillStatistics* BatttleSkillStatistics::default_instance_ = NULL;

BatttleSkillStatistics* BatttleSkillStatistics::New() const {
  return new BatttleSkillStatistics;
}

void BatttleSkillStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    skill_auto_ = 0u;
    skill_manual_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BatttleSkillStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_auto;
        break;
      }

      // optional uint32 skill_auto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_auto_)));
          set_has_skill_auto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_manual;
        break;
      }

      // optional uint32 skill_manual = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_manual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_manual_)));
          set_has_skill_manual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatttleSkillStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // optional uint32 skill_auto = 2;
  if (has_skill_auto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_auto(), output);
  }

  // optional uint32 skill_manual = 3;
  if (has_skill_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_manual(), output);
  }

}

int BatttleSkillStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional uint32 skill_auto = 2;
    if (has_skill_auto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_auto());
    }

    // optional uint32 skill_manual = 3;
    if (has_skill_manual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_manual());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatttleSkillStatistics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BatttleSkillStatistics*>(&from));
}

void BatttleSkillStatistics::MergeFrom(const BatttleSkillStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_auto()) {
      set_skill_auto(from.skill_auto());
    }
    if (from.has_skill_manual()) {
      set_skill_manual(from.skill_manual());
    }
  }
}

void BatttleSkillStatistics::CopyFrom(const BatttleSkillStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatttleSkillStatistics::IsInitialized() const {

  return true;
}

void BatttleSkillStatistics::Swap(BatttleSkillStatistics* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_auto_, other->skill_auto_);
    std::swap(skill_manual_, other->skill_manual_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BatttleSkillStatistics::GetTypeName() const {
  return "jynetwork.proto.BatttleSkillStatistics";
}


// ===================================================================

#ifndef _MSC_VER
const int DamageScore::kUidFieldNumber;
const int DamageScore::kScoreFieldNumber;
#endif  // !_MSC_VER

DamageScore::DamageScore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DamageScore::InitAsDefaultInstance() {
}

DamageScore::DamageScore(const DamageScore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DamageScore::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DamageScore::~DamageScore() {
  SharedDtor();
}

void DamageScore::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DamageScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DamageScore& DamageScore::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

DamageScore* DamageScore::default_instance_ = NULL;

DamageScore* DamageScore::New() const {
  return new DamageScore;
}

void DamageScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DamageScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_score;
        break;
      }

      // optional float score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DamageScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional float score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

}

int DamageScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional float score = 2;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DamageScore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DamageScore*>(&from));
}

void DamageScore::MergeFrom(const DamageScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void DamageScore::CopyFrom(const DamageScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DamageScore::IsInitialized() const {

  return true;
}

void DamageScore::Swap(DamageScore* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DamageScore::GetTypeName() const {
  return "jynetwork.proto.DamageScore";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageBattleResult::kMapIdFieldNumber;
const int CSMessageBattleResult::kResultFieldNumber;
const int CSMessageBattleResult::kBattleDataFieldNumber;
const int CSMessageBattleResult::kBattleScoreFieldNumber;
const int CSMessageBattleResult::kBattleMoneyFieldNumber;
const int CSMessageBattleResult::kDifficultFieldNumber;
const int CSMessageBattleResult::kBattleStarFieldNumber;
const int CSMessageBattleResult::kRandNumFieldNumber;
const int CSMessageBattleResult::kIsSweepFieldNumber;
const int CSMessageBattleResult::kSweepTimesFieldNumber;
const int CSMessageBattleResult::kDropmiddleFieldNumber;
const int CSMessageBattleResult::kDropgolinFieldNumber;
const int CSMessageBattleResult::kBattleDataTypeFieldNumber;
const int CSMessageBattleResult::kBattleTimeFieldNumber;
const int CSMessageBattleResult::kHitScoreFieldNumber;
const int CSMessageBattleResult::kTimeScoreFieldNumber;
const int CSMessageBattleResult::kBattleSkillStatisticsFieldNumber;
const int CSMessageBattleResult::kHpFieldNumber;
const int CSMessageBattleResult::kCatlogFieldNumber;
const int CSMessageBattleResult::kCheckFieldNumber;
const int CSMessageBattleResult::kBattleWaveFieldNumber;
const int CSMessageBattleResult::kHurtsFieldNumber;
const int CSMessageBattleResult::kDamageScoreFieldNumber;
const int CSMessageBattleResult::kSoloScoreFieldNumber;
const int CSMessageBattleResult::kEndlessCheckWaveFieldNumber;
const int CSMessageBattleResult::kEndlessCheckScoreFieldNumber;
#endif  // !_MSC_VER

CSMessageBattleResult::CSMessageBattleResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageBattleResult::InitAsDefaultInstance() {
}

CSMessageBattleResult::CSMessageBattleResult(const CSMessageBattleResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageBattleResult::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  result_ = 0u;
  battle_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battle_score_ = 0u;
  battle_money_ = 0u;
  difficult_ = 0u;
  battle_star_ = 0u;
  rand_num_ = 0u;
  is_sweep_ = 0u;
  sweep_times_ = 0u;
  dropmiddle_ = 0u;
  dropgolin_ = 0u;
  battle_data_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hit_score_ = 0u;
  time_score_ = 0u;
  hp_ = 0u;
  catlog_ = 0u;
  battle_wave_ = 0u;
  endless_check_wave_ = 0u;
  endless_check_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageBattleResult::~CSMessageBattleResult() {
  SharedDtor();
}

void CSMessageBattleResult::SharedDtor() {
  if (battle_data_ != &::google::protobuf::internal::kEmptyString) {
    delete battle_data_;
  }
  if (battle_data_type_ != &::google::protobuf::internal::kEmptyString) {
    delete battle_data_type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessageBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageBattleResult& CSMessageBattleResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageBattleResult* CSMessageBattleResult::default_instance_ = NULL;

CSMessageBattleResult* CSMessageBattleResult::New() const {
  return new CSMessageBattleResult;
}

void CSMessageBattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    result_ = 0u;
    if (has_battle_data()) {
      if (battle_data_ != &::google::protobuf::internal::kEmptyString) {
        battle_data_->clear();
      }
    }
    battle_score_ = 0u;
    battle_money_ = 0u;
    difficult_ = 0u;
    battle_star_ = 0u;
    rand_num_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_sweep_ = 0u;
    sweep_times_ = 0u;
    dropmiddle_ = 0u;
    dropgolin_ = 0u;
    if (has_battle_data_type()) {
      if (battle_data_type_ != &::google::protobuf::internal::kEmptyString) {
        battle_data_type_->clear();
      }
    }
    hit_score_ = 0u;
    time_score_ = 0u;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    hp_ = 0u;
    catlog_ = 0u;
    battle_wave_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    endless_check_wave_ = 0u;
    endless_check_score_ = 0u;
  }
  battle_time_.Clear();
  battle_skill_statistics_.Clear();
  check_.Clear();
  hurts_.Clear();
  damage_score_.Clear();
  solo_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_data;
        break;
      }

      // optional bytes battle_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battle_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battle_score;
        break;
      }

      // optional uint32 battle_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_score_)));
          set_has_battle_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_battle_money;
        break;
      }

      // optional uint32 battle_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_money_)));
          set_has_battle_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_difficult;
        break;
      }

      // optional uint32 difficult = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficult_)));
          set_has_difficult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battle_star;
        break;
      }

      // optional uint32 battle_star = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_star_)));
          set_has_battle_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rand_num;
        break;
      }

      // optional uint32 rand_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_num_)));
          set_has_rand_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_sweep;
        break;
      }

      // optional uint32 is_sweep = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sweep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_sweep_)));
          set_has_is_sweep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sweep_times;
        break;
      }

      // optional uint32 sweep_times = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweep_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sweep_times_)));
          set_has_sweep_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_dropmiddle;
        break;
      }

      // optional uint32 dropmiddle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropmiddle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropmiddle_)));
          set_has_dropmiddle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dropgolin;
        break;
      }

      // optional uint32 dropgolin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropgolin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropgolin_)));
          set_has_dropgolin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_battle_data_type;
        break;
      }

      // optional bytes battle_data_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_data_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battle_data_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_battle_time;
        break;
      }

      // repeated .jynetwork.proto.BattleTime battle_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_battle_time;
        if (input->ExpectTag(120)) goto parse_hit_score;
        break;
      }

      // optional uint32 hit_score = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_score_)));
          set_has_hit_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_time_score;
        break;
      }

      // optional uint32 time_score = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_score_)));
          set_has_time_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_battle_skill_statistics;
        break;
      }

      // repeated .jynetwork.proto.BatttleSkillStatistics battle_skill_statistics = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_skill_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_skill_statistics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_battle_skill_statistics;
        if (input->ExpectTag(144)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_catlog;
        break;
      }

      // optional uint32 catlog = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_catlog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catlog_)));
          set_has_catlog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_check;
        break;
      }

      // repeated .jynetwork.proto.CSMessageBattleCheck check = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_check:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_check()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_check;
        if (input->ExpectTag(168)) goto parse_battle_wave;
        break;
      }

      // optional uint32 battle_wave = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_wave_)));
          set_has_battle_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_hurts;
        break;
      }

      // repeated float hurts = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hurts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 181, input, this->mutable_hurts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_hurts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_hurts;
        if (input->ExpectTag(186)) goto parse_damage_score;
        break;
      }

      // repeated .jynetwork.proto.DamageScore damage_score = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damage_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damage_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_damage_score;
        if (input->ExpectTag(194)) goto parse_solo_score;
        break;
      }

      // repeated .jynetwork.proto.DamageScore solo_score = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solo_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_solo_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_solo_score;
        if (input->ExpectTag(200)) goto parse_endless_check_wave;
        break;
      }

      // optional uint32 endless_check_wave = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endless_check_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endless_check_wave_)));
          set_has_endless_check_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_endless_check_score;
        break;
      }

      // optional uint32 endless_check_score = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endless_check_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endless_check_score_)));
          set_has_endless_check_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // optional bytes battle_data = 3;
  if (has_battle_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->battle_data(), output);
  }

  // optional uint32 battle_score = 4;
  if (has_battle_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->battle_score(), output);
  }

  // optional uint32 battle_money = 5;
  if (has_battle_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->battle_money(), output);
  }

  // optional uint32 difficult = 6;
  if (has_difficult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->difficult(), output);
  }

  // optional uint32 battle_star = 7;
  if (has_battle_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battle_star(), output);
  }

  // optional uint32 rand_num = 8;
  if (has_rand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rand_num(), output);
  }

  // optional uint32 is_sweep = 9;
  if (has_is_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->is_sweep(), output);
  }

  // optional uint32 sweep_times = 10;
  if (has_sweep_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sweep_times(), output);
  }

  // optional uint32 dropmiddle = 11;
  if (has_dropmiddle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->dropmiddle(), output);
  }

  // optional uint32 dropgolin = 12;
  if (has_dropgolin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dropgolin(), output);
  }

  // optional bytes battle_data_type = 13;
  if (has_battle_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->battle_data_type(), output);
  }

  // repeated .jynetwork.proto.BattleTime battle_time = 14;
  for (int i = 0; i < this->battle_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->battle_time(i), output);
  }

  // optional uint32 hit_score = 15;
  if (has_hit_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->hit_score(), output);
  }

  // optional uint32 time_score = 16;
  if (has_time_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->time_score(), output);
  }

  // repeated .jynetwork.proto.BatttleSkillStatistics battle_skill_statistics = 17;
  for (int i = 0; i < this->battle_skill_statistics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->battle_skill_statistics(i), output);
  }

  // optional uint32 hp = 18;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->hp(), output);
  }

  // optional uint32 catlog = 19;
  if (has_catlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->catlog(), output);
  }

  // repeated .jynetwork.proto.CSMessageBattleCheck check = 20;
  for (int i = 0; i < this->check_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->check(i), output);
  }

  // optional uint32 battle_wave = 21;
  if (has_battle_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->battle_wave(), output);
  }

  // repeated float hurts = 22;
  for (int i = 0; i < this->hurts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      22, this->hurts(i), output);
  }

  // repeated .jynetwork.proto.DamageScore damage_score = 23;
  for (int i = 0; i < this->damage_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->damage_score(i), output);
  }

  // repeated .jynetwork.proto.DamageScore solo_score = 24;
  for (int i = 0; i < this->solo_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->solo_score(i), output);
  }

  // optional uint32 endless_check_wave = 25;
  if (has_endless_check_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->endless_check_wave(), output);
  }

  // optional uint32 endless_check_score = 26;
  if (has_endless_check_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->endless_check_score(), output);
  }

}

int CSMessageBattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bytes battle_data = 3;
    if (has_battle_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battle_data());
    }

    // optional uint32 battle_score = 4;
    if (has_battle_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_score());
    }

    // optional uint32 battle_money = 5;
    if (has_battle_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_money());
    }

    // optional uint32 difficult = 6;
    if (has_difficult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficult());
    }

    // optional uint32 battle_star = 7;
    if (has_battle_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_star());
    }

    // optional uint32 rand_num = 8;
    if (has_rand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 is_sweep = 9;
    if (has_is_sweep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_sweep());
    }

    // optional uint32 sweep_times = 10;
    if (has_sweep_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sweep_times());
    }

    // optional uint32 dropmiddle = 11;
    if (has_dropmiddle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropmiddle());
    }

    // optional uint32 dropgolin = 12;
    if (has_dropgolin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropgolin());
    }

    // optional bytes battle_data_type = 13;
    if (has_battle_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battle_data_type());
    }

    // optional uint32 hit_score = 15;
    if (has_hit_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit_score());
    }

    // optional uint32 time_score = 16;
    if (has_time_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_score());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional uint32 hp = 18;
    if (has_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 catlog = 19;
    if (has_catlog()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catlog());
    }

    // optional uint32 battle_wave = 21;
    if (has_battle_wave()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_wave());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 endless_check_wave = 25;
    if (has_endless_check_wave()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endless_check_wave());
    }

    // optional uint32 endless_check_score = 26;
    if (has_endless_check_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endless_check_score());
    }

  }
  // repeated .jynetwork.proto.BattleTime battle_time = 14;
  total_size += 1 * this->battle_time_size();
  for (int i = 0; i < this->battle_time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_time(i));
  }

  // repeated .jynetwork.proto.BatttleSkillStatistics battle_skill_statistics = 17;
  total_size += 2 * this->battle_skill_statistics_size();
  for (int i = 0; i < this->battle_skill_statistics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_skill_statistics(i));
  }

  // repeated .jynetwork.proto.CSMessageBattleCheck check = 20;
  total_size += 2 * this->check_size();
  for (int i = 0; i < this->check_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->check(i));
  }

  // repeated float hurts = 22;
  {
    int data_size = 0;
    data_size = 4 * this->hurts_size();
    total_size += 2 * this->hurts_size() + data_size;
  }

  // repeated .jynetwork.proto.DamageScore damage_score = 23;
  total_size += 2 * this->damage_score_size();
  for (int i = 0; i < this->damage_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damage_score(i));
  }

  // repeated .jynetwork.proto.DamageScore solo_score = 24;
  total_size += 2 * this->solo_score_size();
  for (int i = 0; i < this->solo_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->solo_score(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageBattleResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageBattleResult*>(&from));
}

void CSMessageBattleResult::MergeFrom(const CSMessageBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_time_.MergeFrom(from.battle_time_);
  battle_skill_statistics_.MergeFrom(from.battle_skill_statistics_);
  check_.MergeFrom(from.check_);
  hurts_.MergeFrom(from.hurts_);
  damage_score_.MergeFrom(from.damage_score_);
  solo_score_.MergeFrom(from.solo_score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_battle_data()) {
      set_battle_data(from.battle_data());
    }
    if (from.has_battle_score()) {
      set_battle_score(from.battle_score());
    }
    if (from.has_battle_money()) {
      set_battle_money(from.battle_money());
    }
    if (from.has_difficult()) {
      set_difficult(from.difficult());
    }
    if (from.has_battle_star()) {
      set_battle_star(from.battle_star());
    }
    if (from.has_rand_num()) {
      set_rand_num(from.rand_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_sweep()) {
      set_is_sweep(from.is_sweep());
    }
    if (from.has_sweep_times()) {
      set_sweep_times(from.sweep_times());
    }
    if (from.has_dropmiddle()) {
      set_dropmiddle(from.dropmiddle());
    }
    if (from.has_dropgolin()) {
      set_dropgolin(from.dropgolin());
    }
    if (from.has_battle_data_type()) {
      set_battle_data_type(from.battle_data_type());
    }
    if (from.has_hit_score()) {
      set_hit_score(from.hit_score());
    }
    if (from.has_time_score()) {
      set_time_score(from.time_score());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_catlog()) {
      set_catlog(from.catlog());
    }
    if (from.has_battle_wave()) {
      set_battle_wave(from.battle_wave());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_endless_check_wave()) {
      set_endless_check_wave(from.endless_check_wave());
    }
    if (from.has_endless_check_score()) {
      set_endless_check_score(from.endless_check_score());
    }
  }
}

void CSMessageBattleResult::CopyFrom(const CSMessageBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageBattleResult::IsInitialized() const {

  return true;
}

void CSMessageBattleResult::Swap(CSMessageBattleResult* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(result_, other->result_);
    std::swap(battle_data_, other->battle_data_);
    std::swap(battle_score_, other->battle_score_);
    std::swap(battle_money_, other->battle_money_);
    std::swap(difficult_, other->difficult_);
    std::swap(battle_star_, other->battle_star_);
    std::swap(rand_num_, other->rand_num_);
    std::swap(is_sweep_, other->is_sweep_);
    std::swap(sweep_times_, other->sweep_times_);
    std::swap(dropmiddle_, other->dropmiddle_);
    std::swap(dropgolin_, other->dropgolin_);
    std::swap(battle_data_type_, other->battle_data_type_);
    battle_time_.Swap(&other->battle_time_);
    std::swap(hit_score_, other->hit_score_);
    std::swap(time_score_, other->time_score_);
    battle_skill_statistics_.Swap(&other->battle_skill_statistics_);
    std::swap(hp_, other->hp_);
    std::swap(catlog_, other->catlog_);
    check_.Swap(&other->check_);
    std::swap(battle_wave_, other->battle_wave_);
    hurts_.Swap(&other->hurts_);
    damage_score_.Swap(&other->damage_score_);
    solo_score_.Swap(&other->solo_score_);
    std::swap(endless_check_wave_, other->endless_check_wave_);
    std::swap(endless_check_score_, other->endless_check_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageBattleResult::GetTypeName() const {
  return "jynetwork.proto.CSMessageBattleResult";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessagePing::kTimestampFieldNumber;
#endif  // !_MSC_VER

CSMessagePing::CSMessagePing()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessagePing::InitAsDefaultInstance() {
}

CSMessagePing::CSMessagePing(const CSMessagePing& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessagePing::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessagePing::~CSMessagePing() {
  SharedDtor();
}

void CSMessagePing::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessagePing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessagePing& CSMessagePing::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessagePing* CSMessagePing::default_instance_ = NULL;

CSMessagePing* CSMessagePing::New() const {
  return new CSMessagePing;
}

void CSMessagePing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessagePing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessagePing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

}

int CSMessagePing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessagePing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessagePing*>(&from));
}

void CSMessagePing::MergeFrom(const CSMessagePing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void CSMessagePing::CopyFrom(const CSMessagePing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessagePing::IsInitialized() const {

  return true;
}

void CSMessagePing::Swap(CSMessagePing* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessagePing::GetTypeName() const {
  return "jynetwork.proto.CSMessagePing";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageGMCommond::kCmdFieldNumber;
#endif  // !_MSC_VER

CSMessageGMCommond::CSMessageGMCommond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageGMCommond::InitAsDefaultInstance() {
}

CSMessageGMCommond::CSMessageGMCommond(const CSMessageGMCommond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageGMCommond::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageGMCommond::~CSMessageGMCommond() {
  SharedDtor();
}

void CSMessageGMCommond::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessageGMCommond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageGMCommond& CSMessageGMCommond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageGMCommond* CSMessageGMCommond::default_instance_ = NULL;

CSMessageGMCommond* CSMessageGMCommond::New() const {
  return new CSMessageGMCommond;
}

void CSMessageGMCommond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageGMCommond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageGMCommond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->cmd(), output);
  }

}

int CSMessageGMCommond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageGMCommond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageGMCommond*>(&from));
}

void CSMessageGMCommond::MergeFrom(const CSMessageGMCommond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
}

void CSMessageGMCommond::CopyFrom(const CSMessageGMCommond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageGMCommond::IsInitialized() const {

  return true;
}

void CSMessageGMCommond::Swap(CSMessageGMCommond* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageGMCommond::GetTypeName() const {
  return "jynetwork.proto.CSMessageGMCommond";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageRankList::kRankTypeFieldNumber;
const int CSMessageRankList::kPageFieldNumber;
#endif  // !_MSC_VER

CSMessageRankList::CSMessageRankList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageRankList::InitAsDefaultInstance() {
}

CSMessageRankList::CSMessageRankList(const CSMessageRankList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageRankList::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 0u;
  page_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageRankList::~CSMessageRankList() {
  SharedDtor();
}

void CSMessageRankList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessageRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageRankList& CSMessageRankList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageRankList* CSMessageRankList::default_instance_ = NULL;

CSMessageRankList* CSMessageRankList::New() const {
  return new CSMessageRankList;
}

void CSMessageRankList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 0u;
    page_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }

      // optional uint32 page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank_type(), output);
  }

  // optional uint32 page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page(), output);
  }

}

int CSMessageRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_type());
    }

    // optional uint32 page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageRankList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageRankList*>(&from));
}

void CSMessageRankList::MergeFrom(const CSMessageRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
}

void CSMessageRankList::CopyFrom(const CSMessageRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageRankList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSMessageRankList::Swap(CSMessageRankList* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageRankList::GetTypeName() const {
  return "jynetwork.proto.CSMessageRankList";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessagePlayerQuery::kQueryTypeFieldNumber;
const int CSMessagePlayerQuery::kAccIdFieldNumber;
const int CSMessagePlayerQuery::kJobFieldNumber;
const int CSMessagePlayerQuery::kMyAccIdFieldNumber;
#endif  // !_MSC_VER

CSMessagePlayerQuery::CSMessagePlayerQuery()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessagePlayerQuery::InitAsDefaultInstance() {
}

CSMessagePlayerQuery::CSMessagePlayerQuery(const CSMessagePlayerQuery& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessagePlayerQuery::SharedCtor() {
  _cached_size_ = 0;
  query_type_ = 0u;
  acc_id_ = 0u;
  job_ = 0u;
  my_acc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessagePlayerQuery::~CSMessagePlayerQuery() {
  SharedDtor();
}

void CSMessagePlayerQuery::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessagePlayerQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessagePlayerQuery& CSMessagePlayerQuery::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessagePlayerQuery* CSMessagePlayerQuery::default_instance_ = NULL;

CSMessagePlayerQuery* CSMessagePlayerQuery::New() const {
  return new CSMessagePlayerQuery;
}

void CSMessagePlayerQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    query_type_ = 0u;
    acc_id_ = 0u;
    job_ = 0u;
    my_acc_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessagePlayerQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 query_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_type_)));
          set_has_query_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_acc_id;
        break;
      }

      // optional uint32 acc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_id_)));
          set_has_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional uint32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_my_acc_id;
        break;
      }

      // optional uint32 my_acc_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_acc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_acc_id_)));
          set_has_my_acc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessagePlayerQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 query_type = 1;
  if (has_query_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->query_type(), output);
  }

  // optional uint32 acc_id = 2;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->acc_id(), output);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }

  // optional uint32 my_acc_id = 4;
  if (has_my_acc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->my_acc_id(), output);
  }

}

int CSMessagePlayerQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 query_type = 1;
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_type());
    }

    // optional uint32 acc_id = 2;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_id());
    }

    // optional uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 my_acc_id = 4;
    if (has_my_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_acc_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessagePlayerQuery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessagePlayerQuery*>(&from));
}

void CSMessagePlayerQuery::MergeFrom(const CSMessagePlayerQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query_type()) {
      set_query_type(from.query_type());
    }
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_my_acc_id()) {
      set_my_acc_id(from.my_acc_id());
    }
  }
}

void CSMessagePlayerQuery::CopyFrom(const CSMessagePlayerQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessagePlayerQuery::IsInitialized() const {

  return true;
}

void CSMessagePlayerQuery::Swap(CSMessagePlayerQuery* other) {
  if (other != this) {
    std::swap(query_type_, other->query_type_);
    std::swap(acc_id_, other->acc_id_);
    std::swap(job_, other->job_);
    std::swap(my_acc_id_, other->my_acc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessagePlayerQuery::GetTypeName() const {
  return "jynetwork.proto.CSMessagePlayerQuery";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageCorpsOper::kOperFieldNumber;
const int CSMessageCorpsOper::kCorpsIdFieldNumber;
const int CSMessageCorpsOper::kCharIdFieldNumber;
const int CSMessageCorpsOper::kNameFieldNumber;
const int CSMessageCorpsOper::kPageFieldNumber;
const int CSMessageCorpsOper::kFightPowerFieldNumber;
const int CSMessageCorpsOper::kInfoFieldNumber;
#endif  // !_MSC_VER

CSMessageCorpsOper::CSMessageCorpsOper()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageCorpsOper::InitAsDefaultInstance() {
}

CSMessageCorpsOper::CSMessageCorpsOper(const CSMessageCorpsOper& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageCorpsOper::SharedCtor() {
  _cached_size_ = 0;
  oper_ = 1;
  corps_id_ = 0u;
  char_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_ = 0u;
  fight_power_ = 0u;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageCorpsOper::~CSMessageCorpsOper() {
  SharedDtor();
}

void CSMessageCorpsOper::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessageCorpsOper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageCorpsOper& CSMessageCorpsOper::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageCorpsOper* CSMessageCorpsOper::default_instance_ = NULL;

CSMessageCorpsOper* CSMessageCorpsOper::New() const {
  return new CSMessageCorpsOper;
}

void CSMessageCorpsOper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_ = 1;
    corps_id_ = 0u;
    char_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    page_ = 0u;
    fight_power_ = 0u;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageCorpsOper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .jynetwork.proto.eCorpsOpertionType oper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eCorpsOpertionType_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::eCorpsOpertionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_corps_id;
        break;
      }

      // optional uint32 corps_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_id_)));
          set_has_corps_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_char_id;
        break;
      }

      // optional uint32 char_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_page;
        break;
      }

      // optional uint32 page = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight_power;
        break;
      }

      // optional uint32 fight_power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_info;
        break;
      }

      // optional bytes info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageCorpsOper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .jynetwork.proto.eCorpsOpertionType oper = 1;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // optional uint32 corps_id = 2;
  if (has_corps_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->corps_id(), output);
  }

  // optional uint32 char_id = 3;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->char_id(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // optional uint32 page = 5;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->page(), output);
  }

  // optional uint32 fight_power = 6;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fight_power(), output);
  }

  // optional bytes info = 7;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->info(), output);
  }

}

int CSMessageCorpsOper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .jynetwork.proto.eCorpsOpertionType oper = 1;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional uint32 corps_id = 2;
    if (has_corps_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps_id());
    }

    // optional uint32 char_id = 3;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 page = 5;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional uint32 fight_power = 6;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

    // optional bytes info = 7;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageCorpsOper::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageCorpsOper*>(&from));
}

void CSMessageCorpsOper::MergeFrom(const CSMessageCorpsOper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_corps_id()) {
      set_corps_id(from.corps_id());
    }
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
}

void CSMessageCorpsOper::CopyFrom(const CSMessageCorpsOper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageCorpsOper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSMessageCorpsOper::Swap(CSMessageCorpsOper* other) {
  if (other != this) {
    std::swap(oper_, other->oper_);
    std::swap(corps_id_, other->corps_id_);
    std::swap(char_id_, other->char_id_);
    std::swap(name_, other->name_);
    std::swap(page_, other->page_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageCorpsOper::GetTypeName() const {
  return "jynetwork.proto.CSMessageCorpsOper";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageChat::kChatTypeFieldNumber;
const int CSMessageChat::kFromCharFieldNumber;
const int CSMessageChat::kToCharFieldNumber;
const int CSMessageChat::kChatStringFieldNumber;
const int CSMessageChat::kItemFieldNumber;
const int CSMessageChat::kExceptIdFieldNumber;
#endif  // !_MSC_VER

CSMessageChat::CSMessageChat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageChat::InitAsDefaultInstance() {
}

CSMessageChat::CSMessageChat(const CSMessageChat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageChat::SharedCtor() {
  _cached_size_ = 0;
  chat_type_ = 0u;
  from_char_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_char_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  except_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageChat::~CSMessageChat() {
  SharedDtor();
}

void CSMessageChat::SharedDtor() {
  if (from_char_ != &::google::protobuf::internal::kEmptyString) {
    delete from_char_;
  }
  if (to_char_ != &::google::protobuf::internal::kEmptyString) {
    delete to_char_;
  }
  if (chat_string_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_string_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMessageChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageChat& CSMessageChat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageChat* CSMessageChat::default_instance_ = NULL;

CSMessageChat* CSMessageChat::New() const {
  return new CSMessageChat;
}

void CSMessageChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chat_type_ = 0u;
    if (has_from_char()) {
      if (from_char_ != &::google::protobuf::internal::kEmptyString) {
        from_char_->clear();
      }
    }
    if (has_to_char()) {
      if (to_char_ != &::google::protobuf::internal::kEmptyString) {
        to_char_->clear();
      }
    }
    if (has_chat_string()) {
      if (chat_string_ != &::google::protobuf::internal::kEmptyString) {
        chat_string_->clear();
      }
    }
    except_id_ = GOOGLE_ULONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chat_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_type_)));
          set_has_chat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from_char;
        break;
      }

      // optional string from_char = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_char:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_char()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_to_char;
        break;
      }

      // optional string to_char = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_char:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_char()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chat_string;
        break;
      }

      // optional string chat_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item;
        break;
      }

      // repeated .jynetwork.proto.sPersonEquipStats item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item;
        if (input->ExpectTag(48)) goto parse_except_id;
        break;
      }

      // optional uint64 except_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_except_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &except_id_)));
          set_has_except_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chat_type = 1;
  if (has_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chat_type(), output);
  }

  // optional string from_char = 2;
  if (has_from_char()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->from_char(), output);
  }

  // optional string to_char = 3;
  if (has_to_char()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->to_char(), output);
  }

  // optional string chat_string = 4;
  if (has_chat_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chat_string(), output);
  }

  // repeated .jynetwork.proto.sPersonEquipStats item = 5;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->item(i), output);
  }

  // optional uint64 except_id = 6;
  if (has_except_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->except_id(), output);
  }

}

int CSMessageChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chat_type = 1;
    if (has_chat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_type());
    }

    // optional string from_char = 2;
    if (has_from_char()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_char());
    }

    // optional string to_char = 3;
    if (has_to_char()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_char());
    }

    // optional string chat_string = 4;
    if (has_chat_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_string());
    }

    // optional uint64 except_id = 6;
    if (has_except_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->except_id());
    }

  }
  // repeated .jynetwork.proto.sPersonEquipStats item = 5;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageChat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageChat*>(&from));
}

void CSMessageChat::MergeFrom(const CSMessageChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_from_char()) {
      set_from_char(from.from_char());
    }
    if (from.has_to_char()) {
      set_to_char(from.to_char());
    }
    if (from.has_chat_string()) {
      set_chat_string(from.chat_string());
    }
    if (from.has_except_id()) {
      set_except_id(from.except_id());
    }
  }
}

void CSMessageChat::CopyFrom(const CSMessageChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageChat::IsInitialized() const {

  return true;
}

void CSMessageChat::Swap(CSMessageChat* other) {
  if (other != this) {
    std::swap(chat_type_, other->chat_type_);
    std::swap(from_char_, other->from_char_);
    std::swap(to_char_, other->to_char_);
    std::swap(chat_string_, other->chat_string_);
    item_.Swap(&other->item_);
    std::swap(except_id_, other->except_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageChat::GetTypeName() const {
  return "jynetwork.proto.CSMessageChat";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageArenaBattleBegin::kMapIdFieldNumber;
const int CSMessageArenaBattleBegin::kNetTypeFieldNumber;
const int CSMessageArenaBattleBegin::kCiFieldNumber;
#endif  // !_MSC_VER

CSMessageArenaBattleBegin::CSMessageArenaBattleBegin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMessageArenaBattleBegin::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ci_ = const_cast< ::jynetwork::proto::sCharactorInit*>(
      ::jynetwork::proto::sCharactorInit::internal_default_instance());
#else
  ci_ = const_cast< ::jynetwork::proto::sCharactorInit*>(&::jynetwork::proto::sCharactorInit::default_instance());
#endif
}

CSMessageArenaBattleBegin::CSMessageArenaBattleBegin(const CSMessageArenaBattleBegin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageArenaBattleBegin::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  net_type_ = 0u;
  ci_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageArenaBattleBegin::~CSMessageArenaBattleBegin() {
  SharedDtor();
}

void CSMessageArenaBattleBegin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ci_;
  }
}

void CSMessageArenaBattleBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMessageArenaBattleBegin& CSMessageArenaBattleBegin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMessage_2eproto();
#endif
  return *default_instance_;
}

CSMessageArenaBattleBegin* CSMessageArenaBattleBegin::default_instance_ = NULL;

CSMessageArenaBattleBegin* CSMessageArenaBattleBegin::New() const {
  return new CSMessageArenaBattleBegin;
}

void CSMessageArenaBattleBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    net_type_ = 0u;
    if (has_ci()) {
      if (ci_ != NULL) ci_->::jynetwork::proto::sCharactorInit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMessageArenaBattleBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_net_type;
        break;
      }

      // optional uint32 net_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_type_)));
          set_has_net_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ci;
        break;
      }

      // optional .jynetwork.proto.sCharactorInit ci = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ci:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ci()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageArenaBattleBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional uint32 net_type = 2;
  if (has_net_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->net_type(), output);
  }

  // optional .jynetwork.proto.sCharactorInit ci = 4;
  if (has_ci()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ci(), output);
  }

}

int CSMessageArenaBattleBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 net_type = 2;
    if (has_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_type());
    }

    // optional .jynetwork.proto.sCharactorInit ci = 4;
    if (has_ci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ci());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageArenaBattleBegin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMessageArenaBattleBegin*>(&from));
}

void CSMessageArenaBattleBegin::MergeFrom(const CSMessageArenaBattleBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_net_type()) {
      set_net_type(from.net_type());
    }
    if (from.has_ci()) {
      mutable_ci()->::jynetwork::proto::sCharactorInit::MergeFrom(from.ci());
    }
  }
}

void CSMessageArenaBattleBegin::CopyFrom(const CSMessageArenaBattleBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageArenaBattleBegin::IsInitialized() const {

  return true;
}

void CSMessageArenaBattleBegin::Swap(CSMessageArenaBattleBegin* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(net_type_, other->net_type_);
    std::swap(ci_, other->ci_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMessageArenaBattleBegin::GetTypeName() const {
  return "jynetwork.proto.CSMessageArenaBattleBegin";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace jynetwork

// @@protoc_insertion_point(global_scope)
