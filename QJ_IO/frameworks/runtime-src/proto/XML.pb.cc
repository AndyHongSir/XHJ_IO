// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XML.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "XML.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace jynetwork {
namespace proto {

void protobuf_ShutdownFile_XML_2eproto() {
  delete sGameStats::default_instance_;
  delete sItemStats::default_instance_;
  delete sEquipStats::default_instance_;
  delete sEquipGroupStats::default_instance_;
  delete sCharactorStats::default_instance_;
  delete sSkillCondition::default_instance_;
  delete sCardStats::default_instance_;
  delete sPersonCardStats::default_instance_;
  delete sSkillStats::default_instance_;
  delete sBuffStats::default_instance_;
  delete sDropItem::default_instance_;
  delete sDropStats::default_instance_;
  delete sMapStats::default_instance_;
  delete sCharExp::default_instance_;
  delete sCharChangeJob::default_instance_;
  delete sCharLevelUp::default_instance_;
  delete sCharSkillLevelUp::default_instance_;
  delete sEquipAttr::default_instance_;
  delete sEquipIntensify::default_instance_;
  delete sEquipLevelUp::default_instance_;
  delete sEquipStarUp::default_instance_;
  delete sCardIntensify::default_instance_;
  delete sCardLevelUp::default_instance_;
  delete sCardStarUp::default_instance_;
  delete sShopItem::default_instance_;
  delete sTaskStats::default_instance_;
  delete sBuyStaminaStats::default_instance_;
  delete sBuyGoldStats::default_instance_;
  delete sEquipAttrStats::default_instance_;
  delete sEquipAttrPropStats::default_instance_;
  delete sPrefixAttr::default_instance_;
  delete sPrefixStats::default_instance_;
  delete sWeekStats::default_instance_;
  delete sDecomStats::default_instance_;
  delete sMaskWordStats::default_instance_;
  delete sPartnerStats::default_instance_;
  delete sPartnerLvUpStats::default_instance_;
  delete sPartnerIntensifyStats::default_instance_;
  delete sPartnerStarStats::default_instance_;
  delete sActivityStats::default_instance_;
  delete sRouletteStats::default_instance_;
  delete sResourseDetail::default_instance_;
  delete sResourseStats::default_instance_;
  delete sHomeBackground::default_instance_;
  delete sEquipDetail::default_instance_;
  delete sEquipRecommend::default_instance_;
  delete sCastleMonsterInfoStats::default_instance_;
  delete sConstantsStats::default_instance_;
  delete NetBattleMove::default_instance_;
  delete NetCardSkill::default_instance_;
  delete NetBattleOper::default_instance_;
  delete sEquipIdentify::default_instance_;
  delete sAttributeBase::default_instance_;
  delete sCorpsLevel::default_instance_;
  delete sVipStats::default_instance_;
  delete sVipCostStats::default_instance_;
  delete sServerStats::default_instance_;
  delete sServerItems::default_instance_;
  delete CorpsBossRewardStats::default_instance_;
  delete CorpsBossMapStats::default_instance_;
  delete sArenaStats::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_XML_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_XML_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::jynetwork::proto::protobuf_AddDesc_scbase_2eproto();
  sGameStats::default_instance_ = new sGameStats();
  sItemStats::default_instance_ = new sItemStats();
  sEquipStats::default_instance_ = new sEquipStats();
  sEquipGroupStats::default_instance_ = new sEquipGroupStats();
  sCharactorStats::default_instance_ = new sCharactorStats();
  sSkillCondition::default_instance_ = new sSkillCondition();
  sCardStats::default_instance_ = new sCardStats();
  sPersonCardStats::default_instance_ = new sPersonCardStats();
  sSkillStats::default_instance_ = new sSkillStats();
  sBuffStats::default_instance_ = new sBuffStats();
  sDropItem::default_instance_ = new sDropItem();
  sDropStats::default_instance_ = new sDropStats();
  sMapStats::default_instance_ = new sMapStats();
  sCharExp::default_instance_ = new sCharExp();
  sCharChangeJob::default_instance_ = new sCharChangeJob();
  sCharLevelUp::default_instance_ = new sCharLevelUp();
  sCharSkillLevelUp::default_instance_ = new sCharSkillLevelUp();
  sEquipAttr::default_instance_ = new sEquipAttr();
  sEquipIntensify::default_instance_ = new sEquipIntensify();
  sEquipLevelUp::default_instance_ = new sEquipLevelUp();
  sEquipStarUp::default_instance_ = new sEquipStarUp();
  sCardIntensify::default_instance_ = new sCardIntensify();
  sCardLevelUp::default_instance_ = new sCardLevelUp();
  sCardStarUp::default_instance_ = new sCardStarUp();
  sShopItem::default_instance_ = new sShopItem();
  sTaskStats::default_instance_ = new sTaskStats();
  sBuyStaminaStats::default_instance_ = new sBuyStaminaStats();
  sBuyGoldStats::default_instance_ = new sBuyGoldStats();
  sEquipAttrStats::default_instance_ = new sEquipAttrStats();
  sEquipAttrPropStats::default_instance_ = new sEquipAttrPropStats();
  sPrefixAttr::default_instance_ = new sPrefixAttr();
  sPrefixStats::default_instance_ = new sPrefixStats();
  sWeekStats::default_instance_ = new sWeekStats();
  sDecomStats::default_instance_ = new sDecomStats();
  sMaskWordStats::default_instance_ = new sMaskWordStats();
  sPartnerStats::default_instance_ = new sPartnerStats();
  sPartnerLvUpStats::default_instance_ = new sPartnerLvUpStats();
  sPartnerIntensifyStats::default_instance_ = new sPartnerIntensifyStats();
  sPartnerStarStats::default_instance_ = new sPartnerStarStats();
  sActivityStats::default_instance_ = new sActivityStats();
  sRouletteStats::default_instance_ = new sRouletteStats();
  sResourseDetail::default_instance_ = new sResourseDetail();
  sResourseStats::default_instance_ = new sResourseStats();
  sHomeBackground::default_instance_ = new sHomeBackground();
  sEquipDetail::default_instance_ = new sEquipDetail();
  sEquipRecommend::default_instance_ = new sEquipRecommend();
  sCastleMonsterInfoStats::default_instance_ = new sCastleMonsterInfoStats();
  sConstantsStats::default_instance_ = new sConstantsStats();
  NetBattleMove::default_instance_ = new NetBattleMove();
  NetCardSkill::default_instance_ = new NetCardSkill();
  NetBattleOper::default_instance_ = new NetBattleOper();
  sEquipIdentify::default_instance_ = new sEquipIdentify();
  sAttributeBase::default_instance_ = new sAttributeBase();
  sCorpsLevel::default_instance_ = new sCorpsLevel();
  sVipStats::default_instance_ = new sVipStats();
  sVipCostStats::default_instance_ = new sVipCostStats();
  sServerStats::default_instance_ = new sServerStats();
  sServerItems::default_instance_ = new sServerItems();
  CorpsBossRewardStats::default_instance_ = new CorpsBossRewardStats();
  CorpsBossMapStats::default_instance_ = new CorpsBossMapStats();
  sArenaStats::default_instance_ = new sArenaStats();
  sGameStats::default_instance_->InitAsDefaultInstance();
  sItemStats::default_instance_->InitAsDefaultInstance();
  sEquipStats::default_instance_->InitAsDefaultInstance();
  sEquipGroupStats::default_instance_->InitAsDefaultInstance();
  sCharactorStats::default_instance_->InitAsDefaultInstance();
  sSkillCondition::default_instance_->InitAsDefaultInstance();
  sCardStats::default_instance_->InitAsDefaultInstance();
  sPersonCardStats::default_instance_->InitAsDefaultInstance();
  sSkillStats::default_instance_->InitAsDefaultInstance();
  sBuffStats::default_instance_->InitAsDefaultInstance();
  sDropItem::default_instance_->InitAsDefaultInstance();
  sDropStats::default_instance_->InitAsDefaultInstance();
  sMapStats::default_instance_->InitAsDefaultInstance();
  sCharExp::default_instance_->InitAsDefaultInstance();
  sCharChangeJob::default_instance_->InitAsDefaultInstance();
  sCharLevelUp::default_instance_->InitAsDefaultInstance();
  sCharSkillLevelUp::default_instance_->InitAsDefaultInstance();
  sEquipAttr::default_instance_->InitAsDefaultInstance();
  sEquipIntensify::default_instance_->InitAsDefaultInstance();
  sEquipLevelUp::default_instance_->InitAsDefaultInstance();
  sEquipStarUp::default_instance_->InitAsDefaultInstance();
  sCardIntensify::default_instance_->InitAsDefaultInstance();
  sCardLevelUp::default_instance_->InitAsDefaultInstance();
  sCardStarUp::default_instance_->InitAsDefaultInstance();
  sShopItem::default_instance_->InitAsDefaultInstance();
  sTaskStats::default_instance_->InitAsDefaultInstance();
  sBuyStaminaStats::default_instance_->InitAsDefaultInstance();
  sBuyGoldStats::default_instance_->InitAsDefaultInstance();
  sEquipAttrStats::default_instance_->InitAsDefaultInstance();
  sEquipAttrPropStats::default_instance_->InitAsDefaultInstance();
  sPrefixAttr::default_instance_->InitAsDefaultInstance();
  sPrefixStats::default_instance_->InitAsDefaultInstance();
  sWeekStats::default_instance_->InitAsDefaultInstance();
  sDecomStats::default_instance_->InitAsDefaultInstance();
  sMaskWordStats::default_instance_->InitAsDefaultInstance();
  sPartnerStats::default_instance_->InitAsDefaultInstance();
  sPartnerLvUpStats::default_instance_->InitAsDefaultInstance();
  sPartnerIntensifyStats::default_instance_->InitAsDefaultInstance();
  sPartnerStarStats::default_instance_->InitAsDefaultInstance();
  sActivityStats::default_instance_->InitAsDefaultInstance();
  sRouletteStats::default_instance_->InitAsDefaultInstance();
  sResourseDetail::default_instance_->InitAsDefaultInstance();
  sResourseStats::default_instance_->InitAsDefaultInstance();
  sHomeBackground::default_instance_->InitAsDefaultInstance();
  sEquipDetail::default_instance_->InitAsDefaultInstance();
  sEquipRecommend::default_instance_->InitAsDefaultInstance();
  sCastleMonsterInfoStats::default_instance_->InitAsDefaultInstance();
  sConstantsStats::default_instance_->InitAsDefaultInstance();
  NetBattleMove::default_instance_->InitAsDefaultInstance();
  NetCardSkill::default_instance_->InitAsDefaultInstance();
  NetBattleOper::default_instance_->InitAsDefaultInstance();
  sEquipIdentify::default_instance_->InitAsDefaultInstance();
  sAttributeBase::default_instance_->InitAsDefaultInstance();
  sCorpsLevel::default_instance_->InitAsDefaultInstance();
  sVipStats::default_instance_->InitAsDefaultInstance();
  sVipCostStats::default_instance_->InitAsDefaultInstance();
  sServerStats::default_instance_->InitAsDefaultInstance();
  sServerItems::default_instance_->InitAsDefaultInstance();
  CorpsBossRewardStats::default_instance_->InitAsDefaultInstance();
  CorpsBossMapStats::default_instance_->InitAsDefaultInstance();
  sArenaStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_XML_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_XML_2eproto_once_);
void protobuf_AddDesc_XML_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_XML_2eproto_once_,
                 &protobuf_AddDesc_XML_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_XML_2eproto {
  StaticDescriptorInitializer_XML_2eproto() {
    protobuf_AddDesc_XML_2eproto();
  }
} static_descriptor_initializer_XML_2eproto_;
#endif
bool eNetBattleOper_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

bool eVipOper_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 999:
      return true;
    default:
      return false;
  }
}

bool eVipFunc_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int sGameStats::kUidFieldNumber;
const int sGameStats::kHpFieldNumber;
const int sGameStats::kPdamageFieldNumber;
const int sGameStats::kDespdamageFieldNumber;
const int sGameStats::kMdamageFieldNumber;
const int sGameStats::kDesmdamageFieldNumber;
const int sGameStats::kStrengthFieldNumber;
const int sGameStats::kDexterityFieldNumber;
const int sGameStats::kIntelligenceFieldNumber;
const int sGameStats::kStaminaFieldNumber;
const int sGameStats::kSpeedFieldNumber;
const int sGameStats::kAtkspeedFieldNumber;
const int sGameStats::kCritFieldNumber;
const int sGameStats::kPerfectFieldNumber;
const int sGameStats::kExcellentFieldNumber;
const int sGameStats::kFireFieldNumber;
const int sGameStats::kResfireFieldNumber;
const int sGameStats::kWaterFieldNumber;
const int sGameStats::kReswaterFieldNumber;
const int sGameStats::kWindFieldNumber;
const int sGameStats::kReswindFieldNumber;
const int sGameStats::kThunderFieldNumber;
const int sGameStats::kResthunderFieldNumber;
const int sGameStats::kBoltFieldNumber;
const int sGameStats::kResboltFieldNumber;
const int sGameStats::kDarkFieldNumber;
const int sGameStats::kResdarkFieldNumber;
const int sGameStats::kPoisonFieldNumber;
const int sGameStats::kRespoisonFieldNumber;
const int sGameStats::kPickrangeFieldNumber;
const int sGameStats::kHprecoverFieldNumber;
const int sGameStats::kMprecoverFieldNumber;
const int sGameStats::kChaosrateFieldNumber;
const int sGameStats::kReschaosrateFieldNumber;
const int sGameStats::kSealrateFieldNumber;
const int sGameStats::kRescsealrateFieldNumber;
const int sGameStats::kFreezerateFieldNumber;
const int sGameStats::kResfreezerateFieldNumber;
const int sGameStats::kBattleAbiltyFieldNumber;
const int sGameStats::kMortalFieldNumber;
const int sGameStats::kToughnessFieldNumber;
const int sGameStats::kHppercentFieldNumber;
const int sGameStats::kPdamagepercentFieldNumber;
const int sGameStats::kDespdamagepercentFieldNumber;
const int sGameStats::kMdamagepercentFieldNumber;
const int sGameStats::kDesmdamagepercentFieldNumber;
const int sGameStats::kMortalpercentFieldNumber;
const int sGameStats::kToughnesspercentFieldNumber;
const int sGameStats::kFirepercentFieldNumber;
const int sGameStats::kWaterpecentFieldNumber;
const int sGameStats::kWindpercentFieldNumber;
const int sGameStats::kThunderpercentFieldNumber;
const int sGameStats::kBoltpercentFieldNumber;
const int sGameStats::kDarkpercentFieldNumber;
const int sGameStats::kAttributeCalcFieldNumber;
const int sGameStats::kOwnerLevelFieldNumber;
const int sGameStats::kPercentFieldNumber;
const int sGameStats::kCardAbilityFieldNumber;
const int sGameStats::kDmgFirepercentFieldNumber;
const int sGameStats::kDmgWaterpercentFieldNumber;
const int sGameStats::kDmgWindpercentFieldNumber;
const int sGameStats::kDmgThunderpercentFieldNumber;
const int sGameStats::kDmgBoltpercentFieldNumber;
const int sGameStats::kDmgDarkpercentFieldNumber;
#endif  // !_MSC_VER

sGameStats::sGameStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sGameStats::InitAsDefaultInstance() {
}

sGameStats::sGameStats(const sGameStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sGameStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  hp_ = 0;
  pdamage_ = 0;
  despdamage_ = 0;
  mdamage_ = 0;
  desmdamage_ = 0;
  strength_ = 0;
  dexterity_ = 0;
  intelligence_ = 0;
  stamina_ = 0;
  speed_ = 0;
  atkspeed_ = 0;
  crit_ = 0;
  perfect_ = 0;
  excellent_ = 0;
  fire_ = 0;
  resfire_ = 0;
  water_ = 0;
  reswater_ = 0;
  wind_ = 0;
  reswind_ = 0;
  thunder_ = 0;
  resthunder_ = 0;
  bolt_ = 0;
  resbolt_ = 0;
  dark_ = 0;
  resdark_ = 0;
  poison_ = 0;
  respoison_ = 0;
  pickrange_ = 0;
  hprecover_ = 0;
  mprecover_ = 0;
  chaosrate_ = 0;
  reschaosrate_ = 0;
  sealrate_ = 0;
  rescsealrate_ = 0;
  freezerate_ = 0;
  resfreezerate_ = 0;
  battle_abilty_ = 0;
  mortal_ = 0;
  toughness_ = 0;
  hppercent_ = 0;
  pdamagepercent_ = 0;
  despdamagepercent_ = 0;
  mdamagepercent_ = 0;
  desmdamagepercent_ = 0;
  mortalpercent_ = 0;
  toughnesspercent_ = 0;
  firepercent_ = 0;
  waterpecent_ = 0;
  windpercent_ = 0;
  thunderpercent_ = 0;
  boltpercent_ = 0;
  darkpercent_ = 0;
  attribute_calc_ = 0u;
  owner_level_ = 0;
  percent_ = 0;
  card_ability_ = 0;
  dmg_firepercent_ = 0;
  dmg_waterpercent_ = 0;
  dmg_windpercent_ = 0;
  dmg_thunderpercent_ = 0;
  dmg_boltpercent_ = 0;
  dmg_darkpercent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGameStats::~sGameStats() {
  SharedDtor();
}

void sGameStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sGameStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sGameStats& sGameStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sGameStats* sGameStats::default_instance_ = NULL;

sGameStats* sGameStats::New() const {
  return new sGameStats;
}

void sGameStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    hp_ = 0;
    pdamage_ = 0;
    despdamage_ = 0;
    mdamage_ = 0;
    desmdamage_ = 0;
    strength_ = 0;
    dexterity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    intelligence_ = 0;
    stamina_ = 0;
    speed_ = 0;
    atkspeed_ = 0;
    crit_ = 0;
    perfect_ = 0;
    excellent_ = 0;
    fire_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    resfire_ = 0;
    water_ = 0;
    reswater_ = 0;
    wind_ = 0;
    reswind_ = 0;
    thunder_ = 0;
    resthunder_ = 0;
    bolt_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    resbolt_ = 0;
    dark_ = 0;
    resdark_ = 0;
    poison_ = 0;
    respoison_ = 0;
    pickrange_ = 0;
    hprecover_ = 0;
    mprecover_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    chaosrate_ = 0;
    reschaosrate_ = 0;
    sealrate_ = 0;
    rescsealrate_ = 0;
    freezerate_ = 0;
    resfreezerate_ = 0;
    battle_abilty_ = 0;
    mortal_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    toughness_ = 0;
    hppercent_ = 0;
    pdamagepercent_ = 0;
    despdamagepercent_ = 0;
    mdamagepercent_ = 0;
    desmdamagepercent_ = 0;
    mortalpercent_ = 0;
    toughnesspercent_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    firepercent_ = 0;
    waterpecent_ = 0;
    windpercent_ = 0;
    thunderpercent_ = 0;
    boltpercent_ = 0;
    darkpercent_ = 0;
    attribute_calc_ = 0u;
    owner_level_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    percent_ = 0;
    card_ability_ = 0;
    dmg_firepercent_ = 0;
    dmg_waterpercent_ = 0;
    dmg_windpercent_ = 0;
    dmg_thunderpercent_ = 0;
    dmg_boltpercent_ = 0;
    dmg_darkpercent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sGameStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // optional int32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pdamage;
        break;
      }

      // optional float pdamage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pdamage_)));
          set_has_pdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_despdamage;
        break;
      }

      // optional float despdamage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_despdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &despdamage_)));
          set_has_despdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_mdamage;
        break;
      }

      // optional float mdamage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mdamage_)));
          set_has_mdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_desmdamage;
        break;
      }

      // optional float desmdamage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_desmdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desmdamage_)));
          set_has_desmdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_strength;
        break;
      }

      // optional float strength = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_dexterity;
        break;
      }

      // optional float dexterity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dexterity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dexterity_)));
          set_has_dexterity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_intelligence;
        break;
      }

      // optional float intelligence = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_intelligence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intelligence_)));
          set_has_intelligence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_stamina;
        break;
      }

      // optional float stamina = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_speed;
        break;
      }

      // optional float speed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_atkspeed;
        break;
      }

      // optional float atkspeed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_atkspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &atkspeed_)));
          set_has_atkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_crit;
        break;
      }

      // optional float crit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_perfect;
        break;
      }

      // optional float perfect = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_perfect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &perfect_)));
          set_has_perfect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_excellent;
        break;
      }

      // optional float excellent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_excellent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &excellent_)));
          set_has_excellent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_bolt;
        break;
      }

      // optional float bolt = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bolt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bolt_)));
          set_has_bolt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_resbolt;
        break;
      }

      // optional float resbolt = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_resbolt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resbolt_)));
          set_has_resbolt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_dark;
        break;
      }

      // optional float dark = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dark_)));
          set_has_dark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_resdark;
        break;
      }

      // optional float resdark = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_resdark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resdark_)));
          set_has_resdark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_poison;
        break;
      }

      // optional float poison = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_poison:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &poison_)));
          set_has_poison();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_respoison;
        break;
      }

      // optional float respoison = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_respoison:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &respoison_)));
          set_has_respoison();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_pickrange;
        break;
      }

      // optional float pickrange = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pickrange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pickrange_)));
          set_has_pickrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_hprecover;
        break;
      }

      // optional float hprecover = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hprecover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hprecover_)));
          set_has_hprecover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_mprecover;
        break;
      }

      // optional float mprecover = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mprecover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mprecover_)));
          set_has_mprecover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_chaosrate;
        break;
      }

      // optional float chaosrate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chaosrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chaosrate_)));
          set_has_chaosrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_reschaosrate;
        break;
      }

      // optional float reschaosrate = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_reschaosrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reschaosrate_)));
          set_has_reschaosrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_sealrate;
        break;
      }

      // optional float sealrate = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sealrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sealrate_)));
          set_has_sealrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_rescsealrate;
        break;
      }

      // optional float rescsealrate = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rescsealrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rescsealrate_)));
          set_has_rescsealrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_freezerate;
        break;
      }

      // optional float freezerate = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freezerate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freezerate_)));
          set_has_freezerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_resfreezerate;
        break;
      }

      // optional float resfreezerate = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_resfreezerate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resfreezerate_)));
          set_has_resfreezerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_battle_abilty;
        break;
      }

      // optional int32 battle_abilty = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_abilty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_abilty_)));
          set_has_battle_abilty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_mortal;
        break;
      }

      // optional float mortal = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mortal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mortal_)));
          set_has_mortal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_toughness;
        break;
      }

      // optional float toughness = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_toughness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &toughness_)));
          set_has_toughness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_attribute_calc;
        break;
      }

      // optional uint32 attribute_calc = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_calc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_calc_)));
          set_has_attribute_calc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_owner_level;
        break;
      }

      // optional int32 owner_level = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_level_)));
          set_has_owner_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(293)) goto parse_percent;
        break;
      }

      // optional float percent = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(301)) goto parse_fire;
        break;
      }

      // optional float fire = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fire_)));
          set_has_fire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(309)) goto parse_resfire;
        break;
      }

      // optional float resfire = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_resfire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resfire_)));
          set_has_resfire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(317)) goto parse_water;
        break;
      }

      // optional float water = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_water:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &water_)));
          set_has_water();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(325)) goto parse_reswater;
        break;
      }

      // optional float reswater = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_reswater:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reswater_)));
          set_has_reswater();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(333)) goto parse_wind;
        break;
      }

      // optional float wind = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wind_)));
          set_has_wind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(341)) goto parse_reswind;
        break;
      }

      // optional float reswind = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_reswind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reswind_)));
          set_has_reswind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(349)) goto parse_thunder;
        break;
      }

      // optional float thunder = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_thunder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thunder_)));
          set_has_thunder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(357)) goto parse_resthunder;
        break;
      }

      // optional float resthunder = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_resthunder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resthunder_)));
          set_has_resthunder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(365)) goto parse_hppercent;
        break;
      }

      // optional float hppercent = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hppercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hppercent_)));
          set_has_hppercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(373)) goto parse_pdamagepercent;
        break;
      }

      // optional float pdamagepercent = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pdamagepercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pdamagepercent_)));
          set_has_pdamagepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(381)) goto parse_despdamagepercent;
        break;
      }

      // optional float despdamagepercent = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_despdamagepercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &despdamagepercent_)));
          set_has_despdamagepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(389)) goto parse_mdamagepercent;
        break;
      }

      // optional float mdamagepercent = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mdamagepercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mdamagepercent_)));
          set_has_mdamagepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(397)) goto parse_desmdamagepercent;
        break;
      }

      // optional float desmdamagepercent = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_desmdamagepercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desmdamagepercent_)));
          set_has_desmdamagepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(405)) goto parse_mortalpercent;
        break;
      }

      // optional float mortalpercent = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mortalpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mortalpercent_)));
          set_has_mortalpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(413)) goto parse_toughnesspercent;
        break;
      }

      // optional float toughnesspercent = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_toughnesspercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &toughnesspercent_)));
          set_has_toughnesspercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(421)) goto parse_firepercent;
        break;
      }

      // optional float firepercent = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_firepercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &firepercent_)));
          set_has_firepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(429)) goto parse_waterpecent;
        break;
      }

      // optional float waterpecent = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_waterpecent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waterpecent_)));
          set_has_waterpecent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(437)) goto parse_windpercent;
        break;
      }

      // optional float windpercent = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_windpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &windpercent_)));
          set_has_windpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(445)) goto parse_thunderpercent;
        break;
      }

      // optional float thunderpercent = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_thunderpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thunderpercent_)));
          set_has_thunderpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(453)) goto parse_boltpercent;
        break;
      }

      // optional float boltpercent = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_boltpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boltpercent_)));
          set_has_boltpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(461)) goto parse_darkpercent;
        break;
      }

      // optional float darkpercent = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_darkpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &darkpercent_)));
          set_has_darkpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(469)) goto parse_card_ability;
        break;
      }

      // optional float card_ability = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_card_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &card_ability_)));
          set_has_card_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(477)) goto parse_dmg_firepercent;
        break;
      }

      // optional float dmg_firepercent = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmg_firepercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmg_firepercent_)));
          set_has_dmg_firepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(485)) goto parse_dmg_waterpercent;
        break;
      }

      // optional float dmg_waterpercent = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmg_waterpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmg_waterpercent_)));
          set_has_dmg_waterpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(493)) goto parse_dmg_windpercent;
        break;
      }

      // optional float dmg_windpercent = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmg_windpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmg_windpercent_)));
          set_has_dmg_windpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(501)) goto parse_dmg_thunderpercent;
        break;
      }

      // optional float dmg_thunderpercent = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmg_thunderpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmg_thunderpercent_)));
          set_has_dmg_thunderpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(509)) goto parse_dmg_boltpercent;
        break;
      }

      // optional float dmg_boltpercent = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmg_boltpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmg_boltpercent_)));
          set_has_dmg_boltpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(517)) goto parse_dmg_darkpercent;
        break;
      }

      // optional float dmg_darkpercent = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmg_darkpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmg_darkpercent_)));
          set_has_dmg_darkpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGameStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional int32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  // optional float pdamage = 3;
  if (has_pdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pdamage(), output);
  }

  // optional float despdamage = 4;
  if (has_despdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->despdamage(), output);
  }

  // optional float mdamage = 5;
  if (has_mdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mdamage(), output);
  }

  // optional float desmdamage = 6;
  if (has_desmdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->desmdamage(), output);
  }

  // optional float strength = 7;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->strength(), output);
  }

  // optional float dexterity = 8;
  if (has_dexterity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->dexterity(), output);
  }

  // optional float intelligence = 9;
  if (has_intelligence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->intelligence(), output);
  }

  // optional float stamina = 10;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->stamina(), output);
  }

  // optional float speed = 11;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->speed(), output);
  }

  // optional float atkspeed = 12;
  if (has_atkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->atkspeed(), output);
  }

  // optional float crit = 13;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->crit(), output);
  }

  // optional float perfect = 14;
  if (has_perfect()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->perfect(), output);
  }

  // optional float excellent = 15;
  if (has_excellent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->excellent(), output);
  }

  // optional float bolt = 16;
  if (has_bolt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->bolt(), output);
  }

  // optional float resbolt = 17;
  if (has_resbolt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->resbolt(), output);
  }

  // optional float dark = 18;
  if (has_dark()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->dark(), output);
  }

  // optional float resdark = 19;
  if (has_resdark()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->resdark(), output);
  }

  // optional float poison = 20;
  if (has_poison()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->poison(), output);
  }

  // optional float respoison = 21;
  if (has_respoison()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->respoison(), output);
  }

  // optional float pickrange = 22;
  if (has_pickrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->pickrange(), output);
  }

  // optional float hprecover = 23;
  if (has_hprecover()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->hprecover(), output);
  }

  // optional float mprecover = 24;
  if (has_mprecover()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->mprecover(), output);
  }

  // optional float chaosrate = 25;
  if (has_chaosrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->chaosrate(), output);
  }

  // optional float reschaosrate = 26;
  if (has_reschaosrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->reschaosrate(), output);
  }

  // optional float sealrate = 27;
  if (has_sealrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->sealrate(), output);
  }

  // optional float rescsealrate = 28;
  if (has_rescsealrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->rescsealrate(), output);
  }

  // optional float freezerate = 29;
  if (has_freezerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->freezerate(), output);
  }

  // optional float resfreezerate = 30;
  if (has_resfreezerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->resfreezerate(), output);
  }

  // optional int32 battle_abilty = 31;
  if (has_battle_abilty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->battle_abilty(), output);
  }

  // optional float mortal = 32;
  if (has_mortal()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->mortal(), output);
  }

  // optional float toughness = 33;
  if (has_toughness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->toughness(), output);
  }

  // optional uint32 attribute_calc = 34;
  if (has_attribute_calc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->attribute_calc(), output);
  }

  // optional int32 owner_level = 35;
  if (has_owner_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->owner_level(), output);
  }

  // optional float percent = 36;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->percent(), output);
  }

  // optional float fire = 37;
  if (has_fire()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->fire(), output);
  }

  // optional float resfire = 38;
  if (has_resfire()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->resfire(), output);
  }

  // optional float water = 39;
  if (has_water()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->water(), output);
  }

  // optional float reswater = 40;
  if (has_reswater()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->reswater(), output);
  }

  // optional float wind = 41;
  if (has_wind()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->wind(), output);
  }

  // optional float reswind = 42;
  if (has_reswind()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->reswind(), output);
  }

  // optional float thunder = 43;
  if (has_thunder()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->thunder(), output);
  }

  // optional float resthunder = 44;
  if (has_resthunder()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->resthunder(), output);
  }

  // optional float hppercent = 45;
  if (has_hppercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->hppercent(), output);
  }

  // optional float pdamagepercent = 46;
  if (has_pdamagepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->pdamagepercent(), output);
  }

  // optional float despdamagepercent = 47;
  if (has_despdamagepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->despdamagepercent(), output);
  }

  // optional float mdamagepercent = 48;
  if (has_mdamagepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->mdamagepercent(), output);
  }

  // optional float desmdamagepercent = 49;
  if (has_desmdamagepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(49, this->desmdamagepercent(), output);
  }

  // optional float mortalpercent = 50;
  if (has_mortalpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->mortalpercent(), output);
  }

  // optional float toughnesspercent = 51;
  if (has_toughnesspercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->toughnesspercent(), output);
  }

  // optional float firepercent = 52;
  if (has_firepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(52, this->firepercent(), output);
  }

  // optional float waterpecent = 53;
  if (has_waterpecent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(53, this->waterpecent(), output);
  }

  // optional float windpercent = 54;
  if (has_windpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->windpercent(), output);
  }

  // optional float thunderpercent = 55;
  if (has_thunderpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->thunderpercent(), output);
  }

  // optional float boltpercent = 56;
  if (has_boltpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->boltpercent(), output);
  }

  // optional float darkpercent = 57;
  if (has_darkpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->darkpercent(), output);
  }

  // optional float card_ability = 58;
  if (has_card_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(58, this->card_ability(), output);
  }

  // optional float dmg_firepercent = 59;
  if (has_dmg_firepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(59, this->dmg_firepercent(), output);
  }

  // optional float dmg_waterpercent = 60;
  if (has_dmg_waterpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(60, this->dmg_waterpercent(), output);
  }

  // optional float dmg_windpercent = 61;
  if (has_dmg_windpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(61, this->dmg_windpercent(), output);
  }

  // optional float dmg_thunderpercent = 62;
  if (has_dmg_thunderpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(62, this->dmg_thunderpercent(), output);
  }

  // optional float dmg_boltpercent = 63;
  if (has_dmg_boltpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->dmg_boltpercent(), output);
  }

  // optional float dmg_darkpercent = 64;
  if (has_dmg_darkpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(64, this->dmg_darkpercent(), output);
  }

}

int sGameStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional int32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional float pdamage = 3;
    if (has_pdamage()) {
      total_size += 1 + 4;
    }

    // optional float despdamage = 4;
    if (has_despdamage()) {
      total_size += 1 + 4;
    }

    // optional float mdamage = 5;
    if (has_mdamage()) {
      total_size += 1 + 4;
    }

    // optional float desmdamage = 6;
    if (has_desmdamage()) {
      total_size += 1 + 4;
    }

    // optional float strength = 7;
    if (has_strength()) {
      total_size += 1 + 4;
    }

    // optional float dexterity = 8;
    if (has_dexterity()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float intelligence = 9;
    if (has_intelligence()) {
      total_size += 1 + 4;
    }

    // optional float stamina = 10;
    if (has_stamina()) {
      total_size += 1 + 4;
    }

    // optional float speed = 11;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional float atkspeed = 12;
    if (has_atkspeed()) {
      total_size += 1 + 4;
    }

    // optional float crit = 13;
    if (has_crit()) {
      total_size += 1 + 4;
    }

    // optional float perfect = 14;
    if (has_perfect()) {
      total_size += 1 + 4;
    }

    // optional float excellent = 15;
    if (has_excellent()) {
      total_size += 1 + 4;
    }

    // optional float fire = 37;
    if (has_fire()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float resfire = 38;
    if (has_resfire()) {
      total_size += 2 + 4;
    }

    // optional float water = 39;
    if (has_water()) {
      total_size += 2 + 4;
    }

    // optional float reswater = 40;
    if (has_reswater()) {
      total_size += 2 + 4;
    }

    // optional float wind = 41;
    if (has_wind()) {
      total_size += 2 + 4;
    }

    // optional float reswind = 42;
    if (has_reswind()) {
      total_size += 2 + 4;
    }

    // optional float thunder = 43;
    if (has_thunder()) {
      total_size += 2 + 4;
    }

    // optional float resthunder = 44;
    if (has_resthunder()) {
      total_size += 2 + 4;
    }

    // optional float bolt = 16;
    if (has_bolt()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float resbolt = 17;
    if (has_resbolt()) {
      total_size += 2 + 4;
    }

    // optional float dark = 18;
    if (has_dark()) {
      total_size += 2 + 4;
    }

    // optional float resdark = 19;
    if (has_resdark()) {
      total_size += 2 + 4;
    }

    // optional float poison = 20;
    if (has_poison()) {
      total_size += 2 + 4;
    }

    // optional float respoison = 21;
    if (has_respoison()) {
      total_size += 2 + 4;
    }

    // optional float pickrange = 22;
    if (has_pickrange()) {
      total_size += 2 + 4;
    }

    // optional float hprecover = 23;
    if (has_hprecover()) {
      total_size += 2 + 4;
    }

    // optional float mprecover = 24;
    if (has_mprecover()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float chaosrate = 25;
    if (has_chaosrate()) {
      total_size += 2 + 4;
    }

    // optional float reschaosrate = 26;
    if (has_reschaosrate()) {
      total_size += 2 + 4;
    }

    // optional float sealrate = 27;
    if (has_sealrate()) {
      total_size += 2 + 4;
    }

    // optional float rescsealrate = 28;
    if (has_rescsealrate()) {
      total_size += 2 + 4;
    }

    // optional float freezerate = 29;
    if (has_freezerate()) {
      total_size += 2 + 4;
    }

    // optional float resfreezerate = 30;
    if (has_resfreezerate()) {
      total_size += 2 + 4;
    }

    // optional int32 battle_abilty = 31;
    if (has_battle_abilty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_abilty());
    }

    // optional float mortal = 32;
    if (has_mortal()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional float toughness = 33;
    if (has_toughness()) {
      total_size += 2 + 4;
    }

    // optional float hppercent = 45;
    if (has_hppercent()) {
      total_size += 2 + 4;
    }

    // optional float pdamagepercent = 46;
    if (has_pdamagepercent()) {
      total_size += 2 + 4;
    }

    // optional float despdamagepercent = 47;
    if (has_despdamagepercent()) {
      total_size += 2 + 4;
    }

    // optional float mdamagepercent = 48;
    if (has_mdamagepercent()) {
      total_size += 2 + 4;
    }

    // optional float desmdamagepercent = 49;
    if (has_desmdamagepercent()) {
      total_size += 2 + 4;
    }

    // optional float mortalpercent = 50;
    if (has_mortalpercent()) {
      total_size += 2 + 4;
    }

    // optional float toughnesspercent = 51;
    if (has_toughnesspercent()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional float firepercent = 52;
    if (has_firepercent()) {
      total_size += 2 + 4;
    }

    // optional float waterpecent = 53;
    if (has_waterpecent()) {
      total_size += 2 + 4;
    }

    // optional float windpercent = 54;
    if (has_windpercent()) {
      total_size += 2 + 4;
    }

    // optional float thunderpercent = 55;
    if (has_thunderpercent()) {
      total_size += 2 + 4;
    }

    // optional float boltpercent = 56;
    if (has_boltpercent()) {
      total_size += 2 + 4;
    }

    // optional float darkpercent = 57;
    if (has_darkpercent()) {
      total_size += 2 + 4;
    }

    // optional uint32 attribute_calc = 34;
    if (has_attribute_calc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_calc());
    }

    // optional int32 owner_level = 35;
    if (has_owner_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner_level());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional float percent = 36;
    if (has_percent()) {
      total_size += 2 + 4;
    }

    // optional float card_ability = 58;
    if (has_card_ability()) {
      total_size += 2 + 4;
    }

    // optional float dmg_firepercent = 59;
    if (has_dmg_firepercent()) {
      total_size += 2 + 4;
    }

    // optional float dmg_waterpercent = 60;
    if (has_dmg_waterpercent()) {
      total_size += 2 + 4;
    }

    // optional float dmg_windpercent = 61;
    if (has_dmg_windpercent()) {
      total_size += 2 + 4;
    }

    // optional float dmg_thunderpercent = 62;
    if (has_dmg_thunderpercent()) {
      total_size += 2 + 4;
    }

    // optional float dmg_boltpercent = 63;
    if (has_dmg_boltpercent()) {
      total_size += 2 + 4;
    }

    // optional float dmg_darkpercent = 64;
    if (has_dmg_darkpercent()) {
      total_size += 2 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGameStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sGameStats*>(&from));
}

void sGameStats::MergeFrom(const sGameStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_pdamage()) {
      set_pdamage(from.pdamage());
    }
    if (from.has_despdamage()) {
      set_despdamage(from.despdamage());
    }
    if (from.has_mdamage()) {
      set_mdamage(from.mdamage());
    }
    if (from.has_desmdamage()) {
      set_desmdamage(from.desmdamage());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_dexterity()) {
      set_dexterity(from.dexterity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_intelligence()) {
      set_intelligence(from.intelligence());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_atkspeed()) {
      set_atkspeed(from.atkspeed());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_perfect()) {
      set_perfect(from.perfect());
    }
    if (from.has_excellent()) {
      set_excellent(from.excellent());
    }
    if (from.has_fire()) {
      set_fire(from.fire());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_resfire()) {
      set_resfire(from.resfire());
    }
    if (from.has_water()) {
      set_water(from.water());
    }
    if (from.has_reswater()) {
      set_reswater(from.reswater());
    }
    if (from.has_wind()) {
      set_wind(from.wind());
    }
    if (from.has_reswind()) {
      set_reswind(from.reswind());
    }
    if (from.has_thunder()) {
      set_thunder(from.thunder());
    }
    if (from.has_resthunder()) {
      set_resthunder(from.resthunder());
    }
    if (from.has_bolt()) {
      set_bolt(from.bolt());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_resbolt()) {
      set_resbolt(from.resbolt());
    }
    if (from.has_dark()) {
      set_dark(from.dark());
    }
    if (from.has_resdark()) {
      set_resdark(from.resdark());
    }
    if (from.has_poison()) {
      set_poison(from.poison());
    }
    if (from.has_respoison()) {
      set_respoison(from.respoison());
    }
    if (from.has_pickrange()) {
      set_pickrange(from.pickrange());
    }
    if (from.has_hprecover()) {
      set_hprecover(from.hprecover());
    }
    if (from.has_mprecover()) {
      set_mprecover(from.mprecover());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_chaosrate()) {
      set_chaosrate(from.chaosrate());
    }
    if (from.has_reschaosrate()) {
      set_reschaosrate(from.reschaosrate());
    }
    if (from.has_sealrate()) {
      set_sealrate(from.sealrate());
    }
    if (from.has_rescsealrate()) {
      set_rescsealrate(from.rescsealrate());
    }
    if (from.has_freezerate()) {
      set_freezerate(from.freezerate());
    }
    if (from.has_resfreezerate()) {
      set_resfreezerate(from.resfreezerate());
    }
    if (from.has_battle_abilty()) {
      set_battle_abilty(from.battle_abilty());
    }
    if (from.has_mortal()) {
      set_mortal(from.mortal());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_toughness()) {
      set_toughness(from.toughness());
    }
    if (from.has_hppercent()) {
      set_hppercent(from.hppercent());
    }
    if (from.has_pdamagepercent()) {
      set_pdamagepercent(from.pdamagepercent());
    }
    if (from.has_despdamagepercent()) {
      set_despdamagepercent(from.despdamagepercent());
    }
    if (from.has_mdamagepercent()) {
      set_mdamagepercent(from.mdamagepercent());
    }
    if (from.has_desmdamagepercent()) {
      set_desmdamagepercent(from.desmdamagepercent());
    }
    if (from.has_mortalpercent()) {
      set_mortalpercent(from.mortalpercent());
    }
    if (from.has_toughnesspercent()) {
      set_toughnesspercent(from.toughnesspercent());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_firepercent()) {
      set_firepercent(from.firepercent());
    }
    if (from.has_waterpecent()) {
      set_waterpecent(from.waterpecent());
    }
    if (from.has_windpercent()) {
      set_windpercent(from.windpercent());
    }
    if (from.has_thunderpercent()) {
      set_thunderpercent(from.thunderpercent());
    }
    if (from.has_boltpercent()) {
      set_boltpercent(from.boltpercent());
    }
    if (from.has_darkpercent()) {
      set_darkpercent(from.darkpercent());
    }
    if (from.has_attribute_calc()) {
      set_attribute_calc(from.attribute_calc());
    }
    if (from.has_owner_level()) {
      set_owner_level(from.owner_level());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_percent()) {
      set_percent(from.percent());
    }
    if (from.has_card_ability()) {
      set_card_ability(from.card_ability());
    }
    if (from.has_dmg_firepercent()) {
      set_dmg_firepercent(from.dmg_firepercent());
    }
    if (from.has_dmg_waterpercent()) {
      set_dmg_waterpercent(from.dmg_waterpercent());
    }
    if (from.has_dmg_windpercent()) {
      set_dmg_windpercent(from.dmg_windpercent());
    }
    if (from.has_dmg_thunderpercent()) {
      set_dmg_thunderpercent(from.dmg_thunderpercent());
    }
    if (from.has_dmg_boltpercent()) {
      set_dmg_boltpercent(from.dmg_boltpercent());
    }
    if (from.has_dmg_darkpercent()) {
      set_dmg_darkpercent(from.dmg_darkpercent());
    }
  }
}

void sGameStats::CopyFrom(const sGameStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGameStats::IsInitialized() const {

  return true;
}

void sGameStats::Swap(sGameStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(hp_, other->hp_);
    std::swap(pdamage_, other->pdamage_);
    std::swap(despdamage_, other->despdamage_);
    std::swap(mdamage_, other->mdamage_);
    std::swap(desmdamage_, other->desmdamage_);
    std::swap(strength_, other->strength_);
    std::swap(dexterity_, other->dexterity_);
    std::swap(intelligence_, other->intelligence_);
    std::swap(stamina_, other->stamina_);
    std::swap(speed_, other->speed_);
    std::swap(atkspeed_, other->atkspeed_);
    std::swap(crit_, other->crit_);
    std::swap(perfect_, other->perfect_);
    std::swap(excellent_, other->excellent_);
    std::swap(fire_, other->fire_);
    std::swap(resfire_, other->resfire_);
    std::swap(water_, other->water_);
    std::swap(reswater_, other->reswater_);
    std::swap(wind_, other->wind_);
    std::swap(reswind_, other->reswind_);
    std::swap(thunder_, other->thunder_);
    std::swap(resthunder_, other->resthunder_);
    std::swap(bolt_, other->bolt_);
    std::swap(resbolt_, other->resbolt_);
    std::swap(dark_, other->dark_);
    std::swap(resdark_, other->resdark_);
    std::swap(poison_, other->poison_);
    std::swap(respoison_, other->respoison_);
    std::swap(pickrange_, other->pickrange_);
    std::swap(hprecover_, other->hprecover_);
    std::swap(mprecover_, other->mprecover_);
    std::swap(chaosrate_, other->chaosrate_);
    std::swap(reschaosrate_, other->reschaosrate_);
    std::swap(sealrate_, other->sealrate_);
    std::swap(rescsealrate_, other->rescsealrate_);
    std::swap(freezerate_, other->freezerate_);
    std::swap(resfreezerate_, other->resfreezerate_);
    std::swap(battle_abilty_, other->battle_abilty_);
    std::swap(mortal_, other->mortal_);
    std::swap(toughness_, other->toughness_);
    std::swap(hppercent_, other->hppercent_);
    std::swap(pdamagepercent_, other->pdamagepercent_);
    std::swap(despdamagepercent_, other->despdamagepercent_);
    std::swap(mdamagepercent_, other->mdamagepercent_);
    std::swap(desmdamagepercent_, other->desmdamagepercent_);
    std::swap(mortalpercent_, other->mortalpercent_);
    std::swap(toughnesspercent_, other->toughnesspercent_);
    std::swap(firepercent_, other->firepercent_);
    std::swap(waterpecent_, other->waterpecent_);
    std::swap(windpercent_, other->windpercent_);
    std::swap(thunderpercent_, other->thunderpercent_);
    std::swap(boltpercent_, other->boltpercent_);
    std::swap(darkpercent_, other->darkpercent_);
    std::swap(attribute_calc_, other->attribute_calc_);
    std::swap(owner_level_, other->owner_level_);
    std::swap(percent_, other->percent_);
    std::swap(card_ability_, other->card_ability_);
    std::swap(dmg_firepercent_, other->dmg_firepercent_);
    std::swap(dmg_waterpercent_, other->dmg_waterpercent_);
    std::swap(dmg_windpercent_, other->dmg_windpercent_);
    std::swap(dmg_thunderpercent_, other->dmg_thunderpercent_);
    std::swap(dmg_boltpercent_, other->dmg_boltpercent_);
    std::swap(dmg_darkpercent_, other->dmg_darkpercent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sGameStats::GetTypeName() const {
  return "jynetwork.proto.sGameStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sItemStats::kUidFieldNumber;
const int sItemStats::kPacktypeFieldNumber;
const int sItemStats::kItemtypeFieldNumber;
const int sItemStats::kNamelocaleidFieldNumber;
const int sItemStats::kItemiconFieldNumber;
const int sItemStats::kDescribelocaleidFieldNumber;
const int sItemStats::kItemcolorFieldNumber;
const int sItemStats::kStackFieldNumber;
const int sItemStats::kSalevalueFieldNumber;
const int sItemStats::kEffecttypeFieldNumber;
const int sItemStats::kEffectvalueFieldNumber;
const int sItemStats::kLvlimitFieldNumber;
const int sItemStats::kViplimitFieldNumber;
const int sItemStats::kTraceidFieldNumber;
const int sItemStats::kOrderidFieldNumber;
const int sItemStats::kItemduangFieldNumber;
const int sItemStats::kItemTagFieldNumber;
const int sItemStats::kMoneytypeFieldNumber;
#endif  // !_MSC_VER

sItemStats::sItemStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sItemStats::InitAsDefaultInstance() {
}

sItemStats::sItemStats(const sItemStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sItemStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  packtype_ = 0;
  itemtype_ = 0;
  namelocaleid_ = 0u;
  itemicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  describelocaleid_ = 0u;
  itemcolor_ = 0u;
  stack_ = 0u;
  salevalue_ = 0u;
  effecttype_ = 0;
  effectvalue_ = 0u;
  lvlimit_ = 0u;
  viplimit_ = 0u;
  traceid_ = 0u;
  orderid_ = 0u;
  itemduang_ = 0u;
  itemtag_ = 0u;
  moneytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sItemStats::~sItemStats() {
  SharedDtor();
}

void sItemStats::SharedDtor() {
  if (itemicon_ != &::google::protobuf::internal::kEmptyString) {
    delete itemicon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sItemStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sItemStats& sItemStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sItemStats* sItemStats::default_instance_ = NULL;

sItemStats* sItemStats::New() const {
  return new sItemStats;
}

void sItemStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    packtype_ = 0;
    itemtype_ = 0;
    namelocaleid_ = 0u;
    if (has_itemicon()) {
      if (itemicon_ != &::google::protobuf::internal::kEmptyString) {
        itemicon_->clear();
      }
    }
    describelocaleid_ = 0u;
    itemcolor_ = 0u;
    stack_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    salevalue_ = 0u;
    effecttype_ = 0;
    effectvalue_ = 0u;
    lvlimit_ = 0u;
    viplimit_ = 0u;
    traceid_ = 0u;
    orderid_ = 0u;
    itemduang_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    itemtag_ = 0u;
    moneytype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sItemStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_packtype;
        break;
      }

      // optional .jynetwork.proto.ePackType packtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::ePackType_IsValid(value)) {
            set_packtype(static_cast< ::jynetwork::proto::ePackType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemtype;
        break;
      }

      // optional .jynetwork.proto.eItemType itemtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eItemType_IsValid(value)) {
            set_itemtype(static_cast< ::jynetwork::proto::eItemType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_namelocaleid;
        break;
      }

      // optional uint32 namelocaleid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_namelocaleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &namelocaleid_)));
          set_has_namelocaleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_itemicon;
        break;
      }

      // optional string itemicon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_describelocaleid;
        break;
      }

      // optional uint32 describelocaleid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_describelocaleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &describelocaleid_)));
          set_has_describelocaleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_itemcolor;
        break;
      }

      // optional uint32 itemcolor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcolor_)));
          set_has_itemcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_stack;
        break;
      }

      // optional uint32 stack = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stack_)));
          set_has_stack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_salevalue;
        break;
      }

      // optional uint32 salevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_salevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &salevalue_)));
          set_has_salevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_effecttype;
        break;
      }

      // optional .jynetwork.proto.eItemFuncType effecttype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effecttype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eItemFuncType_IsValid(value)) {
            set_effecttype(static_cast< ::jynetwork::proto::eItemFuncType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_effectvalue;
        break;
      }

      // optional uint32 effectvalue = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectvalue_)));
          set_has_effectvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lvlimit;
        break;
      }

      // optional uint32 lvlimit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvlimit_)));
          set_has_lvlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_viplimit;
        break;
      }

      // optional uint32 viplimit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplimit_)));
          set_has_viplimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_traceid;
        break;
      }

      // optional uint32 traceid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &traceid_)));
          set_has_traceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_orderid;
        break;
      }

      // optional uint32 orderid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_itemduang;
        break;
      }

      // optional uint32 itemduang = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemduang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemduang_)));
          set_has_itemduang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_itemTag;
        break;
      }

      // optional uint32 itemTag = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtag_)));
          set_has_itemtag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_moneytype;
        break;
      }

      // optional uint32 moneytype = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sItemStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .jynetwork.proto.ePackType packtype = 2;
  if (has_packtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->packtype(), output);
  }

  // optional .jynetwork.proto.eItemType itemtype = 3;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->itemtype(), output);
  }

  // optional uint32 namelocaleid = 4;
  if (has_namelocaleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->namelocaleid(), output);
  }

  // optional string itemicon = 5;
  if (has_itemicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->itemicon(), output);
  }

  // optional uint32 describelocaleid = 6;
  if (has_describelocaleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->describelocaleid(), output);
  }

  // optional uint32 itemcolor = 7;
  if (has_itemcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->itemcolor(), output);
  }

  // optional uint32 stack = 8;
  if (has_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->stack(), output);
  }

  // optional uint32 salevalue = 9;
  if (has_salevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->salevalue(), output);
  }

  // optional .jynetwork.proto.eItemFuncType effecttype = 10;
  if (has_effecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->effecttype(), output);
  }

  // optional uint32 effectvalue = 11;
  if (has_effectvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->effectvalue(), output);
  }

  // optional uint32 lvlimit = 12;
  if (has_lvlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->lvlimit(), output);
  }

  // optional uint32 viplimit = 13;
  if (has_viplimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->viplimit(), output);
  }

  // optional uint32 traceid = 14;
  if (has_traceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->traceid(), output);
  }

  // optional uint32 orderid = 15;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->orderid(), output);
  }

  // optional uint32 itemduang = 16;
  if (has_itemduang()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->itemduang(), output);
  }

  // optional uint32 itemTag = 17;
  if (has_itemtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->itemtag(), output);
  }

  // optional uint32 moneytype = 18;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->moneytype(), output);
  }

}

int sItemStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .jynetwork.proto.ePackType packtype = 2;
    if (has_packtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packtype());
    }

    // optional .jynetwork.proto.eItemType itemtype = 3;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->itemtype());
    }

    // optional uint32 namelocaleid = 4;
    if (has_namelocaleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->namelocaleid());
    }

    // optional string itemicon = 5;
    if (has_itemicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemicon());
    }

    // optional uint32 describelocaleid = 6;
    if (has_describelocaleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->describelocaleid());
    }

    // optional uint32 itemcolor = 7;
    if (has_itemcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcolor());
    }

    // optional uint32 stack = 8;
    if (has_stack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stack());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 salevalue = 9;
    if (has_salevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->salevalue());
    }

    // optional .jynetwork.proto.eItemFuncType effecttype = 10;
    if (has_effecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effecttype());
    }

    // optional uint32 effectvalue = 11;
    if (has_effectvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectvalue());
    }

    // optional uint32 lvlimit = 12;
    if (has_lvlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvlimit());
    }

    // optional uint32 viplimit = 13;
    if (has_viplimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplimit());
    }

    // optional uint32 traceid = 14;
    if (has_traceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->traceid());
    }

    // optional uint32 orderid = 15;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orderid());
    }

    // optional uint32 itemduang = 16;
    if (has_itemduang()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemduang());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 itemTag = 17;
    if (has_itemtag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtag());
    }

    // optional uint32 moneytype = 18;
    if (has_moneytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneytype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sItemStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sItemStats*>(&from));
}

void sItemStats::MergeFrom(const sItemStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_packtype()) {
      set_packtype(from.packtype());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_namelocaleid()) {
      set_namelocaleid(from.namelocaleid());
    }
    if (from.has_itemicon()) {
      set_itemicon(from.itemicon());
    }
    if (from.has_describelocaleid()) {
      set_describelocaleid(from.describelocaleid());
    }
    if (from.has_itemcolor()) {
      set_itemcolor(from.itemcolor());
    }
    if (from.has_stack()) {
      set_stack(from.stack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_salevalue()) {
      set_salevalue(from.salevalue());
    }
    if (from.has_effecttype()) {
      set_effecttype(from.effecttype());
    }
    if (from.has_effectvalue()) {
      set_effectvalue(from.effectvalue());
    }
    if (from.has_lvlimit()) {
      set_lvlimit(from.lvlimit());
    }
    if (from.has_viplimit()) {
      set_viplimit(from.viplimit());
    }
    if (from.has_traceid()) {
      set_traceid(from.traceid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_itemduang()) {
      set_itemduang(from.itemduang());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_itemtag()) {
      set_itemtag(from.itemtag());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
  }
}

void sItemStats::CopyFrom(const sItemStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sItemStats::IsInitialized() const {

  return true;
}

void sItemStats::Swap(sItemStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(packtype_, other->packtype_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(namelocaleid_, other->namelocaleid_);
    std::swap(itemicon_, other->itemicon_);
    std::swap(describelocaleid_, other->describelocaleid_);
    std::swap(itemcolor_, other->itemcolor_);
    std::swap(stack_, other->stack_);
    std::swap(salevalue_, other->salevalue_);
    std::swap(effecttype_, other->effecttype_);
    std::swap(effectvalue_, other->effectvalue_);
    std::swap(lvlimit_, other->lvlimit_);
    std::swap(viplimit_, other->viplimit_);
    std::swap(traceid_, other->traceid_);
    std::swap(orderid_, other->orderid_);
    std::swap(itemduang_, other->itemduang_);
    std::swap(itemtag_, other->itemtag_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sItemStats::GetTypeName() const {
  return "jynetwork.proto.sItemStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sEquipStats::kUidFieldNumber;
const int sEquipStats::kEquipnameFieldNumber;
const int sEquipStats::kEquippartFieldNumber;
const int sEquipStats::kEquipiconFieldNumber;
const int sEquipStats::kEquipmodelFieldNumber;
const int sEquipStats::kModeactionFieldNumber;
const int sEquipStats::kEquipmodel2FieldNumber;
const int sEquipStats::kModeaction2FieldNumber;
const int sEquipStats::kFragidFieldNumber;
const int sEquipStats::kGamestatsFieldNumber;
const int sEquipStats::kGamestatslvFieldNumber;
const int sEquipStats::kRoleLimitFieldNumber;
const int sEquipStats::kDegreeLimitFieldNumber;
const int sEquipStats::kSuvFieldNumber;
const int sEquipStats::kWavespeedFieldNumber;
const int sEquipStats::kWavedirFieldNumber;
const int sEquipStats::kScaleFieldNumber;
const int sEquipStats::kExpAddFieldNumber;
const int sEquipStats::kStartupIdFieldNumber;
const int sEquipStats::kLevelupIdFieldNumber;
const int sEquipStats::kStarFieldNumber;
const int sEquipStats::kSuvalphaFieldNumber;
const int sEquipStats::kMoxFieldNumber;
const int sEquipStats::kMoyFieldNumber;
const int sEquipStats::kMozFieldNumber;
const int sEquipStats::kSkillIdFieldNumber;
const int sEquipStats::kBindSkeletonFieldNumber;
const int sEquipStats::kBindEffectStatusFieldNumber;
const int sEquipStats::kEffectStatusScaleFieldNumber;
const int sEquipStats::kEffectStatusXFieldNumber;
const int sEquipStats::kEffectStatusYFieldNumber;
const int sEquipStats::kEffectStatusZFieldNumber;
const int sEquipStats::kEffectStatusDegreexFieldNumber;
const int sEquipStats::kEffectStatusDegreeyFieldNumber;
const int sEquipStats::kEffectStatusDegreezFieldNumber;
const int sEquipStats::kAttackTypeFieldNumber;
const int sEquipStats::kMageballLinkFieldNumber;
const int sEquipStats::kMageballEffFieldNumber;
const int sEquipStats::kIdentifyFieldNumber;
const int sEquipStats::kEquipGroupIdFieldNumber;
const int sEquipStats::kEquipGroupColorFieldNumber;
#endif  // !_MSC_VER

sEquipStats::sEquipStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEquipStats::InitAsDefaultInstance() {
}

sEquipStats::sEquipStats(const sEquipStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEquipStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  equipname_ = 0u;
  equippart_ = 1;
  equipicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equipmodel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modeaction_ = 0u;
  equipmodel2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modeaction2_ = 0u;
  fragid_ = GOOGLE_ULONGLONG(0);
  gamestats_ = 0u;
  gamestatslv_ = 0u;
  role_limit_ = 0u;
  degree_limit_ = 0u;
  suv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wavespeed_ = 0;
  wavedir_ = 0u;
  scale_ = 0;
  exp_add_ = 0u;
  startup_id_ = 0u;
  levelup_id_ = 0u;
  star_ = 0u;
  suvalpha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mox_ = 0;
  moy_ = 0;
  moz_ = 0;
  skill_id_ = 0u;
  bind_skeleton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bind_effect_status_ = 0u;
  effect_status_scale_ = 0;
  effect_status_x_ = 0;
  effect_status_y_ = 0;
  effect_status_z_ = 0;
  effect_status_degreex_ = 0;
  effect_status_degreey_ = 0;
  effect_status_degreez_ = 0;
  attack_type_ = 0u;
  mageball_link_ = 0u;
  mageball_eff_ = 0u;
  identify_ = 0u;
  equip_group_id_ = 0u;
  equip_group_color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEquipStats::~sEquipStats() {
  SharedDtor();
}

void sEquipStats::SharedDtor() {
  if (equipicon_ != &::google::protobuf::internal::kEmptyString) {
    delete equipicon_;
  }
  if (equipmodel_ != &::google::protobuf::internal::kEmptyString) {
    delete equipmodel_;
  }
  if (equipmodel2_ != &::google::protobuf::internal::kEmptyString) {
    delete equipmodel2_;
  }
  if (suv_ != &::google::protobuf::internal::kEmptyString) {
    delete suv_;
  }
  if (suvalpha_ != &::google::protobuf::internal::kEmptyString) {
    delete suvalpha_;
  }
  if (bind_skeleton_ != &::google::protobuf::internal::kEmptyString) {
    delete bind_skeleton_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEquipStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEquipStats& sEquipStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sEquipStats* sEquipStats::default_instance_ = NULL;

sEquipStats* sEquipStats::New() const {
  return new sEquipStats;
}

void sEquipStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    equipname_ = 0u;
    equippart_ = 1;
    if (has_equipicon()) {
      if (equipicon_ != &::google::protobuf::internal::kEmptyString) {
        equipicon_->clear();
      }
    }
    if (has_equipmodel()) {
      if (equipmodel_ != &::google::protobuf::internal::kEmptyString) {
        equipmodel_->clear();
      }
    }
    modeaction_ = 0u;
    if (has_equipmodel2()) {
      if (equipmodel2_ != &::google::protobuf::internal::kEmptyString) {
        equipmodel2_->clear();
      }
    }
    modeaction2_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fragid_ = GOOGLE_ULONGLONG(0);
    gamestats_ = 0u;
    gamestatslv_ = 0u;
    role_limit_ = 0u;
    degree_limit_ = 0u;
    if (has_suv()) {
      if (suv_ != &::google::protobuf::internal::kEmptyString) {
        suv_->clear();
      }
    }
    wavespeed_ = 0;
    wavedir_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    scale_ = 0;
    exp_add_ = 0u;
    startup_id_ = 0u;
    levelup_id_ = 0u;
    star_ = 0u;
    if (has_suvalpha()) {
      if (suvalpha_ != &::google::protobuf::internal::kEmptyString) {
        suvalpha_->clear();
      }
    }
    mox_ = 0;
    moy_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    moz_ = 0;
    skill_id_ = 0u;
    if (has_bind_skeleton()) {
      if (bind_skeleton_ != &::google::protobuf::internal::kEmptyString) {
        bind_skeleton_->clear();
      }
    }
    bind_effect_status_ = 0u;
    effect_status_scale_ = 0;
    effect_status_x_ = 0;
    effect_status_y_ = 0;
    effect_status_z_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    effect_status_degreex_ = 0;
    effect_status_degreey_ = 0;
    effect_status_degreez_ = 0;
    attack_type_ = 0u;
    mageball_link_ = 0u;
    mageball_eff_ = 0u;
    identify_ = 0u;
    equip_group_id_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    equip_group_color_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEquipStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipname;
        break;
      }

      // optional uint32 equipname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipname_)));
          set_has_equipname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_equippart;
        break;
      }

      // optional .jynetwork.proto.eQuipPart equippart = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equippart:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eQuipPart_IsValid(value)) {
            set_equippart(static_cast< ::jynetwork::proto::eQuipPart >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equipicon;
        break;
      }

      // optional string equipicon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equipmodel;
        break;
      }

      // optional string equipmodel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmodel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipmodel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_modeaction;
        break;
      }

      // optional uint32 modeaction = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modeaction_)));
          set_has_modeaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equipmodel2;
        break;
      }

      // optional string equipmodel2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmodel2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipmodel2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_modeaction2;
        break;
      }

      // optional uint32 modeaction2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeaction2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modeaction2_)));
          set_has_modeaction2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fragid;
        break;
      }

      // optional uint64 fragid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fragid_)));
          set_has_fragid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gamestats;
        break;
      }

      // optional uint32 gamestats = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamestats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestats_)));
          set_has_gamestats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gamestatslv;
        break;
      }

      // optional uint32 gamestatslv = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamestatslv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestatslv_)));
          set_has_gamestatslv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_role_limit;
        break;
      }

      // optional uint32 role_limit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_limit_)));
          set_has_role_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_degree_limit;
        break;
      }

      // optional uint32 degree_limit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_degree_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &degree_limit_)));
          set_has_degree_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_suv;
        break;
      }

      // optional string suv = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_wavespeed;
        break;
      }

      // optional float wavespeed = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wavespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wavespeed_)));
          set_has_wavespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_wavedir;
        break;
      }

      // optional uint32 wavedir = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wavedir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wavedir_)));
          set_has_wavedir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_scale;
        break;
      }

      // optional float scale = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_exp_add;
        break;
      }

      // optional uint32 exp_add = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_add_)));
          set_has_exp_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_startup_id;
        break;
      }

      // optional uint32 startup_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startup_id_)));
          set_has_startup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_levelup_id;
        break;
      }

      // optional uint32 levelup_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelup_id_)));
          set_has_levelup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_star;
        break;
      }

      // optional uint32 star = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_suvalpha;
        break;
      }

      // optional string suvalpha = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suvalpha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suvalpha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_mox;
        break;
      }

      // optional float mox = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mox_)));
          set_has_mox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_moy;
        break;
      }

      // optional float moy = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moy_)));
          set_has_moy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_moz;
        break;
      }

      // optional float moz = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moz_)));
          set_has_moz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_bind_skeleton;
        break;
      }

      // optional string bind_skeleton = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bind_skeleton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bind_skeleton()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_bind_effect_status;
        break;
      }

      // optional uint32 bind_effect_status = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_effect_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_effect_status_)));
          set_has_bind_effect_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_effect_status_scale;
        break;
      }

      // optional float effect_status_scale = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_scale_)));
          set_has_effect_status_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_effect_status_x;
        break;
      }

      // optional float effect_status_x = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_x_)));
          set_has_effect_status_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_effect_status_y;
        break;
      }

      // optional float effect_status_y = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_y_)));
          set_has_effect_status_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_effect_status_z;
        break;
      }

      // optional float effect_status_z = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_z_)));
          set_has_effect_status_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(277)) goto parse_effect_status_degreex;
        break;
      }

      // optional float effect_status_degreex = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_degreex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_degreex_)));
          set_has_effect_status_degreex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(285)) goto parse_effect_status_degreey;
        break;
      }

      // optional float effect_status_degreey = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_degreey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_degreey_)));
          set_has_effect_status_degreey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(293)) goto parse_effect_status_degreez;
        break;
      }

      // optional float effect_status_degreez = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effect_status_degreez:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_status_degreez_)));
          set_has_effect_status_degreez();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_attack_type;
        break;
      }

      // optional uint32 attack_type = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_type_)));
          set_has_attack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_mageball_link;
        break;
      }

      // optional uint32 mageball_link = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mageball_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mageball_link_)));
          set_has_mageball_link();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_mageball_eff;
        break;
      }

      // optional uint32 mageball_eff = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mageball_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mageball_eff_)));
          set_has_mageball_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_identify;
        break;
      }

      // optional uint32 identify = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identify_)));
          set_has_identify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_equip_group_id;
        break;
      }

      // optional uint32 equip_group_id = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_group_id_)));
          set_has_equip_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_equip_group_color;
        break;
      }

      // optional uint32 equip_group_color = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_group_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_group_color_)));
          set_has_equip_group_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEquipStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 equipname = 3;
  if (has_equipname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equipname(), output);
  }

  // optional .jynetwork.proto.eQuipPart equippart = 4;
  if (has_equippart()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->equippart(), output);
  }

  // optional string equipicon = 5;
  if (has_equipicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->equipicon(), output);
  }

  // optional string equipmodel = 6;
  if (has_equipmodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->equipmodel(), output);
  }

  // optional uint32 modeaction = 7;
  if (has_modeaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->modeaction(), output);
  }

  // optional string equipmodel2 = 8;
  if (has_equipmodel2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->equipmodel2(), output);
  }

  // optional uint32 modeaction2 = 9;
  if (has_modeaction2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->modeaction2(), output);
  }

  // optional uint64 fragid = 10;
  if (has_fragid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->fragid(), output);
  }

  // optional uint32 gamestats = 11;
  if (has_gamestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gamestats(), output);
  }

  // optional uint32 gamestatslv = 12;
  if (has_gamestatslv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gamestatslv(), output);
  }

  // optional uint32 role_limit = 13;
  if (has_role_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->role_limit(), output);
  }

  // optional uint32 degree_limit = 14;
  if (has_degree_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->degree_limit(), output);
  }

  // optional string suv = 15;
  if (has_suv()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->suv(), output);
  }

  // optional float wavespeed = 16;
  if (has_wavespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->wavespeed(), output);
  }

  // optional uint32 wavedir = 17;
  if (has_wavedir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->wavedir(), output);
  }

  // optional float scale = 18;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->scale(), output);
  }

  // optional uint32 exp_add = 19;
  if (has_exp_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->exp_add(), output);
  }

  // optional uint32 startup_id = 20;
  if (has_startup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->startup_id(), output);
  }

  // optional uint32 levelup_id = 21;
  if (has_levelup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->levelup_id(), output);
  }

  // optional uint32 star = 22;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->star(), output);
  }

  // optional string suvalpha = 23;
  if (has_suvalpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->suvalpha(), output);
  }

  // optional float mox = 24;
  if (has_mox()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->mox(), output);
  }

  // optional float moy = 25;
  if (has_moy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->moy(), output);
  }

  // optional float moz = 26;
  if (has_moz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->moz(), output);
  }

  // optional uint32 skill_id = 27;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->skill_id(), output);
  }

  // optional string bind_skeleton = 28;
  if (has_bind_skeleton()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->bind_skeleton(), output);
  }

  // optional uint32 bind_effect_status = 29;
  if (has_bind_effect_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->bind_effect_status(), output);
  }

  // optional float effect_status_scale = 30;
  if (has_effect_status_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->effect_status_scale(), output);
  }

  // optional float effect_status_x = 31;
  if (has_effect_status_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->effect_status_x(), output);
  }

  // optional float effect_status_y = 32;
  if (has_effect_status_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->effect_status_y(), output);
  }

  // optional float effect_status_z = 33;
  if (has_effect_status_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->effect_status_z(), output);
  }

  // optional float effect_status_degreex = 34;
  if (has_effect_status_degreex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->effect_status_degreex(), output);
  }

  // optional float effect_status_degreey = 35;
  if (has_effect_status_degreey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->effect_status_degreey(), output);
  }

  // optional float effect_status_degreez = 36;
  if (has_effect_status_degreez()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->effect_status_degreez(), output);
  }

  // optional uint32 attack_type = 37;
  if (has_attack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->attack_type(), output);
  }

  // optional uint32 mageball_link = 38;
  if (has_mageball_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->mageball_link(), output);
  }

  // optional uint32 mageball_eff = 39;
  if (has_mageball_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->mageball_eff(), output);
  }

  // optional uint32 identify = 40;
  if (has_identify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->identify(), output);
  }

  // optional uint32 equip_group_id = 41;
  if (has_equip_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->equip_group_id(), output);
  }

  // optional uint32 equip_group_color = 42;
  if (has_equip_group_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->equip_group_color(), output);
  }

}

int sEquipStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 equipname = 3;
    if (has_equipname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipname());
    }

    // optional .jynetwork.proto.eQuipPart equippart = 4;
    if (has_equippart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equippart());
    }

    // optional string equipicon = 5;
    if (has_equipicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipicon());
    }

    // optional string equipmodel = 6;
    if (has_equipmodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipmodel());
    }

    // optional uint32 modeaction = 7;
    if (has_modeaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modeaction());
    }

    // optional string equipmodel2 = 8;
    if (has_equipmodel2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipmodel2());
    }

    // optional uint32 modeaction2 = 9;
    if (has_modeaction2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modeaction2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 fragid = 10;
    if (has_fragid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fragid());
    }

    // optional uint32 gamestats = 11;
    if (has_gamestats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestats());
    }

    // optional uint32 gamestatslv = 12;
    if (has_gamestatslv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestatslv());
    }

    // optional uint32 role_limit = 13;
    if (has_role_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_limit());
    }

    // optional uint32 degree_limit = 14;
    if (has_degree_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->degree_limit());
    }

    // optional string suv = 15;
    if (has_suv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suv());
    }

    // optional float wavespeed = 16;
    if (has_wavespeed()) {
      total_size += 2 + 4;
    }

    // optional uint32 wavedir = 17;
    if (has_wavedir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wavedir());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float scale = 18;
    if (has_scale()) {
      total_size += 2 + 4;
    }

    // optional uint32 exp_add = 19;
    if (has_exp_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp_add());
    }

    // optional uint32 startup_id = 20;
    if (has_startup_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startup_id());
    }

    // optional uint32 levelup_id = 21;
    if (has_levelup_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelup_id());
    }

    // optional uint32 star = 22;
    if (has_star()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional string suvalpha = 23;
    if (has_suvalpha()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suvalpha());
    }

    // optional float mox = 24;
    if (has_mox()) {
      total_size += 2 + 4;
    }

    // optional float moy = 25;
    if (has_moy()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float moz = 26;
    if (has_moz()) {
      total_size += 2 + 4;
    }

    // optional uint32 skill_id = 27;
    if (has_skill_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional string bind_skeleton = 28;
    if (has_bind_skeleton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bind_skeleton());
    }

    // optional uint32 bind_effect_status = 29;
    if (has_bind_effect_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind_effect_status());
    }

    // optional float effect_status_scale = 30;
    if (has_effect_status_scale()) {
      total_size += 2 + 4;
    }

    // optional float effect_status_x = 31;
    if (has_effect_status_x()) {
      total_size += 2 + 4;
    }

    // optional float effect_status_y = 32;
    if (has_effect_status_y()) {
      total_size += 2 + 4;
    }

    // optional float effect_status_z = 33;
    if (has_effect_status_z()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float effect_status_degreex = 34;
    if (has_effect_status_degreex()) {
      total_size += 2 + 4;
    }

    // optional float effect_status_degreey = 35;
    if (has_effect_status_degreey()) {
      total_size += 2 + 4;
    }

    // optional float effect_status_degreez = 36;
    if (has_effect_status_degreez()) {
      total_size += 2 + 4;
    }

    // optional uint32 attack_type = 37;
    if (has_attack_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_type());
    }

    // optional uint32 mageball_link = 38;
    if (has_mageball_link()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mageball_link());
    }

    // optional uint32 mageball_eff = 39;
    if (has_mageball_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mageball_eff());
    }

    // optional uint32 identify = 40;
    if (has_identify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identify());
    }

    // optional uint32 equip_group_id = 41;
    if (has_equip_group_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_group_id());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 equip_group_color = 42;
    if (has_equip_group_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_group_color());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEquipStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEquipStats*>(&from));
}

void sEquipStats::MergeFrom(const sEquipStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_equipname()) {
      set_equipname(from.equipname());
    }
    if (from.has_equippart()) {
      set_equippart(from.equippart());
    }
    if (from.has_equipicon()) {
      set_equipicon(from.equipicon());
    }
    if (from.has_equipmodel()) {
      set_equipmodel(from.equipmodel());
    }
    if (from.has_modeaction()) {
      set_modeaction(from.modeaction());
    }
    if (from.has_equipmodel2()) {
      set_equipmodel2(from.equipmodel2());
    }
    if (from.has_modeaction2()) {
      set_modeaction2(from.modeaction2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fragid()) {
      set_fragid(from.fragid());
    }
    if (from.has_gamestats()) {
      set_gamestats(from.gamestats());
    }
    if (from.has_gamestatslv()) {
      set_gamestatslv(from.gamestatslv());
    }
    if (from.has_role_limit()) {
      set_role_limit(from.role_limit());
    }
    if (from.has_degree_limit()) {
      set_degree_limit(from.degree_limit());
    }
    if (from.has_suv()) {
      set_suv(from.suv());
    }
    if (from.has_wavespeed()) {
      set_wavespeed(from.wavespeed());
    }
    if (from.has_wavedir()) {
      set_wavedir(from.wavedir());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_exp_add()) {
      set_exp_add(from.exp_add());
    }
    if (from.has_startup_id()) {
      set_startup_id(from.startup_id());
    }
    if (from.has_levelup_id()) {
      set_levelup_id(from.levelup_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_suvalpha()) {
      set_suvalpha(from.suvalpha());
    }
    if (from.has_mox()) {
      set_mox(from.mox());
    }
    if (from.has_moy()) {
      set_moy(from.moy());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_moz()) {
      set_moz(from.moz());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_bind_skeleton()) {
      set_bind_skeleton(from.bind_skeleton());
    }
    if (from.has_bind_effect_status()) {
      set_bind_effect_status(from.bind_effect_status());
    }
    if (from.has_effect_status_scale()) {
      set_effect_status_scale(from.effect_status_scale());
    }
    if (from.has_effect_status_x()) {
      set_effect_status_x(from.effect_status_x());
    }
    if (from.has_effect_status_y()) {
      set_effect_status_y(from.effect_status_y());
    }
    if (from.has_effect_status_z()) {
      set_effect_status_z(from.effect_status_z());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_effect_status_degreex()) {
      set_effect_status_degreex(from.effect_status_degreex());
    }
    if (from.has_effect_status_degreey()) {
      set_effect_status_degreey(from.effect_status_degreey());
    }
    if (from.has_effect_status_degreez()) {
      set_effect_status_degreez(from.effect_status_degreez());
    }
    if (from.has_attack_type()) {
      set_attack_type(from.attack_type());
    }
    if (from.has_mageball_link()) {
      set_mageball_link(from.mageball_link());
    }
    if (from.has_mageball_eff()) {
      set_mageball_eff(from.mageball_eff());
    }
    if (from.has_identify()) {
      set_identify(from.identify());
    }
    if (from.has_equip_group_id()) {
      set_equip_group_id(from.equip_group_id());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_equip_group_color()) {
      set_equip_group_color(from.equip_group_color());
    }
  }
}

void sEquipStats::CopyFrom(const sEquipStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEquipStats::IsInitialized() const {

  return true;
}

void sEquipStats::Swap(sEquipStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(equipname_, other->equipname_);
    std::swap(equippart_, other->equippart_);
    std::swap(equipicon_, other->equipicon_);
    std::swap(equipmodel_, other->equipmodel_);
    std::swap(modeaction_, other->modeaction_);
    std::swap(equipmodel2_, other->equipmodel2_);
    std::swap(modeaction2_, other->modeaction2_);
    std::swap(fragid_, other->fragid_);
    std::swap(gamestats_, other->gamestats_);
    std::swap(gamestatslv_, other->gamestatslv_);
    std::swap(role_limit_, other->role_limit_);
    std::swap(degree_limit_, other->degree_limit_);
    std::swap(suv_, other->suv_);
    std::swap(wavespeed_, other->wavespeed_);
    std::swap(wavedir_, other->wavedir_);
    std::swap(scale_, other->scale_);
    std::swap(exp_add_, other->exp_add_);
    std::swap(startup_id_, other->startup_id_);
    std::swap(levelup_id_, other->levelup_id_);
    std::swap(star_, other->star_);
    std::swap(suvalpha_, other->suvalpha_);
    std::swap(mox_, other->mox_);
    std::swap(moy_, other->moy_);
    std::swap(moz_, other->moz_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(bind_skeleton_, other->bind_skeleton_);
    std::swap(bind_effect_status_, other->bind_effect_status_);
    std::swap(effect_status_scale_, other->effect_status_scale_);
    std::swap(effect_status_x_, other->effect_status_x_);
    std::swap(effect_status_y_, other->effect_status_y_);
    std::swap(effect_status_z_, other->effect_status_z_);
    std::swap(effect_status_degreex_, other->effect_status_degreex_);
    std::swap(effect_status_degreey_, other->effect_status_degreey_);
    std::swap(effect_status_degreez_, other->effect_status_degreez_);
    std::swap(attack_type_, other->attack_type_);
    std::swap(mageball_link_, other->mageball_link_);
    std::swap(mageball_eff_, other->mageball_eff_);
    std::swap(identify_, other->identify_);
    std::swap(equip_group_id_, other->equip_group_id_);
    std::swap(equip_group_color_, other->equip_group_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEquipStats::GetTypeName() const {
  return "jynetwork.proto.sEquipStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sEquipGroupStats::kUidFieldNumber;
const int sEquipGroupStats::kDescFieldNumber;
const int sEquipGroupStats::kLangIdFieldNumber;
const int sEquipGroupStats::kAttr2FieldNumber;
const int sEquipGroupStats::kAttr3FieldNumber;
const int sEquipGroupStats::kAttr4FieldNumber;
const int sEquipGroupStats::kAttr5FieldNumber;
const int sEquipGroupStats::kAttr6FieldNumber;
const int sEquipGroupStats::kEquipNumFieldNumber;
#endif  // !_MSC_VER

sEquipGroupStats::sEquipGroupStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEquipGroupStats::InitAsDefaultInstance() {
}

sEquipGroupStats::sEquipGroupStats(const sEquipGroupStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEquipGroupStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lang_id_ = 0u;
  equip_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEquipGroupStats::~sEquipGroupStats() {
  SharedDtor();
}

void sEquipGroupStats::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEquipGroupStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEquipGroupStats& sEquipGroupStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sEquipGroupStats* sEquipGroupStats::default_instance_ = NULL;

sEquipGroupStats* sEquipGroupStats::New() const {
  return new sEquipGroupStats;
}

void sEquipGroupStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    lang_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    equip_num_ = 0u;
  }
  attr_2_.Clear();
  attr_3_.Clear();
  attr_4_.Clear();
  attr_5_.Clear();
  attr_6_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEquipGroupStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lang_id;
        break;
      }

      // optional uint32 lang_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lang_id_)));
          set_has_lang_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attr_2;
        break;
      }

      // repeated uint32 attr_2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_attr_2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attr_2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attr_2;
        if (input->ExpectTag(40)) goto parse_attr_3;
        break;
      }

      // repeated uint32 attr_3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_attr_3())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attr_3())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attr_3;
        if (input->ExpectTag(48)) goto parse_attr_4;
        break;
      }

      // repeated uint32 attr_4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_attr_4())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attr_4())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attr_4;
        if (input->ExpectTag(56)) goto parse_attr_5;
        break;
      }

      // repeated uint32 attr_5 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_attr_5())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attr_5())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attr_5;
        if (input->ExpectTag(72)) goto parse_attr_6;
        break;
      }

      // repeated uint32 attr_6 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_attr_6())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attr_6())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_attr_6;
        if (input->ExpectTag(80)) goto parse_equip_num;
        break;
      }

      // optional uint32 equip_num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_num_)));
          set_has_equip_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEquipGroupStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }

  // optional uint32 lang_id = 3;
  if (has_lang_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lang_id(), output);
  }

  // repeated uint32 attr_2 = 4;
  for (int i = 0; i < this->attr_2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->attr_2(i), output);
  }

  // repeated uint32 attr_3 = 5;
  for (int i = 0; i < this->attr_3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->attr_3(i), output);
  }

  // repeated uint32 attr_4 = 6;
  for (int i = 0; i < this->attr_4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->attr_4(i), output);
  }

  // repeated uint32 attr_5 = 7;
  for (int i = 0; i < this->attr_5_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->attr_5(i), output);
  }

  // repeated uint32 attr_6 = 9;
  for (int i = 0; i < this->attr_6_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->attr_6(i), output);
  }

  // optional uint32 equip_num = 10;
  if (has_equip_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->equip_num(), output);
  }

}

int sEquipGroupStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 lang_id = 3;
    if (has_lang_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lang_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 equip_num = 10;
    if (has_equip_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_num());
    }

  }
  // repeated uint32 attr_2 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attr_2(i));
    }
    total_size += 1 * this->attr_2_size() + data_size;
  }

  // repeated uint32 attr_3 = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attr_3(i));
    }
    total_size += 1 * this->attr_3_size() + data_size;
  }

  // repeated uint32 attr_4 = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_4_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attr_4(i));
    }
    total_size += 1 * this->attr_4_size() + data_size;
  }

  // repeated uint32 attr_5 = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_5_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attr_5(i));
    }
    total_size += 1 * this->attr_5_size() + data_size;
  }

  // repeated uint32 attr_6 = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_6_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attr_6(i));
    }
    total_size += 1 * this->attr_6_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEquipGroupStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEquipGroupStats*>(&from));
}

void sEquipGroupStats::MergeFrom(const sEquipGroupStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_2_.MergeFrom(from.attr_2_);
  attr_3_.MergeFrom(from.attr_3_);
  attr_4_.MergeFrom(from.attr_4_);
  attr_5_.MergeFrom(from.attr_5_);
  attr_6_.MergeFrom(from.attr_6_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_lang_id()) {
      set_lang_id(from.lang_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_equip_num()) {
      set_equip_num(from.equip_num());
    }
  }
}

void sEquipGroupStats::CopyFrom(const sEquipGroupStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEquipGroupStats::IsInitialized() const {

  return true;
}

void sEquipGroupStats::Swap(sEquipGroupStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(desc_, other->desc_);
    std::swap(lang_id_, other->lang_id_);
    attr_2_.Swap(&other->attr_2_);
    attr_3_.Swap(&other->attr_3_);
    attr_4_.Swap(&other->attr_4_);
    attr_5_.Swap(&other->attr_5_);
    attr_6_.Swap(&other->attr_6_);
    std::swap(equip_num_, other->equip_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEquipGroupStats::GetTypeName() const {
  return "jynetwork.proto.sEquipGroupStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sCharactorStats::kUidFieldNumber;
const int sCharactorStats::kCharactormodelFieldNumber;
const int sCharactorStats::kGamestatsFieldNumber;
const int sCharactorStats::kScaleFieldNumber;
const int sCharactorStats::kRadiusFieldNumber;
const int sCharactorStats::kTurnrateFieldNumber;
const int sCharactorStats::kLookatZFieldNumber;
#endif  // !_MSC_VER

sCharactorStats::sCharactorStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCharactorStats::InitAsDefaultInstance() {
}

sCharactorStats::sCharactorStats(const sCharactorStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCharactorStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  charactormodel_ = 0u;
  gamestats_ = 0u;
  scale_ = 0;
  radius_ = 0;
  turnrate_ = 0;
  lookat_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCharactorStats::~sCharactorStats() {
  SharedDtor();
}

void sCharactorStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCharactorStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCharactorStats& sCharactorStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sCharactorStats* sCharactorStats::default_instance_ = NULL;

sCharactorStats* sCharactorStats::New() const {
  return new sCharactorStats;
}

void sCharactorStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    charactormodel_ = 0u;
    gamestats_ = 0u;
    scale_ = 0;
    radius_ = 0;
    turnrate_ = 0;
    lookat_z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCharactorStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charactormodel;
        break;
      }

      // optional uint32 charactormodel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charactormodel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charactormodel_)));
          set_has_charactormodel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gamestats;
        break;
      }

      // optional uint32 gamestats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamestats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestats_)));
          set_has_gamestats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_scale;
        break;
      }

      // optional float scale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_radius;
        break;
      }

      // optional float radius = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_turnrate;
        break;
      }

      // optional float turnrate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_turnrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnrate_)));
          set_has_turnrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_lookat_z;
        break;
      }

      // optional float lookat_z = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lookat_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lookat_z_)));
          set_has_lookat_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCharactorStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 charactormodel = 2;
  if (has_charactormodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charactormodel(), output);
  }

  // optional uint32 gamestats = 3;
  if (has_gamestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gamestats(), output);
  }

  // optional float scale = 4;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->scale(), output);
  }

  // optional float radius = 5;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->radius(), output);
  }

  // optional float turnrate = 6;
  if (has_turnrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->turnrate(), output);
  }

  // optional float lookat_z = 7;
  if (has_lookat_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->lookat_z(), output);
  }

}

int sCharactorStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 charactormodel = 2;
    if (has_charactormodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charactormodel());
    }

    // optional uint32 gamestats = 3;
    if (has_gamestats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestats());
    }

    // optional float scale = 4;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float radius = 5;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional float turnrate = 6;
    if (has_turnrate()) {
      total_size += 1 + 4;
    }

    // optional float lookat_z = 7;
    if (has_lookat_z()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCharactorStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCharactorStats*>(&from));
}

void sCharactorStats::MergeFrom(const sCharactorStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_charactormodel()) {
      set_charactormodel(from.charactormodel());
    }
    if (from.has_gamestats()) {
      set_gamestats(from.gamestats());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_turnrate()) {
      set_turnrate(from.turnrate());
    }
    if (from.has_lookat_z()) {
      set_lookat_z(from.lookat_z());
    }
  }
}

void sCharactorStats::CopyFrom(const sCharactorStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCharactorStats::IsInitialized() const {

  return true;
}

void sCharactorStats::Swap(sCharactorStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(charactormodel_, other->charactormodel_);
    std::swap(gamestats_, other->gamestats_);
    std::swap(scale_, other->scale_);
    std::swap(radius_, other->radius_);
    std::swap(turnrate_, other->turnrate_);
    std::swap(lookat_z_, other->lookat_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCharactorStats::GetTypeName() const {
  return "jynetwork.proto.sCharactorStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sSkillCondition::kSkillFieldNumber;
const int sSkillCondition::kSkillCondFieldNumber;
const int sSkillCondition::kSkillCvFieldNumber;
const int sSkillCondition::kSkillCdFieldNumber;
const int sSkillCondition::kSkillActionFieldNumber;
const int sSkillCondition::kSlotFieldNumber;
#endif  // !_MSC_VER

sSkillCondition::sSkillCondition()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sSkillCondition::InitAsDefaultInstance() {
}

sSkillCondition::sSkillCondition(const sSkillCondition& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sSkillCondition::SharedCtor() {
  _cached_size_ = 0;
  skill_ = 0u;
  skill_cond_ = 0u;
  skill_cv_ = 0u;
  skill_cd_ = 0u;
  skill_action_ = 0u;
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sSkillCondition::~sSkillCondition() {
  SharedDtor();
}

void sSkillCondition::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sSkillCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sSkillCondition& sSkillCondition::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sSkillCondition* sSkillCondition::default_instance_ = NULL;

sSkillCondition* sSkillCondition::New() const {
  return new sSkillCondition;
}

void sSkillCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_ = 0u;
    skill_cond_ = 0u;
    skill_cv_ = 0u;
    skill_cd_ = 0u;
    skill_action_ = 0u;
    slot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sSkillCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_cond;
        break;
      }

      // optional uint32 skill_cond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_cond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_cond_)));
          set_has_skill_cond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_cv;
        break;
      }

      // optional uint32 skill_cv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_cv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_cv_)));
          set_has_skill_cv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_cd;
        break;
      }

      // optional uint32 skill_cd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_cd_)));
          set_has_skill_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_action;
        break;
      }

      // optional uint32 skill_action = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_action_)));
          set_has_skill_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slot;
        break;
      }

      // optional uint32 slot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sSkillCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skill = 1;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill(), output);
  }

  // optional uint32 skill_cond = 2;
  if (has_skill_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_cond(), output);
  }

  // optional uint32 skill_cv = 3;
  if (has_skill_cv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_cv(), output);
  }

  // optional uint32 skill_cd = 4;
  if (has_skill_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_cd(), output);
  }

  // optional uint32 skill_action = 5;
  if (has_skill_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skill_action(), output);
  }

  // optional uint32 slot = 6;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->slot(), output);
  }

}

int sSkillCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skill = 1;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill());
    }

    // optional uint32 skill_cond = 2;
    if (has_skill_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_cond());
    }

    // optional uint32 skill_cv = 3;
    if (has_skill_cv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_cv());
    }

    // optional uint32 skill_cd = 4;
    if (has_skill_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_cd());
    }

    // optional uint32 skill_action = 5;
    if (has_skill_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_action());
    }

    // optional uint32 slot = 6;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sSkillCondition::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sSkillCondition*>(&from));
}

void sSkillCondition::MergeFrom(const sSkillCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_skill_cond()) {
      set_skill_cond(from.skill_cond());
    }
    if (from.has_skill_cv()) {
      set_skill_cv(from.skill_cv());
    }
    if (from.has_skill_cd()) {
      set_skill_cd(from.skill_cd());
    }
    if (from.has_skill_action()) {
      set_skill_action(from.skill_action());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
}

void sSkillCondition::CopyFrom(const sSkillCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sSkillCondition::IsInitialized() const {

  return true;
}

void sSkillCondition::Swap(sSkillCondition* other) {
  if (other != this) {
    std::swap(skill_, other->skill_);
    std::swap(skill_cond_, other->skill_cond_);
    std::swap(skill_cv_, other->skill_cv_);
    std::swap(skill_cd_, other->skill_cd_);
    std::swap(skill_action_, other->skill_action_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sSkillCondition::GetTypeName() const {
  return "jynetwork.proto.sSkillCondition";
}


// ===================================================================

#ifndef _MSC_VER
const int sCardStats::kUidFieldNumber;
const int sCardStats::kRoleFieldNumber;
const int sCardStats::kCardnameFieldNumber;
const int sCardStats::kCardpicFieldNumber;
const int sCardStats::kCardmodelFieldNumber;
const int sCardStats::kCardiconFieldNumber;
const int sCardStats::kScaleFieldNumber;
const int sCardStats::kRadiusFieldNumber;
const int sCardStats::kTurnrateFieldNumber;
const int sCardStats::kAttacknormalFieldNumber;
const int sCardStats::kAttacknormalCdFieldNumber;
const int sCardStats::kSkillnormalFieldNumber;
const int sCardStats::kSkillnormalCdFieldNumber;
const int sCardStats::kSkillbigFieldNumber;
const int sCardStats::kSkillbigCdFieldNumber;
const int sCardStats::kSkillheroFieldNumber;
const int sCardStats::kSkillheroCdFieldNumber;
const int sCardStats::kSkillfriendFieldNumber;
const int sCardStats::kSkillfriendCdFieldNumber;
const int sCardStats::kAiidFieldNumber;
const int sCardStats::kFragFieldNumber;
const int sCardStats::kGamestatsFieldNumber;
const int sCardStats::kNamePicFieldNumber;
const int sCardStats::kCanSummeredFieldNumber;
const int sCardStats::kStarFieldNumber;
const int sCardStats::kStarGamestatFieldNumber;
const int sCardStats::kSkillExtraFieldNumber;
const int sCardStats::kAiUidFieldNumber;
const int sCardStats::kCollisionNameFieldNumber;
const int sCardStats::kAiLoopFieldNumber;
const int sCardStats::kDeathSoundFieldNumber;
const int sCardStats::kDeathEffFieldNumber;
const int sCardStats::kBuffScaleFieldNumber;
#endif  // !_MSC_VER

sCardStats::sCardStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCardStats::InitAsDefaultInstance() {
}

sCardStats::sCardStats(const sCardStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCardStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  role_ = 0;
  cardname_ = 0u;
  cardpic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardmodel_ = 0u;
  cardicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scale_ = 0;
  radius_ = 0;
  turnrate_ = 0;
  attacknormal_ = 0u;
  attacknormal_cd_ = 0u;
  skillnormal_ = 0u;
  skillnormal_cd_ = 0u;
  skillbig_ = 0u;
  skillbig_cd_ = 0u;
  skillhero_ = 0u;
  skillhero_cd_ = 0u;
  skillfriend_ = 0u;
  skillfriend_cd_ = 0u;
  aiid_ = 0u;
  frag_ = 0u;
  gamestats_ = 0u;
  name_pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  can_summered_ = 0u;
  star_ = 0u;
  star_gamestat_ = 0u;
  ai_uid_ = 0u;
  collision_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  death_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  death_eff_ = 0u;
  buff_scale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCardStats::~sCardStats() {
  SharedDtor();
}

void sCardStats::SharedDtor() {
  if (cardpic_ != &::google::protobuf::internal::kEmptyString) {
    delete cardpic_;
  }
  if (cardicon_ != &::google::protobuf::internal::kEmptyString) {
    delete cardicon_;
  }
  if (name_pic_ != &::google::protobuf::internal::kEmptyString) {
    delete name_pic_;
  }
  if (collision_name_ != &::google::protobuf::internal::kEmptyString) {
    delete collision_name_;
  }
  if (death_sound_ != &::google::protobuf::internal::kEmptyString) {
    delete death_sound_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCardStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCardStats& sCardStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sCardStats* sCardStats::default_instance_ = NULL;

sCardStats* sCardStats::New() const {
  return new sCardStats;
}

void sCardStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    role_ = 0;
    cardname_ = 0u;
    if (has_cardpic()) {
      if (cardpic_ != &::google::protobuf::internal::kEmptyString) {
        cardpic_->clear();
      }
    }
    cardmodel_ = 0u;
    if (has_cardicon()) {
      if (cardicon_ != &::google::protobuf::internal::kEmptyString) {
        cardicon_->clear();
      }
    }
    scale_ = 0;
    radius_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    turnrate_ = 0;
    attacknormal_ = 0u;
    attacknormal_cd_ = 0u;
    skillnormal_ = 0u;
    skillnormal_cd_ = 0u;
    skillbig_ = 0u;
    skillbig_cd_ = 0u;
    skillhero_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    skillhero_cd_ = 0u;
    skillfriend_ = 0u;
    skillfriend_cd_ = 0u;
    aiid_ = 0u;
    frag_ = 0u;
    gamestats_ = 0u;
    if (has_name_pic()) {
      if (name_pic_ != &::google::protobuf::internal::kEmptyString) {
        name_pic_->clear();
      }
    }
    can_summered_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    star_ = 0u;
    star_gamestat_ = 0u;
    ai_uid_ = 0u;
    if (has_collision_name()) {
      if (collision_name_ != &::google::protobuf::internal::kEmptyString) {
        collision_name_->clear();
      }
    }
    if (has_death_sound()) {
      if (death_sound_ != &::google::protobuf::internal::kEmptyString) {
        death_sound_->clear();
      }
    }
    death_eff_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    buff_scale_ = 0;
  }
  skill_extra_.Clear();
  ai_loop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCardStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role;
        break;
      }

      // optional .jynetwork.proto.eRoleType role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eRoleType_IsValid(value)) {
            set_role(static_cast< ::jynetwork::proto::eRoleType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cardname;
        break;
      }

      // optional uint32 cardname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardname_)));
          set_has_cardname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cardpic;
        break;
      }

      // optional string cardpic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardpic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardpic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cardmodel;
        break;
      }

      // optional uint32 cardmodel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardmodel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardmodel_)));
          set_has_cardmodel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cardicon;
        break;
      }

      // optional string cardicon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_scale;
        break;
      }

      // optional float scale = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_radius;
        break;
      }

      // optional float radius = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_turnrate;
        break;
      }

      // optional float turnrate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_turnrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnrate_)));
          set_has_turnrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_attacknormal;
        break;
      }

      // optional uint32 attacknormal = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacknormal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacknormal_)));
          set_has_attacknormal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_skillnormal;
        break;
      }

      // optional uint32 skillnormal = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillnormal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillnormal_)));
          set_has_skillnormal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_skillbig;
        break;
      }

      // optional uint32 skillbig = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillbig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillbig_)));
          set_has_skillbig();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_skillhero;
        break;
      }

      // optional uint32 skillhero = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillhero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillhero_)));
          set_has_skillhero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_skillfriend;
        break;
      }

      // optional uint32 skillfriend = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillfriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillfriend_)));
          set_has_skillfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_aiid;
        break;
      }

      // optional uint32 aiid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aiid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aiid_)));
          set_has_aiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_frag;
        break;
      }

      // optional uint32 frag = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frag_)));
          set_has_frag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_gamestats;
        break;
      }

      // optional uint32 gamestats = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamestats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestats_)));
          set_has_gamestats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_name_pic;
        break;
      }

      // optional string name_pic = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_pic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_can_summered;
        break;
      }

      // optional uint32 can_summered = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_summered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_summered_)));
          set_has_can_summered();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_star;
        break;
      }

      // optional uint32 star = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_star_gamestat;
        break;
      }

      // optional uint32 star_gamestat = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_gamestat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_gamestat_)));
          set_has_star_gamestat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_skillnormal_cd;
        break;
      }

      // optional uint32 skillnormal_cd = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillnormal_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillnormal_cd_)));
          set_has_skillnormal_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_skillbig_cd;
        break;
      }

      // optional uint32 skillbig_cd = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillbig_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillbig_cd_)));
          set_has_skillbig_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_skillhero_cd;
        break;
      }

      // optional uint32 skillhero_cd = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillhero_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillhero_cd_)));
          set_has_skillhero_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_skillfriend_cd;
        break;
      }

      // optional uint32 skillfriend_cd = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillfriend_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillfriend_cd_)));
          set_has_skillfriend_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_skill_extra;
        break;
      }

      // repeated .jynetwork.proto.sSkillCondition skill_extra = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_extra()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_skill_extra;
        if (input->ExpectTag(264)) goto parse_ai_uid;
        break;
      }

      // optional uint32 ai_uid = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ai_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ai_uid_)));
          set_has_ai_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_attacknormal_cd;
        break;
      }

      // optional uint32 attacknormal_cd = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacknormal_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacknormal_cd_)));
          set_has_attacknormal_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_collision_name;
        break;
      }

      // optional string collision_name = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collision_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collision_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_ai_loop;
        break;
      }

      // repeated uint32 ai_loop = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ai_loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 288, input, this->mutable_ai_loop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ai_loop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_ai_loop;
        if (input->ExpectTag(298)) goto parse_death_sound;
        break;
      }

      // optional string death_sound = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_death_sound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_death_sound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_death_eff;
        break;
      }

      // optional uint32 death_eff = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_death_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &death_eff_)));
          set_has_death_eff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(317)) goto parse_buff_scale;
        break;
      }

      // optional float buff_scale = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_buff_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buff_scale_)));
          set_has_buff_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCardStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .jynetwork.proto.eRoleType role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->role(), output);
  }

  // optional uint32 cardname = 3;
  if (has_cardname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cardname(), output);
  }

  // optional string cardpic = 4;
  if (has_cardpic()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cardpic(), output);
  }

  // optional uint32 cardmodel = 5;
  if (has_cardmodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cardmodel(), output);
  }

  // optional string cardicon = 6;
  if (has_cardicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cardicon(), output);
  }

  // optional float scale = 7;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->scale(), output);
  }

  // optional float radius = 8;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->radius(), output);
  }

  // optional float turnrate = 9;
  if (has_turnrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->turnrate(), output);
  }

  // optional uint32 attacknormal = 11;
  if (has_attacknormal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->attacknormal(), output);
  }

  // optional uint32 skillnormal = 12;
  if (has_skillnormal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->skillnormal(), output);
  }

  // optional uint32 skillbig = 13;
  if (has_skillbig()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->skillbig(), output);
  }

  // optional uint32 skillhero = 14;
  if (has_skillhero()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->skillhero(), output);
  }

  // optional uint32 skillfriend = 15;
  if (has_skillfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->skillfriend(), output);
  }

  // optional uint32 aiid = 20;
  if (has_aiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->aiid(), output);
  }

  // optional uint32 frag = 21;
  if (has_frag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->frag(), output);
  }

  // optional uint32 gamestats = 22;
  if (has_gamestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->gamestats(), output);
  }

  // optional string name_pic = 24;
  if (has_name_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->name_pic(), output);
  }

  // optional uint32 can_summered = 25;
  if (has_can_summered()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->can_summered(), output);
  }

  // optional uint32 star = 26;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->star(), output);
  }

  // optional uint32 star_gamestat = 27;
  if (has_star_gamestat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->star_gamestat(), output);
  }

  // optional uint32 skillnormal_cd = 28;
  if (has_skillnormal_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->skillnormal_cd(), output);
  }

  // optional uint32 skillbig_cd = 29;
  if (has_skillbig_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->skillbig_cd(), output);
  }

  // optional uint32 skillhero_cd = 30;
  if (has_skillhero_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->skillhero_cd(), output);
  }

  // optional uint32 skillfriend_cd = 31;
  if (has_skillfriend_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->skillfriend_cd(), output);
  }

  // repeated .jynetwork.proto.sSkillCondition skill_extra = 32;
  for (int i = 0; i < this->skill_extra_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->skill_extra(i), output);
  }

  // optional uint32 ai_uid = 33;
  if (has_ai_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->ai_uid(), output);
  }

  // optional uint32 attacknormal_cd = 34;
  if (has_attacknormal_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->attacknormal_cd(), output);
  }

  // optional string collision_name = 35;
  if (has_collision_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->collision_name(), output);
  }

  // repeated uint32 ai_loop = 36;
  for (int i = 0; i < this->ai_loop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      36, this->ai_loop(i), output);
  }

  // optional string death_sound = 37;
  if (has_death_sound()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->death_sound(), output);
  }

  // optional uint32 death_eff = 38;
  if (has_death_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->death_eff(), output);
  }

  // optional float buff_scale = 39;
  if (has_buff_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->buff_scale(), output);
  }

}

int sCardStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .jynetwork.proto.eRoleType role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }

    // optional uint32 cardname = 3;
    if (has_cardname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardname());
    }

    // optional string cardpic = 4;
    if (has_cardpic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardpic());
    }

    // optional uint32 cardmodel = 5;
    if (has_cardmodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardmodel());
    }

    // optional string cardicon = 6;
    if (has_cardicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardicon());
    }

    // optional float scale = 7;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float radius = 8;
    if (has_radius()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float turnrate = 9;
    if (has_turnrate()) {
      total_size += 1 + 4;
    }

    // optional uint32 attacknormal = 11;
    if (has_attacknormal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacknormal());
    }

    // optional uint32 attacknormal_cd = 34;
    if (has_attacknormal_cd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacknormal_cd());
    }

    // optional uint32 skillnormal = 12;
    if (has_skillnormal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillnormal());
    }

    // optional uint32 skillnormal_cd = 28;
    if (has_skillnormal_cd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillnormal_cd());
    }

    // optional uint32 skillbig = 13;
    if (has_skillbig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillbig());
    }

    // optional uint32 skillbig_cd = 29;
    if (has_skillbig_cd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillbig_cd());
    }

    // optional uint32 skillhero = 14;
    if (has_skillhero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillhero());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 skillhero_cd = 30;
    if (has_skillhero_cd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillhero_cd());
    }

    // optional uint32 skillfriend = 15;
    if (has_skillfriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillfriend());
    }

    // optional uint32 skillfriend_cd = 31;
    if (has_skillfriend_cd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillfriend_cd());
    }

    // optional uint32 aiid = 20;
    if (has_aiid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aiid());
    }

    // optional uint32 frag = 21;
    if (has_frag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frag());
    }

    // optional uint32 gamestats = 22;
    if (has_gamestats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestats());
    }

    // optional string name_pic = 24;
    if (has_name_pic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_pic());
    }

    // optional uint32 can_summered = 25;
    if (has_can_summered()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_summered());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 star = 26;
    if (has_star()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 star_gamestat = 27;
    if (has_star_gamestat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_gamestat());
    }

    // optional uint32 ai_uid = 33;
    if (has_ai_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ai_uid());
    }

    // optional string collision_name = 35;
    if (has_collision_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collision_name());
    }

    // optional string death_sound = 37;
    if (has_death_sound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->death_sound());
    }

    // optional uint32 death_eff = 38;
    if (has_death_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->death_eff());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float buff_scale = 39;
    if (has_buff_scale()) {
      total_size += 2 + 4;
    }

  }
  // repeated .jynetwork.proto.sSkillCondition skill_extra = 32;
  total_size += 2 * this->skill_extra_size();
  for (int i = 0; i < this->skill_extra_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_extra(i));
  }

  // repeated uint32 ai_loop = 36;
  {
    int data_size = 0;
    for (int i = 0; i < this->ai_loop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ai_loop(i));
    }
    total_size += 2 * this->ai_loop_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCardStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCardStats*>(&from));
}

void sCardStats::MergeFrom(const sCardStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_extra_.MergeFrom(from.skill_extra_);
  ai_loop_.MergeFrom(from.ai_loop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_cardname()) {
      set_cardname(from.cardname());
    }
    if (from.has_cardpic()) {
      set_cardpic(from.cardpic());
    }
    if (from.has_cardmodel()) {
      set_cardmodel(from.cardmodel());
    }
    if (from.has_cardicon()) {
      set_cardicon(from.cardicon());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_turnrate()) {
      set_turnrate(from.turnrate());
    }
    if (from.has_attacknormal()) {
      set_attacknormal(from.attacknormal());
    }
    if (from.has_attacknormal_cd()) {
      set_attacknormal_cd(from.attacknormal_cd());
    }
    if (from.has_skillnormal()) {
      set_skillnormal(from.skillnormal());
    }
    if (from.has_skillnormal_cd()) {
      set_skillnormal_cd(from.skillnormal_cd());
    }
    if (from.has_skillbig()) {
      set_skillbig(from.skillbig());
    }
    if (from.has_skillbig_cd()) {
      set_skillbig_cd(from.skillbig_cd());
    }
    if (from.has_skillhero()) {
      set_skillhero(from.skillhero());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_skillhero_cd()) {
      set_skillhero_cd(from.skillhero_cd());
    }
    if (from.has_skillfriend()) {
      set_skillfriend(from.skillfriend());
    }
    if (from.has_skillfriend_cd()) {
      set_skillfriend_cd(from.skillfriend_cd());
    }
    if (from.has_aiid()) {
      set_aiid(from.aiid());
    }
    if (from.has_frag()) {
      set_frag(from.frag());
    }
    if (from.has_gamestats()) {
      set_gamestats(from.gamestats());
    }
    if (from.has_name_pic()) {
      set_name_pic(from.name_pic());
    }
    if (from.has_can_summered()) {
      set_can_summered(from.can_summered());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_star_gamestat()) {
      set_star_gamestat(from.star_gamestat());
    }
    if (from.has_ai_uid()) {
      set_ai_uid(from.ai_uid());
    }
    if (from.has_collision_name()) {
      set_collision_name(from.collision_name());
    }
    if (from.has_death_sound()) {
      set_death_sound(from.death_sound());
    }
    if (from.has_death_eff()) {
      set_death_eff(from.death_eff());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_buff_scale()) {
      set_buff_scale(from.buff_scale());
    }
  }
}

void sCardStats::CopyFrom(const sCardStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCardStats::IsInitialized() const {

  return true;
}

void sCardStats::Swap(sCardStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(role_, other->role_);
    std::swap(cardname_, other->cardname_);
    std::swap(cardpic_, other->cardpic_);
    std::swap(cardmodel_, other->cardmodel_);
    std::swap(cardicon_, other->cardicon_);
    std::swap(scale_, other->scale_);
    std::swap(radius_, other->radius_);
    std::swap(turnrate_, other->turnrate_);
    std::swap(attacknormal_, other->attacknormal_);
    std::swap(attacknormal_cd_, other->attacknormal_cd_);
    std::swap(skillnormal_, other->skillnormal_);
    std::swap(skillnormal_cd_, other->skillnormal_cd_);
    std::swap(skillbig_, other->skillbig_);
    std::swap(skillbig_cd_, other->skillbig_cd_);
    std::swap(skillhero_, other->skillhero_);
    std::swap(skillhero_cd_, other->skillhero_cd_);
    std::swap(skillfriend_, other->skillfriend_);
    std::swap(skillfriend_cd_, other->skillfriend_cd_);
    std::swap(aiid_, other->aiid_);
    std::swap(frag_, other->frag_);
    std::swap(gamestats_, other->gamestats_);
    std::swap(name_pic_, other->name_pic_);
    std::swap(can_summered_, other->can_summered_);
    std::swap(star_, other->star_);
    std::swap(star_gamestat_, other->star_gamestat_);
    skill_extra_.Swap(&other->skill_extra_);
    std::swap(ai_uid_, other->ai_uid_);
    std::swap(collision_name_, other->collision_name_);
    ai_loop_.Swap(&other->ai_loop_);
    std::swap(death_sound_, other->death_sound_);
    std::swap(death_eff_, other->death_eff_);
    std::swap(buff_scale_, other->buff_scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCardStats::GetTypeName() const {
  return "jynetwork.proto.sCardStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sPersonCardStats::kUidFieldNumber;
const int sPersonCardStats::kPartnerFieldNumber;
const int sPersonCardStats::kExpFieldNumber;
const int sPersonCardStats::kLevelFieldNumber;
const int sPersonCardStats::kIntensifyFieldNumber;
const int sPersonCardStats::kOperFieldNumber;
const int sPersonCardStats::kGamestatsFieldNumber;
#endif  // !_MSC_VER

sPersonCardStats::sPersonCardStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPersonCardStats::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(
      ::jynetwork::proto::sGameStats::internal_default_instance());
#else
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(&::jynetwork::proto::sGameStats::default_instance());
#endif
}

sPersonCardStats::sPersonCardStats(const sPersonCardStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPersonCardStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  partner_ = 0u;
  exp_ = 0u;
  level_ = 0u;
  intensify_ = 0u;
  oper_ = 1;
  gamestats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPersonCardStats::~sPersonCardStats() {
  SharedDtor();
}

void sPersonCardStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete gamestats_;
  }
}

void sPersonCardStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPersonCardStats& sPersonCardStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sPersonCardStats* sPersonCardStats::default_instance_ = NULL;

sPersonCardStats* sPersonCardStats::New() const {
  return new sPersonCardStats;
}

void sPersonCardStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    partner_ = 0u;
    exp_ = 0u;
    level_ = 0u;
    intensify_ = 0u;
    oper_ = 1;
    if (has_gamestats()) {
      if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPersonCardStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_partner;
        break;
      }

      // optional uint32 partner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_)));
          set_has_partner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_intensify;
        break;
      }

      // optional uint32 intensify = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensify_)));
          set_has_intensify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_oper;
        break;
      }

      // optional .jynetwork.proto.ePersonalOpertionType oper = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::ePersonalOpertionType_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::ePersonalOpertionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gamestats;
        break;
      }

      // optional .jynetwork.proto.sGameStats gamestats = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamestats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPersonCardStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 partner = 2;
  if (has_partner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->partner(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 intensify = 5;
  if (has_intensify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->intensify(), output);
  }

  // optional .jynetwork.proto.ePersonalOpertionType oper = 6;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->oper(), output);
  }

  // optional .jynetwork.proto.sGameStats gamestats = 7;
  if (has_gamestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->gamestats(), output);
  }

}

int sPersonCardStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 partner = 2;
    if (has_partner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 intensify = 5;
    if (has_intensify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensify());
    }

    // optional .jynetwork.proto.ePersonalOpertionType oper = 6;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional .jynetwork.proto.sGameStats gamestats = 7;
    if (has_gamestats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestats());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPersonCardStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPersonCardStats*>(&from));
}

void sPersonCardStats::MergeFrom(const sPersonCardStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_partner()) {
      set_partner(from.partner());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_intensify()) {
      set_intensify(from.intensify());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_gamestats()) {
      mutable_gamestats()->::jynetwork::proto::sGameStats::MergeFrom(from.gamestats());
    }
  }
}

void sPersonCardStats::CopyFrom(const sPersonCardStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPersonCardStats::IsInitialized() const {

  return true;
}

void sPersonCardStats::Swap(sPersonCardStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(partner_, other->partner_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(intensify_, other->intensify_);
    std::swap(oper_, other->oper_);
    std::swap(gamestats_, other->gamestats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPersonCardStats::GetTypeName() const {
  return "jynetwork.proto.sPersonCardStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sSkillStats::kUidFieldNumber;
const int sSkillStats::kSkillnameFieldNumber;
const int sSkillStats::kDescriptionFieldNumber;
const int sSkillStats::kIconFieldNumber;
const int sSkillStats::kActiveenergyFieldNumber;
const int sSkillStats::kTargettypeFieldNumber;
const int sSkillStats::kTargetlimitFieldNumber;
const int sSkillStats::kTargetnumFieldNumber;
const int sSkillStats::kRangecirclexFieldNumber;
const int sSkillStats::kRangecircleyFieldNumber;
const int sSkillStats::kRangelongFieldNumber;
const int sSkillStats::kRangewideFieldNumber;
const int sSkillStats::kBegineffectFieldNumber;
const int sSkillStats::kBulleteffectFieldNumber;
const int sSkillStats::kContinuetimeFieldNumber;
const int sSkillStats::kFragFieldNumber;
const int sSkillStats::kCdFieldNumber;
const int sSkillStats::kUnlockLevelFieldNumber;
const int sSkillStats::kRoleFieldNumber;
const int sSkillStats::kDamageModifyFieldNumber;
const int sSkillStats::kIconDisplayFieldNumber;
const int sSkillStats::kSkillUseTypeFieldNumber;
const int sSkillStats::kSkillDispStatFieldNumber;
const int sSkillStats::kSkillDispStatLvFieldNumber;
const int sSkillStats::kMageBallRadiusFieldNumber;
const int sSkillStats::kMageBallDectorFieldNumber;
const int sSkillStats::kMageBallBodyFieldNumber;
const int sSkillStats::kBegineffectDelayFieldNumber;
const int sSkillStats::kBulleteffectDelayFieldNumber;
const int sSkillStats::kBattleAbilityFieldNumber;
const int sSkillStats::kIconBtlSkillFieldNumber;
const int sSkillStats::kSoundFieldNumber;
const int sSkillStats::kSkillDescFieldNumber;
const int sSkillStats::kSkillLocationFieldNumber;
#endif  // !_MSC_VER

sSkillStats::sSkillStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sSkillStats::InitAsDefaultInstance() {
}

sSkillStats::sSkillStats(const sSkillStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sSkillStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  skillname_ = 0u;
  description_ = 0u;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activeenergy_ = 0u;
  targettype_ = 1;
  targetlimit_ = 0u;
  targetnum_ = 0u;
  rangecirclex_ = 0;
  rangecircley_ = 0;
  rangelong_ = 0;
  rangewide_ = 0;
  begineffect_ = 0u;
  bulleteffect_ = 0u;
  continuetime_ = 0;
  frag_ = 0u;
  cd_ = 0u;
  unlock_level_ = 0u;
  role_ = 0u;
  damage_modify_ = 0;
  icon_display_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skill_use_type_ = 0u;
  skill_disp_stat_ = 0u;
  skill_disp_stat_lv_ = 0u;
  mage_ball_radius_ = 0;
  mage_ball_dector_ = 0;
  mage_ball_body_ = 0u;
  begineffect_delay_ = 0;
  bulleteffect_delay_ = 0;
  battle_ability_ = 0u;
  icon_btl_skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skill_desc_ = 0u;
  skill_location_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sSkillStats::~sSkillStats() {
  SharedDtor();
}

void sSkillStats::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon_display_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_display_;
  }
  if (icon_btl_skill_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_btl_skill_;
  }
  if (sound_ != &::google::protobuf::internal::kEmptyString) {
    delete sound_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sSkillStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sSkillStats& sSkillStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sSkillStats* sSkillStats::default_instance_ = NULL;

sSkillStats* sSkillStats::New() const {
  return new sSkillStats;
}

void sSkillStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    skillname_ = 0u;
    description_ = 0u;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    activeenergy_ = 0u;
    targettype_ = 1;
    targetlimit_ = 0u;
    targetnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rangecirclex_ = 0;
    rangecircley_ = 0;
    rangelong_ = 0;
    rangewide_ = 0;
    begineffect_ = 0u;
    bulleteffect_ = 0u;
    continuetime_ = 0;
    frag_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    cd_ = 0u;
    unlock_level_ = 0u;
    role_ = 0u;
    damage_modify_ = 0;
    if (has_icon_display()) {
      if (icon_display_ != &::google::protobuf::internal::kEmptyString) {
        icon_display_->clear();
      }
    }
    skill_use_type_ = 0u;
    skill_disp_stat_ = 0u;
    skill_disp_stat_lv_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    mage_ball_radius_ = 0;
    mage_ball_dector_ = 0;
    mage_ball_body_ = 0u;
    begineffect_delay_ = 0;
    bulleteffect_delay_ = 0;
    battle_ability_ = 0u;
    if (has_icon_btl_skill()) {
      if (icon_btl_skill_ != &::google::protobuf::internal::kEmptyString) {
        icon_btl_skill_->clear();
      }
    }
    if (has_sound()) {
      if (sound_ != &::google::protobuf::internal::kEmptyString) {
        sound_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    skill_desc_ = 0u;
    skill_location_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sSkillStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillname;
        break;
      }

      // optional uint32 skillname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillname_)));
          set_has_skillname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_description;
        break;
      }

      // optional uint32 description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_description:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &description_)));
          set_has_description();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // optional string icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_activeenergy;
        break;
      }

      // optional uint32 activeenergy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeenergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activeenergy_)));
          set_has_activeenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_targettype;
        break;
      }

      // optional .jynetwork.proto.eTargetType targettype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targettype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eTargetType_IsValid(value)) {
            set_targettype(static_cast< ::jynetwork::proto::eTargetType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_targetlimit;
        break;
      }

      // optional uint32 targetlimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetlimit_)));
          set_has_targetlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_targetnum;
        break;
      }

      // optional uint32 targetnum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetnum_)));
          set_has_targetnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_rangecirclex;
        break;
      }

      // optional float rangecirclex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rangecirclex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rangecirclex_)));
          set_has_rangecirclex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_rangecircley;
        break;
      }

      // optional float rangecircley = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rangecircley:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rangecircley_)));
          set_has_rangecircley();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_rangelong;
        break;
      }

      // optional float rangelong = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rangelong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rangelong_)));
          set_has_rangelong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_rangewide;
        break;
      }

      // optional float rangewide = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rangewide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rangewide_)));
          set_has_rangewide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_begineffect;
        break;
      }

      // optional uint32 begineffect = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begineffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begineffect_)));
          set_has_begineffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bulleteffect;
        break;
      }

      // optional uint32 bulleteffect = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulleteffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulleteffect_)));
          set_has_bulleteffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_continuetime;
        break;
      }

      // optional float continuetime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_continuetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &continuetime_)));
          set_has_continuetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_frag;
        break;
      }

      // optional uint32 frag = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frag_)));
          set_has_frag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cd;
        break;
      }

      // optional uint32 cd = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_unlock_level;
        break;
      }

      // optional uint32 unlock_level = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_level_)));
          set_has_unlock_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_role;
        break;
      }

      // optional uint32 role = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_damage_modify;
        break;
      }

      // optional float damage_modify = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_damage_modify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damage_modify_)));
          set_has_damage_modify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_icon_display;
        break;
      }

      // optional string icon_display = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_skill_use_type;
        break;
      }

      // optional uint32 skill_use_type = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_use_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_use_type_)));
          set_has_skill_use_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_skill_disp_stat;
        break;
      }

      // optional uint32 skill_disp_stat = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_disp_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_disp_stat_)));
          set_has_skill_disp_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_skill_disp_stat_lv;
        break;
      }

      // optional uint32 skill_disp_stat_lv = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_disp_stat_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_disp_stat_lv_)));
          set_has_skill_disp_stat_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_mage_ball_radius;
        break;
      }

      // optional float mage_ball_radius = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mage_ball_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mage_ball_radius_)));
          set_has_mage_ball_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_mage_ball_dector;
        break;
      }

      // optional float mage_ball_dector = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mage_ball_dector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mage_ball_dector_)));
          set_has_mage_ball_dector();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_mage_ball_body;
        break;
      }

      // optional uint32 mage_ball_body = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mage_ball_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mage_ball_body_)));
          set_has_mage_ball_body();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_begineffect_delay;
        break;
      }

      // optional float begineffect_delay = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_begineffect_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &begineffect_delay_)));
          set_has_begineffect_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_bulleteffect_delay;
        break;
      }

      // optional float bulleteffect_delay = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bulleteffect_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bulleteffect_delay_)));
          set_has_bulleteffect_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_battle_ability;
        break;
      }

      // optional uint32 battle_ability = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_ability_)));
          set_has_battle_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_icon_btl_skill;
        break;
      }

      // optional string icon_btl_skill = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_btl_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_btl_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_sound;
        break;
      }

      // optional string sound = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_skill_desc;
        break;
      }

      // optional uint32 skill_desc = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_desc_)));
          set_has_skill_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_skill_location;
        break;
      }

      // optional uint32 skill_location = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_location_)));
          set_has_skill_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sSkillStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 skillname = 2;
  if (has_skillname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillname(), output);
  }

  // optional uint32 description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->description(), output);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->icon(), output);
  }

  // optional uint32 activeenergy = 5;
  if (has_activeenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->activeenergy(), output);
  }

  // optional .jynetwork.proto.eTargetType targettype = 6;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->targettype(), output);
  }

  // optional uint32 targetlimit = 7;
  if (has_targetlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->targetlimit(), output);
  }

  // optional uint32 targetnum = 8;
  if (has_targetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->targetnum(), output);
  }

  // optional float rangecirclex = 9;
  if (has_rangecirclex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->rangecirclex(), output);
  }

  // optional float rangecircley = 10;
  if (has_rangecircley()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->rangecircley(), output);
  }

  // optional float rangelong = 11;
  if (has_rangelong()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->rangelong(), output);
  }

  // optional float rangewide = 12;
  if (has_rangewide()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->rangewide(), output);
  }

  // optional uint32 begineffect = 13;
  if (has_begineffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->begineffect(), output);
  }

  // optional uint32 bulleteffect = 14;
  if (has_bulleteffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->bulleteffect(), output);
  }

  // optional float continuetime = 15;
  if (has_continuetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->continuetime(), output);
  }

  // optional uint32 frag = 16;
  if (has_frag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->frag(), output);
  }

  // optional uint32 cd = 17;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->cd(), output);
  }

  // optional uint32 unlock_level = 20;
  if (has_unlock_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->unlock_level(), output);
  }

  // optional uint32 role = 21;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->role(), output);
  }

  // optional float damage_modify = 22;
  if (has_damage_modify()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->damage_modify(), output);
  }

  // optional string icon_display = 23;
  if (has_icon_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->icon_display(), output);
  }

  // optional uint32 skill_use_type = 24;
  if (has_skill_use_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->skill_use_type(), output);
  }

  // optional uint32 skill_disp_stat = 25;
  if (has_skill_disp_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->skill_disp_stat(), output);
  }

  // optional uint32 skill_disp_stat_lv = 26;
  if (has_skill_disp_stat_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->skill_disp_stat_lv(), output);
  }

  // optional float mage_ball_radius = 27;
  if (has_mage_ball_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->mage_ball_radius(), output);
  }

  // optional float mage_ball_dector = 28;
  if (has_mage_ball_dector()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->mage_ball_dector(), output);
  }

  // optional uint32 mage_ball_body = 29;
  if (has_mage_ball_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->mage_ball_body(), output);
  }

  // optional float begineffect_delay = 30;
  if (has_begineffect_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->begineffect_delay(), output);
  }

  // optional float bulleteffect_delay = 31;
  if (has_bulleteffect_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->bulleteffect_delay(), output);
  }

  // optional uint32 battle_ability = 32;
  if (has_battle_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->battle_ability(), output);
  }

  // optional string icon_btl_skill = 33;
  if (has_icon_btl_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->icon_btl_skill(), output);
  }

  // optional string sound = 34;
  if (has_sound()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->sound(), output);
  }

  // optional uint32 skill_desc = 35;
  if (has_skill_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->skill_desc(), output);
  }

  // optional uint32 skill_location = 36;
  if (has_skill_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->skill_location(), output);
  }

}

int sSkillStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 skillname = 2;
    if (has_skillname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillname());
    }

    // optional uint32 description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->description());
    }

    // optional string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional uint32 activeenergy = 5;
    if (has_activeenergy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activeenergy());
    }

    // optional .jynetwork.proto.eTargetType targettype = 6;
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->targettype());
    }

    // optional uint32 targetlimit = 7;
    if (has_targetlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetlimit());
    }

    // optional uint32 targetnum = 8;
    if (has_targetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float rangecirclex = 9;
    if (has_rangecirclex()) {
      total_size += 1 + 4;
    }

    // optional float rangecircley = 10;
    if (has_rangecircley()) {
      total_size += 1 + 4;
    }

    // optional float rangelong = 11;
    if (has_rangelong()) {
      total_size += 1 + 4;
    }

    // optional float rangewide = 12;
    if (has_rangewide()) {
      total_size += 1 + 4;
    }

    // optional uint32 begineffect = 13;
    if (has_begineffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begineffect());
    }

    // optional uint32 bulleteffect = 14;
    if (has_bulleteffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulleteffect());
    }

    // optional float continuetime = 15;
    if (has_continuetime()) {
      total_size += 1 + 4;
    }

    // optional uint32 frag = 16;
    if (has_frag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frag());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 cd = 17;
    if (has_cd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

    // optional uint32 unlock_level = 20;
    if (has_unlock_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock_level());
    }

    // optional uint32 role = 21;
    if (has_role()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

    // optional float damage_modify = 22;
    if (has_damage_modify()) {
      total_size += 2 + 4;
    }

    // optional string icon_display = 23;
    if (has_icon_display()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_display());
    }

    // optional uint32 skill_use_type = 24;
    if (has_skill_use_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_use_type());
    }

    // optional uint32 skill_disp_stat = 25;
    if (has_skill_disp_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_disp_stat());
    }

    // optional uint32 skill_disp_stat_lv = 26;
    if (has_skill_disp_stat_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_disp_stat_lv());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float mage_ball_radius = 27;
    if (has_mage_ball_radius()) {
      total_size += 2 + 4;
    }

    // optional float mage_ball_dector = 28;
    if (has_mage_ball_dector()) {
      total_size += 2 + 4;
    }

    // optional uint32 mage_ball_body = 29;
    if (has_mage_ball_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mage_ball_body());
    }

    // optional float begineffect_delay = 30;
    if (has_begineffect_delay()) {
      total_size += 2 + 4;
    }

    // optional float bulleteffect_delay = 31;
    if (has_bulleteffect_delay()) {
      total_size += 2 + 4;
    }

    // optional uint32 battle_ability = 32;
    if (has_battle_ability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_ability());
    }

    // optional string icon_btl_skill = 33;
    if (has_icon_btl_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_btl_skill());
    }

    // optional string sound = 34;
    if (has_sound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sound());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 skill_desc = 35;
    if (has_skill_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_desc());
    }

    // optional uint32 skill_location = 36;
    if (has_skill_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_location());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sSkillStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sSkillStats*>(&from));
}

void sSkillStats::MergeFrom(const sSkillStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_skillname()) {
      set_skillname(from.skillname());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_activeenergy()) {
      set_activeenergy(from.activeenergy());
    }
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_targetlimit()) {
      set_targetlimit(from.targetlimit());
    }
    if (from.has_targetnum()) {
      set_targetnum(from.targetnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rangecirclex()) {
      set_rangecirclex(from.rangecirclex());
    }
    if (from.has_rangecircley()) {
      set_rangecircley(from.rangecircley());
    }
    if (from.has_rangelong()) {
      set_rangelong(from.rangelong());
    }
    if (from.has_rangewide()) {
      set_rangewide(from.rangewide());
    }
    if (from.has_begineffect()) {
      set_begineffect(from.begineffect());
    }
    if (from.has_bulleteffect()) {
      set_bulleteffect(from.bulleteffect());
    }
    if (from.has_continuetime()) {
      set_continuetime(from.continuetime());
    }
    if (from.has_frag()) {
      set_frag(from.frag());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_unlock_level()) {
      set_unlock_level(from.unlock_level());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_damage_modify()) {
      set_damage_modify(from.damage_modify());
    }
    if (from.has_icon_display()) {
      set_icon_display(from.icon_display());
    }
    if (from.has_skill_use_type()) {
      set_skill_use_type(from.skill_use_type());
    }
    if (from.has_skill_disp_stat()) {
      set_skill_disp_stat(from.skill_disp_stat());
    }
    if (from.has_skill_disp_stat_lv()) {
      set_skill_disp_stat_lv(from.skill_disp_stat_lv());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_mage_ball_radius()) {
      set_mage_ball_radius(from.mage_ball_radius());
    }
    if (from.has_mage_ball_dector()) {
      set_mage_ball_dector(from.mage_ball_dector());
    }
    if (from.has_mage_ball_body()) {
      set_mage_ball_body(from.mage_ball_body());
    }
    if (from.has_begineffect_delay()) {
      set_begineffect_delay(from.begineffect_delay());
    }
    if (from.has_bulleteffect_delay()) {
      set_bulleteffect_delay(from.bulleteffect_delay());
    }
    if (from.has_battle_ability()) {
      set_battle_ability(from.battle_ability());
    }
    if (from.has_icon_btl_skill()) {
      set_icon_btl_skill(from.icon_btl_skill());
    }
    if (from.has_sound()) {
      set_sound(from.sound());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_skill_desc()) {
      set_skill_desc(from.skill_desc());
    }
    if (from.has_skill_location()) {
      set_skill_location(from.skill_location());
    }
  }
}

void sSkillStats::CopyFrom(const sSkillStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sSkillStats::IsInitialized() const {

  return true;
}

void sSkillStats::Swap(sSkillStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(skillname_, other->skillname_);
    std::swap(description_, other->description_);
    std::swap(icon_, other->icon_);
    std::swap(activeenergy_, other->activeenergy_);
    std::swap(targettype_, other->targettype_);
    std::swap(targetlimit_, other->targetlimit_);
    std::swap(targetnum_, other->targetnum_);
    std::swap(rangecirclex_, other->rangecirclex_);
    std::swap(rangecircley_, other->rangecircley_);
    std::swap(rangelong_, other->rangelong_);
    std::swap(rangewide_, other->rangewide_);
    std::swap(begineffect_, other->begineffect_);
    std::swap(bulleteffect_, other->bulleteffect_);
    std::swap(continuetime_, other->continuetime_);
    std::swap(frag_, other->frag_);
    std::swap(cd_, other->cd_);
    std::swap(unlock_level_, other->unlock_level_);
    std::swap(role_, other->role_);
    std::swap(damage_modify_, other->damage_modify_);
    std::swap(icon_display_, other->icon_display_);
    std::swap(skill_use_type_, other->skill_use_type_);
    std::swap(skill_disp_stat_, other->skill_disp_stat_);
    std::swap(skill_disp_stat_lv_, other->skill_disp_stat_lv_);
    std::swap(mage_ball_radius_, other->mage_ball_radius_);
    std::swap(mage_ball_dector_, other->mage_ball_dector_);
    std::swap(mage_ball_body_, other->mage_ball_body_);
    std::swap(begineffect_delay_, other->begineffect_delay_);
    std::swap(bulleteffect_delay_, other->bulleteffect_delay_);
    std::swap(battle_ability_, other->battle_ability_);
    std::swap(icon_btl_skill_, other->icon_btl_skill_);
    std::swap(sound_, other->sound_);
    std::swap(skill_desc_, other->skill_desc_);
    std::swap(skill_location_, other->skill_location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sSkillStats::GetTypeName() const {
  return "jynetwork.proto.sSkillStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sBuffStats::kUidFieldNumber;
const int sBuffStats::kBuffnameFieldNumber;
const int sBuffStats::kBufficonFieldNumber;
const int sBuffStats::kBegintimeFieldNumber;
const int sBuffStats::kEndtimeFieldNumber;
const int sBuffStats::kGamestatsFieldNumber;
#endif  // !_MSC_VER

sBuffStats::sBuffStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sBuffStats::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(
      ::jynetwork::proto::sGameStats::internal_default_instance());
#else
  gamestats_ = const_cast< ::jynetwork::proto::sGameStats*>(&::jynetwork::proto::sGameStats::default_instance());
#endif
}

sBuffStats::sBuffStats(const sBuffStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sBuffStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  buffname_ = 0u;
  bufficon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begintime_ = 0u;
  endtime_ = 0u;
  gamestats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sBuffStats::~sBuffStats() {
  SharedDtor();
}

void sBuffStats::SharedDtor() {
  if (bufficon_ != &::google::protobuf::internal::kEmptyString) {
    delete bufficon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete gamestats_;
  }
}

void sBuffStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sBuffStats& sBuffStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sBuffStats* sBuffStats::default_instance_ = NULL;

sBuffStats* sBuffStats::New() const {
  return new sBuffStats;
}

void sBuffStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    buffname_ = 0u;
    if (has_bufficon()) {
      if (bufficon_ != &::google::protobuf::internal::kEmptyString) {
        bufficon_->clear();
      }
    }
    begintime_ = 0u;
    endtime_ = 0u;
    if (has_gamestats()) {
      if (gamestats_ != NULL) gamestats_->::jynetwork::proto::sGameStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sBuffStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buffname;
        break;
      }

      // optional uint32 buffname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffname_)));
          set_has_buffname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bufficon;
        break;
      }

      // optional string bufficon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bufficon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bufficon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_begintime;
        break;
      }

      // optional fixed32 begintime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_endtime;
        break;
      }

      // optional fixed32 endtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gamestats;
        break;
      }

      // optional .jynetwork.proto.sGameStats gamestats = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamestats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sBuffStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 buffname = 2;
  if (has_buffname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buffname(), output);
  }

  // optional string bufficon = 3;
  if (has_bufficon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bufficon(), output);
  }

  // optional fixed32 begintime = 4;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->begintime(), output);
  }

  // optional fixed32 endtime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->endtime(), output);
  }

  // optional .jynetwork.proto.sGameStats gamestats = 6;
  if (has_gamestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->gamestats(), output);
  }

}

int sBuffStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 buffname = 2;
    if (has_buffname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffname());
    }

    // optional string bufficon = 3;
    if (has_bufficon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bufficon());
    }

    // optional fixed32 begintime = 4;
    if (has_begintime()) {
      total_size += 1 + 4;
    }

    // optional fixed32 endtime = 5;
    if (has_endtime()) {
      total_size += 1 + 4;
    }

    // optional .jynetwork.proto.sGameStats gamestats = 6;
    if (has_gamestats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestats());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sBuffStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sBuffStats*>(&from));
}

void sBuffStats::MergeFrom(const sBuffStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_buffname()) {
      set_buffname(from.buffname());
    }
    if (from.has_bufficon()) {
      set_bufficon(from.bufficon());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_gamestats()) {
      mutable_gamestats()->::jynetwork::proto::sGameStats::MergeFrom(from.gamestats());
    }
  }
}

void sBuffStats::CopyFrom(const sBuffStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sBuffStats::IsInitialized() const {

  return true;
}

void sBuffStats::Swap(sBuffStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(buffname_, other->buffname_);
    std::swap(bufficon_, other->bufficon_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(gamestats_, other->gamestats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sBuffStats::GetTypeName() const {
  return "jynetwork.proto.sBuffStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sDropItem::kUidFieldNumber;
const int sDropItem::kRateFieldNumber;
const int sDropItem::kIspackageFieldNumber;
const int sDropItem::kNumFieldNumber;
const int sDropItem::kPercentFieldNumber;
const int sDropItem::kNameFieldNumber;
const int sDropItem::kDropTimesFieldNumber;
#endif  // !_MSC_VER

sDropItem::sDropItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sDropItem::InitAsDefaultInstance() {
}

sDropItem::sDropItem(const sDropItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sDropItem::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  rate_ = 0;
  ispackage_ = 0u;
  num_ = 0u;
  percent_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  drop_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sDropItem::~sDropItem() {
  SharedDtor();
}

void sDropItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sDropItem& sDropItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sDropItem* sDropItem::default_instance_ = NULL;

sDropItem* sDropItem::New() const {
  return new sDropItem;
}

void sDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    rate_ = 0;
    ispackage_ = 0u;
    num_ = 0u;
    percent_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    drop_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_rate;
        break;
      }

      // optional float rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ispackage;
        break;
      }

      // optional uint32 ispackage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ispackage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispackage_)));
          set_has_ispackage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_percent;
        break;
      }

      // optional uint32 percent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional bytes name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_drop_times;
        break;
      }

      // optional uint32 drop_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_times_)));
          set_has_drop_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional float rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rate(), output);
  }

  // optional uint32 ispackage = 3;
  if (has_ispackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ispackage(), output);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional uint32 percent = 5;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->percent(), output);
  }

  // optional bytes name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->name(), output);
  }

  // optional uint32 drop_times = 7;
  if (has_drop_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->drop_times(), output);
  }

}

int sDropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional float rate = 2;
    if (has_rate()) {
      total_size += 1 + 4;
    }

    // optional uint32 ispackage = 3;
    if (has_ispackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispackage());
    }

    // optional uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 percent = 5;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->percent());
    }

    // optional bytes name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 drop_times = 7;
    if (has_drop_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_times());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sDropItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sDropItem*>(&from));
}

void sDropItem::MergeFrom(const sDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_ispackage()) {
      set_ispackage(from.ispackage());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_drop_times()) {
      set_drop_times(from.drop_times());
    }
  }
}

void sDropItem::CopyFrom(const sDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sDropItem::IsInitialized() const {

  return true;
}

void sDropItem::Swap(sDropItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(rate_, other->rate_);
    std::swap(ispackage_, other->ispackage_);
    std::swap(num_, other->num_);
    std::swap(percent_, other->percent_);
    std::swap(name_, other->name_);
    std::swap(drop_times_, other->drop_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sDropItem::GetTypeName() const {
  return "jynetwork.proto.sDropItem";
}


// ===================================================================

#ifndef _MSC_VER
const int sDropStats::kUidFieldNumber;
const int sDropStats::kDropsFieldNumber;
const int sDropStats::kMinlvFieldNumber;
const int sDropStats::kMaxlvFieldNumber;
const int sDropStats::kJoblimitFieldNumber;
const int sDropStats::kDroptypeFieldNumber;
const int sDropStats::kNameFieldNumber;
const int sDropStats::kTreasureClassFieldNumber;
const int sDropStats::kAddPercentFieldNumber;
#endif  // !_MSC_VER

sDropStats::sDropStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sDropStats::InitAsDefaultInstance() {
}

sDropStats::sDropStats(const sDropStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sDropStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  minlv_ = 0u;
  maxlv_ = 0u;
  joblimit_ = 0u;
  droptype_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  treasure_class_ = 0u;
  add_percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sDropStats::~sDropStats() {
  SharedDtor();
}

void sDropStats::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sDropStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sDropStats& sDropStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sDropStats* sDropStats::default_instance_ = NULL;

sDropStats* sDropStats::New() const {
  return new sDropStats;
}

void sDropStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    minlv_ = 0u;
    maxlv_ = 0u;
    joblimit_ = 0u;
    droptype_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    treasure_class_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    add_percent_ = 0u;
  }
  drops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sDropStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drops;
        break;
      }

      // repeated .jynetwork.proto.sDropItem drops = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drops;
        if (input->ExpectTag(24)) goto parse_minlv;
        break;
      }

      // optional uint32 minlv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minlv_)));
          set_has_minlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxlv;
        break;
      }

      // optional uint32 maxlv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlv_)));
          set_has_maxlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_joblimit;
        break;
      }

      // optional uint32 joblimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joblimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joblimit_)));
          set_has_joblimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_droptype;
        break;
      }

      // optional uint32 droptype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_droptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &droptype_)));
          set_has_droptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional bytes name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_treasure_class;
        break;
      }

      // optional uint32 treasure_class = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treasure_class_)));
          set_has_treasure_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_add_percent;
        break;
      }

      // optional uint32 add_percent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_percent_)));
          set_has_add_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sDropStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // repeated .jynetwork.proto.sDropItem drops = 2;
  for (int i = 0; i < this->drops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->drops(i), output);
  }

  // optional uint32 minlv = 3;
  if (has_minlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minlv(), output);
  }

  // optional uint32 maxlv = 4;
  if (has_maxlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxlv(), output);
  }

  // optional uint32 joblimit = 5;
  if (has_joblimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->joblimit(), output);
  }

  // optional uint32 droptype = 6;
  if (has_droptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->droptype(), output);
  }

  // optional bytes name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->name(), output);
  }

  // optional uint32 treasure_class = 8;
  if (has_treasure_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->treasure_class(), output);
  }

  // optional uint32 add_percent = 9;
  if (has_add_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->add_percent(), output);
  }

}

int sDropStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 minlv = 3;
    if (has_minlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minlv());
    }

    // optional uint32 maxlv = 4;
    if (has_maxlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlv());
    }

    // optional uint32 joblimit = 5;
    if (has_joblimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joblimit());
    }

    // optional uint32 droptype = 6;
    if (has_droptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->droptype());
    }

    // optional bytes name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 treasure_class = 8;
    if (has_treasure_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treasure_class());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 add_percent = 9;
    if (has_add_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_percent());
    }

  }
  // repeated .jynetwork.proto.sDropItem drops = 2;
  total_size += 1 * this->drops_size();
  for (int i = 0; i < this->drops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drops(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sDropStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sDropStats*>(&from));
}

void sDropStats::MergeFrom(const sDropStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  drops_.MergeFrom(from.drops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_minlv()) {
      set_minlv(from.minlv());
    }
    if (from.has_maxlv()) {
      set_maxlv(from.maxlv());
    }
    if (from.has_joblimit()) {
      set_joblimit(from.joblimit());
    }
    if (from.has_droptype()) {
      set_droptype(from.droptype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_treasure_class()) {
      set_treasure_class(from.treasure_class());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_add_percent()) {
      set_add_percent(from.add_percent());
    }
  }
}

void sDropStats::CopyFrom(const sDropStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sDropStats::IsInitialized() const {

  return true;
}

void sDropStats::Swap(sDropStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    drops_.Swap(&other->drops_);
    std::swap(minlv_, other->minlv_);
    std::swap(maxlv_, other->maxlv_);
    std::swap(joblimit_, other->joblimit_);
    std::swap(droptype_, other->droptype_);
    std::swap(name_, other->name_);
    std::swap(treasure_class_, other->treasure_class_);
    std::swap(add_percent_, other->add_percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sDropStats::GetTypeName() const {
  return "jynetwork.proto.sDropStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sMapStats::kUidFieldNumber;
const int sMapStats::kNumlimitFieldNumber;
const int sMapStats::kLevellimitFieldNumber;
const int sMapStats::kRanklimitFieldNumber;
const int sMapStats::kWeekdaylimitFieldNumber;
const int sMapStats::kDayBegintimeFieldNumber;
const int sMapStats::kDayEndtimeFieldNumber;
const int sMapStats::kFrontMapFieldNumber;
const int sMapStats::kDifficultFieldNumber;
const int sMapStats::kDropIdFieldNumber;
const int sMapStats::kCostStaminaFieldNumber;
const int sMapStats::kDropMiddleFieldNumber;
const int sMapStats::kDropMiddlenumFieldNumber;
const int sMapStats::kDropGoblinFieldNumber;
const int sMapStats::kDropGoblinRateFieldNumber;
const int sMapStats::kCastleTypeFieldNumber;
const int sMapStats::kStarScoreFieldNumber;
const int sMapStats::kRecommondAttackFieldNumber;
const int sMapStats::kChaosFieldNumber;
const int sMapStats::kAfterDropIdFieldNumber;
const int sMapStats::kStageIdFieldNumber;
const int sMapStats::kStageGroupIdFieldNumber;
const int sMapStats::kStageDetailIdFieldNumber;
const int sMapStats::kPercentFieldNumber;
const int sMapStats::kChaosGroupFieldNumber;
const int sMapStats::kRoleFieldNumber;
const int sMapStats::kFirstDropFieldNumber;
const int sMapStats::kFirstDropShowFieldNumber;
const int sMapStats::kFirstDropShowTypeFieldNumber;
const int sMapStats::kDifficultPercentFieldNumber;
const int sMapStats::kDifficultTcFieldNumber;
const int sMapStats::kMvpDropFieldNumber;
const int sMapStats::kDropShowFieldNumber;
const int sMapStats::kDropShowTypeFieldNumber;
const int sMapStats::kCanWellOverFieldNumber;
#endif  // !_MSC_VER

sMapStats::sMapStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sMapStats::InitAsDefaultInstance() {
}

sMapStats::sMapStats(const sMapStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sMapStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  numlimit_ = 0u;
  levellimit_ = 0u;
  ranklimit_ = 0u;
  day_begintime_ = 0u;
  day_endtime_ = 0u;
  front_map_ = 0u;
  difficult_ = 0u;
  drop_id_ = 0u;
  cost_stamina_ = 0u;
  drop_middle_ = 0u;
  drop_middlenum_ = 0u;
  drop_goblin_ = 0u;
  drop_goblin_rate_ = 0u;
  castle_type_ = 0u;
  star_score_ = 0;
  recommond_attack_ = 0;
  after_drop_id_ = 0u;
  stage_id_ = 0u;
  stage_group_id_ = 0u;
  stage_detail_id_ = 0u;
  percent_ = 0u;
  role_ = 0;
  first_drop_ = 0u;
  mvp_drop_ = 0u;
  can_well_over_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sMapStats::~sMapStats() {
  SharedDtor();
}

void sMapStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sMapStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sMapStats& sMapStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sMapStats* sMapStats::default_instance_ = NULL;

sMapStats* sMapStats::New() const {
  return new sMapStats;
}

void sMapStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    numlimit_ = 0u;
    levellimit_ = 0u;
    ranklimit_ = 0u;
    day_begintime_ = 0u;
    day_endtime_ = 0u;
    front_map_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    difficult_ = 0u;
    drop_id_ = 0u;
    cost_stamina_ = 0u;
    drop_middle_ = 0u;
    drop_middlenum_ = 0u;
    drop_goblin_ = 0u;
    drop_goblin_rate_ = 0u;
    castle_type_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    star_score_ = 0;
    recommond_attack_ = 0;
    after_drop_id_ = 0u;
    stage_id_ = 0u;
    stage_group_id_ = 0u;
    stage_detail_id_ = 0u;
    percent_ = 0u;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    role_ = 0;
    first_drop_ = 0u;
    mvp_drop_ = 0u;
  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    can_well_over_ = 0u;
  }
  weekdaylimit_.Clear();
  chaos_.Clear();
  chaos_group_.Clear();
  first_drop_show_.Clear();
  first_drop_show_type_.Clear();
  difficult_percent_.Clear();
  difficult_tc_.Clear();
  drop_show_.Clear();
  drop_show_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sMapStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_numlimit;
        break;
      }

      // optional uint32 numlimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numlimit_)));
          set_has_numlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_levellimit;
        break;
      }

      // optional uint32 levellimit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levellimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levellimit_)));
          set_has_levellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ranklimit;
        break;
      }

      // optional uint32 ranklimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranklimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranklimit_)));
          set_has_ranklimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_weekdaylimit;
        break;
      }

      // repeated uint32 weekdaylimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekdaylimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_weekdaylimit())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_weekdaylimit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_weekdaylimit;
        if (input->ExpectTag(77)) goto parse_day_begintime;
        break;
      }

      // optional fixed32 day_begintime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_day_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &day_begintime_)));
          set_has_day_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_day_endtime;
        break;
      }

      // optional fixed32 day_endtime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_day_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &day_endtime_)));
          set_has_day_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_front_map;
        break;
      }

      // optional uint32 front_map = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_front_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &front_map_)));
          set_has_front_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_difficult;
        break;
      }

      // optional uint32 difficult = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficult_)));
          set_has_difficult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_drop_id;
        break;
      }

      // optional uint32 drop_id = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_id_)));
          set_has_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_cost_stamina;
        break;
      }

      // optional uint32 cost_stamina = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_stamina_)));
          set_has_cost_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_drop_middle;
        break;
      }

      // optional uint32 drop_middle = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_middle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_middle_)));
          set_has_drop_middle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_drop_middlenum;
        break;
      }

      // optional uint32 drop_middlenum = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_middlenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_middlenum_)));
          set_has_drop_middlenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_drop_goblin;
        break;
      }

      // optional uint32 drop_goblin = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_goblin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_goblin_)));
          set_has_drop_goblin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_drop_goblin_rate;
        break;
      }

      // optional uint32 drop_goblin_rate = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_goblin_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_goblin_rate_)));
          set_has_drop_goblin_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_castle_type;
        break;
      }

      // optional uint32 castle_type = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_castle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castle_type_)));
          set_has_castle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(373)) goto parse_star_score;
        break;
      }

      // optional float star_score = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_star_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &star_score_)));
          set_has_star_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(381)) goto parse_recommond_attack;
        break;
      }

      // optional float recommond_attack = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_recommond_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recommond_attack_)));
          set_has_recommond_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_stage_id;
        break;
      }

      // optional uint32 stage_id = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_stage_group_id;
        break;
      }

      // optional uint32 stage_group_id = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_group_id_)));
          set_has_stage_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_stage_detail_id;
        break;
      }

      // optional uint32 stage_detail_id = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_detail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_detail_id_)));
          set_has_stage_detail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_chaos;
        break;
      }

      // repeated .jynetwork.proto.sChaosStats chaos = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chaos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chaos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_chaos;
        if (input->ExpectTag(528)) goto parse_after_drop_id;
        break;
      }

      // optional uint32 after_drop_id = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_after_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &after_drop_id_)));
          set_has_after_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_percent;
        break;
      }

      // optional uint32 percent = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_chaos_group;
        break;
      }

      // repeated uint32 chaos_group = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chaos_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 544, input, this->mutable_chaos_group())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chaos_group())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_chaos_group;
        if (input->ExpectTag(552)) goto parse_role;
        break;
      }

      // optional .jynetwork.proto.eRoleType role = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eRoleType_IsValid(value)) {
            set_role(static_cast< ::jynetwork::proto::eRoleType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_first_drop;
        break;
      }

      // optional uint32 first_drop = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_drop_)));
          set_has_first_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_first_drop_show;
        break;
      }

      // repeated uint32 first_drop_show = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_drop_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 568, input, this->mutable_first_drop_show())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_first_drop_show())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_first_drop_show;
        if (input->ExpectTag(584)) goto parse_first_drop_show_type;
        break;
      }

      // repeated uint32 first_drop_show_type = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_drop_show_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 584, input, this->mutable_first_drop_show_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_first_drop_show_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_first_drop_show_type;
        if (input->ExpectTag(592)) goto parse_difficult_percent;
        break;
      }

      // repeated uint32 difficult_percent = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 592, input, this->mutable_difficult_percent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_difficult_percent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_difficult_percent;
        if (input->ExpectTag(600)) goto parse_difficult_tc;
        break;
      }

      // repeated uint32 difficult_tc = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult_tc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 600, input, this->mutable_difficult_tc())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_difficult_tc())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_difficult_tc;
        if (input->ExpectTag(608)) goto parse_mvp_drop;
        break;
      }

      // optional uint32 mvp_drop = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mvp_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mvp_drop_)));
          set_has_mvp_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_drop_show;
        break;
      }

      // repeated uint32 drop_show = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 616, input, this->mutable_drop_show())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_drop_show())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_drop_show;
        if (input->ExpectTag(624)) goto parse_drop_show_type;
        break;
      }

      // repeated uint32 drop_show_type = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_show_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 624, input, this->mutable_drop_show_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_drop_show_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_drop_show_type;
        if (input->ExpectTag(632)) goto parse_can_well_over;
        break;
      }

      // optional uint32 can_well_over = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_well_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_well_over_)));
          set_has_can_well_over();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sMapStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 numlimit = 5;
  if (has_numlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->numlimit(), output);
  }

  // optional uint32 levellimit = 6;
  if (has_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->levellimit(), output);
  }

  // optional uint32 ranklimit = 7;
  if (has_ranklimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ranklimit(), output);
  }

  // repeated uint32 weekdaylimit = 8;
  for (int i = 0; i < this->weekdaylimit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->weekdaylimit(i), output);
  }

  // optional fixed32 day_begintime = 9;
  if (has_day_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->day_begintime(), output);
  }

  // optional fixed32 day_endtime = 10;
  if (has_day_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->day_endtime(), output);
  }

  // optional uint32 front_map = 11;
  if (has_front_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->front_map(), output);
  }

  // optional uint32 difficult = 29;
  if (has_difficult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->difficult(), output);
  }

  // optional uint32 drop_id = 31;
  if (has_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->drop_id(), output);
  }

  // optional uint32 cost_stamina = 32;
  if (has_cost_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->cost_stamina(), output);
  }

  // optional uint32 drop_middle = 33;
  if (has_drop_middle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->drop_middle(), output);
  }

  // optional uint32 drop_middlenum = 34;
  if (has_drop_middlenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->drop_middlenum(), output);
  }

  // optional uint32 drop_goblin = 35;
  if (has_drop_goblin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->drop_goblin(), output);
  }

  // optional uint32 drop_goblin_rate = 36;
  if (has_drop_goblin_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->drop_goblin_rate(), output);
  }

  // optional uint32 castle_type = 37;
  if (has_castle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->castle_type(), output);
  }

  // optional float star_score = 46;
  if (has_star_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->star_score(), output);
  }

  // optional float recommond_attack = 47;
  if (has_recommond_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->recommond_attack(), output);
  }

  // optional uint32 stage_id = 59;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->stage_id(), output);
  }

  // optional uint32 stage_group_id = 60;
  if (has_stage_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->stage_group_id(), output);
  }

  // optional uint32 stage_detail_id = 61;
  if (has_stage_detail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->stage_detail_id(), output);
  }

  // repeated .jynetwork.proto.sChaosStats chaos = 65;
  for (int i = 0; i < this->chaos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      65, this->chaos(i), output);
  }

  // optional uint32 after_drop_id = 66;
  if (has_after_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->after_drop_id(), output);
  }

  // optional uint32 percent = 67;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->percent(), output);
  }

  // repeated uint32 chaos_group = 68;
  for (int i = 0; i < this->chaos_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      68, this->chaos_group(i), output);
  }

  // optional .jynetwork.proto.eRoleType role = 69;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      69, this->role(), output);
  }

  // optional uint32 first_drop = 70;
  if (has_first_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->first_drop(), output);
  }

  // repeated uint32 first_drop_show = 71;
  for (int i = 0; i < this->first_drop_show_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      71, this->first_drop_show(i), output);
  }

  // repeated uint32 first_drop_show_type = 73;
  for (int i = 0; i < this->first_drop_show_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      73, this->first_drop_show_type(i), output);
  }

  // repeated uint32 difficult_percent = 74;
  for (int i = 0; i < this->difficult_percent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      74, this->difficult_percent(i), output);
  }

  // repeated uint32 difficult_tc = 75;
  for (int i = 0; i < this->difficult_tc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      75, this->difficult_tc(i), output);
  }

  // optional uint32 mvp_drop = 76;
  if (has_mvp_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->mvp_drop(), output);
  }

  // repeated uint32 drop_show = 77;
  for (int i = 0; i < this->drop_show_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      77, this->drop_show(i), output);
  }

  // repeated uint32 drop_show_type = 78;
  for (int i = 0; i < this->drop_show_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      78, this->drop_show_type(i), output);
  }

  // optional uint32 can_well_over = 79;
  if (has_can_well_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->can_well_over(), output);
  }

}

int sMapStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 numlimit = 5;
    if (has_numlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numlimit());
    }

    // optional uint32 levellimit = 6;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levellimit());
    }

    // optional uint32 ranklimit = 7;
    if (has_ranklimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranklimit());
    }

    // optional fixed32 day_begintime = 9;
    if (has_day_begintime()) {
      total_size += 1 + 4;
    }

    // optional fixed32 day_endtime = 10;
    if (has_day_endtime()) {
      total_size += 1 + 4;
    }

    // optional uint32 front_map = 11;
    if (has_front_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->front_map());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 difficult = 29;
    if (has_difficult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficult());
    }

    // optional uint32 drop_id = 31;
    if (has_drop_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_id());
    }

    // optional uint32 cost_stamina = 32;
    if (has_cost_stamina()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_stamina());
    }

    // optional uint32 drop_middle = 33;
    if (has_drop_middle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_middle());
    }

    // optional uint32 drop_middlenum = 34;
    if (has_drop_middlenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_middlenum());
    }

    // optional uint32 drop_goblin = 35;
    if (has_drop_goblin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_goblin());
    }

    // optional uint32 drop_goblin_rate = 36;
    if (has_drop_goblin_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_goblin_rate());
    }

    // optional uint32 castle_type = 37;
    if (has_castle_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castle_type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float star_score = 46;
    if (has_star_score()) {
      total_size += 2 + 4;
    }

    // optional float recommond_attack = 47;
    if (has_recommond_attack()) {
      total_size += 2 + 4;
    }

    // optional uint32 after_drop_id = 66;
    if (has_after_drop_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->after_drop_id());
    }

    // optional uint32 stage_id = 59;
    if (has_stage_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_id());
    }

    // optional uint32 stage_group_id = 60;
    if (has_stage_group_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_group_id());
    }

    // optional uint32 stage_detail_id = 61;
    if (has_stage_detail_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_detail_id());
    }

    // optional uint32 percent = 67;
    if (has_percent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->percent());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional .jynetwork.proto.eRoleType role = 69;
    if (has_role()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }

    // optional uint32 first_drop = 70;
    if (has_first_drop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_drop());
    }

    // optional uint32 mvp_drop = 76;
    if (has_mvp_drop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mvp_drop());
    }

  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    // optional uint32 can_well_over = 79;
    if (has_can_well_over()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_well_over());
    }

  }
  // repeated uint32 weekdaylimit = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->weekdaylimit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->weekdaylimit(i));
    }
    total_size += 1 * this->weekdaylimit_size() + data_size;
  }

  // repeated .jynetwork.proto.sChaosStats chaos = 65;
  total_size += 2 * this->chaos_size();
  for (int i = 0; i < this->chaos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chaos(i));
  }

  // repeated uint32 chaos_group = 68;
  {
    int data_size = 0;
    for (int i = 0; i < this->chaos_group_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chaos_group(i));
    }
    total_size += 2 * this->chaos_group_size() + data_size;
  }

  // repeated uint32 first_drop_show = 71;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_drop_show_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->first_drop_show(i));
    }
    total_size += 2 * this->first_drop_show_size() + data_size;
  }

  // repeated uint32 first_drop_show_type = 73;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_drop_show_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->first_drop_show_type(i));
    }
    total_size += 2 * this->first_drop_show_type_size() + data_size;
  }

  // repeated uint32 difficult_percent = 74;
  {
    int data_size = 0;
    for (int i = 0; i < this->difficult_percent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->difficult_percent(i));
    }
    total_size += 2 * this->difficult_percent_size() + data_size;
  }

  // repeated uint32 difficult_tc = 75;
  {
    int data_size = 0;
    for (int i = 0; i < this->difficult_tc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->difficult_tc(i));
    }
    total_size += 2 * this->difficult_tc_size() + data_size;
  }

  // repeated uint32 drop_show = 77;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_show_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->drop_show(i));
    }
    total_size += 2 * this->drop_show_size() + data_size;
  }

  // repeated uint32 drop_show_type = 78;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_show_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->drop_show_type(i));
    }
    total_size += 2 * this->drop_show_type_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sMapStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sMapStats*>(&from));
}

void sMapStats::MergeFrom(const sMapStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  weekdaylimit_.MergeFrom(from.weekdaylimit_);
  chaos_.MergeFrom(from.chaos_);
  chaos_group_.MergeFrom(from.chaos_group_);
  first_drop_show_.MergeFrom(from.first_drop_show_);
  first_drop_show_type_.MergeFrom(from.first_drop_show_type_);
  difficult_percent_.MergeFrom(from.difficult_percent_);
  difficult_tc_.MergeFrom(from.difficult_tc_);
  drop_show_.MergeFrom(from.drop_show_);
  drop_show_type_.MergeFrom(from.drop_show_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_numlimit()) {
      set_numlimit(from.numlimit());
    }
    if (from.has_levellimit()) {
      set_levellimit(from.levellimit());
    }
    if (from.has_ranklimit()) {
      set_ranklimit(from.ranklimit());
    }
    if (from.has_day_begintime()) {
      set_day_begintime(from.day_begintime());
    }
    if (from.has_day_endtime()) {
      set_day_endtime(from.day_endtime());
    }
    if (from.has_front_map()) {
      set_front_map(from.front_map());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_difficult()) {
      set_difficult(from.difficult());
    }
    if (from.has_drop_id()) {
      set_drop_id(from.drop_id());
    }
    if (from.has_cost_stamina()) {
      set_cost_stamina(from.cost_stamina());
    }
    if (from.has_drop_middle()) {
      set_drop_middle(from.drop_middle());
    }
    if (from.has_drop_middlenum()) {
      set_drop_middlenum(from.drop_middlenum());
    }
    if (from.has_drop_goblin()) {
      set_drop_goblin(from.drop_goblin());
    }
    if (from.has_drop_goblin_rate()) {
      set_drop_goblin_rate(from.drop_goblin_rate());
    }
    if (from.has_castle_type()) {
      set_castle_type(from.castle_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_star_score()) {
      set_star_score(from.star_score());
    }
    if (from.has_recommond_attack()) {
      set_recommond_attack(from.recommond_attack());
    }
    if (from.has_after_drop_id()) {
      set_after_drop_id(from.after_drop_id());
    }
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_stage_group_id()) {
      set_stage_group_id(from.stage_group_id());
    }
    if (from.has_stage_detail_id()) {
      set_stage_detail_id(from.stage_detail_id());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_first_drop()) {
      set_first_drop(from.first_drop());
    }
    if (from.has_mvp_drop()) {
      set_mvp_drop(from.mvp_drop());
    }
  }
  if (from._has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (from.has_can_well_over()) {
      set_can_well_over(from.can_well_over());
    }
  }
}

void sMapStats::CopyFrom(const sMapStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sMapStats::IsInitialized() const {

  return true;
}

void sMapStats::Swap(sMapStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(numlimit_, other->numlimit_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(ranklimit_, other->ranklimit_);
    weekdaylimit_.Swap(&other->weekdaylimit_);
    std::swap(day_begintime_, other->day_begintime_);
    std::swap(day_endtime_, other->day_endtime_);
    std::swap(front_map_, other->front_map_);
    std::swap(difficult_, other->difficult_);
    std::swap(drop_id_, other->drop_id_);
    std::swap(cost_stamina_, other->cost_stamina_);
    std::swap(drop_middle_, other->drop_middle_);
    std::swap(drop_middlenum_, other->drop_middlenum_);
    std::swap(drop_goblin_, other->drop_goblin_);
    std::swap(drop_goblin_rate_, other->drop_goblin_rate_);
    std::swap(castle_type_, other->castle_type_);
    std::swap(star_score_, other->star_score_);
    std::swap(recommond_attack_, other->recommond_attack_);
    chaos_.Swap(&other->chaos_);
    std::swap(after_drop_id_, other->after_drop_id_);
    std::swap(stage_id_, other->stage_id_);
    std::swap(stage_group_id_, other->stage_group_id_);
    std::swap(stage_detail_id_, other->stage_detail_id_);
    std::swap(percent_, other->percent_);
    chaos_group_.Swap(&other->chaos_group_);
    std::swap(role_, other->role_);
    std::swap(first_drop_, other->first_drop_);
    first_drop_show_.Swap(&other->first_drop_show_);
    first_drop_show_type_.Swap(&other->first_drop_show_type_);
    difficult_percent_.Swap(&other->difficult_percent_);
    difficult_tc_.Swap(&other->difficult_tc_);
    std::swap(mvp_drop_, other->mvp_drop_);
    drop_show_.Swap(&other->drop_show_);
    drop_show_type_.Swap(&other->drop_show_type_);
    std::swap(can_well_over_, other->can_well_over_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sMapStats::GetTypeName() const {
  return "jynetwork.proto.sMapStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sCharExp::kUidFieldNumber;
const int sCharExp::kLvFieldNumber;
const int sCharExp::kExpFieldNumber;
const int sCharExp::kMissionFieldNumber;
#endif  // !_MSC_VER

sCharExp::sCharExp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCharExp::InitAsDefaultInstance() {
}

sCharExp::sCharExp(const sCharExp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCharExp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  lv_ = 0u;
  exp_ = 0u;
  mission_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCharExp::~sCharExp() {
  SharedDtor();
}

void sCharExp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCharExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCharExp& sCharExp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sCharExp* sCharExp::default_instance_ = NULL;

sCharExp* sCharExp::New() const {
  return new sCharExp;
}

void sCharExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    lv_ = 0u;
    exp_ = 0u;
    mission_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCharExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mission;
        break;
      }

      // optional uint32 mission = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_)));
          set_has_mission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCharExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lv(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 mission = 4;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mission(), output);
  }

}

int sCharExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 mission = 4;
    if (has_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCharExp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCharExp*>(&from));
}

void sCharExp::MergeFrom(const sCharExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_mission()) {
      set_mission(from.mission());
    }
  }
}

void sCharExp::CopyFrom(const sCharExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCharExp::IsInitialized() const {

  return true;
}

void sCharExp::Swap(sCharExp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(mission_, other->mission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCharExp::GetTypeName() const {
  return "jynetwork.proto.sCharExp";
}


// ===================================================================

#ifndef _MSC_VER
const int sCharChangeJob::kUidFieldNumber;
const int sCharChangeJob::kStartjobFieldNumber;
const int sCharChangeJob::kEndjobFieldNumber;
const int sCharChangeJob::kGamestateidFieldNumber;
const int sCharChangeJob::kLvlimitFieldNumber;
const int sCharChangeJob::kAttraddpercentFieldNumber;
const int sCharChangeJob::kItemneedFieldNumber;
const int sCharChangeJob::kSkillidFieldNumber;
const int sCharChangeJob::kIconC3BFieldNumber;
#endif  // !_MSC_VER

sCharChangeJob::sCharChangeJob()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCharChangeJob::InitAsDefaultInstance() {
}

sCharChangeJob::sCharChangeJob(const sCharChangeJob& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCharChangeJob::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  startjob_ = 0u;
  endjob_ = 0u;
  gamestateid_ = 0u;
  lvlimit_ = 0u;
  attraddpercent_ = 0u;
  skillid_ = 0u;
  icon_c3b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCharChangeJob::~sCharChangeJob() {
  SharedDtor();
}

void sCharChangeJob::SharedDtor() {
  if (icon_c3b_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_c3b_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCharChangeJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCharChangeJob& sCharChangeJob::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sCharChangeJob* sCharChangeJob::default_instance_ = NULL;

sCharChangeJob* sCharChangeJob::New() const {
  return new sCharChangeJob;
}

void sCharChangeJob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    startjob_ = 0u;
    endjob_ = 0u;
    gamestateid_ = 0u;
    lvlimit_ = 0u;
    attraddpercent_ = 0u;
    skillid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_icon_c3b()) {
      if (icon_c3b_ != &::google::protobuf::internal::kEmptyString) {
        icon_c3b_->clear();
      }
    }
  }
  itemneed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCharChangeJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startjob;
        break;
      }

      // optional uint32 startjob = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startjob_)));
          set_has_startjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endjob;
        break;
      }

      // optional uint32 endjob = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endjob_)));
          set_has_endjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gamestateid;
        break;
      }

      // optional uint32 gamestateid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamestateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestateid_)));
          set_has_gamestateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lvlimit;
        break;
      }

      // optional uint32 lvlimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvlimit_)));
          set_has_lvlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attraddpercent;
        break;
      }

      // optional uint32 attraddpercent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attraddpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attraddpercent_)));
          set_has_attraddpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_itemneed;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem itemneed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemneed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemneed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_itemneed;
        if (input->ExpectTag(64)) goto parse_skillid;
        break;
      }

      // optional uint32 skillid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_icon_c3b;
        break;
      }

      // optional string icon_c3b = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_c3b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_c3b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCharChangeJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 startjob = 2;
  if (has_startjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startjob(), output);
  }

  // optional uint32 endjob = 3;
  if (has_endjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endjob(), output);
  }

  // optional uint32 gamestateid = 4;
  if (has_gamestateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gamestateid(), output);
  }

  // optional uint32 lvlimit = 5;
  if (has_lvlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lvlimit(), output);
  }

  // optional uint32 attraddpercent = 6;
  if (has_attraddpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->attraddpercent(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem itemneed = 7;
  for (int i = 0; i < this->itemneed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->itemneed(i), output);
  }

  // optional uint32 skillid = 8;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->skillid(), output);
  }

  // optional string icon_c3b = 9;
  if (has_icon_c3b()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->icon_c3b(), output);
  }

}

int sCharChangeJob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 startjob = 2;
    if (has_startjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startjob());
    }

    // optional uint32 endjob = 3;
    if (has_endjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endjob());
    }

    // optional uint32 gamestateid = 4;
    if (has_gamestateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestateid());
    }

    // optional uint32 lvlimit = 5;
    if (has_lvlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvlimit());
    }

    // optional uint32 attraddpercent = 6;
    if (has_attraddpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attraddpercent());
    }

    // optional uint32 skillid = 8;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string icon_c3b = 9;
    if (has_icon_c3b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_c3b());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem itemneed = 7;
  total_size += 1 * this->itemneed_size();
  for (int i = 0; i < this->itemneed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemneed(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCharChangeJob::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCharChangeJob*>(&from));
}

void sCharChangeJob::MergeFrom(const sCharChangeJob& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemneed_.MergeFrom(from.itemneed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_startjob()) {
      set_startjob(from.startjob());
    }
    if (from.has_endjob()) {
      set_endjob(from.endjob());
    }
    if (from.has_gamestateid()) {
      set_gamestateid(from.gamestateid());
    }
    if (from.has_lvlimit()) {
      set_lvlimit(from.lvlimit());
    }
    if (from.has_attraddpercent()) {
      set_attraddpercent(from.attraddpercent());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_icon_c3b()) {
      set_icon_c3b(from.icon_c3b());
    }
  }
}

void sCharChangeJob::CopyFrom(const sCharChangeJob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCharChangeJob::IsInitialized() const {

  return true;
}

void sCharChangeJob::Swap(sCharChangeJob* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(startjob_, other->startjob_);
    std::swap(endjob_, other->endjob_);
    std::swap(gamestateid_, other->gamestateid_);
    std::swap(lvlimit_, other->lvlimit_);
    std::swap(attraddpercent_, other->attraddpercent_);
    itemneed_.Swap(&other->itemneed_);
    std::swap(skillid_, other->skillid_);
    std::swap(icon_c3b_, other->icon_c3b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCharChangeJob::GetTypeName() const {
  return "jynetwork.proto.sCharChangeJob";
}


// ===================================================================

#ifndef _MSC_VER
const int sCharLevelUp::kUidFieldNumber;
const int sCharLevelUp::kLevelFieldNumber;
const int sCharLevelUp::kJobFieldNumber;
const int sCharLevelUp::kStrFieldNumber;
const int sCharLevelUp::kAgiFieldNumber;
const int sCharLevelUp::kIntFieldNumber;
const int sCharLevelUp::kVitFieldNumber;
const int sCharLevelUp::kTaskFieldNumber;
#endif  // !_MSC_VER

sCharLevelUp::sCharLevelUp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCharLevelUp::InitAsDefaultInstance() {
}

sCharLevelUp::sCharLevelUp(const sCharLevelUp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCharLevelUp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  level_ = 0u;
  job_ = 0u;
  str__ = 0u;
  agi__ = 0u;
  int__ = 0u;
  vit__ = 0u;
  task_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCharLevelUp::~sCharLevelUp() {
  SharedDtor();
}

void sCharLevelUp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCharLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCharLevelUp& sCharLevelUp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sCharLevelUp* sCharLevelUp::default_instance_ = NULL;

sCharLevelUp* sCharLevelUp::New() const {
  return new sCharLevelUp;
}

void sCharLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    level_ = 0u;
    job_ = 0u;
    str__ = 0u;
    agi__ = 0u;
    int__ = 0u;
    vit__ = 0u;
    task_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCharLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional uint32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_str_;
        break;
      }

      // optional uint32 str_ = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_str_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &str__)));
          set_has_str_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_agi_;
        break;
      }

      // optional uint32 agi_ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agi_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agi__)));
          set_has_agi_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_int_;
        break;
      }

      // optional uint32 int_ = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int__)));
          set_has_int_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vit_;
        break;
      }

      // optional uint32 vit_ = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vit_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vit__)));
          set_has_vit_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_task;
        break;
      }

      // optional uint32 task = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_)));
          set_has_task();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCharLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }

  // optional uint32 str_ = 4;
  if (has_str_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->str_(), output);
  }

  // optional uint32 agi_ = 5;
  if (has_agi_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->agi_(), output);
  }

  // optional uint32 int_ = 6;
  if (has_int_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->int_(), output);
  }

  // optional uint32 vit_ = 7;
  if (has_vit_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->vit_(), output);
  }

  // optional uint32 task = 8;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->task(), output);
  }

}

int sCharLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 str_ = 4;
    if (has_str_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->str_());
    }

    // optional uint32 agi_ = 5;
    if (has_agi_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agi_());
    }

    // optional uint32 int_ = 6;
    if (has_int_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_());
    }

    // optional uint32 vit_ = 7;
    if (has_vit_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vit_());
    }

    // optional uint32 task = 8;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCharLevelUp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCharLevelUp*>(&from));
}

void sCharLevelUp::MergeFrom(const sCharLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_str_()) {
      set_str_(from.str_());
    }
    if (from.has_agi_()) {
      set_agi_(from.agi_());
    }
    if (from.has_int_()) {
      set_int_(from.int_());
    }
    if (from.has_vit_()) {
      set_vit_(from.vit_());
    }
    if (from.has_task()) {
      set_task(from.task());
    }
  }
}

void sCharLevelUp::CopyFrom(const sCharLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCharLevelUp::IsInitialized() const {

  return true;
}

void sCharLevelUp::Swap(sCharLevelUp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(str__, other->str__);
    std::swap(agi__, other->agi__);
    std::swap(int__, other->int__);
    std::swap(vit__, other->vit__);
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCharLevelUp::GetTypeName() const {
  return "jynetwork.proto.sCharLevelUp";
}


// ===================================================================

#ifndef _MSC_VER
const int sCharSkillLevelUp::kUidFieldNumber;
const int sCharSkillLevelUp::kTypeFieldNumber;
const int sCharSkillLevelUp::kLvFieldNumber;
const int sCharSkillLevelUp::kCharlvFieldNumber;
const int sCharSkillLevelUp::kMoneyFieldNumber;
const int sCharSkillLevelUp::kItemidFieldNumber;
const int sCharSkillLevelUp::kItemnumFieldNumber;
#endif  // !_MSC_VER

sCharSkillLevelUp::sCharSkillLevelUp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCharSkillLevelUp::InitAsDefaultInstance() {
}

sCharSkillLevelUp::sCharSkillLevelUp(const sCharSkillLevelUp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCharSkillLevelUp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  type_ = 0u;
  lv_ = 0u;
  charlv_ = 0u;
  money_ = 0u;
  itemid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCharSkillLevelUp::~sCharSkillLevelUp() {
  SharedDtor();
}

void sCharSkillLevelUp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCharSkillLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCharSkillLevelUp& sCharSkillLevelUp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sCharSkillLevelUp* sCharSkillLevelUp::default_instance_ = NULL;

sCharSkillLevelUp* sCharSkillLevelUp::New() const {
  return new sCharSkillLevelUp;
}

void sCharSkillLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    type_ = 0u;
    lv_ = 0u;
    charlv_ = 0u;
    money_ = 0u;
    itemid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCharSkillLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charlv;
        break;
      }

      // optional uint32 charlv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charlv_)));
          set_has_charlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money;
        break;
      }

      // optional uint32 money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_itemnum;
        break;
      }

      // optional uint32 itemnum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCharSkillLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // optional uint32 charlv = 4;
  if (has_charlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charlv(), output);
  }

  // optional uint32 money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->money(), output);
  }

  // optional uint32 itemid = 6;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->itemid(), output);
  }

  // optional uint32 itemnum = 7;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->itemnum(), output);
  }

}

int sCharSkillLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 charlv = 4;
    if (has_charlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charlv());
    }

    // optional uint32 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 itemid = 6;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 itemnum = 7;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCharSkillLevelUp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCharSkillLevelUp*>(&from));
}

void sCharSkillLevelUp::MergeFrom(const sCharSkillLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_charlv()) {
      set_charlv(from.charlv());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
}

void sCharSkillLevelUp::CopyFrom(const sCharSkillLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCharSkillLevelUp::IsInitialized() const {

  return true;
}

void sCharSkillLevelUp::Swap(sCharSkillLevelUp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(lv_, other->lv_);
    std::swap(charlv_, other->charlv_);
    std::swap(money_, other->money_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCharSkillLevelUp::GetTypeName() const {
  return "jynetwork.proto.sCharSkillLevelUp";
}


// ===================================================================

#ifndef _MSC_VER
const int sEquipAttr::kAttrTypeFieldNumber;
const int sEquipAttr::kAttrValueFieldNumber;
#endif  // !_MSC_VER

sEquipAttr::sEquipAttr()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEquipAttr::InitAsDefaultInstance() {
}

sEquipAttr::sEquipAttr(const sEquipAttr& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEquipAttr::SharedCtor() {
  _cached_size_ = 0;
  attr_type_ = 0u;
  attr_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEquipAttr::~sEquipAttr() {
  SharedDtor();
}

void sEquipAttr::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEquipAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEquipAttr& sEquipAttr::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sEquipAttr* sEquipAttr::default_instance_ = NULL;

sEquipAttr* sEquipAttr::New() const {
  return new sEquipAttr;
}

void sEquipAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_type_ = 0u;
    attr_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEquipAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attr_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_type_)));
          set_has_attr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr_value;
        break;
      }

      // optional uint32 attr_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_value_)));
          set_has_attr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEquipAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attr_type = 1;
  if (has_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attr_type(), output);
  }

  // optional uint32 attr_value = 2;
  if (has_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attr_value(), output);
  }

}

int sEquipAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attr_type = 1;
    if (has_attr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_type());
    }

    // optional uint32 attr_value = 2;
    if (has_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEquipAttr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEquipAttr*>(&from));
}

void sEquipAttr::MergeFrom(const sEquipAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_type()) {
      set_attr_type(from.attr_type());
    }
    if (from.has_attr_value()) {
      set_attr_value(from.attr_value());
    }
  }
}

void sEquipAttr::CopyFrom(const sEquipAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEquipAttr::IsInitialized() const {

  return true;
}

void sEquipAttr::Swap(sEquipAttr* other) {
  if (other != this) {
    std::swap(attr_type_, other->attr_type_);
    std::swap(attr_value_, other->attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEquipAttr::GetTypeName() const {
  return "jynetwork.proto.sEquipAttr";
}


// ===================================================================

#ifndef _MSC_VER
const int sEquipIntensify::kUidFieldNumber;
const int sEquipIntensify::kEquipPartFieldNumber;
const int sEquipIntensify::kEquipStarFieldNumber;
const int sEquipIntensify::kLvLimitFieldNumber;
const int sEquipIntensify::kRandAttrCountFieldNumber;
const int sEquipIntensify::kItemneedFieldNumber;
const int sEquipIntensify::kAddpercentFieldNumber;
const int sEquipIntensify::kGoldFieldNumber;
const int sEquipIntensify::kIsGroupFieldNumber;
const int sEquipIntensify::kMaxIntensifyFieldNumber;
const int sEquipIntensify::kEquipColourFieldNumber;
const int sEquipIntensify::kRandomNumberFieldNumber;
const int sEquipIntensify::kRoleFieldNumber;
#endif  // !_MSC_VER

sEquipIntensify::sEquipIntensify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEquipIntensify::InitAsDefaultInstance() {
}

sEquipIntensify::sEquipIntensify(const sEquipIntensify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEquipIntensify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  equip_part_ = 0u;
  equip_star_ = 0u;
  lv_limit_ = 0u;
  rand_attr_count_ = 0u;
  addpercent_ = 0u;
  gold_ = 0u;
  is_group_ = 0u;
  max_intensify_ = 0u;
  equip_colour_ = 0u;
  random_number_ = 0u;
  role_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEquipIntensify::~sEquipIntensify() {
  SharedDtor();
}

void sEquipIntensify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEquipIntensify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEquipIntensify& sEquipIntensify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sEquipIntensify* sEquipIntensify::default_instance_ = NULL;

sEquipIntensify* sEquipIntensify::New() const {
  return new sEquipIntensify;
}

void sEquipIntensify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    equip_part_ = 0u;
    equip_star_ = 0u;
    lv_limit_ = 0u;
    rand_attr_count_ = 0u;
    addpercent_ = 0u;
    gold_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_group_ = 0u;
    max_intensify_ = 0u;
    equip_colour_ = 0u;
    random_number_ = 0u;
    role_ = 0u;
  }
  itemneed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEquipIntensify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_part;
        break;
      }

      // optional uint32 equip_part = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_part_)));
          set_has_equip_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_star;
        break;
      }

      // optional uint32 equip_star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_star_)));
          set_has_equip_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv_limit;
        break;
      }

      // optional uint32 lv_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_limit_)));
          set_has_lv_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rand_attr_count;
        break;
      }

      // optional fixed32 rand_attr_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rand_attr_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rand_attr_count_)));
          set_has_rand_attr_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_itemneed;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem itemneed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemneed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemneed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_itemneed;
        if (input->ExpectTag(56)) goto parse_addpercent;
        break;
      }

      // optional uint32 addpercent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addpercent_)));
          set_has_addpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_group;
        break;
      }

      // optional uint32 is_group = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_group_)));
          set_has_is_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_max_intensify;
        break;
      }

      // optional uint32 max_intensify = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_intensify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_intensify_)));
          set_has_max_intensify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_equip_colour;
        break;
      }

      // optional uint32 equip_colour = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_colour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_colour_)));
          set_has_equip_colour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_random_number;
        break;
      }

      // optional uint32 random_number = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_number_)));
          set_has_random_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_role;
        break;
      }

      // optional uint32 role = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEquipIntensify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 equip_part = 2;
  if (has_equip_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equip_part(), output);
  }

  // optional uint32 equip_star = 3;
  if (has_equip_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equip_star(), output);
  }

  // optional uint32 lv_limit = 4;
  if (has_lv_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv_limit(), output);
  }

  // optional fixed32 rand_attr_count = 5;
  if (has_rand_attr_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rand_attr_count(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem itemneed = 6;
  for (int i = 0; i < this->itemneed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->itemneed(i), output);
  }

  // optional uint32 addpercent = 7;
  if (has_addpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->addpercent(), output);
  }

  // optional uint32 gold = 8;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gold(), output);
  }

  // optional uint32 is_group = 9;
  if (has_is_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->is_group(), output);
  }

  // optional uint32 max_intensify = 10;
  if (has_max_intensify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_intensify(), output);
  }

  // optional uint32 equip_colour = 11;
  if (has_equip_colour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->equip_colour(), output);
  }

  // optional uint32 random_number = 12;
  if (has_random_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->random_number(), output);
  }

  // optional uint32 role = 13;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->role(), output);
  }

}

int sEquipIntensify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 equip_part = 2;
    if (has_equip_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_part());
    }

    // optional uint32 equip_star = 3;
    if (has_equip_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_star());
    }

    // optional uint32 lv_limit = 4;
    if (has_lv_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv_limit());
    }

    // optional fixed32 rand_attr_count = 5;
    if (has_rand_attr_count()) {
      total_size += 1 + 4;
    }

    // optional uint32 addpercent = 7;
    if (has_addpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addpercent());
    }

    // optional uint32 gold = 8;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 is_group = 9;
    if (has_is_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_group());
    }

    // optional uint32 max_intensify = 10;
    if (has_max_intensify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_intensify());
    }

    // optional uint32 equip_colour = 11;
    if (has_equip_colour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_colour());
    }

    // optional uint32 random_number = 12;
    if (has_random_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_number());
    }

    // optional uint32 role = 13;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem itemneed = 6;
  total_size += 1 * this->itemneed_size();
  for (int i = 0; i < this->itemneed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemneed(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEquipIntensify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEquipIntensify*>(&from));
}

void sEquipIntensify::MergeFrom(const sEquipIntensify& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemneed_.MergeFrom(from.itemneed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_equip_part()) {
      set_equip_part(from.equip_part());
    }
    if (from.has_equip_star()) {
      set_equip_star(from.equip_star());
    }
    if (from.has_lv_limit()) {
      set_lv_limit(from.lv_limit());
    }
    if (from.has_rand_attr_count()) {
      set_rand_attr_count(from.rand_attr_count());
    }
    if (from.has_addpercent()) {
      set_addpercent(from.addpercent());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_group()) {
      set_is_group(from.is_group());
    }
    if (from.has_max_intensify()) {
      set_max_intensify(from.max_intensify());
    }
    if (from.has_equip_colour()) {
      set_equip_colour(from.equip_colour());
    }
    if (from.has_random_number()) {
      set_random_number(from.random_number());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
}

void sEquipIntensify::CopyFrom(const sEquipIntensify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEquipIntensify::IsInitialized() const {

  return true;
}

void sEquipIntensify::Swap(sEquipIntensify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(equip_part_, other->equip_part_);
    std::swap(equip_star_, other->equip_star_);
    std::swap(lv_limit_, other->lv_limit_);
    std::swap(rand_attr_count_, other->rand_attr_count_);
    itemneed_.Swap(&other->itemneed_);
    std::swap(addpercent_, other->addpercent_);
    std::swap(gold_, other->gold_);
    std::swap(is_group_, other->is_group_);
    std::swap(max_intensify_, other->max_intensify_);
    std::swap(equip_colour_, other->equip_colour_);
    std::swap(random_number_, other->random_number_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEquipIntensify::GetTypeName() const {
  return "jynetwork.proto.sEquipIntensify";
}


// ===================================================================

#ifndef _MSC_VER
const int sEquipLevelUp::kUidFieldNumber;
const int sEquipLevelUp::kLevelFieldNumber;
const int sEquipLevelUp::kStarFieldNumber;
const int sEquipLevelUp::kExpFieldNumber;
const int sEquipLevelUp::kItemidFieldNumber;
const int sEquipLevelUp::kItemnumFieldNumber;
#endif  // !_MSC_VER

sEquipLevelUp::sEquipLevelUp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEquipLevelUp::InitAsDefaultInstance() {
}

sEquipLevelUp::sEquipLevelUp(const sEquipLevelUp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEquipLevelUp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  level_ = 0u;
  star_ = 0u;
  exp_ = 0u;
  itemid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEquipLevelUp::~sEquipLevelUp() {
  SharedDtor();
}

void sEquipLevelUp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEquipLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEquipLevelUp& sEquipLevelUp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sEquipLevelUp* sEquipLevelUp::default_instance_ = NULL;

sEquipLevelUp* sEquipLevelUp::New() const {
  return new sEquipLevelUp;
}

void sEquipLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    level_ = 0u;
    star_ = 0u;
    exp_ = 0u;
    itemid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEquipLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional uint32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_itemnum;
        break;
      }

      // optional uint32 itemnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEquipLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemid(), output);
  }

  // optional uint32 itemnum = 6;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->itemnum(), output);
  }

}

int sEquipLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 itemnum = 6;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEquipLevelUp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEquipLevelUp*>(&from));
}

void sEquipLevelUp::MergeFrom(const sEquipLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
}

void sEquipLevelUp::CopyFrom(const sEquipLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEquipLevelUp::IsInitialized() const {

  return true;
}

void sEquipLevelUp::Swap(sEquipLevelUp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(exp_, other->exp_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEquipLevelUp::GetTypeName() const {
  return "jynetwork.proto.sEquipLevelUp";
}


// ===================================================================

#ifndef _MSC_VER
const int sEquipStarUp::kUidFieldNumber;
const int sEquipStarUp::kPartFieldNumber;
const int sEquipStarUp::kStarFieldNumber;
const int sEquipStarUp::kIntensifyneedFieldNumber;
const int sEquipStarUp::kLvneedFieldNumber;
const int sEquipStarUp::kAttrnumFieldNumber;
const int sEquipStarUp::kEquipAttrFieldNumber;
#endif  // !_MSC_VER

sEquipStarUp::sEquipStarUp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEquipStarUp::InitAsDefaultInstance() {
}

sEquipStarUp::sEquipStarUp(const sEquipStarUp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEquipStarUp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  part_ = 1;
  star_ = 0u;
  intensifyneed_ = 0u;
  lvneed_ = 0u;
  attrnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEquipStarUp::~sEquipStarUp() {
  SharedDtor();
}

void sEquipStarUp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEquipStarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEquipStarUp& sEquipStarUp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sEquipStarUp* sEquipStarUp::default_instance_ = NULL;

sEquipStarUp* sEquipStarUp::New() const {
  return new sEquipStarUp;
}

void sEquipStarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    part_ = 1;
    star_ = 0u;
    intensifyneed_ = 0u;
    lvneed_ = 0u;
    attrnum_ = 0u;
  }
  equip_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEquipStarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_part;
        break;
      }

      // optional .jynetwork.proto.eQuipPart part = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eQuipPart_IsValid(value)) {
            set_part(static_cast< ::jynetwork::proto::eQuipPart >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional uint32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_intensifyneed;
        break;
      }

      // optional uint32 intensifyneed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensifyneed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensifyneed_)));
          set_has_intensifyneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lvneed;
        break;
      }

      // optional uint32 lvneed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvneed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvneed_)));
          set_has_lvneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attrnum;
        break;
      }

      // optional uint32 attrnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrnum_)));
          set_has_attrnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equip_attr;
        break;
      }

      // repeated .jynetwork.proto.sEquipAttr equip_attr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equip_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEquipStarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .jynetwork.proto.eQuipPart part = 2;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->part(), output);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  // optional uint32 intensifyneed = 4;
  if (has_intensifyneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->intensifyneed(), output);
  }

  // optional uint32 lvneed = 5;
  if (has_lvneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lvneed(), output);
  }

  // optional uint32 attrnum = 6;
  if (has_attrnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->attrnum(), output);
  }

  // repeated .jynetwork.proto.sEquipAttr equip_attr = 7;
  for (int i = 0; i < this->equip_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->equip_attr(i), output);
  }

}

int sEquipStarUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .jynetwork.proto.eQuipPart part = 2;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->part());
    }

    // optional uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 intensifyneed = 4;
    if (has_intensifyneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensifyneed());
    }

    // optional uint32 lvneed = 5;
    if (has_lvneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvneed());
    }

    // optional uint32 attrnum = 6;
    if (has_attrnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrnum());
    }

  }
  // repeated .jynetwork.proto.sEquipAttr equip_attr = 7;
  total_size += 1 * this->equip_attr_size();
  for (int i = 0; i < this->equip_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_attr(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEquipStarUp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEquipStarUp*>(&from));
}

void sEquipStarUp::MergeFrom(const sEquipStarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_attr_.MergeFrom(from.equip_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_part()) {
      set_part(from.part());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_intensifyneed()) {
      set_intensifyneed(from.intensifyneed());
    }
    if (from.has_lvneed()) {
      set_lvneed(from.lvneed());
    }
    if (from.has_attrnum()) {
      set_attrnum(from.attrnum());
    }
  }
}

void sEquipStarUp::CopyFrom(const sEquipStarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEquipStarUp::IsInitialized() const {

  return true;
}

void sEquipStarUp::Swap(sEquipStarUp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(part_, other->part_);
    std::swap(star_, other->star_);
    std::swap(intensifyneed_, other->intensifyneed_);
    std::swap(lvneed_, other->lvneed_);
    std::swap(attrnum_, other->attrnum_);
    equip_attr_.Swap(&other->equip_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEquipStarUp::GetTypeName() const {
  return "jynetwork.proto.sEquipStarUp";
}


// ===================================================================

#ifndef _MSC_VER
const int sCardIntensify::kUidFieldNumber;
const int sCardIntensify::kCardidFieldNumber;
const int sCardIntensify::kCardjobFieldNumber;
const int sCardIntensify::kIntensifyFieldNumber;
const int sCardIntensify::kStrFieldNumber;
const int sCardIntensify::kAgiFieldNumber;
const int sCardIntensify::kIntFieldNumber;
const int sCardIntensify::kVitFieldNumber;
const int sCardIntensify::kItemneedFieldNumber;
#endif  // !_MSC_VER

sCardIntensify::sCardIntensify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCardIntensify::InitAsDefaultInstance() {
}

sCardIntensify::sCardIntensify(const sCardIntensify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCardIntensify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  cardid_ = 0u;
  cardjob_ = 0u;
  intensify_ = 0u;
  str__ = 0u;
  agi__ = 0u;
  int__ = 0u;
  vit__ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCardIntensify::~sCardIntensify() {
  SharedDtor();
}

void sCardIntensify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCardIntensify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCardIntensify& sCardIntensify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sCardIntensify* sCardIntensify::default_instance_ = NULL;

sCardIntensify* sCardIntensify::New() const {
  return new sCardIntensify;
}

void sCardIntensify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    cardid_ = 0u;
    cardjob_ = 0u;
    intensify_ = 0u;
    str__ = 0u;
    agi__ = 0u;
    int__ = 0u;
    vit__ = 0u;
  }
  itemneed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCardIntensify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardid;
        break;
      }

      // optional uint32 cardid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cardjob;
        break;
      }

      // optional uint32 cardjob = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardjob_)));
          set_has_cardjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_intensify;
        break;
      }

      // optional uint32 intensify = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensify_)));
          set_has_intensify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_str_;
        break;
      }

      // optional uint32 str_ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_str_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &str__)));
          set_has_str_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_agi_;
        break;
      }

      // optional uint32 agi_ = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agi_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agi__)));
          set_has_agi_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_int_;
        break;
      }

      // optional uint32 int_ = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int__)));
          set_has_int_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vit_;
        break;
      }

      // optional uint32 vit_ = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vit_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vit__)));
          set_has_vit_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_itemneed;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem itemneed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemneed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemneed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_itemneed;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCardIntensify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 cardid = 2;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cardid(), output);
  }

  // optional uint32 cardjob = 3;
  if (has_cardjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cardjob(), output);
  }

  // optional uint32 intensify = 4;
  if (has_intensify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->intensify(), output);
  }

  // optional uint32 str_ = 5;
  if (has_str_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->str_(), output);
  }

  // optional uint32 agi_ = 6;
  if (has_agi_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->agi_(), output);
  }

  // optional uint32 int_ = 7;
  if (has_int_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->int_(), output);
  }

  // optional uint32 vit_ = 8;
  if (has_vit_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vit_(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem itemneed = 9;
  for (int i = 0; i < this->itemneed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->itemneed(i), output);
  }

}

int sCardIntensify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 cardid = 2;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }

    // optional uint32 cardjob = 3;
    if (has_cardjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardjob());
    }

    // optional uint32 intensify = 4;
    if (has_intensify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensify());
    }

    // optional uint32 str_ = 5;
    if (has_str_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->str_());
    }

    // optional uint32 agi_ = 6;
    if (has_agi_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agi_());
    }

    // optional uint32 int_ = 7;
    if (has_int_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_());
    }

    // optional uint32 vit_ = 8;
    if (has_vit_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vit_());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem itemneed = 9;
  total_size += 1 * this->itemneed_size();
  for (int i = 0; i < this->itemneed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemneed(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCardIntensify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCardIntensify*>(&from));
}

void sCardIntensify::MergeFrom(const sCardIntensify& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemneed_.MergeFrom(from.itemneed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_cardjob()) {
      set_cardjob(from.cardjob());
    }
    if (from.has_intensify()) {
      set_intensify(from.intensify());
    }
    if (from.has_str_()) {
      set_str_(from.str_());
    }
    if (from.has_agi_()) {
      set_agi_(from.agi_());
    }
    if (from.has_int_()) {
      set_int_(from.int_());
    }
    if (from.has_vit_()) {
      set_vit_(from.vit_());
    }
  }
}

void sCardIntensify::CopyFrom(const sCardIntensify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCardIntensify::IsInitialized() const {

  return true;
}

void sCardIntensify::Swap(sCardIntensify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cardid_, other->cardid_);
    std::swap(cardjob_, other->cardjob_);
    std::swap(intensify_, other->intensify_);
    std::swap(str__, other->str__);
    std::swap(agi__, other->agi__);
    std::swap(int__, other->int__);
    std::swap(vit__, other->vit__);
    itemneed_.Swap(&other->itemneed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCardIntensify::GetTypeName() const {
  return "jynetwork.proto.sCardIntensify";
}


// ===================================================================

#ifndef _MSC_VER
const int sCardLevelUp::kUidFieldNumber;
const int sCardLevelUp::kJobFieldNumber;
const int sCardLevelUp::kLevelFieldNumber;
const int sCardLevelUp::kExpFieldNumber;
const int sCardLevelUp::kStrFieldNumber;
const int sCardLevelUp::kAgiFieldNumber;
const int sCardLevelUp::kIntFieldNumber;
const int sCardLevelUp::kVitFieldNumber;
#endif  // !_MSC_VER

sCardLevelUp::sCardLevelUp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCardLevelUp::InitAsDefaultInstance() {
}

sCardLevelUp::sCardLevelUp(const sCardLevelUp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCardLevelUp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  job_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  str__ = 0u;
  agi__ = 0u;
  int__ = 0u;
  vit__ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCardLevelUp::~sCardLevelUp() {
  SharedDtor();
}

void sCardLevelUp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCardLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCardLevelUp& sCardLevelUp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sCardLevelUp* sCardLevelUp::default_instance_ = NULL;

sCardLevelUp* sCardLevelUp::New() const {
  return new sCardLevelUp;
}

void sCardLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    job_ = 0u;
    level_ = 0u;
    exp_ = 0u;
    str__ = 0u;
    agi__ = 0u;
    int__ = 0u;
    vit__ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCardLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }

      // optional uint32 job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_str_;
        break;
      }

      // optional uint32 str_ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_str_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &str__)));
          set_has_str_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_agi_;
        break;
      }

      // optional uint32 agi_ = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agi_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agi__)));
          set_has_agi_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_int_;
        break;
      }

      // optional uint32 int_ = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int__)));
          set_has_int_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vit_;
        break;
      }

      // optional uint32 vit_ = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vit_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vit__)));
          set_has_vit_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCardLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->job(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 str_ = 5;
  if (has_str_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->str_(), output);
  }

  // optional uint32 agi_ = 6;
  if (has_agi_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->agi_(), output);
  }

  // optional uint32 int_ = 7;
  if (has_int_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->int_(), output);
  }

  // optional uint32 vit_ = 8;
  if (has_vit_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vit_(), output);
  }

}

int sCardLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 str_ = 5;
    if (has_str_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->str_());
    }

    // optional uint32 agi_ = 6;
    if (has_agi_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agi_());
    }

    // optional uint32 int_ = 7;
    if (has_int_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_());
    }

    // optional uint32 vit_ = 8;
    if (has_vit_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vit_());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCardLevelUp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCardLevelUp*>(&from));
}

void sCardLevelUp::MergeFrom(const sCardLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_str_()) {
      set_str_(from.str_());
    }
    if (from.has_agi_()) {
      set_agi_(from.agi_());
    }
    if (from.has_int_()) {
      set_int_(from.int_());
    }
    if (from.has_vit_()) {
      set_vit_(from.vit_());
    }
  }
}

void sCardLevelUp::CopyFrom(const sCardLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCardLevelUp::IsInitialized() const {

  return true;
}

void sCardLevelUp::Swap(sCardLevelUp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(job_, other->job_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(str__, other->str__);
    std::swap(agi__, other->agi__);
    std::swap(int__, other->int__);
    std::swap(vit__, other->vit__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCardLevelUp::GetTypeName() const {
  return "jynetwork.proto.sCardLevelUp";
}


// ===================================================================

#ifndef _MSC_VER
const int sCardStarUp::kUidFieldNumber;
const int sCardStarUp::kStarneedFieldNumber;
const int sCardStarUp::kLvneedFieldNumber;
const int sCardStarUp::kSkillnumFieldNumber;
const int sCardStarUp::kAttrpercentFieldNumber;
#endif  // !_MSC_VER

sCardStarUp::sCardStarUp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCardStarUp::InitAsDefaultInstance() {
}

sCardStarUp::sCardStarUp(const sCardStarUp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCardStarUp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  starneed_ = 0u;
  lvneed_ = 0u;
  skillnum_ = 0u;
  attrpercent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCardStarUp::~sCardStarUp() {
  SharedDtor();
}

void sCardStarUp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCardStarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCardStarUp& sCardStarUp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sCardStarUp* sCardStarUp::default_instance_ = NULL;

sCardStarUp* sCardStarUp::New() const {
  return new sCardStarUp;
}

void sCardStarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    starneed_ = 0u;
    lvneed_ = 0u;
    skillnum_ = 0u;
    attrpercent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCardStarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_starneed;
        break;
      }

      // optional uint32 starneed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starneed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starneed_)));
          set_has_starneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lvneed;
        break;
      }

      // optional uint32 lvneed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvneed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvneed_)));
          set_has_lvneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillnum;
        break;
      }

      // optional uint32 skillnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillnum_)));
          set_has_skillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attrpercent;
        break;
      }

      // optional uint32 attrpercent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrpercent_)));
          set_has_attrpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCardStarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 starneed = 2;
  if (has_starneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starneed(), output);
  }

  // optional uint32 lvneed = 3;
  if (has_lvneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lvneed(), output);
  }

  // optional uint32 skillnum = 4;
  if (has_skillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillnum(), output);
  }

  // optional uint32 attrpercent = 5;
  if (has_attrpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attrpercent(), output);
  }

}

int sCardStarUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 starneed = 2;
    if (has_starneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starneed());
    }

    // optional uint32 lvneed = 3;
    if (has_lvneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvneed());
    }

    // optional uint32 skillnum = 4;
    if (has_skillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillnum());
    }

    // optional uint32 attrpercent = 5;
    if (has_attrpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrpercent());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCardStarUp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCardStarUp*>(&from));
}

void sCardStarUp::MergeFrom(const sCardStarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_starneed()) {
      set_starneed(from.starneed());
    }
    if (from.has_lvneed()) {
      set_lvneed(from.lvneed());
    }
    if (from.has_skillnum()) {
      set_skillnum(from.skillnum());
    }
    if (from.has_attrpercent()) {
      set_attrpercent(from.attrpercent());
    }
  }
}

void sCardStarUp::CopyFrom(const sCardStarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCardStarUp::IsInitialized() const {

  return true;
}

void sCardStarUp::Swap(sCardStarUp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(starneed_, other->starneed_);
    std::swap(lvneed_, other->lvneed_);
    std::swap(skillnum_, other->skillnum_);
    std::swap(attrpercent_, other->attrpercent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCardStarUp::GetTypeName() const {
  return "jynetwork.proto.sCardStarUp";
}


// ===================================================================

#ifndef _MSC_VER
const int sShopItem::kUidFieldNumber;
const int sShopItem::kShopidFieldNumber;
const int sShopItem::kItemidFieldNumber;
const int sShopItem::kIconnameFieldNumber;
const int sShopItem::kResourceFieldNumber;
const int sShopItem::kTcLvFieldNumber;
const int sShopItem::kItemnumFieldNumber;
const int sShopItem::kShoplabelFieldNumber;
const int sShopItem::kShoporderFieldNumber;
const int sShopItem::kPecentageFieldNumber;
const int sShopItem::kMoneytypeFieldNumber;
const int sShopItem::kMoneyFieldNumber;
const int sShopItem::kOnsaleFieldNumber;
const int sShopItem::kBuylimittypeFieldNumber;
const int sShopItem::kBuylimitvalueFieldNumber;
const int sShopItem::kBuylimittimeFieldNumber;
const int sShopItem::kBulimitnumFieldNumber;
const int sShopItem::kBonus1FieldNumber;
const int sShopItem::kBonus2FieldNumber;
const int sShopItem::kBonusname1FieldNumber;
const int sShopItem::kBonusname2FieldNumber;
#endif  // !_MSC_VER

sShopItem::sShopItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sShopItem::InitAsDefaultInstance() {
}

sShopItem::sShopItem(const sShopItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sShopItem::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  shopid_ = 0u;
  iconname_ = 0u;
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tc_lv_ = 0u;
  shoplabel_ = 0u;
  shoporder_ = 0u;
  pecentage_ = 0u;
  onsale_ = 0u;
  buylimittype_ = 0u;
  buylimitvalue_ = 0u;
  buylimittime_ = 0u;
  bulimitnum_ = 0u;
  bonus1_ = 0u;
  bonus2_ = 0u;
  bonusname1_ = 0u;
  bonusname2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sShopItem::~sShopItem() {
  SharedDtor();
}

void sShopItem::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sShopItem& sShopItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sShopItem* sShopItem::default_instance_ = NULL;

sShopItem* sShopItem::New() const {
  return new sShopItem;
}

void sShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    shopid_ = 0u;
    iconname_ = 0u;
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    tc_lv_ = 0u;
    shoplabel_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    shoporder_ = 0u;
    pecentage_ = 0u;
    onsale_ = 0u;
    buylimittype_ = 0u;
    buylimitvalue_ = 0u;
    buylimittime_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bulimitnum_ = 0u;
    bonus1_ = 0u;
    bonus2_ = 0u;
    bonusname1_ = 0u;
    bonusname2_ = 0u;
  }
  itemid_.Clear();
  itemnum_.Clear();
  moneytype_.Clear();
  money_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shopid;
        break;
      }

      // optional uint32 shopid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // repeated uint32 itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        if (input->ExpectTag(32)) goto parse_iconname;
        break;
      }

      // optional uint32 iconname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iconname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iconname_)));
          set_has_iconname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resource;
        break;
      }

      // optional bytes resource = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tc_lv;
        break;
      }

      // optional uint32 tc_lv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tc_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tc_lv_)));
          set_has_tc_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_itemnum;
        break;
      }

      // repeated uint32 itemnum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_itemnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_itemnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_itemnum;
        if (input->ExpectTag(64)) goto parse_shoplabel;
        break;
      }

      // optional uint32 shoplabel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoplabel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoplabel_)));
          set_has_shoplabel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_shoporder;
        break;
      }

      // optional uint32 shoporder = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoporder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoporder_)));
          set_has_shoporder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pecentage;
        break;
      }

      // optional uint32 pecentage = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pecentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pecentage_)));
          set_has_pecentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_moneytype;
        break;
      }

      // repeated uint32 moneytype = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_moneytype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_moneytype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_moneytype;
        if (input->ExpectTag(101)) goto parse_money;
        break;
      }

      // repeated float money = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 101, input, this->mutable_money())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_money())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_money;
        if (input->ExpectTag(104)) goto parse_onsale;
        break;
      }

      // optional uint32 onsale = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onsale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onsale_)));
          set_has_onsale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_buylimittype;
        break;
      }

      // optional uint32 buylimittype = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buylimittype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buylimittype_)));
          set_has_buylimittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_buylimitvalue;
        break;
      }

      // optional uint32 buylimitvalue = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buylimitvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buylimitvalue_)));
          set_has_buylimitvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_buylimittime;
        break;
      }

      // optional uint32 buylimittime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buylimittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buylimittime_)));
          set_has_buylimittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bulimitnum;
        break;
      }

      // optional uint32 bulimitnum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulimitnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulimitnum_)));
          set_has_bulimitnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_bonus1;
        break;
      }

      // optional uint32 bonus1 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus1_)));
          set_has_bonus1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_bonus2;
        break;
      }

      // optional uint32 bonus2 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus2_)));
          set_has_bonus2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bonusname1;
        break;
      }

      // optional uint32 bonusname1 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonusname1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonusname1_)));
          set_has_bonusname1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_bonusname2;
        break;
      }

      // optional uint32 bonusname2 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonusname2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonusname2_)));
          set_has_bonusname2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 shopid = 2;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shopid(), output);
  }

  // repeated uint32 itemid = 3;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->itemid(i), output);
  }

  // optional uint32 iconname = 4;
  if (has_iconname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->iconname(), output);
  }

  // optional bytes resource = 5;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->resource(), output);
  }

  // optional uint32 tc_lv = 6;
  if (has_tc_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tc_lv(), output);
  }

  // repeated uint32 itemnum = 7;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->itemnum(i), output);
  }

  // optional uint32 shoplabel = 8;
  if (has_shoplabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->shoplabel(), output);
  }

  // optional uint32 shoporder = 9;
  if (has_shoporder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->shoporder(), output);
  }

  // optional uint32 pecentage = 10;
  if (has_pecentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pecentage(), output);
  }

  // repeated uint32 moneytype = 11;
  for (int i = 0; i < this->moneytype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->moneytype(i), output);
  }

  // repeated float money = 12;
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      12, this->money(i), output);
  }

  // optional uint32 onsale = 13;
  if (has_onsale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->onsale(), output);
  }

  // optional uint32 buylimittype = 14;
  if (has_buylimittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->buylimittype(), output);
  }

  // optional uint32 buylimitvalue = 15;
  if (has_buylimitvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->buylimitvalue(), output);
  }

  // optional uint32 buylimittime = 16;
  if (has_buylimittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->buylimittime(), output);
  }

  // optional uint32 bulimitnum = 17;
  if (has_bulimitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->bulimitnum(), output);
  }

  // optional uint32 bonus1 = 18;
  if (has_bonus1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->bonus1(), output);
  }

  // optional uint32 bonus2 = 19;
  if (has_bonus2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->bonus2(), output);
  }

  // optional uint32 bonusname1 = 20;
  if (has_bonusname1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->bonusname1(), output);
  }

  // optional uint32 bonusname2 = 21;
  if (has_bonusname2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->bonusname2(), output);
  }

}

int sShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 shopid = 2;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

    // optional uint32 iconname = 4;
    if (has_iconname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iconname());
    }

    // optional bytes resource = 5;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resource());
    }

    // optional uint32 tc_lv = 6;
    if (has_tc_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tc_lv());
    }

    // optional uint32 shoplabel = 8;
    if (has_shoplabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoplabel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 shoporder = 9;
    if (has_shoporder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoporder());
    }

    // optional uint32 pecentage = 10;
    if (has_pecentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pecentage());
    }

    // optional uint32 onsale = 13;
    if (has_onsale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onsale());
    }

    // optional uint32 buylimittype = 14;
    if (has_buylimittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buylimittype());
    }

    // optional uint32 buylimitvalue = 15;
    if (has_buylimitvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buylimitvalue());
    }

    // optional uint32 buylimittime = 16;
    if (has_buylimittime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buylimittime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 bulimitnum = 17;
    if (has_bulimitnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulimitnum());
    }

    // optional uint32 bonus1 = 18;
    if (has_bonus1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus1());
    }

    // optional uint32 bonus2 = 19;
    if (has_bonus2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus2());
    }

    // optional uint32 bonusname1 = 20;
    if (has_bonusname1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonusname1());
    }

    // optional uint32 bonusname2 = 21;
    if (has_bonusname2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonusname2());
    }

  }
  // repeated uint32 itemid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated uint32 itemnum = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }

  // repeated uint32 moneytype = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->moneytype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->moneytype(i));
    }
    total_size += 1 * this->moneytype_size() + data_size;
  }

  // repeated float money = 12;
  {
    int data_size = 0;
    data_size = 4 * this->money_size();
    total_size += 1 * this->money_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sShopItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sShopItem*>(&from));
}

void sShopItem::MergeFrom(const sShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itemnum_.MergeFrom(from.itemnum_);
  moneytype_.MergeFrom(from.moneytype_);
  money_.MergeFrom(from.money_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_iconname()) {
      set_iconname(from.iconname());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_tc_lv()) {
      set_tc_lv(from.tc_lv());
    }
    if (from.has_shoplabel()) {
      set_shoplabel(from.shoplabel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shoporder()) {
      set_shoporder(from.shoporder());
    }
    if (from.has_pecentage()) {
      set_pecentage(from.pecentage());
    }
    if (from.has_onsale()) {
      set_onsale(from.onsale());
    }
    if (from.has_buylimittype()) {
      set_buylimittype(from.buylimittype());
    }
    if (from.has_buylimitvalue()) {
      set_buylimitvalue(from.buylimitvalue());
    }
    if (from.has_buylimittime()) {
      set_buylimittime(from.buylimittime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bulimitnum()) {
      set_bulimitnum(from.bulimitnum());
    }
    if (from.has_bonus1()) {
      set_bonus1(from.bonus1());
    }
    if (from.has_bonus2()) {
      set_bonus2(from.bonus2());
    }
    if (from.has_bonusname1()) {
      set_bonusname1(from.bonusname1());
    }
    if (from.has_bonusname2()) {
      set_bonusname2(from.bonusname2());
    }
  }
}

void sShopItem::CopyFrom(const sShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sShopItem::IsInitialized() const {

  return true;
}

void sShopItem::Swap(sShopItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(shopid_, other->shopid_);
    itemid_.Swap(&other->itemid_);
    std::swap(iconname_, other->iconname_);
    std::swap(resource_, other->resource_);
    std::swap(tc_lv_, other->tc_lv_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(shoplabel_, other->shoplabel_);
    std::swap(shoporder_, other->shoporder_);
    std::swap(pecentage_, other->pecentage_);
    moneytype_.Swap(&other->moneytype_);
    money_.Swap(&other->money_);
    std::swap(onsale_, other->onsale_);
    std::swap(buylimittype_, other->buylimittype_);
    std::swap(buylimitvalue_, other->buylimitvalue_);
    std::swap(buylimittime_, other->buylimittime_);
    std::swap(bulimitnum_, other->bulimitnum_);
    std::swap(bonus1_, other->bonus1_);
    std::swap(bonus2_, other->bonus2_);
    std::swap(bonusname1_, other->bonusname1_);
    std::swap(bonusname2_, other->bonusname2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sShopItem::GetTypeName() const {
  return "jynetwork.proto.sShopItem";
}


// ===================================================================

#ifndef _MSC_VER
const int sTaskStats::kUidFieldNumber;
const int sTaskStats::kTaskTypeFieldNumber;
const int sTaskStats::kTaskVarFieldNumber;
const int sTaskStats::kTaskNameFieldNumber;
const int sTaskStats::kTaskNameIdFieldNumber;
const int sTaskStats::kLvMinFieldNumber;
const int sTaskStats::kLvMaxFieldNumber;
const int sTaskStats::kBeginTimeFieldNumber;
const int sTaskStats::kEndTimeFieldNumber;
const int sTaskStats::kJobFieldNumber;
const int sTaskStats::kFlotaskFieldNumber;
const int sTaskStats::kTaskFinishTypeFieldNumber;
const int sTaskStats::kTaskFinishVar1FieldNumber;
const int sTaskStats::kTaskFinishVar2FieldNumber;
const int sTaskStats::kTraceTypeFieldNumber;
const int sTaskStats::kTraceIdFieldNumber;
const int sTaskStats::kTaskDescFieldNumber;
const int sTaskStats::kTaskDescIdFieldNumber;
const int sTaskStats::kItemRewardFieldNumber;
const int sTaskStats::kTaskFinishVar3FieldNumber;
const int sTaskStats::kIconNameFieldNumber;
const int sTaskStats::kTcLvFieldNumber;
const int sTaskStats::kIsGuideFieldNumber;
const int sTaskStats::kGuideIdFieldNumber;
const int sTaskStats::kGuideValueFieldNumber;
const int sTaskStats::kFlotask2FieldNumber;
const int sTaskStats::kBeginDateFieldNumber;
const int sTaskStats::kEndDateFieldNumber;
const int sTaskStats::kFlotask3FieldNumber;
const int sTaskStats::kPretaskFieldNumber;
const int sTaskStats::kStartVarFieldNumber;
const int sTaskStats::kTaskOrderFieldNumber;
#endif  // !_MSC_VER

sTaskStats::sTaskStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sTaskStats::InitAsDefaultInstance() {
}

sTaskStats::sTaskStats(const sTaskStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sTaskStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  task_type_ = 1;
  task_var_ = 0u;
  task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_name_id_ = 0u;
  lv_min_ = 0u;
  lv_max_ = 0u;
  begin_time_ = 0u;
  end_time_ = 0u;
  job_ = 0u;
  flotask_ = 0u;
  task_finish_type_ = 0;
  task_finish_var1_ = 0u;
  task_finish_var2_ = 0u;
  trace_type_ = 0u;
  trace_id_ = 0u;
  task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_desc_id_ = 0u;
  task_finish_var3_ = 0u;
  iconname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tc_lv_ = 0u;
  is_guide_ = 0u;
  guide_id_ = 0u;
  guide_value_ = 0u;
  flotask2_ = 0u;
  begin_date_ = 0u;
  end_date_ = 0u;
  flotask3_ = 0u;
  pretask_ = 0u;
  start_var_ = 0u;
  task_order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sTaskStats::~sTaskStats() {
  SharedDtor();
}

void sTaskStats::SharedDtor() {
  if (task_name_ != &::google::protobuf::internal::kEmptyString) {
    delete task_name_;
  }
  if (task_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete task_desc_;
  }
  if (iconname_ != &::google::protobuf::internal::kEmptyString) {
    delete iconname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sTaskStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sTaskStats& sTaskStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sTaskStats* sTaskStats::default_instance_ = NULL;

sTaskStats* sTaskStats::New() const {
  return new sTaskStats;
}

void sTaskStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    task_type_ = 1;
    task_var_ = 0u;
    if (has_task_name()) {
      if (task_name_ != &::google::protobuf::internal::kEmptyString) {
        task_name_->clear();
      }
    }
    task_name_id_ = 0u;
    lv_min_ = 0u;
    lv_max_ = 0u;
    begin_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    end_time_ = 0u;
    job_ = 0u;
    flotask_ = 0u;
    task_finish_type_ = 0;
    task_finish_var1_ = 0u;
    task_finish_var2_ = 0u;
    trace_type_ = 0u;
    trace_id_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_task_desc()) {
      if (task_desc_ != &::google::protobuf::internal::kEmptyString) {
        task_desc_->clear();
      }
    }
    task_desc_id_ = 0u;
    task_finish_var3_ = 0u;
    if (has_iconname()) {
      if (iconname_ != &::google::protobuf::internal::kEmptyString) {
        iconname_->clear();
      }
    }
    tc_lv_ = 0u;
    is_guide_ = 0u;
    guide_id_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    guide_value_ = 0u;
    flotask2_ = 0u;
    begin_date_ = 0u;
    end_date_ = 0u;
    flotask3_ = 0u;
    pretask_ = 0u;
    start_var_ = 0u;
    task_order_ = 0u;
  }
  item_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sTaskStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_type;
        break;
      }

      // optional .jynetwork.proto.eTaskType task_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eTaskType_IsValid(value)) {
            set_task_type(static_cast< ::jynetwork::proto::eTaskType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_var;
        break;
      }

      // optional uint32 task_var = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_var_)));
          set_has_task_var();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task_name;
        break;
      }

      // optional bytes task_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_task_name_id;
        break;
      }

      // optional uint32 task_name_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_name_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_name_id_)));
          set_has_task_name_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lv_min;
        break;
      }

      // optional uint32 lv_min = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_min_)));
          set_has_lv_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lv_max;
        break;
      }

      // optional uint32 lv_max = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_max_)));
          set_has_lv_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_begin_time;
        break;
      }

      // optional uint32 begin_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_end_time;
        break;
      }

      // optional uint32 end_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_job;
        break;
      }

      // optional uint32 job = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_flotask;
        break;
      }

      // optional uint32 flotask = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flotask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flotask_)));
          set_has_flotask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_task_finish_type;
        break;
      }

      // optional .jynetwork.proto.eTaskFinishType task_finish_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_finish_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eTaskFinishType_IsValid(value)) {
            set_task_finish_type(static_cast< ::jynetwork::proto::eTaskFinishType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_task_finish_var1;
        break;
      }

      // optional uint32 task_finish_var1 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_finish_var1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_finish_var1_)));
          set_has_task_finish_var1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_task_finish_var2;
        break;
      }

      // optional uint32 task_finish_var2 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_finish_var2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_finish_var2_)));
          set_has_task_finish_var2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_trace_type;
        break;
      }

      // optional uint32 trace_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trace_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trace_type_)));
          set_has_trace_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_trace_id;
        break;
      }

      // optional uint32 trace_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trace_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trace_id_)));
          set_has_trace_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_task_desc;
        break;
      }

      // optional bytes task_desc = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_task_desc_id;
        break;
      }

      // optional uint32 task_desc_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_desc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_desc_id_)));
          set_has_task_desc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_item_reward;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem item_reward = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_item_reward;
        if (input->ExpectTag(160)) goto parse_task_finish_var3;
        break;
      }

      // optional uint32 task_finish_var3 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_finish_var3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_finish_var3_)));
          set_has_task_finish_var3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_iconName;
        break;
      }

      // optional bytes iconName = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iconName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iconname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_tc_lv;
        break;
      }

      // optional uint32 tc_lv = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tc_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tc_lv_)));
          set_has_tc_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_is_guide;
        break;
      }

      // optional uint32 is_guide = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_guide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_guide_)));
          set_has_is_guide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_guide_id;
        break;
      }

      // optional uint32 guide_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guide_id_)));
          set_has_guide_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_guide_value;
        break;
      }

      // optional uint32 guide_value = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guide_value_)));
          set_has_guide_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_flotask2;
        break;
      }

      // optional uint32 flotask2 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flotask2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flotask2_)));
          set_has_flotask2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_begin_date;
        break;
      }

      // optional uint32 begin_date = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_date_)));
          set_has_begin_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_end_date;
        break;
      }

      // optional uint32 end_date = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_date_)));
          set_has_end_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_flotask3;
        break;
      }

      // optional uint32 flotask3 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flotask3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flotask3_)));
          set_has_flotask3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_pretask;
        break;
      }

      // optional uint32 pretask = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pretask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pretask_)));
          set_has_pretask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_start_var;
        break;
      }

      // optional uint32 start_var = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_var_)));
          set_has_start_var();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_task_order;
        break;
      }

      // optional uint32 task_order = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_order_)));
          set_has_task_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sTaskStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .jynetwork.proto.eTaskType task_type = 2;
  if (has_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->task_type(), output);
  }

  // optional uint32 task_var = 3;
  if (has_task_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_var(), output);
  }

  // optional bytes task_name = 4;
  if (has_task_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->task_name(), output);
  }

  // optional uint32 task_name_id = 5;
  if (has_task_name_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->task_name_id(), output);
  }

  // optional uint32 lv_min = 6;
  if (has_lv_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lv_min(), output);
  }

  // optional uint32 lv_max = 7;
  if (has_lv_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lv_max(), output);
  }

  // optional uint32 begin_time = 8;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->begin_time(), output);
  }

  // optional uint32 end_time = 9;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->end_time(), output);
  }

  // optional uint32 job = 10;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->job(), output);
  }

  // optional uint32 flotask = 11;
  if (has_flotask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->flotask(), output);
  }

  // optional .jynetwork.proto.eTaskFinishType task_finish_type = 12;
  if (has_task_finish_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->task_finish_type(), output);
  }

  // optional uint32 task_finish_var1 = 13;
  if (has_task_finish_var1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->task_finish_var1(), output);
  }

  // optional uint32 task_finish_var2 = 14;
  if (has_task_finish_var2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->task_finish_var2(), output);
  }

  // optional uint32 trace_type = 15;
  if (has_trace_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->trace_type(), output);
  }

  // optional uint32 trace_id = 16;
  if (has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->trace_id(), output);
  }

  // optional bytes task_desc = 17;
  if (has_task_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->task_desc(), output);
  }

  // optional uint32 task_desc_id = 18;
  if (has_task_desc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->task_desc_id(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem item_reward = 19;
  for (int i = 0; i < this->item_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->item_reward(i), output);
  }

  // optional uint32 task_finish_var3 = 20;
  if (has_task_finish_var3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->task_finish_var3(), output);
  }

  // optional bytes iconName = 21;
  if (has_iconname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      21, this->iconname(), output);
  }

  // optional uint32 tc_lv = 22;
  if (has_tc_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->tc_lv(), output);
  }

  // optional uint32 is_guide = 23;
  if (has_is_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->is_guide(), output);
  }

  // optional uint32 guide_id = 24;
  if (has_guide_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->guide_id(), output);
  }

  // optional uint32 guide_value = 25;
  if (has_guide_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->guide_value(), output);
  }

  // optional uint32 flotask2 = 26;
  if (has_flotask2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->flotask2(), output);
  }

  // optional uint32 begin_date = 27;
  if (has_begin_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->begin_date(), output);
  }

  // optional uint32 end_date = 28;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->end_date(), output);
  }

  // optional uint32 flotask3 = 29;
  if (has_flotask3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->flotask3(), output);
  }

  // optional uint32 pretask = 30;
  if (has_pretask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->pretask(), output);
  }

  // optional uint32 start_var = 31;
  if (has_start_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->start_var(), output);
  }

  // optional uint32 task_order = 32;
  if (has_task_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->task_order(), output);
  }

}

int sTaskStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .jynetwork.proto.eTaskType task_type = 2;
    if (has_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_type());
    }

    // optional uint32 task_var = 3;
    if (has_task_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_var());
    }

    // optional bytes task_name = 4;
    if (has_task_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_name());
    }

    // optional uint32 task_name_id = 5;
    if (has_task_name_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_name_id());
    }

    // optional uint32 lv_min = 6;
    if (has_lv_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv_min());
    }

    // optional uint32 lv_max = 7;
    if (has_lv_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv_max());
    }

    // optional uint32 begin_time = 8;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 end_time = 9;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

    // optional uint32 job = 10;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 flotask = 11;
    if (has_flotask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flotask());
    }

    // optional .jynetwork.proto.eTaskFinishType task_finish_type = 12;
    if (has_task_finish_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_finish_type());
    }

    // optional uint32 task_finish_var1 = 13;
    if (has_task_finish_var1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_finish_var1());
    }

    // optional uint32 task_finish_var2 = 14;
    if (has_task_finish_var2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_finish_var2());
    }

    // optional uint32 trace_type = 15;
    if (has_trace_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trace_type());
    }

    // optional uint32 trace_id = 16;
    if (has_trace_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trace_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes task_desc = 17;
    if (has_task_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_desc());
    }

    // optional uint32 task_desc_id = 18;
    if (has_task_desc_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_desc_id());
    }

    // optional uint32 task_finish_var3 = 20;
    if (has_task_finish_var3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_finish_var3());
    }

    // optional bytes iconName = 21;
    if (has_iconname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->iconname());
    }

    // optional uint32 tc_lv = 22;
    if (has_tc_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tc_lv());
    }

    // optional uint32 is_guide = 23;
    if (has_is_guide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_guide());
    }

    // optional uint32 guide_id = 24;
    if (has_guide_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guide_id());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 guide_value = 25;
    if (has_guide_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guide_value());
    }

    // optional uint32 flotask2 = 26;
    if (has_flotask2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flotask2());
    }

    // optional uint32 begin_date = 27;
    if (has_begin_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_date());
    }

    // optional uint32 end_date = 28;
    if (has_end_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_date());
    }

    // optional uint32 flotask3 = 29;
    if (has_flotask3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flotask3());
    }

    // optional uint32 pretask = 30;
    if (has_pretask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pretask());
    }

    // optional uint32 start_var = 31;
    if (has_start_var()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_var());
    }

    // optional uint32 task_order = 32;
    if (has_task_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_order());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem item_reward = 19;
  total_size += 2 * this->item_reward_size();
  for (int i = 0; i < this->item_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_reward(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sTaskStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sTaskStats*>(&from));
}

void sTaskStats::MergeFrom(const sTaskStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_reward_.MergeFrom(from.item_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_task_type()) {
      set_task_type(from.task_type());
    }
    if (from.has_task_var()) {
      set_task_var(from.task_var());
    }
    if (from.has_task_name()) {
      set_task_name(from.task_name());
    }
    if (from.has_task_name_id()) {
      set_task_name_id(from.task_name_id());
    }
    if (from.has_lv_min()) {
      set_lv_min(from.lv_min());
    }
    if (from.has_lv_max()) {
      set_lv_max(from.lv_max());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_flotask()) {
      set_flotask(from.flotask());
    }
    if (from.has_task_finish_type()) {
      set_task_finish_type(from.task_finish_type());
    }
    if (from.has_task_finish_var1()) {
      set_task_finish_var1(from.task_finish_var1());
    }
    if (from.has_task_finish_var2()) {
      set_task_finish_var2(from.task_finish_var2());
    }
    if (from.has_trace_type()) {
      set_trace_type(from.trace_type());
    }
    if (from.has_trace_id()) {
      set_trace_id(from.trace_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_task_desc()) {
      set_task_desc(from.task_desc());
    }
    if (from.has_task_desc_id()) {
      set_task_desc_id(from.task_desc_id());
    }
    if (from.has_task_finish_var3()) {
      set_task_finish_var3(from.task_finish_var3());
    }
    if (from.has_iconname()) {
      set_iconname(from.iconname());
    }
    if (from.has_tc_lv()) {
      set_tc_lv(from.tc_lv());
    }
    if (from.has_is_guide()) {
      set_is_guide(from.is_guide());
    }
    if (from.has_guide_id()) {
      set_guide_id(from.guide_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_guide_value()) {
      set_guide_value(from.guide_value());
    }
    if (from.has_flotask2()) {
      set_flotask2(from.flotask2());
    }
    if (from.has_begin_date()) {
      set_begin_date(from.begin_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_flotask3()) {
      set_flotask3(from.flotask3());
    }
    if (from.has_pretask()) {
      set_pretask(from.pretask());
    }
    if (from.has_start_var()) {
      set_start_var(from.start_var());
    }
    if (from.has_task_order()) {
      set_task_order(from.task_order());
    }
  }
}

void sTaskStats::CopyFrom(const sTaskStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sTaskStats::IsInitialized() const {

  return true;
}

void sTaskStats::Swap(sTaskStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(task_type_, other->task_type_);
    std::swap(task_var_, other->task_var_);
    std::swap(task_name_, other->task_name_);
    std::swap(task_name_id_, other->task_name_id_);
    std::swap(lv_min_, other->lv_min_);
    std::swap(lv_max_, other->lv_max_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(job_, other->job_);
    std::swap(flotask_, other->flotask_);
    std::swap(task_finish_type_, other->task_finish_type_);
    std::swap(task_finish_var1_, other->task_finish_var1_);
    std::swap(task_finish_var2_, other->task_finish_var2_);
    std::swap(trace_type_, other->trace_type_);
    std::swap(trace_id_, other->trace_id_);
    std::swap(task_desc_, other->task_desc_);
    std::swap(task_desc_id_, other->task_desc_id_);
    item_reward_.Swap(&other->item_reward_);
    std::swap(task_finish_var3_, other->task_finish_var3_);
    std::swap(iconname_, other->iconname_);
    std::swap(tc_lv_, other->tc_lv_);
    std::swap(is_guide_, other->is_guide_);
    std::swap(guide_id_, other->guide_id_);
    std::swap(guide_value_, other->guide_value_);
    std::swap(flotask2_, other->flotask2_);
    std::swap(begin_date_, other->begin_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(flotask3_, other->flotask3_);
    std::swap(pretask_, other->pretask_);
    std::swap(start_var_, other->start_var_);
    std::swap(task_order_, other->task_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sTaskStats::GetTypeName() const {
  return "jynetwork.proto.sTaskStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sBuyStaminaStats::kUidFieldNumber;
const int sBuyStaminaStats::kCostDiamondFieldNumber;
const int sBuyStaminaStats::kAddStaminaFieldNumber;
#endif  // !_MSC_VER

sBuyStaminaStats::sBuyStaminaStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sBuyStaminaStats::InitAsDefaultInstance() {
}

sBuyStaminaStats::sBuyStaminaStats(const sBuyStaminaStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sBuyStaminaStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  cost_diamond_ = 0u;
  add_stamina_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sBuyStaminaStats::~sBuyStaminaStats() {
  SharedDtor();
}

void sBuyStaminaStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sBuyStaminaStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sBuyStaminaStats& sBuyStaminaStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sBuyStaminaStats* sBuyStaminaStats::default_instance_ = NULL;

sBuyStaminaStats* sBuyStaminaStats::New() const {
  return new sBuyStaminaStats;
}

void sBuyStaminaStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    cost_diamond_ = 0u;
    add_stamina_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sBuyStaminaStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost_diamond;
        break;
      }

      // optional uint32 cost_diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_diamond_)));
          set_has_cost_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_stamina;
        break;
      }

      // optional uint32 add_stamina = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_stamina_)));
          set_has_add_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sBuyStaminaStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 cost_diamond = 2;
  if (has_cost_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost_diamond(), output);
  }

  // optional uint32 add_stamina = 3;
  if (has_add_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->add_stamina(), output);
  }

}

int sBuyStaminaStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 cost_diamond = 2;
    if (has_cost_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_diamond());
    }

    // optional uint32 add_stamina = 3;
    if (has_add_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_stamina());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sBuyStaminaStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sBuyStaminaStats*>(&from));
}

void sBuyStaminaStats::MergeFrom(const sBuyStaminaStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cost_diamond()) {
      set_cost_diamond(from.cost_diamond());
    }
    if (from.has_add_stamina()) {
      set_add_stamina(from.add_stamina());
    }
  }
}

void sBuyStaminaStats::CopyFrom(const sBuyStaminaStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sBuyStaminaStats::IsInitialized() const {

  return true;
}

void sBuyStaminaStats::Swap(sBuyStaminaStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cost_diamond_, other->cost_diamond_);
    std::swap(add_stamina_, other->add_stamina_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sBuyStaminaStats::GetTypeName() const {
  return "jynetwork.proto.sBuyStaminaStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sBuyGoldStats::kUidFieldNumber;
const int sBuyGoldStats::kCostDiamondFieldNumber;
const int sBuyGoldStats::kItemRewardFieldNumber;
const int sBuyGoldStats::kAddGoldFieldNumber;
#endif  // !_MSC_VER

sBuyGoldStats::sBuyGoldStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sBuyGoldStats::InitAsDefaultInstance() {
}

sBuyGoldStats::sBuyGoldStats(const sBuyGoldStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sBuyGoldStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  cost_diamond_ = 0u;
  add_gold_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sBuyGoldStats::~sBuyGoldStats() {
  SharedDtor();
}

void sBuyGoldStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sBuyGoldStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sBuyGoldStats& sBuyGoldStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sBuyGoldStats* sBuyGoldStats::default_instance_ = NULL;

sBuyGoldStats* sBuyGoldStats::New() const {
  return new sBuyGoldStats;
}

void sBuyGoldStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    cost_diamond_ = 0u;
    add_gold_ = 0u;
  }
  item_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sBuyGoldStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost_diamond;
        break;
      }

      // optional uint32 cost_diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_diamond_)));
          set_has_cost_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_reward;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem item_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_reward;
        if (input->ExpectTag(32)) goto parse_add_gold;
        break;
      }

      // optional uint32 add_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_gold_)));
          set_has_add_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sBuyGoldStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 cost_diamond = 2;
  if (has_cost_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost_diamond(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem item_reward = 3;
  for (int i = 0; i < this->item_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->item_reward(i), output);
  }

  // optional uint32 add_gold = 4;
  if (has_add_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add_gold(), output);
  }

}

int sBuyGoldStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 cost_diamond = 2;
    if (has_cost_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_diamond());
    }

    // optional uint32 add_gold = 4;
    if (has_add_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_gold());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem item_reward = 3;
  total_size += 1 * this->item_reward_size();
  for (int i = 0; i < this->item_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_reward(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sBuyGoldStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sBuyGoldStats*>(&from));
}

void sBuyGoldStats::MergeFrom(const sBuyGoldStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_reward_.MergeFrom(from.item_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cost_diamond()) {
      set_cost_diamond(from.cost_diamond());
    }
    if (from.has_add_gold()) {
      set_add_gold(from.add_gold());
    }
  }
}

void sBuyGoldStats::CopyFrom(const sBuyGoldStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sBuyGoldStats::IsInitialized() const {

  return true;
}

void sBuyGoldStats::Swap(sBuyGoldStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cost_diamond_, other->cost_diamond_);
    item_reward_.Swap(&other->item_reward_);
    std::swap(add_gold_, other->add_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sBuyGoldStats::GetTypeName() const {
  return "jynetwork.proto.sBuyGoldStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sEquipAttrStats::kUidFieldNumber;
const int sEquipAttrStats::kEquipPartFieldNumber;
const int sEquipAttrStats::kEquipStarFieldNumber;
const int sEquipAttrStats::kAttrTypeFieldNumber;
const int sEquipAttrStats::kAttrRandFieldNumber;
const int sEquipAttrStats::kSkillIdFieldNumber;
const int sEquipAttrStats::kFightPowerFieldNumber;
const int sEquipAttrStats::kMaxAttrTypeFieldNumber;
const int sEquipAttrStats::kRearFieldNumber;
#endif  // !_MSC_VER

sEquipAttrStats::sEquipAttrStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEquipAttrStats::InitAsDefaultInstance() {
}

sEquipAttrStats::sEquipAttrStats(const sEquipAttrStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEquipAttrStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  equip_part_ = 1;
  equip_star_ = 0u;
  attr_type_ = 0u;
  attr_rand_ = 0u;
  skill_id_ = 0u;
  fight_power_ = 0u;
  max_attr_type_ = 0u;
  rear_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEquipAttrStats::~sEquipAttrStats() {
  SharedDtor();
}

void sEquipAttrStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEquipAttrStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEquipAttrStats& sEquipAttrStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sEquipAttrStats* sEquipAttrStats::default_instance_ = NULL;

sEquipAttrStats* sEquipAttrStats::New() const {
  return new sEquipAttrStats;
}

void sEquipAttrStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    equip_part_ = 1;
    equip_star_ = 0u;
    attr_type_ = 0u;
    attr_rand_ = 0u;
    skill_id_ = 0u;
    fight_power_ = 0u;
    max_attr_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rear_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEquipAttrStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_part;
        break;
      }

      // optional .jynetwork.proto.eQuipPart equip_part = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_part:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eQuipPart_IsValid(value)) {
            set_equip_part(static_cast< ::jynetwork::proto::eQuipPart >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_star;
        break;
      }

      // optional uint32 equip_star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_star_)));
          set_has_equip_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attr_type;
        break;
      }

      // optional uint32 attr_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_type_)));
          set_has_attr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attr_rand;
        break;
      }

      // optional uint32 attr_rand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_rand_)));
          set_has_attr_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fight_power;
        break;
      }

      // optional uint32 fight_power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_attr_type;
        break;
      }

      // optional uint32 max_attr_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_attr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_attr_type_)));
          set_has_max_attr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rear;
        break;
      }

      // optional uint32 rear = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rear_)));
          set_has_rear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEquipAttrStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .jynetwork.proto.eQuipPart equip_part = 2;
  if (has_equip_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->equip_part(), output);
  }

  // optional uint32 equip_star = 3;
  if (has_equip_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equip_star(), output);
  }

  // optional uint32 attr_type = 4;
  if (has_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attr_type(), output);
  }

  // optional uint32 attr_rand = 5;
  if (has_attr_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attr_rand(), output);
  }

  // optional uint32 skill_id = 6;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skill_id(), output);
  }

  // optional uint32 fight_power = 7;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fight_power(), output);
  }

  // optional uint32 max_attr_type = 8;
  if (has_max_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_attr_type(), output);
  }

  // optional uint32 rear = 9;
  if (has_rear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rear(), output);
  }

}

int sEquipAttrStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .jynetwork.proto.eQuipPart equip_part = 2;
    if (has_equip_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_part());
    }

    // optional uint32 equip_star = 3;
    if (has_equip_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_star());
    }

    // optional uint32 attr_type = 4;
    if (has_attr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_type());
    }

    // optional uint32 attr_rand = 5;
    if (has_attr_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_rand());
    }

    // optional uint32 skill_id = 6;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional uint32 fight_power = 7;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

    // optional uint32 max_attr_type = 8;
    if (has_max_attr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_attr_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 rear = 9;
    if (has_rear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rear());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEquipAttrStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEquipAttrStats*>(&from));
}

void sEquipAttrStats::MergeFrom(const sEquipAttrStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_equip_part()) {
      set_equip_part(from.equip_part());
    }
    if (from.has_equip_star()) {
      set_equip_star(from.equip_star());
    }
    if (from.has_attr_type()) {
      set_attr_type(from.attr_type());
    }
    if (from.has_attr_rand()) {
      set_attr_rand(from.attr_rand());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_max_attr_type()) {
      set_max_attr_type(from.max_attr_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rear()) {
      set_rear(from.rear());
    }
  }
}

void sEquipAttrStats::CopyFrom(const sEquipAttrStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEquipAttrStats::IsInitialized() const {

  return true;
}

void sEquipAttrStats::Swap(sEquipAttrStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(equip_part_, other->equip_part_);
    std::swap(equip_star_, other->equip_star_);
    std::swap(attr_type_, other->attr_type_);
    std::swap(attr_rand_, other->attr_rand_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(max_attr_type_, other->max_attr_type_);
    std::swap(rear_, other->rear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEquipAttrStats::GetTypeName() const {
  return "jynetwork.proto.sEquipAttrStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sEquipAttrPropStats::kUidFieldNumber;
const int sEquipAttrPropStats::kEquipStarFieldNumber;
const int sEquipAttrPropStats::kPropFieldNumber;
const int sEquipAttrPropStats::kRearFieldNumber;
#endif  // !_MSC_VER

sEquipAttrPropStats::sEquipAttrPropStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEquipAttrPropStats::InitAsDefaultInstance() {
}

sEquipAttrPropStats::sEquipAttrPropStats(const sEquipAttrPropStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEquipAttrPropStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  equip_star_ = 0u;
  prop_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEquipAttrPropStats::~sEquipAttrPropStats() {
  SharedDtor();
}

void sEquipAttrPropStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEquipAttrPropStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEquipAttrPropStats& sEquipAttrPropStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sEquipAttrPropStats* sEquipAttrPropStats::default_instance_ = NULL;

sEquipAttrPropStats* sEquipAttrPropStats::New() const {
  return new sEquipAttrPropStats;
}

void sEquipAttrPropStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    equip_star_ = 0u;
    prop_ = 0u;
  }
  rear_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEquipAttrPropStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_star;
        break;
      }

      // optional uint32 equip_star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_star_)));
          set_has_equip_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prop;
        break;
      }

      // optional uint32 prop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_)));
          set_has_prop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rear;
        break;
      }

      // repeated uint32 rear = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_rear())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rear())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rear;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEquipAttrPropStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 equip_star = 2;
  if (has_equip_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equip_star(), output);
  }

  // optional uint32 prop = 3;
  if (has_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prop(), output);
  }

  // repeated uint32 rear = 4;
  for (int i = 0; i < this->rear_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->rear(i), output);
  }

}

int sEquipAttrPropStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 equip_star = 2;
    if (has_equip_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_star());
    }

    // optional uint32 prop = 3;
    if (has_prop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop());
    }

  }
  // repeated uint32 rear = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->rear_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rear(i));
    }
    total_size += 1 * this->rear_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEquipAttrPropStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEquipAttrPropStats*>(&from));
}

void sEquipAttrPropStats::MergeFrom(const sEquipAttrPropStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  rear_.MergeFrom(from.rear_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_equip_star()) {
      set_equip_star(from.equip_star());
    }
    if (from.has_prop()) {
      set_prop(from.prop());
    }
  }
}

void sEquipAttrPropStats::CopyFrom(const sEquipAttrPropStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEquipAttrPropStats::IsInitialized() const {

  return true;
}

void sEquipAttrPropStats::Swap(sEquipAttrPropStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(equip_star_, other->equip_star_);
    std::swap(prop_, other->prop_);
    rear_.Swap(&other->rear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEquipAttrPropStats::GetTypeName() const {
  return "jynetwork.proto.sEquipAttrPropStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sPrefixAttr::kAttrTypeFieldNumber;
const int sPrefixAttr::kAttrMaxFieldNumber;
const int sPrefixAttr::kAttrMinFieldNumber;
#endif  // !_MSC_VER

sPrefixAttr::sPrefixAttr()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPrefixAttr::InitAsDefaultInstance() {
}

sPrefixAttr::sPrefixAttr(const sPrefixAttr& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPrefixAttr::SharedCtor() {
  _cached_size_ = 0;
  attr_type_ = 0u;
  attr_max_ = 0u;
  attr_min_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPrefixAttr::~sPrefixAttr() {
  SharedDtor();
}

void sPrefixAttr::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sPrefixAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPrefixAttr& sPrefixAttr::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sPrefixAttr* sPrefixAttr::default_instance_ = NULL;

sPrefixAttr* sPrefixAttr::New() const {
  return new sPrefixAttr;
}

void sPrefixAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_type_ = 0u;
    attr_max_ = 0u;
    attr_min_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPrefixAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attr_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_type_)));
          set_has_attr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr_max;
        break;
      }

      // optional uint32 attr_max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_max_)));
          set_has_attr_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attr_min;
        break;
      }

      // optional uint32 attr_min = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_min_)));
          set_has_attr_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPrefixAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attr_type = 1;
  if (has_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attr_type(), output);
  }

  // optional uint32 attr_max = 2;
  if (has_attr_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attr_max(), output);
  }

  // optional uint32 attr_min = 3;
  if (has_attr_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attr_min(), output);
  }

}

int sPrefixAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attr_type = 1;
    if (has_attr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_type());
    }

    // optional uint32 attr_max = 2;
    if (has_attr_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_max());
    }

    // optional uint32 attr_min = 3;
    if (has_attr_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_min());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPrefixAttr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPrefixAttr*>(&from));
}

void sPrefixAttr::MergeFrom(const sPrefixAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_type()) {
      set_attr_type(from.attr_type());
    }
    if (from.has_attr_max()) {
      set_attr_max(from.attr_max());
    }
    if (from.has_attr_min()) {
      set_attr_min(from.attr_min());
    }
  }
}

void sPrefixAttr::CopyFrom(const sPrefixAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPrefixAttr::IsInitialized() const {

  return true;
}

void sPrefixAttr::Swap(sPrefixAttr* other) {
  if (other != this) {
    std::swap(attr_type_, other->attr_type_);
    std::swap(attr_max_, other->attr_max_);
    std::swap(attr_min_, other->attr_min_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPrefixAttr::GetTypeName() const {
  return "jynetwork.proto.sPrefixAttr";
}


// ===================================================================

#ifndef _MSC_VER
const int sPrefixStats::kUidFieldNumber;
const int sPrefixStats::kRemarkFieldNumber;
const int sPrefixStats::kNameFieldNumber;
const int sPrefixStats::kLangIdFieldNumber;
const int sPrefixStats::kTeastureClassFieldNumber;
const int sPrefixStats::kPrefixStarFieldNumber;
const int sPrefixStats::kProbFieldNumber;
const int sPrefixStats::kProbStarFieldNumber;
const int sPrefixStats::kColorFieldNumber;
const int sPrefixStats::kEquipPartFieldNumber;
const int sPrefixStats::kUnqueItemIdFieldNumber;
const int sPrefixStats::kPrefAttrFieldNumber;
const int sPrefixStats::kEffectFieldNumber;
#endif  // !_MSC_VER

sPrefixStats::sPrefixStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPrefixStats::InitAsDefaultInstance() {
}

sPrefixStats::sPrefixStats(const sPrefixStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPrefixStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lang_id_ = 0u;
  teasture_class_ = 0u;
  prefix_star_ = 0u;
  prob_ = 0u;
  prob_star_ = 0u;
  color_ = 0u;
  equip_part_ = 1;
  unque_item_id_ = 0u;
  effect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPrefixStats::~sPrefixStats() {
  SharedDtor();
}

void sPrefixStats::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sPrefixStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPrefixStats& sPrefixStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sPrefixStats* sPrefixStats::default_instance_ = NULL;

sPrefixStats* sPrefixStats::New() const {
  return new sPrefixStats;
}

void sPrefixStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lang_id_ = 0u;
    teasture_class_ = 0u;
    prefix_star_ = 0u;
    prob_ = 0u;
    prob_star_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    color_ = 0u;
    equip_part_ = 1;
    unque_item_id_ = 0u;
    effect_ = 0u;
  }
  pref_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPrefixStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_remark;
        break;
      }

      // optional bytes remark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remark()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lang_id;
        break;
      }

      // optional uint32 lang_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lang_id_)));
          set_has_lang_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_teasture_class;
        break;
      }

      // optional uint32 teasture_class = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teasture_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teasture_class_)));
          set_has_teasture_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_prefix_star;
        break;
      }

      // optional uint32 prefix_star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prefix_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefix_star_)));
          set_has_prefix_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_prob;
        break;
      }

      // optional uint32 prob = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_prob_star;
        break;
      }

      // optional uint32 prob_star = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prob_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prob_star_)));
          set_has_prob_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_color;
        break;
      }

      // optional uint32 color = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_equip_part;
        break;
      }

      // optional .jynetwork.proto.eQuipPart equip_part = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_part:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eQuipPart_IsValid(value)) {
            set_equip_part(static_cast< ::jynetwork::proto::eQuipPart >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_unque_item_id;
        break;
      }

      // optional uint32 unque_item_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unque_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unque_item_id_)));
          set_has_unque_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pref_attr;
        break;
      }

      // repeated .jynetwork.proto.sPrefixAttr pref_attr = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pref_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pref_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pref_attr;
        if (input->ExpectTag(104)) goto parse_effect;
        break;
      }

      // optional uint32 effect = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPrefixStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes remark = 2;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->remark(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional uint32 lang_id = 4;
  if (has_lang_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lang_id(), output);
  }

  // optional uint32 teasture_class = 5;
  if (has_teasture_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->teasture_class(), output);
  }

  // optional uint32 prefix_star = 6;
  if (has_prefix_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prefix_star(), output);
  }

  // optional uint32 prob = 7;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->prob(), output);
  }

  // optional uint32 prob_star = 8;
  if (has_prob_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->prob_star(), output);
  }

  // optional uint32 color = 9;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->color(), output);
  }

  // optional .jynetwork.proto.eQuipPart equip_part = 10;
  if (has_equip_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->equip_part(), output);
  }

  // optional uint32 unque_item_id = 11;
  if (has_unque_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->unque_item_id(), output);
  }

  // repeated .jynetwork.proto.sPrefixAttr pref_attr = 12;
  for (int i = 0; i < this->pref_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->pref_attr(i), output);
  }

  // optional uint32 effect = 13;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->effect(), output);
  }

}

int sPrefixStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes remark = 2;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->remark());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 lang_id = 4;
    if (has_lang_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lang_id());
    }

    // optional uint32 teasture_class = 5;
    if (has_teasture_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teasture_class());
    }

    // optional uint32 prefix_star = 6;
    if (has_prefix_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefix_star());
    }

    // optional uint32 prob = 7;
    if (has_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prob());
    }

    // optional uint32 prob_star = 8;
    if (has_prob_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prob_star());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 color = 9;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional .jynetwork.proto.eQuipPart equip_part = 10;
    if (has_equip_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_part());
    }

    // optional uint32 unque_item_id = 11;
    if (has_unque_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unque_item_id());
    }

    // optional uint32 effect = 13;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect());
    }

  }
  // repeated .jynetwork.proto.sPrefixAttr pref_attr = 12;
  total_size += 1 * this->pref_attr_size();
  for (int i = 0; i < this->pref_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pref_attr(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPrefixStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPrefixStats*>(&from));
}

void sPrefixStats::MergeFrom(const sPrefixStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  pref_attr_.MergeFrom(from.pref_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lang_id()) {
      set_lang_id(from.lang_id());
    }
    if (from.has_teasture_class()) {
      set_teasture_class(from.teasture_class());
    }
    if (from.has_prefix_star()) {
      set_prefix_star(from.prefix_star());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
    if (from.has_prob_star()) {
      set_prob_star(from.prob_star());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_equip_part()) {
      set_equip_part(from.equip_part());
    }
    if (from.has_unque_item_id()) {
      set_unque_item_id(from.unque_item_id());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
  }
}

void sPrefixStats::CopyFrom(const sPrefixStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPrefixStats::IsInitialized() const {

  return true;
}

void sPrefixStats::Swap(sPrefixStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(remark_, other->remark_);
    std::swap(name_, other->name_);
    std::swap(lang_id_, other->lang_id_);
    std::swap(teasture_class_, other->teasture_class_);
    std::swap(prefix_star_, other->prefix_star_);
    std::swap(prob_, other->prob_);
    std::swap(prob_star_, other->prob_star_);
    std::swap(color_, other->color_);
    std::swap(equip_part_, other->equip_part_);
    std::swap(unque_item_id_, other->unque_item_id_);
    pref_attr_.Swap(&other->pref_attr_);
    std::swap(effect_, other->effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPrefixStats::GetTypeName() const {
  return "jynetwork.proto.sPrefixStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sWeekStats::kUidFieldNumber;
const int sWeekStats::kItemIdFieldNumber;
const int sWeekStats::kItemNumFieldNumber;
const int sWeekStats::kVipLvFieldNumber;
const int sWeekStats::kVipBonusFieldNumber;
#endif  // !_MSC_VER

sWeekStats::sWeekStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sWeekStats::InitAsDefaultInstance() {
}

sWeekStats::sWeekStats(const sWeekStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sWeekStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  item_id_ = 0u;
  item_num_ = 0u;
  vip_lv_ = 0u;
  vip_bonus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sWeekStats::~sWeekStats() {
  SharedDtor();
}

void sWeekStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sWeekStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sWeekStats& sWeekStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sWeekStats* sWeekStats::default_instance_ = NULL;

sWeekStats* sWeekStats::New() const {
  return new sWeekStats;
}

void sWeekStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    item_id_ = 0u;
    item_num_ = 0u;
    vip_lv_ = 0u;
    vip_bonus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sWeekStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // optional uint32 item_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_lv;
        break;
      }

      // optional uint32 vip_lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_lv_)));
          set_has_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip_bonus;
        break;
      }

      // optional uint32 vip_bonus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_bonus_)));
          set_has_vip_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sWeekStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  // optional uint32 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_num(), output);
  }

  // optional uint32 vip_lv = 4;
  if (has_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vip_lv(), output);
  }

  // optional uint32 vip_bonus = 5;
  if (has_vip_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip_bonus(), output);
  }

}

int sWeekStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

    // optional uint32 vip_lv = 4;
    if (has_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_lv());
    }

    // optional uint32 vip_bonus = 5;
    if (has_vip_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_bonus());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sWeekStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sWeekStats*>(&from));
}

void sWeekStats::MergeFrom(const sWeekStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_vip_lv()) {
      set_vip_lv(from.vip_lv());
    }
    if (from.has_vip_bonus()) {
      set_vip_bonus(from.vip_bonus());
    }
  }
}

void sWeekStats::CopyFrom(const sWeekStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sWeekStats::IsInitialized() const {

  return true;
}

void sWeekStats::Swap(sWeekStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(vip_lv_, other->vip_lv_);
    std::swap(vip_bonus_, other->vip_bonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sWeekStats::GetTypeName() const {
  return "jynetwork.proto.sWeekStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sDecomStats::kUidFieldNumber;
const int sDecomStats::kItemIdFieldNumber;
const int sDecomStats::kBaseRewardFieldNumber;
const int sDecomStats::kLvRewardFieldNumber;
const int sDecomStats::kLvGoldFieldNumber;
const int sDecomStats::kIntensifyRewardFieldNumber;
const int sDecomStats::kIntensifyGoldFieldNumber;
const int sDecomStats::kBonusRewardFieldNumber;
const int sDecomStats::kBonusPercentFieldNumber;
const int sDecomStats::kTypeNumFieldNumber;
const int sDecomStats::kMagicStoneFieldNumber;
const int sDecomStats::kStonePercentFieldNumber;
const int sDecomStats::kShopStoneFieldNumber;
const int sDecomStats::kSetDecomFieldNumber;
const int sDecomStats::kRoleFieldNumber;
const int sDecomStats::kEquipPartFieldNumber;
const int sDecomStats::kIsGroupFieldNumber;
const int sDecomStats::kEquipStarFieldNumber;
const int sDecomStats::kIntensifyFieldNumber;
const int sDecomStats::kNewBaseRewardFieldNumber;
const int sDecomStats::kNewPercentItemFieldNumber;
const int sDecomStats::kNewPercentFieldNumber;
const int sDecomStats::kNewGoldFieldNumber;
#endif  // !_MSC_VER

sDecomStats::sDecomStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sDecomStats::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  base_reward_ = const_cast< ::jynetwork::proto::sSimpleItem*>(
      ::jynetwork::proto::sSimpleItem::internal_default_instance());
#else
  base_reward_ = const_cast< ::jynetwork::proto::sSimpleItem*>(&::jynetwork::proto::sSimpleItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  lv_reward_ = const_cast< ::jynetwork::proto::sSimpleItem*>(
      ::jynetwork::proto::sSimpleItem::internal_default_instance());
#else
  lv_reward_ = const_cast< ::jynetwork::proto::sSimpleItem*>(&::jynetwork::proto::sSimpleItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bonus_reward_ = const_cast< ::jynetwork::proto::sSimpleItem*>(
      ::jynetwork::proto::sSimpleItem::internal_default_instance());
#else
  bonus_reward_ = const_cast< ::jynetwork::proto::sSimpleItem*>(&::jynetwork::proto::sSimpleItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  magic_stone_ = const_cast< ::jynetwork::proto::sSimpleItem*>(
      ::jynetwork::proto::sSimpleItem::internal_default_instance());
#else
  magic_stone_ = const_cast< ::jynetwork::proto::sSimpleItem*>(&::jynetwork::proto::sSimpleItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  shop_stone_ = const_cast< ::jynetwork::proto::sSimpleItem*>(
      ::jynetwork::proto::sSimpleItem::internal_default_instance());
#else
  shop_stone_ = const_cast< ::jynetwork::proto::sSimpleItem*>(&::jynetwork::proto::sSimpleItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  set_decom_ = const_cast< ::jynetwork::proto::sSimpleItem*>(
      ::jynetwork::proto::sSimpleItem::internal_default_instance());
#else
  set_decom_ = const_cast< ::jynetwork::proto::sSimpleItem*>(&::jynetwork::proto::sSimpleItem::default_instance());
#endif
}

sDecomStats::sDecomStats(const sDecomStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sDecomStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  item_id_ = 0u;
  base_reward_ = NULL;
  lv_reward_ = NULL;
  lv_gold_ = 0u;
  intensify_gold_ = 0u;
  bonus_reward_ = NULL;
  bonus_percent_ = 0u;
  type_num_ = 0u;
  magic_stone_ = NULL;
  stone_percent_ = 0u;
  shop_stone_ = NULL;
  set_decom_ = NULL;
  role_ = 0u;
  equip_part_ = 0u;
  is_group_ = 0u;
  equip_star_ = 0u;
  intensify_ = 0u;
  new_percent_ = 0u;
  new_gold_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sDecomStats::~sDecomStats() {
  SharedDtor();
}

void sDecomStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete base_reward_;
    delete lv_reward_;
    delete bonus_reward_;
    delete magic_stone_;
    delete shop_stone_;
    delete set_decom_;
  }
}

void sDecomStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sDecomStats& sDecomStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sDecomStats* sDecomStats::default_instance_ = NULL;

sDecomStats* sDecomStats::New() const {
  return new sDecomStats;
}

void sDecomStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    item_id_ = 0u;
    if (has_base_reward()) {
      if (base_reward_ != NULL) base_reward_->::jynetwork::proto::sSimpleItem::Clear();
    }
    if (has_lv_reward()) {
      if (lv_reward_ != NULL) lv_reward_->::jynetwork::proto::sSimpleItem::Clear();
    }
    lv_gold_ = 0u;
    intensify_gold_ = 0u;
    if (has_bonus_reward()) {
      if (bonus_reward_ != NULL) bonus_reward_->::jynetwork::proto::sSimpleItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bonus_percent_ = 0u;
    type_num_ = 0u;
    if (has_magic_stone()) {
      if (magic_stone_ != NULL) magic_stone_->::jynetwork::proto::sSimpleItem::Clear();
    }
    stone_percent_ = 0u;
    if (has_shop_stone()) {
      if (shop_stone_ != NULL) shop_stone_->::jynetwork::proto::sSimpleItem::Clear();
    }
    if (has_set_decom()) {
      if (set_decom_ != NULL) set_decom_->::jynetwork::proto::sSimpleItem::Clear();
    }
    role_ = 0u;
    equip_part_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_group_ = 0u;
    equip_star_ = 0u;
    intensify_ = 0u;
    new_percent_ = 0u;
    new_gold_ = 0u;
  }
  intensify_reward_.Clear();
  new_base_reward_.Clear();
  new_percent_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sDecomStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_base_reward;
        break;
      }

      // optional .jynetwork.proto.sSimpleItem base_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lv_reward;
        break;
      }

      // optional .jynetwork.proto.sSimpleItem lv_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lv_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lv_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv_gold;
        break;
      }

      // optional uint32 lv_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_gold_)));
          set_has_lv_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_intensify_reward;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem intensify_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intensify_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intensify_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_intensify_reward;
        if (input->ExpectTag(56)) goto parse_intensify_gold;
        break;
      }

      // optional uint32 intensify_gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensify_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensify_gold_)));
          set_has_intensify_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bonus_reward;
        break;
      }

      // optional .jynetwork.proto.sSimpleItem bonus_reward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bonus_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bonus_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bonus_percent;
        break;
      }

      // optional uint32 bonus_percent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_percent_)));
          set_has_bonus_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_type_num;
        break;
      }

      // optional uint32 type_num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_num_)));
          set_has_type_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_magic_stone;
        break;
      }

      // optional .jynetwork.proto.sSimpleItem magic_stone = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magic_stone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_magic_stone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_stone_percent;
        break;
      }

      // optional uint32 stone_percent = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stone_percent_)));
          set_has_stone_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_shop_stone;
        break;
      }

      // optional .jynetwork.proto.sSimpleItem shop_stone = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_stone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop_stone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_set_decom;
        break;
      }

      // optional .jynetwork.proto.sSimpleItem set_decom = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set_decom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_decom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_role;
        break;
      }

      // optional uint32 role = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_equip_part;
        break;
      }

      // optional uint32 equip_part = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_part_)));
          set_has_equip_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_is_group;
        break;
      }

      // optional uint32 is_group = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_group_)));
          set_has_is_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_equip_star;
        break;
      }

      // optional uint32 equip_star = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_star_)));
          set_has_equip_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_intensify;
        break;
      }

      // optional uint32 intensify = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensify_)));
          set_has_intensify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_new_base_reward;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem new_base_reward = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_base_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_base_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_new_base_reward;
        if (input->ExpectTag(170)) goto parse_new_percent_item;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem new_percent_item = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_percent_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_percent_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_new_percent_item;
        if (input->ExpectTag(176)) goto parse_new_percent;
        break;
      }

      // optional uint32 new_percent = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_percent_)));
          set_has_new_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_new_gold;
        break;
      }

      // optional uint32 new_gold = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_gold_)));
          set_has_new_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sDecomStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  // optional .jynetwork.proto.sSimpleItem base_reward = 3;
  if (has_base_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->base_reward(), output);
  }

  // optional .jynetwork.proto.sSimpleItem lv_reward = 4;
  if (has_lv_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->lv_reward(), output);
  }

  // optional uint32 lv_gold = 5;
  if (has_lv_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv_gold(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem intensify_reward = 6;
  for (int i = 0; i < this->intensify_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->intensify_reward(i), output);
  }

  // optional uint32 intensify_gold = 7;
  if (has_intensify_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->intensify_gold(), output);
  }

  // optional .jynetwork.proto.sSimpleItem bonus_reward = 8;
  if (has_bonus_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->bonus_reward(), output);
  }

  // optional uint32 bonus_percent = 9;
  if (has_bonus_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bonus_percent(), output);
  }

  // optional uint32 type_num = 10;
  if (has_type_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->type_num(), output);
  }

  // optional .jynetwork.proto.sSimpleItem magic_stone = 11;
  if (has_magic_stone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->magic_stone(), output);
  }

  // optional uint32 stone_percent = 12;
  if (has_stone_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->stone_percent(), output);
  }

  // optional .jynetwork.proto.sSimpleItem shop_stone = 13;
  if (has_shop_stone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->shop_stone(), output);
  }

  // optional .jynetwork.proto.sSimpleItem set_decom = 14;
  if (has_set_decom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->set_decom(), output);
  }

  // optional uint32 role = 15;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->role(), output);
  }

  // optional uint32 equip_part = 16;
  if (has_equip_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->equip_part(), output);
  }

  // optional uint32 is_group = 17;
  if (has_is_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->is_group(), output);
  }

  // optional uint32 equip_star = 18;
  if (has_equip_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->equip_star(), output);
  }

  // optional uint32 intensify = 19;
  if (has_intensify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->intensify(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem new_base_reward = 20;
  for (int i = 0; i < this->new_base_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->new_base_reward(i), output);
  }

  // repeated .jynetwork.proto.sSimpleItem new_percent_item = 21;
  for (int i = 0; i < this->new_percent_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->new_percent_item(i), output);
  }

  // optional uint32 new_percent = 22;
  if (has_new_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->new_percent(), output);
  }

  // optional uint32 new_gold = 23;
  if (has_new_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->new_gold(), output);
  }

}

int sDecomStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional .jynetwork.proto.sSimpleItem base_reward = 3;
    if (has_base_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_reward());
    }

    // optional .jynetwork.proto.sSimpleItem lv_reward = 4;
    if (has_lv_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lv_reward());
    }

    // optional uint32 lv_gold = 5;
    if (has_lv_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv_gold());
    }

    // optional uint32 intensify_gold = 7;
    if (has_intensify_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensify_gold());
    }

    // optional .jynetwork.proto.sSimpleItem bonus_reward = 8;
    if (has_bonus_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bonus_reward());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 bonus_percent = 9;
    if (has_bonus_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_percent());
    }

    // optional uint32 type_num = 10;
    if (has_type_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_num());
    }

    // optional .jynetwork.proto.sSimpleItem magic_stone = 11;
    if (has_magic_stone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magic_stone());
    }

    // optional uint32 stone_percent = 12;
    if (has_stone_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stone_percent());
    }

    // optional .jynetwork.proto.sSimpleItem shop_stone = 13;
    if (has_shop_stone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop_stone());
    }

    // optional .jynetwork.proto.sSimpleItem set_decom = 14;
    if (has_set_decom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_decom());
    }

    // optional uint32 role = 15;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

    // optional uint32 equip_part = 16;
    if (has_equip_part()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_part());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 is_group = 17;
    if (has_is_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_group());
    }

    // optional uint32 equip_star = 18;
    if (has_equip_star()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_star());
    }

    // optional uint32 intensify = 19;
    if (has_intensify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensify());
    }

    // optional uint32 new_percent = 22;
    if (has_new_percent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_percent());
    }

    // optional uint32 new_gold = 23;
    if (has_new_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_gold());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem intensify_reward = 6;
  total_size += 1 * this->intensify_reward_size();
  for (int i = 0; i < this->intensify_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intensify_reward(i));
  }

  // repeated .jynetwork.proto.sSimpleItem new_base_reward = 20;
  total_size += 2 * this->new_base_reward_size();
  for (int i = 0; i < this->new_base_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_base_reward(i));
  }

  // repeated .jynetwork.proto.sSimpleItem new_percent_item = 21;
  total_size += 2 * this->new_percent_item_size();
  for (int i = 0; i < this->new_percent_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_percent_item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sDecomStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sDecomStats*>(&from));
}

void sDecomStats::MergeFrom(const sDecomStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  intensify_reward_.MergeFrom(from.intensify_reward_);
  new_base_reward_.MergeFrom(from.new_base_reward_);
  new_percent_item_.MergeFrom(from.new_percent_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_base_reward()) {
      mutable_base_reward()->::jynetwork::proto::sSimpleItem::MergeFrom(from.base_reward());
    }
    if (from.has_lv_reward()) {
      mutable_lv_reward()->::jynetwork::proto::sSimpleItem::MergeFrom(from.lv_reward());
    }
    if (from.has_lv_gold()) {
      set_lv_gold(from.lv_gold());
    }
    if (from.has_intensify_gold()) {
      set_intensify_gold(from.intensify_gold());
    }
    if (from.has_bonus_reward()) {
      mutable_bonus_reward()->::jynetwork::proto::sSimpleItem::MergeFrom(from.bonus_reward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bonus_percent()) {
      set_bonus_percent(from.bonus_percent());
    }
    if (from.has_type_num()) {
      set_type_num(from.type_num());
    }
    if (from.has_magic_stone()) {
      mutable_magic_stone()->::jynetwork::proto::sSimpleItem::MergeFrom(from.magic_stone());
    }
    if (from.has_stone_percent()) {
      set_stone_percent(from.stone_percent());
    }
    if (from.has_shop_stone()) {
      mutable_shop_stone()->::jynetwork::proto::sSimpleItem::MergeFrom(from.shop_stone());
    }
    if (from.has_set_decom()) {
      mutable_set_decom()->::jynetwork::proto::sSimpleItem::MergeFrom(from.set_decom());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_equip_part()) {
      set_equip_part(from.equip_part());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_group()) {
      set_is_group(from.is_group());
    }
    if (from.has_equip_star()) {
      set_equip_star(from.equip_star());
    }
    if (from.has_intensify()) {
      set_intensify(from.intensify());
    }
    if (from.has_new_percent()) {
      set_new_percent(from.new_percent());
    }
    if (from.has_new_gold()) {
      set_new_gold(from.new_gold());
    }
  }
}

void sDecomStats::CopyFrom(const sDecomStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sDecomStats::IsInitialized() const {

  return true;
}

void sDecomStats::Swap(sDecomStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(item_id_, other->item_id_);
    std::swap(base_reward_, other->base_reward_);
    std::swap(lv_reward_, other->lv_reward_);
    std::swap(lv_gold_, other->lv_gold_);
    intensify_reward_.Swap(&other->intensify_reward_);
    std::swap(intensify_gold_, other->intensify_gold_);
    std::swap(bonus_reward_, other->bonus_reward_);
    std::swap(bonus_percent_, other->bonus_percent_);
    std::swap(type_num_, other->type_num_);
    std::swap(magic_stone_, other->magic_stone_);
    std::swap(stone_percent_, other->stone_percent_);
    std::swap(shop_stone_, other->shop_stone_);
    std::swap(set_decom_, other->set_decom_);
    std::swap(role_, other->role_);
    std::swap(equip_part_, other->equip_part_);
    std::swap(is_group_, other->is_group_);
    std::swap(equip_star_, other->equip_star_);
    std::swap(intensify_, other->intensify_);
    new_base_reward_.Swap(&other->new_base_reward_);
    new_percent_item_.Swap(&other->new_percent_item_);
    std::swap(new_percent_, other->new_percent_);
    std::swap(new_gold_, other->new_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sDecomStats::GetTypeName() const {
  return "jynetwork.proto.sDecomStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sMaskWordStats::kUidFieldNumber;
const int sMaskWordStats::kTxtFieldNumber;
#endif  // !_MSC_VER

sMaskWordStats::sMaskWordStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sMaskWordStats::InitAsDefaultInstance() {
}

sMaskWordStats::sMaskWordStats(const sMaskWordStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sMaskWordStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sMaskWordStats::~sMaskWordStats() {
  SharedDtor();
}

void sMaskWordStats::SharedDtor() {
  if (txt_ != &::google::protobuf::internal::kEmptyString) {
    delete txt_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sMaskWordStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sMaskWordStats& sMaskWordStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sMaskWordStats* sMaskWordStats::default_instance_ = NULL;

sMaskWordStats* sMaskWordStats::New() const {
  return new sMaskWordStats;
}

void sMaskWordStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_txt()) {
      if (txt_ != &::google::protobuf::internal::kEmptyString) {
        txt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sMaskWordStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_txt;
        break;
      }

      // optional bytes txt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sMaskWordStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes txt = 2;
  if (has_txt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->txt(), output);
  }

}

int sMaskWordStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes txt = 2;
    if (has_txt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sMaskWordStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sMaskWordStats*>(&from));
}

void sMaskWordStats::MergeFrom(const sMaskWordStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_txt()) {
      set_txt(from.txt());
    }
  }
}

void sMaskWordStats::CopyFrom(const sMaskWordStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sMaskWordStats::IsInitialized() const {

  return true;
}

void sMaskWordStats::Swap(sMaskWordStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(txt_, other->txt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sMaskWordStats::GetTypeName() const {
  return "jynetwork.proto.sMaskWordStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sPartnerStats::kUidFieldNumber;
const int sPartnerStats::kPartnerIdFieldNumber;
const int sPartnerStats::kRoleFieldNumber;
const int sPartnerStats::kCardnameFieldNumber;
const int sPartnerStats::kStarFieldNumber;
const int sPartnerStats::kSkillResFieldNumber;
const int sPartnerStats::kCardmodelFieldNumber;
const int sPartnerStats::kScaleFieldNumber;
const int sPartnerStats::kCardiconFieldNumber;
const int sPartnerStats::kBuffTypeFieldNumber;
const int sPartnerStats::kEffectIdFieldNumber;
const int sPartnerStats::kEffectId2FieldNumber;
const int sPartnerStats::kGamestatsFieldNumber;
const int sPartnerStats::kGamestatsLvlFieldNumber;
const int sPartnerStats::kSkillDmgscaleFieldNumber;
const int sPartnerStats::kDurationFieldNumber;
const int sPartnerStats::kEsIdFieldNumber;
const int sPartnerStats::kBattleAbilityFieldNumber;
const int sPartnerStats::kSkillDescFieldNumber;
const int sPartnerStats::kBuffKeyFieldNumber;
const int sPartnerStats::kAquireEffFieldNumber;
const int sPartnerStats::kBuffIconFieldNumber;
const int sPartnerStats::kBuffShowFieldNumber;
const int sPartnerStats::kStarDescLangIdFieldNumber;
const int sPartnerStats::kPartnerSkillLangIdFieldNumber;
const int sPartnerStats::kPartnerSkillUpLangIdFieldNumber;
const int sPartnerStats::kStarUpLangIdFieldNumber;
const int sPartnerStats::kStarBnumFieldNumber;
const int sPartnerStats::kStarAnumFieldNumber;
const int sPartnerStats::kOffsetFieldNumber;
const int sPartnerStats::kIsBindFieldNumber;
const int sPartnerStats::kBattleIconFieldNumber;
#endif  // !_MSC_VER

sPartnerStats::sPartnerStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPartnerStats::InitAsDefaultInstance() {
}

sPartnerStats::sPartnerStats(const sPartnerStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPartnerStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  partner_id_ = 0u;
  role_ = 0;
  cardname_ = 0u;
  star_ = 0u;
  skill_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardmodel_ = 0u;
  scale_ = 0;
  cardicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buff_type_ = 1;
  effect_id_ = 0u;
  effect_id2_ = 0u;
  gamestats_ = 0u;
  gamestats_lvl_ = 0u;
  skill_dmgscale_ = 0;
  duration_ = 0;
  es_id_ = 0u;
  battle_ability_ = 0u;
  skill_desc_ = 0u;
  buff_key_ = 0u;
  aquire_eff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buff_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buff_show_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  star_desc_lang_id_ = 0u;
  partner_skill_lang_id_ = 0u;
  partner_skill_up_lang_id_ = 0u;
  star_up_lang_id_ = 0u;
  star_bnum_ = 0u;
  star_anum_ = 0u;
  offset_ = 0;
  is_bind_ = 0u;
  battle_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPartnerStats::~sPartnerStats() {
  SharedDtor();
}

void sPartnerStats::SharedDtor() {
  if (skill_res_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_res_;
  }
  if (cardicon_ != &::google::protobuf::internal::kEmptyString) {
    delete cardicon_;
  }
  if (aquire_eff_ != &::google::protobuf::internal::kEmptyString) {
    delete aquire_eff_;
  }
  if (buff_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete buff_icon_;
  }
  if (buff_show_ != &::google::protobuf::internal::kEmptyString) {
    delete buff_show_;
  }
  if (battle_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete battle_icon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sPartnerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPartnerStats& sPartnerStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sPartnerStats* sPartnerStats::default_instance_ = NULL;

sPartnerStats* sPartnerStats::New() const {
  return new sPartnerStats;
}

void sPartnerStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    partner_id_ = 0u;
    role_ = 0;
    cardname_ = 0u;
    star_ = 0u;
    if (has_skill_res()) {
      if (skill_res_ != &::google::protobuf::internal::kEmptyString) {
        skill_res_->clear();
      }
    }
    cardmodel_ = 0u;
    scale_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_cardicon()) {
      if (cardicon_ != &::google::protobuf::internal::kEmptyString) {
        cardicon_->clear();
      }
    }
    buff_type_ = 1;
    effect_id_ = 0u;
    effect_id2_ = 0u;
    gamestats_ = 0u;
    gamestats_lvl_ = 0u;
    skill_dmgscale_ = 0;
    duration_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    es_id_ = 0u;
    battle_ability_ = 0u;
    skill_desc_ = 0u;
    buff_key_ = 0u;
    if (has_aquire_eff()) {
      if (aquire_eff_ != &::google::protobuf::internal::kEmptyString) {
        aquire_eff_->clear();
      }
    }
    if (has_buff_icon()) {
      if (buff_icon_ != &::google::protobuf::internal::kEmptyString) {
        buff_icon_->clear();
      }
    }
    if (has_buff_show()) {
      if (buff_show_ != &::google::protobuf::internal::kEmptyString) {
        buff_show_->clear();
      }
    }
    star_desc_lang_id_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    partner_skill_lang_id_ = 0u;
    partner_skill_up_lang_id_ = 0u;
    star_up_lang_id_ = 0u;
    star_bnum_ = 0u;
    star_anum_ = 0u;
    offset_ = 0;
    is_bind_ = 0u;
    if (has_battle_icon()) {
      if (battle_icon_ != &::google::protobuf::internal::kEmptyString) {
        battle_icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPartnerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_partner_id;
        break;
      }

      // optional uint32 partner_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_id_)));
          set_has_partner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role;
        break;
      }

      // optional .jynetwork.proto.eRoleType role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eRoleType_IsValid(value)) {
            set_role(static_cast< ::jynetwork::proto::eRoleType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardname;
        break;
      }

      // optional uint32 cardname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardname_)));
          set_has_cardname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // optional uint32 star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skill_res;
        break;
      }

      // optional string skill_res = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cardmodel;
        break;
      }

      // optional uint32 cardmodel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardmodel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardmodel_)));
          set_has_cardmodel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_scale;
        break;
      }

      // optional float scale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_cardicon;
        break;
      }

      // optional string cardicon = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_buff_type;
        break;
      }

      // optional .jynetwork.proto.ePartnerBuffType buff_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::ePartnerBuffType_IsValid(value)) {
            set_buff_type(static_cast< ::jynetwork::proto::ePartnerBuffType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_effect_id;
        break;
      }

      // optional uint32 effect_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gamestats;
        break;
      }

      // optional uint32 gamestats = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamestats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestats_)));
          set_has_gamestats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_gamestats_lvl;
        break;
      }

      // optional uint32 gamestats_lvl = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamestats_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestats_lvl_)));
          set_has_gamestats_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_skill_dmgscale;
        break;
      }

      // optional float skill_dmgscale = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_skill_dmgscale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &skill_dmgscale_)));
          set_has_skill_dmgscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_duration;
        break;
      }

      // optional float duration = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_es_id;
        break;
      }

      // optional uint32 es_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_es_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &es_id_)));
          set_has_es_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_battle_ability;
        break;
      }

      // optional uint32 battle_ability = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_ability_)));
          set_has_battle_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_skill_desc;
        break;
      }

      // optional uint32 skill_desc = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_desc_)));
          set_has_skill_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_buff_key;
        break;
      }

      // optional uint32 buff_key = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_key_)));
          set_has_buff_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_aquire_eff;
        break;
      }

      // optional string aquire_eff = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aquire_eff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aquire_eff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_buff_icon;
        break;
      }

      // optional string buff_icon = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buff_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_buff_show;
        break;
      }

      // optional string buff_show = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buff_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_star_desc_lang_id;
        break;
      }

      // optional uint32 star_desc_lang_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_desc_lang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_desc_lang_id_)));
          set_has_star_desc_lang_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_partner_skill_lang_id;
        break;
      }

      // optional uint32 partner_skill_lang_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_skill_lang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_skill_lang_id_)));
          set_has_partner_skill_lang_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_partner_skill_up_lang_id;
        break;
      }

      // optional uint32 partner_skill_up_lang_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_skill_up_lang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_skill_up_lang_id_)));
          set_has_partner_skill_up_lang_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_star_up_lang_id;
        break;
      }

      // optional uint32 star_up_lang_id = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_up_lang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_up_lang_id_)));
          set_has_star_up_lang_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_star_bnum;
        break;
      }

      // optional uint32 star_bnum = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_bnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_bnum_)));
          set_has_star_bnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_star_anum;
        break;
      }

      // optional uint32 star_anum = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_anum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_anum_)));
          set_has_star_anum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_offset;
        break;
      }

      // optional float offset = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_is_bind;
        break;
      }

      // optional uint32 is_bind = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_bind_)));
          set_has_is_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_battle_icon;
        break;
      }

      // optional string battle_icon = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battle_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_effect_id2;
        break;
      }

      // optional uint32 effect_id2 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id2_)));
          set_has_effect_id2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPartnerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 partner_id = 2;
  if (has_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->partner_id(), output);
  }

  // optional .jynetwork.proto.eRoleType role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->role(), output);
  }

  // optional uint32 cardname = 4;
  if (has_cardname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cardname(), output);
  }

  // optional uint32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->star(), output);
  }

  // optional string skill_res = 6;
  if (has_skill_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->skill_res(), output);
  }

  // optional uint32 cardmodel = 7;
  if (has_cardmodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cardmodel(), output);
  }

  // optional float scale = 8;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->scale(), output);
  }

  // optional string cardicon = 9;
  if (has_cardicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->cardicon(), output);
  }

  // optional .jynetwork.proto.ePartnerBuffType buff_type = 10;
  if (has_buff_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->buff_type(), output);
  }

  // optional uint32 effect_id = 11;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->effect_id(), output);
  }

  // optional uint32 gamestats = 12;
  if (has_gamestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gamestats(), output);
  }

  // optional uint32 gamestats_lvl = 13;
  if (has_gamestats_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gamestats_lvl(), output);
  }

  // optional float skill_dmgscale = 14;
  if (has_skill_dmgscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->skill_dmgscale(), output);
  }

  // optional float duration = 15;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->duration(), output);
  }

  // optional uint32 es_id = 16;
  if (has_es_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->es_id(), output);
  }

  // optional uint32 battle_ability = 17;
  if (has_battle_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->battle_ability(), output);
  }

  // optional uint32 skill_desc = 18;
  if (has_skill_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->skill_desc(), output);
  }

  // optional uint32 buff_key = 19;
  if (has_buff_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->buff_key(), output);
  }

  // optional string aquire_eff = 20;
  if (has_aquire_eff()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->aquire_eff(), output);
  }

  // optional string buff_icon = 21;
  if (has_buff_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->buff_icon(), output);
  }

  // optional string buff_show = 22;
  if (has_buff_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->buff_show(), output);
  }

  // optional uint32 star_desc_lang_id = 23;
  if (has_star_desc_lang_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->star_desc_lang_id(), output);
  }

  // optional uint32 partner_skill_lang_id = 24;
  if (has_partner_skill_lang_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->partner_skill_lang_id(), output);
  }

  // optional uint32 partner_skill_up_lang_id = 25;
  if (has_partner_skill_up_lang_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->partner_skill_up_lang_id(), output);
  }

  // optional uint32 star_up_lang_id = 26;
  if (has_star_up_lang_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->star_up_lang_id(), output);
  }

  // optional uint32 star_bnum = 27;
  if (has_star_bnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->star_bnum(), output);
  }

  // optional uint32 star_anum = 28;
  if (has_star_anum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->star_anum(), output);
  }

  // optional float offset = 29;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->offset(), output);
  }

  // optional uint32 is_bind = 30;
  if (has_is_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->is_bind(), output);
  }

  // optional string battle_icon = 31;
  if (has_battle_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->battle_icon(), output);
  }

  // optional uint32 effect_id2 = 32;
  if (has_effect_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->effect_id2(), output);
  }

}

int sPartnerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 partner_id = 2;
    if (has_partner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_id());
    }

    // optional .jynetwork.proto.eRoleType role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }

    // optional uint32 cardname = 4;
    if (has_cardname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardname());
    }

    // optional uint32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional string skill_res = 6;
    if (has_skill_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill_res());
    }

    // optional uint32 cardmodel = 7;
    if (has_cardmodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardmodel());
    }

    // optional float scale = 8;
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string cardicon = 9;
    if (has_cardicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardicon());
    }

    // optional .jynetwork.proto.ePartnerBuffType buff_type = 10;
    if (has_buff_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buff_type());
    }

    // optional uint32 effect_id = 11;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }

    // optional uint32 effect_id2 = 32;
    if (has_effect_id2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id2());
    }

    // optional uint32 gamestats = 12;
    if (has_gamestats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestats());
    }

    // optional uint32 gamestats_lvl = 13;
    if (has_gamestats_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestats_lvl());
    }

    // optional float skill_dmgscale = 14;
    if (has_skill_dmgscale()) {
      total_size += 1 + 4;
    }

    // optional float duration = 15;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 es_id = 16;
    if (has_es_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->es_id());
    }

    // optional uint32 battle_ability = 17;
    if (has_battle_ability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_ability());
    }

    // optional uint32 skill_desc = 18;
    if (has_skill_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_desc());
    }

    // optional uint32 buff_key = 19;
    if (has_buff_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff_key());
    }

    // optional string aquire_eff = 20;
    if (has_aquire_eff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aquire_eff());
    }

    // optional string buff_icon = 21;
    if (has_buff_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buff_icon());
    }

    // optional string buff_show = 22;
    if (has_buff_show()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buff_show());
    }

    // optional uint32 star_desc_lang_id = 23;
    if (has_star_desc_lang_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_desc_lang_id());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 partner_skill_lang_id = 24;
    if (has_partner_skill_lang_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_skill_lang_id());
    }

    // optional uint32 partner_skill_up_lang_id = 25;
    if (has_partner_skill_up_lang_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_skill_up_lang_id());
    }

    // optional uint32 star_up_lang_id = 26;
    if (has_star_up_lang_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_up_lang_id());
    }

    // optional uint32 star_bnum = 27;
    if (has_star_bnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_bnum());
    }

    // optional uint32 star_anum = 28;
    if (has_star_anum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_anum());
    }

    // optional float offset = 29;
    if (has_offset()) {
      total_size += 2 + 4;
    }

    // optional uint32 is_bind = 30;
    if (has_is_bind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_bind());
    }

    // optional string battle_icon = 31;
    if (has_battle_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battle_icon());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPartnerStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPartnerStats*>(&from));
}

void sPartnerStats::MergeFrom(const sPartnerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_partner_id()) {
      set_partner_id(from.partner_id());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_cardname()) {
      set_cardname(from.cardname());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_skill_res()) {
      set_skill_res(from.skill_res());
    }
    if (from.has_cardmodel()) {
      set_cardmodel(from.cardmodel());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cardicon()) {
      set_cardicon(from.cardicon());
    }
    if (from.has_buff_type()) {
      set_buff_type(from.buff_type());
    }
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_effect_id2()) {
      set_effect_id2(from.effect_id2());
    }
    if (from.has_gamestats()) {
      set_gamestats(from.gamestats());
    }
    if (from.has_gamestats_lvl()) {
      set_gamestats_lvl(from.gamestats_lvl());
    }
    if (from.has_skill_dmgscale()) {
      set_skill_dmgscale(from.skill_dmgscale());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_es_id()) {
      set_es_id(from.es_id());
    }
    if (from.has_battle_ability()) {
      set_battle_ability(from.battle_ability());
    }
    if (from.has_skill_desc()) {
      set_skill_desc(from.skill_desc());
    }
    if (from.has_buff_key()) {
      set_buff_key(from.buff_key());
    }
    if (from.has_aquire_eff()) {
      set_aquire_eff(from.aquire_eff());
    }
    if (from.has_buff_icon()) {
      set_buff_icon(from.buff_icon());
    }
    if (from.has_buff_show()) {
      set_buff_show(from.buff_show());
    }
    if (from.has_star_desc_lang_id()) {
      set_star_desc_lang_id(from.star_desc_lang_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_partner_skill_lang_id()) {
      set_partner_skill_lang_id(from.partner_skill_lang_id());
    }
    if (from.has_partner_skill_up_lang_id()) {
      set_partner_skill_up_lang_id(from.partner_skill_up_lang_id());
    }
    if (from.has_star_up_lang_id()) {
      set_star_up_lang_id(from.star_up_lang_id());
    }
    if (from.has_star_bnum()) {
      set_star_bnum(from.star_bnum());
    }
    if (from.has_star_anum()) {
      set_star_anum(from.star_anum());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_is_bind()) {
      set_is_bind(from.is_bind());
    }
    if (from.has_battle_icon()) {
      set_battle_icon(from.battle_icon());
    }
  }
}

void sPartnerStats::CopyFrom(const sPartnerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPartnerStats::IsInitialized() const {

  return true;
}

void sPartnerStats::Swap(sPartnerStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(partner_id_, other->partner_id_);
    std::swap(role_, other->role_);
    std::swap(cardname_, other->cardname_);
    std::swap(star_, other->star_);
    std::swap(skill_res_, other->skill_res_);
    std::swap(cardmodel_, other->cardmodel_);
    std::swap(scale_, other->scale_);
    std::swap(cardicon_, other->cardicon_);
    std::swap(buff_type_, other->buff_type_);
    std::swap(effect_id_, other->effect_id_);
    std::swap(effect_id2_, other->effect_id2_);
    std::swap(gamestats_, other->gamestats_);
    std::swap(gamestats_lvl_, other->gamestats_lvl_);
    std::swap(skill_dmgscale_, other->skill_dmgscale_);
    std::swap(duration_, other->duration_);
    std::swap(es_id_, other->es_id_);
    std::swap(battle_ability_, other->battle_ability_);
    std::swap(skill_desc_, other->skill_desc_);
    std::swap(buff_key_, other->buff_key_);
    std::swap(aquire_eff_, other->aquire_eff_);
    std::swap(buff_icon_, other->buff_icon_);
    std::swap(buff_show_, other->buff_show_);
    std::swap(star_desc_lang_id_, other->star_desc_lang_id_);
    std::swap(partner_skill_lang_id_, other->partner_skill_lang_id_);
    std::swap(partner_skill_up_lang_id_, other->partner_skill_up_lang_id_);
    std::swap(star_up_lang_id_, other->star_up_lang_id_);
    std::swap(star_bnum_, other->star_bnum_);
    std::swap(star_anum_, other->star_anum_);
    std::swap(offset_, other->offset_);
    std::swap(is_bind_, other->is_bind_);
    std::swap(battle_icon_, other->battle_icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPartnerStats::GetTypeName() const {
  return "jynetwork.proto.sPartnerStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sPartnerLvUpStats::kUidFieldNumber;
const int sPartnerLvUpStats::kRoleFieldNumber;
const int sPartnerLvUpStats::kLvFieldNumber;
const int sPartnerLvUpStats::kExpFieldNumber;
const int sPartnerLvUpStats::kIntensifyNeedFieldNumber;
const int sPartnerLvUpStats::kBattleAbilityFieldNumber;
#endif  // !_MSC_VER

sPartnerLvUpStats::sPartnerLvUpStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPartnerLvUpStats::InitAsDefaultInstance() {
}

sPartnerLvUpStats::sPartnerLvUpStats(const sPartnerLvUpStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPartnerLvUpStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  role_ = 0u;
  lv_ = 0u;
  exp_ = 0u;
  intensify_need_ = 0u;
  battle_ability_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPartnerLvUpStats::~sPartnerLvUpStats() {
  SharedDtor();
}

void sPartnerLvUpStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sPartnerLvUpStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPartnerLvUpStats& sPartnerLvUpStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sPartnerLvUpStats* sPartnerLvUpStats::default_instance_ = NULL;

sPartnerLvUpStats* sPartnerLvUpStats::New() const {
  return new sPartnerLvUpStats;
}

void sPartnerLvUpStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    role_ = 0u;
    lv_ = 0u;
    exp_ = 0u;
    intensify_need_ = 0u;
    battle_ability_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPartnerLvUpStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role;
        break;
      }

      // optional uint32 role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_intensify_need;
        break;
      }

      // optional uint32 intensify_need = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensify_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensify_need_)));
          set_has_intensify_need();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battle_ability;
        break;
      }

      // optional uint32 battle_ability = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_ability_)));
          set_has_battle_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPartnerLvUpStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role(), output);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 intensify_need = 5;
  if (has_intensify_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->intensify_need(), output);
  }

  // optional uint32 battle_ability = 6;
  if (has_battle_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battle_ability(), output);
  }

}

int sPartnerLvUpStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

    // optional uint32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 intensify_need = 5;
    if (has_intensify_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensify_need());
    }

    // optional uint32 battle_ability = 6;
    if (has_battle_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_ability());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPartnerLvUpStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPartnerLvUpStats*>(&from));
}

void sPartnerLvUpStats::MergeFrom(const sPartnerLvUpStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_intensify_need()) {
      set_intensify_need(from.intensify_need());
    }
    if (from.has_battle_ability()) {
      set_battle_ability(from.battle_ability());
    }
  }
}

void sPartnerLvUpStats::CopyFrom(const sPartnerLvUpStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPartnerLvUpStats::IsInitialized() const {

  return true;
}

void sPartnerLvUpStats::Swap(sPartnerLvUpStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(role_, other->role_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(intensify_need_, other->intensify_need_);
    std::swap(battle_ability_, other->battle_ability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPartnerLvUpStats::GetTypeName() const {
  return "jynetwork.proto.sPartnerLvUpStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sPartnerIntensifyStats::kUidFieldNumber;
const int sPartnerIntensifyStats::kTypeFieldNumber;
const int sPartnerIntensifyStats::kIntensifyFieldNumber;
const int sPartnerIntensifyStats::kItemneedFieldNumber;
const int sPartnerIntensifyStats::kDropPercentFieldNumber;
const int sPartnerIntensifyStats::kBattleAbilityFieldNumber;
const int sPartnerIntensifyStats::kIntensifyDesFieldNumber;
const int sPartnerIntensifyStats::kLvLimitFieldNumber;
#endif  // !_MSC_VER

sPartnerIntensifyStats::sPartnerIntensifyStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPartnerIntensifyStats::InitAsDefaultInstance() {
}

sPartnerIntensifyStats::sPartnerIntensifyStats(const sPartnerIntensifyStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPartnerIntensifyStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  type_ = 0u;
  intensify_ = 0u;
  drop_percent_ = 0;
  battle_ability_ = 0u;
  intensify_des_ = 0u;
  lv_limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPartnerIntensifyStats::~sPartnerIntensifyStats() {
  SharedDtor();
}

void sPartnerIntensifyStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sPartnerIntensifyStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPartnerIntensifyStats& sPartnerIntensifyStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sPartnerIntensifyStats* sPartnerIntensifyStats::default_instance_ = NULL;

sPartnerIntensifyStats* sPartnerIntensifyStats::New() const {
  return new sPartnerIntensifyStats;
}

void sPartnerIntensifyStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    type_ = 0u;
    intensify_ = 0u;
    drop_percent_ = 0;
    battle_ability_ = 0u;
    intensify_des_ = 0u;
    lv_limit_ = 0u;
  }
  itemneed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPartnerIntensifyStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_intensify;
        break;
      }

      // optional uint32 intensify = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensify_)));
          set_has_intensify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemneed;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem itemneed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemneed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemneed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemneed;
        if (input->ExpectTag(45)) goto parse_drop_percent;
        break;
      }

      // optional float drop_percent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_drop_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &drop_percent_)));
          set_has_drop_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battle_ability;
        break;
      }

      // optional uint32 battle_ability = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_ability_)));
          set_has_battle_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_intensify_des;
        break;
      }

      // optional uint32 intensify_des = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensify_des:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensify_des_)));
          set_has_intensify_des();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lv_limit;
        break;
      }

      // optional uint32 lv_limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_limit_)));
          set_has_lv_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPartnerIntensifyStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 intensify = 3;
  if (has_intensify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->intensify(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem itemneed = 4;
  for (int i = 0; i < this->itemneed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->itemneed(i), output);
  }

  // optional float drop_percent = 5;
  if (has_drop_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->drop_percent(), output);
  }

  // optional uint32 battle_ability = 6;
  if (has_battle_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battle_ability(), output);
  }

  // optional uint32 intensify_des = 7;
  if (has_intensify_des()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->intensify_des(), output);
  }

  // optional uint32 lv_limit = 8;
  if (has_lv_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lv_limit(), output);
  }

}

int sPartnerIntensifyStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 intensify = 3;
    if (has_intensify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensify());
    }

    // optional float drop_percent = 5;
    if (has_drop_percent()) {
      total_size += 1 + 4;
    }

    // optional uint32 battle_ability = 6;
    if (has_battle_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_ability());
    }

    // optional uint32 intensify_des = 7;
    if (has_intensify_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensify_des());
    }

    // optional uint32 lv_limit = 8;
    if (has_lv_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv_limit());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem itemneed = 4;
  total_size += 1 * this->itemneed_size();
  for (int i = 0; i < this->itemneed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemneed(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPartnerIntensifyStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPartnerIntensifyStats*>(&from));
}

void sPartnerIntensifyStats::MergeFrom(const sPartnerIntensifyStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemneed_.MergeFrom(from.itemneed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_intensify()) {
      set_intensify(from.intensify());
    }
    if (from.has_drop_percent()) {
      set_drop_percent(from.drop_percent());
    }
    if (from.has_battle_ability()) {
      set_battle_ability(from.battle_ability());
    }
    if (from.has_intensify_des()) {
      set_intensify_des(from.intensify_des());
    }
    if (from.has_lv_limit()) {
      set_lv_limit(from.lv_limit());
    }
  }
}

void sPartnerIntensifyStats::CopyFrom(const sPartnerIntensifyStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPartnerIntensifyStats::IsInitialized() const {

  return true;
}

void sPartnerIntensifyStats::Swap(sPartnerIntensifyStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(intensify_, other->intensify_);
    itemneed_.Swap(&other->itemneed_);
    std::swap(drop_percent_, other->drop_percent_);
    std::swap(battle_ability_, other->battle_ability_);
    std::swap(intensify_des_, other->intensify_des_);
    std::swap(lv_limit_, other->lv_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPartnerIntensifyStats::GetTypeName() const {
  return "jynetwork.proto.sPartnerIntensifyStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sPartnerStarStats::kUidFieldNumber;
const int sPartnerStarStats::kNameFieldNumber;
const int sPartnerStarStats::kPartnerIdFieldNumber;
const int sPartnerStarStats::kStarFieldNumber;
const int sPartnerStarStats::kItemIdFieldNumber;
const int sPartnerStarStats::kStartUpCountFieldNumber;
const int sPartnerStarStats::kDecomCountFieldNumber;
const int sPartnerStarStats::kLangIdFieldNumber;
const int sPartnerStarStats::kTypeFieldNumber;
const int sPartnerStarStats::kCardiconFieldNumber;
const int sPartnerStarStats::kUngetidFieldNumber;
#endif  // !_MSC_VER

sPartnerStarStats::sPartnerStarStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sPartnerStarStats::InitAsDefaultInstance() {
}

sPartnerStarStats::sPartnerStarStats(const sPartnerStarStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sPartnerStarStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partner_id_ = 0u;
  star_ = 0u;
  item_id_ = 0u;
  decom_count_ = 0u;
  lang_id_ = 0u;
  type_ = 0u;
  cardicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ungetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPartnerStarStats::~sPartnerStarStats() {
  SharedDtor();
}

void sPartnerStarStats::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (cardicon_ != &::google::protobuf::internal::kEmptyString) {
    delete cardicon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sPartnerStarStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sPartnerStarStats& sPartnerStarStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sPartnerStarStats* sPartnerStarStats::default_instance_ = NULL;

sPartnerStarStats* sPartnerStarStats::New() const {
  return new sPartnerStarStats;
}

void sPartnerStarStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    partner_id_ = 0u;
    star_ = 0u;
    item_id_ = 0u;
    decom_count_ = 0u;
    lang_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    type_ = 0u;
    if (has_cardicon()) {
      if (cardicon_ != &::google::protobuf::internal::kEmptyString) {
        cardicon_->clear();
      }
    }
    ungetid_ = 0u;
  }
  start_up_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sPartnerStarStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_partner_id;
        break;
      }

      // optional uint32 partner_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_id_)));
          set_has_partner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // optional uint32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_start_up_count;
        break;
      }

      // repeated uint32 start_up_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_up_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_start_up_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_start_up_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_start_up_count;
        if (input->ExpectTag(56)) goto parse_decom_count;
        break;
      }

      // optional uint32 decom_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decom_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decom_count_)));
          set_has_decom_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lang_id;
        break;
      }

      // optional uint32 lang_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lang_id_)));
          set_has_lang_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional uint32 type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_cardicon;
        break;
      }

      // optional string cardicon = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ungetid;
        break;
      }

      // optional uint32 ungetid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ungetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ungetid_)));
          set_has_ungetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPartnerStarStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 partner_id = 3;
  if (has_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->partner_id(), output);
  }

  // optional uint32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->star(), output);
  }

  // optional uint32 item_id = 5;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_id(), output);
  }

  // repeated uint32 start_up_count = 6;
  for (int i = 0; i < this->start_up_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->start_up_count(i), output);
  }

  // optional uint32 decom_count = 7;
  if (has_decom_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->decom_count(), output);
  }

  // optional uint32 lang_id = 8;
  if (has_lang_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lang_id(), output);
  }

  // optional uint32 type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->type(), output);
  }

  // optional string cardicon = 10;
  if (has_cardicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->cardicon(), output);
  }

  // optional uint32 ungetid = 11;
  if (has_ungetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ungetid(), output);
  }

}

int sPartnerStarStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 partner_id = 3;
    if (has_partner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_id());
    }

    // optional uint32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 decom_count = 7;
    if (has_decom_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decom_count());
    }

    // optional uint32 lang_id = 8;
    if (has_lang_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lang_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string cardicon = 10;
    if (has_cardicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardicon());
    }

    // optional uint32 ungetid = 11;
    if (has_ungetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ungetid());
    }

  }
  // repeated uint32 start_up_count = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->start_up_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->start_up_count(i));
    }
    total_size += 1 * this->start_up_count_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPartnerStarStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sPartnerStarStats*>(&from));
}

void sPartnerStarStats::MergeFrom(const sPartnerStarStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  start_up_count_.MergeFrom(from.start_up_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_partner_id()) {
      set_partner_id(from.partner_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_decom_count()) {
      set_decom_count(from.decom_count());
    }
    if (from.has_lang_id()) {
      set_lang_id(from.lang_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cardicon()) {
      set_cardicon(from.cardicon());
    }
    if (from.has_ungetid()) {
      set_ungetid(from.ungetid());
    }
  }
}

void sPartnerStarStats::CopyFrom(const sPartnerStarStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPartnerStarStats::IsInitialized() const {

  return true;
}

void sPartnerStarStats::Swap(sPartnerStarStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(partner_id_, other->partner_id_);
    std::swap(star_, other->star_);
    std::swap(item_id_, other->item_id_);
    start_up_count_.Swap(&other->start_up_count_);
    std::swap(decom_count_, other->decom_count_);
    std::swap(lang_id_, other->lang_id_);
    std::swap(type_, other->type_);
    std::swap(cardicon_, other->cardicon_);
    std::swap(ungetid_, other->ungetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sPartnerStarStats::GetTypeName() const {
  return "jynetwork.proto.sPartnerStarStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sActivityStats::kUidFieldNumber;
const int sActivityStats::kTaskVarFieldNumber;
const int sActivityStats::kShopUidFieldNumber;
const int sActivityStats::kUiTypeFieldNumber;
const int sActivityStats::kNameFieldNumber;
const int sActivityStats::kLabelFieldNumber;
const int sActivityStats::kIconFieldNumber;
const int sActivityStats::kIcon2FieldNumber;
const int sActivityStats::kTypeFieldNumber;
const int sActivityStats::kMapIdFieldNumber;
const int sActivityStats::kFinishVarFieldNumber;
const int sActivityStats::kFinishDescLangIdFieldNumber;
const int sActivityStats::kStartDateFieldNumber;
const int sActivityStats::kStartTimeFieldNumber;
const int sActivityStats::kEndDateFieldNumber;
const int sActivityStats::kEndTimeFieldNumber;
const int sActivityStats::kLvMinFieldNumber;
const int sActivityStats::kLvMaxFieldNumber;
const int sActivityStats::kGuideFieldNumber;
const int sActivityStats::kRewardItemFieldNumber;
const int sActivityStats::kActTypeLangIdFieldNumber;
const int sActivityStats::kActDescLangIdFieldNumber;
const int sActivityStats::kOrderFieldNumber;
#endif  // !_MSC_VER

sActivityStats::sActivityStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sActivityStats::InitAsDefaultInstance() {
}

sActivityStats::sActivityStats(const sActivityStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sActivityStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  task_var_ = 0u;
  shop_uid_ = 0u;
  ui_type_ = 0u;
  name_ = 0u;
  label_ = 0u;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  map_id_ = 0u;
  finish_var_ = 0u;
  finish_desc_lang_id_ = 0u;
  start_date_ = 0u;
  start_time_ = 0u;
  end_date_ = 0u;
  end_time_ = 0u;
  lv_min_ = 0u;
  lv_max_ = 0u;
  guide_ = 0u;
  act_type_lang_id_ = 0u;
  act_desc_lang_id_ = 0u;
  order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sActivityStats::~sActivityStats() {
  SharedDtor();
}

void sActivityStats::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon2_ != &::google::protobuf::internal::kEmptyString) {
    delete icon2_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sActivityStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sActivityStats& sActivityStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sActivityStats* sActivityStats::default_instance_ = NULL;

sActivityStats* sActivityStats::New() const {
  return new sActivityStats;
}

void sActivityStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    task_var_ = 0u;
    shop_uid_ = 0u;
    ui_type_ = 0u;
    name_ = 0u;
    label_ = 0u;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_icon2()) {
      if (icon2_ != &::google::protobuf::internal::kEmptyString) {
        icon2_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    type_ = 0u;
    map_id_ = 0u;
    finish_var_ = 0u;
    finish_desc_lang_id_ = 0u;
    start_date_ = 0u;
    start_time_ = 0u;
    end_date_ = 0u;
    end_time_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lv_min_ = 0u;
    lv_max_ = 0u;
    guide_ = 0u;
    act_type_lang_id_ = 0u;
    act_desc_lang_id_ = 0u;
    order_ = 0u;
  }
  reward_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sActivityStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_var;
        break;
      }

      // optional uint32 task_var = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_var_)));
          set_has_task_var();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shop_uid;
        break;
      }

      // optional uint32 shop_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_uid_)));
          set_has_shop_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ui_type;
        break;
      }

      // optional uint32 ui_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ui_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ui_type_)));
          set_has_ui_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_name;
        break;
      }

      // optional uint32 name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_label;
        break;
      }

      // optional uint32 label = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_icon;
        break;
      }

      // optional bytes icon = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_icon2;
        break;
      }

      // optional bytes icon2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional uint32 type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_finish_var;
        break;
      }

      // optional uint32 finish_var = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_var_)));
          set_has_finish_var();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_finish_desc_lang_id;
        break;
      }

      // optional uint32 finish_desc_lang_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_desc_lang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_desc_lang_id_)));
          set_has_finish_desc_lang_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_start_date;
        break;
      }

      // optional uint32 start_date = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_date_)));
          set_has_start_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_end_date;
        break;
      }

      // optional uint32 end_date = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_date_)));
          set_has_end_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_end_time;
        break;
      }

      // optional uint32 end_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lv_min;
        break;
      }

      // optional uint32 lv_min = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_min_)));
          set_has_lv_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_lv_max;
        break;
      }

      // optional uint32 lv_max = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_max_)));
          set_has_lv_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_guide;
        break;
      }

      // optional uint32 guide = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guide_)));
          set_has_guide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_reward_item;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem reward_item = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_reward_item;
        if (input->ExpectTag(168)) goto parse_act_type_lang_id;
        break;
      }

      // optional uint32 act_type_lang_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_type_lang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &act_type_lang_id_)));
          set_has_act_type_lang_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_act_desc_lang_id;
        break;
      }

      // optional uint32 act_desc_lang_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_desc_lang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &act_desc_lang_id_)));
          set_has_act_desc_lang_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_order;
        break;
      }

      // optional uint32 order = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sActivityStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 task_var = 2;
  if (has_task_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_var(), output);
  }

  // optional uint32 shop_uid = 3;
  if (has_shop_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shop_uid(), output);
  }

  // optional uint32 ui_type = 4;
  if (has_ui_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ui_type(), output);
  }

  // optional uint32 name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->name(), output);
  }

  // optional uint32 label = 6;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->label(), output);
  }

  // optional bytes icon = 7;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->icon(), output);
  }

  // optional bytes icon2 = 8;
  if (has_icon2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->icon2(), output);
  }

  // optional uint32 type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->type(), output);
  }

  // optional uint32 map_id = 10;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->map_id(), output);
  }

  // optional uint32 finish_var = 11;
  if (has_finish_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->finish_var(), output);
  }

  // optional uint32 finish_desc_lang_id = 12;
  if (has_finish_desc_lang_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->finish_desc_lang_id(), output);
  }

  // optional uint32 start_date = 13;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->start_date(), output);
  }

  // optional uint32 start_time = 14;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->start_time(), output);
  }

  // optional uint32 end_date = 15;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->end_date(), output);
  }

  // optional uint32 end_time = 16;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->end_time(), output);
  }

  // optional uint32 lv_min = 17;
  if (has_lv_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->lv_min(), output);
  }

  // optional uint32 lv_max = 18;
  if (has_lv_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->lv_max(), output);
  }

  // optional uint32 guide = 19;
  if (has_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->guide(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem reward_item = 20;
  for (int i = 0; i < this->reward_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->reward_item(i), output);
  }

  // optional uint32 act_type_lang_id = 21;
  if (has_act_type_lang_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->act_type_lang_id(), output);
  }

  // optional uint32 act_desc_lang_id = 22;
  if (has_act_desc_lang_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->act_desc_lang_id(), output);
  }

  // optional uint32 order = 23;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->order(), output);
  }

}

int sActivityStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 task_var = 2;
    if (has_task_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_var());
    }

    // optional uint32 shop_uid = 3;
    if (has_shop_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_uid());
    }

    // optional uint32 ui_type = 4;
    if (has_ui_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ui_type());
    }

    // optional uint32 name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }

    // optional uint32 label = 6;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label());
    }

    // optional bytes icon = 7;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->icon());
    }

    // optional bytes icon2 = 8;
    if (has_icon2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->icon2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 map_id = 10;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 finish_var = 11;
    if (has_finish_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish_var());
    }

    // optional uint32 finish_desc_lang_id = 12;
    if (has_finish_desc_lang_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish_desc_lang_id());
    }

    // optional uint32 start_date = 13;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_date());
    }

    // optional uint32 start_time = 14;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 end_date = 15;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_date());
    }

    // optional uint32 end_time = 16;
    if (has_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 lv_min = 17;
    if (has_lv_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv_min());
    }

    // optional uint32 lv_max = 18;
    if (has_lv_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv_max());
    }

    // optional uint32 guide = 19;
    if (has_guide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guide());
    }

    // optional uint32 act_type_lang_id = 21;
    if (has_act_type_lang_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->act_type_lang_id());
    }

    // optional uint32 act_desc_lang_id = 22;
    if (has_act_desc_lang_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->act_desc_lang_id());
    }

    // optional uint32 order = 23;
    if (has_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem reward_item = 20;
  total_size += 2 * this->reward_item_size();
  for (int i = 0; i < this->reward_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sActivityStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sActivityStats*>(&from));
}

void sActivityStats::MergeFrom(const sActivityStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_item_.MergeFrom(from.reward_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_task_var()) {
      set_task_var(from.task_var());
    }
    if (from.has_shop_uid()) {
      set_shop_uid(from.shop_uid());
    }
    if (from.has_ui_type()) {
      set_ui_type(from.ui_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_icon2()) {
      set_icon2(from.icon2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_finish_var()) {
      set_finish_var(from.finish_var());
    }
    if (from.has_finish_desc_lang_id()) {
      set_finish_desc_lang_id(from.finish_desc_lang_id());
    }
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lv_min()) {
      set_lv_min(from.lv_min());
    }
    if (from.has_lv_max()) {
      set_lv_max(from.lv_max());
    }
    if (from.has_guide()) {
      set_guide(from.guide());
    }
    if (from.has_act_type_lang_id()) {
      set_act_type_lang_id(from.act_type_lang_id());
    }
    if (from.has_act_desc_lang_id()) {
      set_act_desc_lang_id(from.act_desc_lang_id());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
}

void sActivityStats::CopyFrom(const sActivityStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sActivityStats::IsInitialized() const {

  return true;
}

void sActivityStats::Swap(sActivityStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(task_var_, other->task_var_);
    std::swap(shop_uid_, other->shop_uid_);
    std::swap(ui_type_, other->ui_type_);
    std::swap(name_, other->name_);
    std::swap(label_, other->label_);
    std::swap(icon_, other->icon_);
    std::swap(icon2_, other->icon2_);
    std::swap(type_, other->type_);
    std::swap(map_id_, other->map_id_);
    std::swap(finish_var_, other->finish_var_);
    std::swap(finish_desc_lang_id_, other->finish_desc_lang_id_);
    std::swap(start_date_, other->start_date_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_date_, other->end_date_);
    std::swap(end_time_, other->end_time_);
    std::swap(lv_min_, other->lv_min_);
    std::swap(lv_max_, other->lv_max_);
    std::swap(guide_, other->guide_);
    reward_item_.Swap(&other->reward_item_);
    std::swap(act_type_lang_id_, other->act_type_lang_id_);
    std::swap(act_desc_lang_id_, other->act_desc_lang_id_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sActivityStats::GetTypeName() const {
  return "jynetwork.proto.sActivityStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sRouletteStats::kUidFieldNumber;
const int sRouletteStats::kRouletteTypeFieldNumber;
const int sRouletteStats::kDropIdFieldNumber;
const int sRouletteStats::kPercentFieldNumber;
const int sRouletteStats::kCostTypeFieldNumber;
const int sRouletteStats::kCostValueFieldNumber;
const int sRouletteStats::kCostItemFieldNumber;
const int sRouletteStats::kCostItemNumFieldNumber;
const int sRouletteStats::kItemsFieldNumber;
#endif  // !_MSC_VER

sRouletteStats::sRouletteStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sRouletteStats::InitAsDefaultInstance() {
}

sRouletteStats::sRouletteStats(const sRouletteStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sRouletteStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  roulette_type_ = 0u;
  cost_type_ = 0u;
  cost_value_ = 0u;
  cost_item_ = 0u;
  cost_item_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sRouletteStats::~sRouletteStats() {
  SharedDtor();
}

void sRouletteStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sRouletteStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sRouletteStats& sRouletteStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sRouletteStats* sRouletteStats::default_instance_ = NULL;

sRouletteStats* sRouletteStats::New() const {
  return new sRouletteStats;
}

void sRouletteStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    roulette_type_ = 0u;
    cost_type_ = 0u;
    cost_value_ = 0u;
    cost_item_ = 0u;
    cost_item_num_ = 0u;
  }
  drop_id_.Clear();
  percent_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sRouletteStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roulette_type;
        break;
      }

      // optional uint32 roulette_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roulette_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roulette_type_)));
          set_has_roulette_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_drop_id;
        break;
      }

      // repeated uint32 drop_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_drop_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_drop_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_drop_id;
        if (input->ExpectTag(32)) goto parse_percent;
        break;
      }

      // repeated uint32 percent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_percent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_percent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_percent;
        if (input->ExpectTag(72)) goto parse_cost_type;
        break;
      }

      // optional uint32 cost_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_type_)));
          set_has_cost_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cost_value;
        break;
      }

      // optional uint32 cost_value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_value_)));
          set_has_cost_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cost_item;
        break;
      }

      // optional uint32 cost_item = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_item_)));
          set_has_cost_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cost_item_num;
        break;
      }

      // optional uint32 cost_item_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_item_num_)));
          set_has_cost_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_items;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem items = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sRouletteStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 roulette_type = 2;
  if (has_roulette_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roulette_type(), output);
  }

  // repeated uint32 drop_id = 3;
  for (int i = 0; i < this->drop_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->drop_id(i), output);
  }

  // repeated uint32 percent = 4;
  for (int i = 0; i < this->percent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->percent(i), output);
  }

  // optional uint32 cost_type = 9;
  if (has_cost_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cost_type(), output);
  }

  // optional uint32 cost_value = 10;
  if (has_cost_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cost_value(), output);
  }

  // optional uint32 cost_item = 11;
  if (has_cost_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cost_item(), output);
  }

  // optional uint32 cost_item_num = 12;
  if (has_cost_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cost_item_num(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem items = 13;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->items(i), output);
  }

}

int sRouletteStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 roulette_type = 2;
    if (has_roulette_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roulette_type());
    }

    // optional uint32 cost_type = 9;
    if (has_cost_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_type());
    }

    // optional uint32 cost_value = 10;
    if (has_cost_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_value());
    }

    // optional uint32 cost_item = 11;
    if (has_cost_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_item());
    }

    // optional uint32 cost_item_num = 12;
    if (has_cost_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_item_num());
    }

  }
  // repeated uint32 drop_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->drop_id(i));
    }
    total_size += 1 * this->drop_id_size() + data_size;
  }

  // repeated uint32 percent = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->percent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->percent(i));
    }
    total_size += 1 * this->percent_size() + data_size;
  }

  // repeated .jynetwork.proto.sSimpleItem items = 13;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sRouletteStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sRouletteStats*>(&from));
}

void sRouletteStats::MergeFrom(const sRouletteStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_id_.MergeFrom(from.drop_id_);
  percent_.MergeFrom(from.percent_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_roulette_type()) {
      set_roulette_type(from.roulette_type());
    }
    if (from.has_cost_type()) {
      set_cost_type(from.cost_type());
    }
    if (from.has_cost_value()) {
      set_cost_value(from.cost_value());
    }
    if (from.has_cost_item()) {
      set_cost_item(from.cost_item());
    }
    if (from.has_cost_item_num()) {
      set_cost_item_num(from.cost_item_num());
    }
  }
}

void sRouletteStats::CopyFrom(const sRouletteStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sRouletteStats::IsInitialized() const {

  return true;
}

void sRouletteStats::Swap(sRouletteStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(roulette_type_, other->roulette_type_);
    drop_id_.Swap(&other->drop_id_);
    percent_.Swap(&other->percent_);
    std::swap(cost_type_, other->cost_type_);
    std::swap(cost_value_, other->cost_value_);
    std::swap(cost_item_, other->cost_item_);
    std::swap(cost_item_num_, other->cost_item_num_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sRouletteStats::GetTypeName() const {
  return "jynetwork.proto.sRouletteStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sResourseDetail::kUidFieldNumber;
const int sResourseDetail::kTypeFieldNumber;
#endif  // !_MSC_VER

sResourseDetail::sResourseDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sResourseDetail::InitAsDefaultInstance() {
}

sResourseDetail::sResourseDetail(const sResourseDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sResourseDetail::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sResourseDetail::~sResourseDetail() {
  SharedDtor();
}

void sResourseDetail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sResourseDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sResourseDetail& sResourseDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sResourseDetail* sResourseDetail::default_instance_ = NULL;

sResourseDetail* sResourseDetail::New() const {
  return new sResourseDetail;
}

void sResourseDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sResourseDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sResourseDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

}

int sResourseDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sResourseDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sResourseDetail*>(&from));
}

void sResourseDetail::MergeFrom(const sResourseDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void sResourseDetail::CopyFrom(const sResourseDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sResourseDetail::IsInitialized() const {

  return true;
}

void sResourseDetail::Swap(sResourseDetail* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sResourseDetail::GetTypeName() const {
  return "jynetwork.proto.sResourseDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int sResourseStats::kUidFieldNumber;
const int sResourseStats::kNameFieldNumber;
const int sResourseStats::kGuildIdFieldNumber;
#endif  // !_MSC_VER

sResourseStats::sResourseStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sResourseStats::InitAsDefaultInstance() {
}

sResourseStats::sResourseStats(const sResourseStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sResourseStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sResourseStats::~sResourseStats() {
  SharedDtor();
}

void sResourseStats::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sResourseStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sResourseStats& sResourseStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sResourseStats* sResourseStats::default_instance_ = NULL;

sResourseStats* sResourseStats::New() const {
  return new sResourseStats;
}

void sResourseStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  guild_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sResourseStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guild_id;
        break;
      }

      // repeated .jynetwork.proto.sResourseDetail guild_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guild_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guild_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sResourseStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // repeated .jynetwork.proto.sResourseDetail guild_id = 3;
  for (int i = 0; i < this->guild_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->guild_id(i), output);
  }

}

int sResourseStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  // repeated .jynetwork.proto.sResourseDetail guild_id = 3;
  total_size += 1 * this->guild_id_size();
  for (int i = 0; i < this->guild_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guild_id(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sResourseStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sResourseStats*>(&from));
}

void sResourseStats::MergeFrom(const sResourseStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  guild_id_.MergeFrom(from.guild_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void sResourseStats::CopyFrom(const sResourseStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sResourseStats::IsInitialized() const {

  return true;
}

void sResourseStats::Swap(sResourseStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    guild_id_.Swap(&other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sResourseStats::GetTypeName() const {
  return "jynetwork.proto.sResourseStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sHomeBackground::kUidFieldNumber;
const int sHomeBackground::kNameFieldNumber;
const int sHomeBackground::kLayerFieldNumber;
const int sHomeBackground::kSpeedFieldNumber;
const int sHomeBackground::kUpLimitFieldNumber;
const int sHomeBackground::kDownLimitFieldNumber;
const int sHomeBackground::kLeftLimitFieldNumber;
const int sHomeBackground::kRightLimitFieldNumber;
#endif  // !_MSC_VER

sHomeBackground::sHomeBackground()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sHomeBackground::InitAsDefaultInstance() {
}

sHomeBackground::sHomeBackground(const sHomeBackground& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sHomeBackground::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  layer_ = 0u;
  speed_ = 0;
  up_limit_ = 0u;
  down_limit_ = 0u;
  left_limit_ = 0u;
  right_limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sHomeBackground::~sHomeBackground() {
  SharedDtor();
}

void sHomeBackground::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sHomeBackground::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sHomeBackground& sHomeBackground::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sHomeBackground* sHomeBackground::default_instance_ = NULL;

sHomeBackground* sHomeBackground::New() const {
  return new sHomeBackground;
}

void sHomeBackground::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    layer_ = 0u;
    speed_ = 0;
    up_limit_ = 0u;
    down_limit_ = 0u;
    left_limit_ = 0u;
    right_limit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sHomeBackground::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_layer;
        break;
      }

      // optional uint32 layer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_speed;
        break;
      }

      // optional float speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_up_limit;
        break;
      }

      // optional uint32 up_limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_limit_)));
          set_has_up_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_down_limit;
        break;
      }

      // optional uint32 down_limit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_down_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &down_limit_)));
          set_has_down_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_left_limit;
        break;
      }

      // optional uint32 left_limit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_limit_)));
          set_has_left_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_right_limit;
        break;
      }

      // optional uint32 right_limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_limit_)));
          set_has_right_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sHomeBackground::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 layer = 3;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->layer(), output);
  }

  // optional float speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  // optional uint32 up_limit = 5;
  if (has_up_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->up_limit(), output);
  }

  // optional uint32 down_limit = 6;
  if (has_down_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->down_limit(), output);
  }

  // optional uint32 left_limit = 7;
  if (has_left_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->left_limit(), output);
  }

  // optional uint32 right_limit = 8;
  if (has_right_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->right_limit(), output);
  }

}

int sHomeBackground::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 layer = 3;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional float speed = 4;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional uint32 up_limit = 5;
    if (has_up_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_limit());
    }

    // optional uint32 down_limit = 6;
    if (has_down_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->down_limit());
    }

    // optional uint32 left_limit = 7;
    if (has_left_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_limit());
    }

    // optional uint32 right_limit = 8;
    if (has_right_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right_limit());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sHomeBackground::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sHomeBackground*>(&from));
}

void sHomeBackground::MergeFrom(const sHomeBackground& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_up_limit()) {
      set_up_limit(from.up_limit());
    }
    if (from.has_down_limit()) {
      set_down_limit(from.down_limit());
    }
    if (from.has_left_limit()) {
      set_left_limit(from.left_limit());
    }
    if (from.has_right_limit()) {
      set_right_limit(from.right_limit());
    }
  }
}

void sHomeBackground::CopyFrom(const sHomeBackground& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sHomeBackground::IsInitialized() const {

  return true;
}

void sHomeBackground::Swap(sHomeBackground* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(layer_, other->layer_);
    std::swap(speed_, other->speed_);
    std::swap(up_limit_, other->up_limit_);
    std::swap(down_limit_, other->down_limit_);
    std::swap(left_limit_, other->left_limit_);
    std::swap(right_limit_, other->right_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sHomeBackground::GetTypeName() const {
  return "jynetwork.proto.sHomeBackground";
}


// ===================================================================

#ifndef _MSC_VER
const int sEquipDetail::kUidFieldNumber;
#endif  // !_MSC_VER

sEquipDetail::sEquipDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEquipDetail::InitAsDefaultInstance() {
}

sEquipDetail::sEquipDetail(const sEquipDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEquipDetail::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEquipDetail::~sEquipDetail() {
  SharedDtor();
}

void sEquipDetail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEquipDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEquipDetail& sEquipDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sEquipDetail* sEquipDetail::default_instance_ = NULL;

sEquipDetail* sEquipDetail::New() const {
  return new sEquipDetail;
}

void sEquipDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEquipDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEquipDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

}

int sEquipDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEquipDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEquipDetail*>(&from));
}

void sEquipDetail::MergeFrom(const sEquipDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
}

void sEquipDetail::CopyFrom(const sEquipDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEquipDetail::IsInitialized() const {

  return true;
}

void sEquipDetail::Swap(sEquipDetail* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEquipDetail::GetTypeName() const {
  return "jynetwork.proto.sEquipDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int sEquipRecommend::kStageFieldNumber;
const int sEquipRecommend::kRoleFieldNumber;
const int sEquipRecommend::kEquipsetFieldNumber;
const int sEquipRecommend::kEquipIdFieldNumber;
#endif  // !_MSC_VER

sEquipRecommend::sEquipRecommend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEquipRecommend::InitAsDefaultInstance() {
}

sEquipRecommend::sEquipRecommend(const sEquipRecommend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEquipRecommend::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0u;
  role_ = 0u;
  equipset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEquipRecommend::~sEquipRecommend() {
  SharedDtor();
}

void sEquipRecommend::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEquipRecommend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEquipRecommend& sEquipRecommend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sEquipRecommend* sEquipRecommend::default_instance_ = NULL;

sEquipRecommend* sEquipRecommend::New() const {
  return new sEquipRecommend;
}

void sEquipRecommend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0u;
    role_ = 0u;
    equipset_ = 0u;
  }
  equip_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEquipRecommend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role;
        break;
      }

      // optional uint32 role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipset;
        break;
      }

      // optional uint32 equipset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipset_)));
          set_has_equipset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equip_id;
        break;
      }

      // repeated .jynetwork.proto.sEquipDetail equip_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equip_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEquipRecommend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage(), output);
  }

  // optional uint32 role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role(), output);
  }

  // optional uint32 equipset = 3;
  if (has_equipset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equipset(), output);
  }

  // repeated .jynetwork.proto.sEquipDetail equip_id = 4;
  for (int i = 0; i < this->equip_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->equip_id(i), output);
  }

}

int sEquipRecommend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

    // optional uint32 role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

    // optional uint32 equipset = 3;
    if (has_equipset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipset());
    }

  }
  // repeated .jynetwork.proto.sEquipDetail equip_id = 4;
  total_size += 1 * this->equip_id_size();
  for (int i = 0; i < this->equip_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_id(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEquipRecommend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEquipRecommend*>(&from));
}

void sEquipRecommend::MergeFrom(const sEquipRecommend& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_id_.MergeFrom(from.equip_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_equipset()) {
      set_equipset(from.equipset());
    }
  }
}

void sEquipRecommend::CopyFrom(const sEquipRecommend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEquipRecommend::IsInitialized() const {

  return true;
}

void sEquipRecommend::Swap(sEquipRecommend* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(role_, other->role_);
    std::swap(equipset_, other->equipset_);
    equip_id_.Swap(&other->equip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEquipRecommend::GetTypeName() const {
  return "jynetwork.proto.sEquipRecommend";
}


// ===================================================================

#ifndef _MSC_VER
const int sCastleMonsterInfoStats::kUidFieldNumber;
const int sCastleMonsterInfoStats::kGroupIdFieldNumber;
const int sCastleMonsterInfoStats::kRewardWaveFieldNumber;
const int sCastleMonsterInfoStats::kUnitTypeFieldNumber;
const int sCastleMonsterInfoStats::kMapIdFieldNumber;
const int sCastleMonsterInfoStats::kTimeFieldNumber;
#endif  // !_MSC_VER

sCastleMonsterInfoStats::sCastleMonsterInfoStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCastleMonsterInfoStats::InitAsDefaultInstance() {
}

sCastleMonsterInfoStats::sCastleMonsterInfoStats(const sCastleMonsterInfoStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCastleMonsterInfoStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  group_id_ = 0u;
  reward_wave_ = 0u;
  unit_type_ = 0u;
  map_id_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCastleMonsterInfoStats::~sCastleMonsterInfoStats() {
  SharedDtor();
}

void sCastleMonsterInfoStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCastleMonsterInfoStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCastleMonsterInfoStats& sCastleMonsterInfoStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sCastleMonsterInfoStats* sCastleMonsterInfoStats::default_instance_ = NULL;

sCastleMonsterInfoStats* sCastleMonsterInfoStats::New() const {
  return new sCastleMonsterInfoStats;
}

void sCastleMonsterInfoStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    group_id_ = 0u;
    reward_wave_ = 0u;
    unit_type_ = 0u;
    map_id_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCastleMonsterInfoStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_wave;
        break;
      }

      // optional uint32 reward_wave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_wave_)));
          set_has_reward_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unit_type;
        break;
      }

      // optional uint32 unit_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_type_)));
          set_has_unit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCastleMonsterInfoStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional uint32 reward_wave = 3;
  if (has_reward_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reward_wave(), output);
  }

  // optional uint32 unit_type = 4;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unit_type(), output);
  }

  // optional uint32 map_id = 5;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->map_id(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

}

int sCastleMonsterInfoStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint32 reward_wave = 3;
    if (has_reward_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_wave());
    }

    // optional uint32 unit_type = 4;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_type());
    }

    // optional uint32 map_id = 5;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCastleMonsterInfoStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCastleMonsterInfoStats*>(&from));
}

void sCastleMonsterInfoStats::MergeFrom(const sCastleMonsterInfoStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_reward_wave()) {
      set_reward_wave(from.reward_wave());
    }
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
}

void sCastleMonsterInfoStats::CopyFrom(const sCastleMonsterInfoStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCastleMonsterInfoStats::IsInitialized() const {

  return true;
}

void sCastleMonsterInfoStats::Swap(sCastleMonsterInfoStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(group_id_, other->group_id_);
    std::swap(reward_wave_, other->reward_wave_);
    std::swap(unit_type_, other->unit_type_);
    std::swap(map_id_, other->map_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCastleMonsterInfoStats::GetTypeName() const {
  return "jynetwork.proto.sCastleMonsterInfoStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sConstantsStats::kUidFieldNumber;
const int sConstantsStats::kBonusDiamondFieldNumber;
#endif  // !_MSC_VER

sConstantsStats::sConstantsStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sConstantsStats::InitAsDefaultInstance() {
}

sConstantsStats::sConstantsStats(const sConstantsStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sConstantsStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  bonusdiamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sConstantsStats::~sConstantsStats() {
  SharedDtor();
}

void sConstantsStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sConstantsStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sConstantsStats& sConstantsStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sConstantsStats* sConstantsStats::default_instance_ = NULL;

sConstantsStats* sConstantsStats::New() const {
  return new sConstantsStats;
}

void sConstantsStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    bonusdiamond_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sConstantsStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bonusDiamond;
        break;
      }

      // optional uint32 bonusDiamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonusDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonusdiamond_)));
          set_has_bonusdiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sConstantsStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 bonusDiamond = 2;
  if (has_bonusdiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bonusdiamond(), output);
  }

}

int sConstantsStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 bonusDiamond = 2;
    if (has_bonusdiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonusdiamond());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sConstantsStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sConstantsStats*>(&from));
}

void sConstantsStats::MergeFrom(const sConstantsStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_bonusdiamond()) {
      set_bonusdiamond(from.bonusdiamond());
    }
  }
}

void sConstantsStats::CopyFrom(const sConstantsStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sConstantsStats::IsInitialized() const {

  return true;
}

void sConstantsStats::Swap(sConstantsStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(bonusdiamond_, other->bonusdiamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sConstantsStats::GetTypeName() const {
  return "jynetwork.proto.sConstantsStats";
}


// ===================================================================

#ifndef _MSC_VER
const int NetBattleMove::kDelayFieldNumber;
const int NetBattleMove::kXFieldNumber;
const int NetBattleMove::kYFieldNumber;
#endif  // !_MSC_VER

NetBattleMove::NetBattleMove()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NetBattleMove::InitAsDefaultInstance() {
}

NetBattleMove::NetBattleMove(const NetBattleMove& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NetBattleMove::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetBattleMove::~NetBattleMove() {
  SharedDtor();
}

void NetBattleMove::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NetBattleMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetBattleMove& NetBattleMove::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

NetBattleMove* NetBattleMove::default_instance_ = NULL;

NetBattleMove* NetBattleMove::New() const {
  return new NetBattleMove;
}

void NetBattleMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    delay_ = 0;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NetBattleMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float delay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // optional float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // optional float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetBattleMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float delay = 1;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->delay(), output);
  }

  // optional float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

}

int NetBattleMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float delay = 1;
    if (has_delay()) {
      total_size += 1 + 4;
    }

    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetBattleMove::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetBattleMove*>(&from));
}

void NetBattleMove::MergeFrom(const NetBattleMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void NetBattleMove::CopyFrom(const NetBattleMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetBattleMove::IsInitialized() const {

  return true;
}

void NetBattleMove::Swap(NetBattleMove* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NetBattleMove::GetTypeName() const {
  return "jynetwork.proto.NetBattleMove";
}


// ===================================================================

#ifndef _MSC_VER
const int NetCardSkill::kDelayFieldNumber;
const int NetCardSkill::kXFieldNumber;
const int NetCardSkill::kYFieldNumber;
const int NetCardSkill::kCardSlotFieldNumber;
#endif  // !_MSC_VER

NetCardSkill::NetCardSkill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NetCardSkill::InitAsDefaultInstance() {
}

NetCardSkill::NetCardSkill(const NetCardSkill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NetCardSkill::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0;
  x_ = 0;
  y_ = 0;
  card_slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetCardSkill::~NetCardSkill() {
  SharedDtor();
}

void NetCardSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NetCardSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetCardSkill& NetCardSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

NetCardSkill* NetCardSkill::default_instance_ = NULL;

NetCardSkill* NetCardSkill::New() const {
  return new NetCardSkill;
}

void NetCardSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    delay_ = 0;
    x_ = 0;
    y_ = 0;
    card_slot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NetCardSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float delay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // optional float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // optional float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_card_slot;
        break;
      }

      // optional uint32 card_slot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_slot_)));
          set_has_card_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetCardSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float delay = 1;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->delay(), output);
  }

  // optional float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional uint32 card_slot = 4;
  if (has_card_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->card_slot(), output);
  }

}

int NetCardSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float delay = 1;
    if (has_delay()) {
      total_size += 1 + 4;
    }

    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional uint32 card_slot = 4;
    if (has_card_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_slot());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetCardSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetCardSkill*>(&from));
}

void NetCardSkill::MergeFrom(const NetCardSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_card_slot()) {
      set_card_slot(from.card_slot());
    }
  }
}

void NetCardSkill::CopyFrom(const NetCardSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetCardSkill::IsInitialized() const {

  return true;
}

void NetCardSkill::Swap(NetCardSkill* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(card_slot_, other->card_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NetCardSkill::GetTypeName() const {
  return "jynetwork.proto.NetCardSkill";
}


// ===================================================================

#ifndef _MSC_VER
const int NetBattleOper::kOperFieldNumber;
const int NetBattleOper::kPlayerIdFieldNumber;
const int NetBattleOper::kXFieldNumber;
const int NetBattleOper::kYFieldNumber;
const int NetBattleOper::kNowScoreFieldNumber;
const int NetBattleOper::kHpFieldNumber;
const int NetBattleOper::kMonsterIdFieldNumber;
const int NetBattleOper::kSkillIdFieldNumber;
const int NetBattleOper::kWaveIdFieldNumber;
const int NetBattleOper::kCardSkillFieldNumber;
const int NetBattleOper::kPlayerMoveFieldNumber;
const int NetBattleOper::kStatusFieldNumber;
const int NetBattleOper::kDamageScoreFieldNumber;
const int NetBattleOper::kKillPlayerIdFieldNumber;
const int NetBattleOper::kNowMyScoreFieldNumber;
const int NetBattleOper::kNowSubScoreFieldNumber;
const int NetBattleOper::kHurtHpFieldNumber;
const int NetBattleOper::kArenaHpFieldNumber;
#endif  // !_MSC_VER

NetBattleOper::NetBattleOper()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NetBattleOper::InitAsDefaultInstance() {
}

NetBattleOper::NetBattleOper(const NetBattleOper& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NetBattleOper::SharedCtor() {
  _cached_size_ = 0;
  oper_ = 7;
  player_id_ = 0u;
  x_ = 0;
  y_ = 0;
  now_score_ = 0;
  hp_ = 0;
  monster_id_ = 0u;
  status_ = 0u;
  damage_score_ = 0;
  kill_player_id_ = 0u;
  now_my_score_ = 0;
  now_sub_score_ = 0;
  hurt_hp_ = 0;
  arena_hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetBattleOper::~NetBattleOper() {
  SharedDtor();
}

void NetBattleOper::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NetBattleOper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetBattleOper& NetBattleOper::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

NetBattleOper* NetBattleOper::default_instance_ = NULL;

NetBattleOper* NetBattleOper::New() const {
  return new NetBattleOper;
}

void NetBattleOper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_ = 7;
    player_id_ = 0u;
    x_ = 0;
    y_ = 0;
    now_score_ = 0;
    hp_ = 0;
    monster_id_ = 0u;
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    status_ = 0u;
    damage_score_ = 0;
    kill_player_id_ = 0u;
    now_my_score_ = 0;
    now_sub_score_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    hurt_hp_ = 0;
    arena_hp_ = 0;
  }
  skill_id_.Clear();
  wave_id_.Clear();
  card_skill_.Clear();
  player_move_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NetBattleOper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jynetwork.proto.eNetBattleOper oper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eNetBattleOper_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::eNetBattleOper >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_id;
        break;
      }

      // optional uint32 monster_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_id;
        break;
      }

      // repeated uint32 skill_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_skill_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_id;
        if (input->ExpectTag(45)) goto parse_x;
        break;
      }

      // optional float x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_y;
        break;
      }

      // optional float y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_hp;
        break;
      }

      // optional float hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_wave_id;
        break;
      }

      // repeated uint32 wave_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_wave_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wave_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_wave_id;
        if (input->ExpectTag(74)) goto parse_card_skill;
        break;
      }

      // repeated .jynetwork.proto.NetCardSkill card_skill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_card_skill;
        if (input->ExpectTag(98)) goto parse_player_move;
        break;
      }

      // repeated .jynetwork.proto.NetBattleMove player_move = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_move()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_player_move;
        if (input->ExpectTag(104)) goto parse_status;
        break;
      }

      // optional uint32 status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_damage_score;
        break;
      }

      // optional float damage_score = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_damage_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damage_score_)));
          set_has_damage_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_kill_player_id;
        break;
      }

      // optional uint32 kill_player_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_player_id_)));
          set_has_kill_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_now_my_score;
        break;
      }

      // optional float now_my_score = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_now_my_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &now_my_score_)));
          set_has_now_my_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_now_sub_score;
        break;
      }

      // optional float now_sub_score = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_now_sub_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &now_sub_score_)));
          set_has_now_sub_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_hurt_hp;
        break;
      }

      // optional float hurt_hp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hurt_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hurt_hp_)));
          set_has_hurt_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_arena_hp;
        break;
      }

      // optional float arena_hp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_arena_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arena_hp_)));
          set_has_arena_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_now_score;
        break;
      }

      // optional float now_score = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_now_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &now_score_)));
          set_has_now_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetBattleOper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .jynetwork.proto.eNetBattleOper oper = 1;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->oper(), output);
  }

  // optional uint32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  // optional uint32 monster_id = 3;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monster_id(), output);
  }

  // repeated uint32 skill_id = 4;
  for (int i = 0; i < this->skill_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->skill_id(i), output);
  }

  // optional float x = 5;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x(), output);
  }

  // optional float y = 6;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y(), output);
  }

  // optional float hp = 7;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->hp(), output);
  }

  // repeated uint32 wave_id = 8;
  for (int i = 0; i < this->wave_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->wave_id(i), output);
  }

  // repeated .jynetwork.proto.NetCardSkill card_skill = 9;
  for (int i = 0; i < this->card_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->card_skill(i), output);
  }

  // repeated .jynetwork.proto.NetBattleMove player_move = 12;
  for (int i = 0; i < this->player_move_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->player_move(i), output);
  }

  // optional uint32 status = 13;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->status(), output);
  }

  // optional float damage_score = 14;
  if (has_damage_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->damage_score(), output);
  }

  // optional uint32 kill_player_id = 15;
  if (has_kill_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->kill_player_id(), output);
  }

  // optional float now_my_score = 16;
  if (has_now_my_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->now_my_score(), output);
  }

  // optional float now_sub_score = 17;
  if (has_now_sub_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->now_sub_score(), output);
  }

  // optional float hurt_hp = 18;
  if (has_hurt_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->hurt_hp(), output);
  }

  // optional float arena_hp = 19;
  if (has_arena_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->arena_hp(), output);
  }

  // optional float now_score = 20;
  if (has_now_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->now_score(), output);
  }

}

int NetBattleOper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .jynetwork.proto.eNetBattleOper oper = 1;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional float x = 5;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 6;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float now_score = 20;
    if (has_now_score()) {
      total_size += 2 + 4;
    }

    // optional float hp = 7;
    if (has_hp()) {
      total_size += 1 + 4;
    }

    // optional uint32 monster_id = 3;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional uint32 status = 13;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional float damage_score = 14;
    if (has_damage_score()) {
      total_size += 1 + 4;
    }

    // optional uint32 kill_player_id = 15;
    if (has_kill_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_player_id());
    }

    // optional float now_my_score = 16;
    if (has_now_my_score()) {
      total_size += 2 + 4;
    }

    // optional float now_sub_score = 17;
    if (has_now_sub_score()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float hurt_hp = 18;
    if (has_hurt_hp()) {
      total_size += 2 + 4;
    }

    // optional float arena_hp = 19;
    if (has_arena_hp()) {
      total_size += 2 + 4;
    }

  }
  // repeated uint32 skill_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skill_id(i));
    }
    total_size += 1 * this->skill_id_size() + data_size;
  }

  // repeated uint32 wave_id = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->wave_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->wave_id(i));
    }
    total_size += 1 * this->wave_id_size() + data_size;
  }

  // repeated .jynetwork.proto.NetCardSkill card_skill = 9;
  total_size += 1 * this->card_skill_size();
  for (int i = 0; i < this->card_skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_skill(i));
  }

  // repeated .jynetwork.proto.NetBattleMove player_move = 12;
  total_size += 1 * this->player_move_size();
  for (int i = 0; i < this->player_move_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_move(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetBattleOper::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetBattleOper*>(&from));
}

void NetBattleOper::MergeFrom(const NetBattleOper& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_id_.MergeFrom(from.skill_id_);
  wave_id_.MergeFrom(from.wave_id_);
  card_skill_.MergeFrom(from.card_skill_);
  player_move_.MergeFrom(from.player_move_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_now_score()) {
      set_now_score(from.now_score());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_damage_score()) {
      set_damage_score(from.damage_score());
    }
    if (from.has_kill_player_id()) {
      set_kill_player_id(from.kill_player_id());
    }
    if (from.has_now_my_score()) {
      set_now_my_score(from.now_my_score());
    }
    if (from.has_now_sub_score()) {
      set_now_sub_score(from.now_sub_score());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hurt_hp()) {
      set_hurt_hp(from.hurt_hp());
    }
    if (from.has_arena_hp()) {
      set_arena_hp(from.arena_hp());
    }
  }
}

void NetBattleOper::CopyFrom(const NetBattleOper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetBattleOper::IsInitialized() const {

  return true;
}

void NetBattleOper::Swap(NetBattleOper* other) {
  if (other != this) {
    std::swap(oper_, other->oper_);
    std::swap(player_id_, other->player_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(now_score_, other->now_score_);
    std::swap(hp_, other->hp_);
    std::swap(monster_id_, other->monster_id_);
    skill_id_.Swap(&other->skill_id_);
    wave_id_.Swap(&other->wave_id_);
    card_skill_.Swap(&other->card_skill_);
    player_move_.Swap(&other->player_move_);
    std::swap(status_, other->status_);
    std::swap(damage_score_, other->damage_score_);
    std::swap(kill_player_id_, other->kill_player_id_);
    std::swap(now_my_score_, other->now_my_score_);
    std::swap(now_sub_score_, other->now_sub_score_);
    std::swap(hurt_hp_, other->hurt_hp_);
    std::swap(arena_hp_, other->arena_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NetBattleOper::GetTypeName() const {
  return "jynetwork.proto.NetBattleOper";
}


// ===================================================================

#ifndef _MSC_VER
const int sEquipIdentify::kUidFieldNumber;
const int sEquipIdentify::kStarFieldNumber;
const int sEquipIdentify::kPartFieldNumber;
const int sEquipIdentify::kCostIdFieldNumber;
const int sEquipIdentify::kCostNumFieldNumber;
const int sEquipIdentify::kIdentifyItemIdFieldNumber;
const int sEquipIdentify::kIdentifyItemNumFieldNumber;
#endif  // !_MSC_VER

sEquipIdentify::sEquipIdentify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sEquipIdentify::InitAsDefaultInstance() {
}

sEquipIdentify::sEquipIdentify(const sEquipIdentify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sEquipIdentify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  star_ = 0u;
  part_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEquipIdentify::~sEquipIdentify() {
  SharedDtor();
}

void sEquipIdentify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sEquipIdentify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sEquipIdentify& sEquipIdentify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sEquipIdentify* sEquipIdentify::default_instance_ = NULL;

sEquipIdentify* sEquipIdentify::New() const {
  return new sEquipIdentify;
}

void sEquipIdentify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    star_ = 0u;
    part_ = 0u;
  }
  cost_id_.Clear();
  cost_num_.Clear();
  identify_item_id_.Clear();
  identify_item_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sEquipIdentify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_part;
        break;
      }

      // optional uint32 part = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_id;
        break;
      }

      // repeated uint32 cost_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_cost_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cost_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_id;
        if (input->ExpectTag(40)) goto parse_cost_num;
        break;
      }

      // repeated uint32 cost_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_cost_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cost_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cost_num;
        if (input->ExpectTag(48)) goto parse_identify_item_id;
        break;
      }

      // repeated uint32 identify_item_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identify_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_identify_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_identify_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_identify_item_id;
        if (input->ExpectTag(56)) goto parse_identify_item_num;
        break;
      }

      // repeated uint32 identify_item_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identify_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_identify_item_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_identify_item_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_identify_item_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEquipIdentify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // optional uint32 part = 3;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->part(), output);
  }

  // repeated uint32 cost_id = 4;
  for (int i = 0; i < this->cost_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->cost_id(i), output);
  }

  // repeated uint32 cost_num = 5;
  for (int i = 0; i < this->cost_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->cost_num(i), output);
  }

  // repeated uint32 identify_item_id = 6;
  for (int i = 0; i < this->identify_item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->identify_item_id(i), output);
  }

  // repeated uint32 identify_item_num = 7;
  for (int i = 0; i < this->identify_item_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->identify_item_num(i), output);
  }

}

int sEquipIdentify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 part = 3;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part());
    }

  }
  // repeated uint32 cost_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cost_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cost_id(i));
    }
    total_size += 1 * this->cost_id_size() + data_size;
  }

  // repeated uint32 cost_num = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cost_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cost_num(i));
    }
    total_size += 1 * this->cost_num_size() + data_size;
  }

  // repeated uint32 identify_item_id = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->identify_item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->identify_item_id(i));
    }
    total_size += 1 * this->identify_item_id_size() + data_size;
  }

  // repeated uint32 identify_item_num = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->identify_item_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->identify_item_num(i));
    }
    total_size += 1 * this->identify_item_num_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEquipIdentify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sEquipIdentify*>(&from));
}

void sEquipIdentify::MergeFrom(const sEquipIdentify& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_id_.MergeFrom(from.cost_id_);
  cost_num_.MergeFrom(from.cost_num_);
  identify_item_id_.MergeFrom(from.identify_item_id_);
  identify_item_num_.MergeFrom(from.identify_item_num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_part()) {
      set_part(from.part());
    }
  }
}

void sEquipIdentify::CopyFrom(const sEquipIdentify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEquipIdentify::IsInitialized() const {

  return true;
}

void sEquipIdentify::Swap(sEquipIdentify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(star_, other->star_);
    std::swap(part_, other->part_);
    cost_id_.Swap(&other->cost_id_);
    cost_num_.Swap(&other->cost_num_);
    identify_item_id_.Swap(&other->identify_item_id_);
    identify_item_num_.Swap(&other->identify_item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sEquipIdentify::GetTypeName() const {
  return "jynetwork.proto.sEquipIdentify";
}


// ===================================================================

#ifndef _MSC_VER
const int sAttributeBase::kUidFieldNumber;
const int sAttributeBase::kPartFieldNumber;
const int sAttributeBase::kStarFieldNumber;
const int sAttributeBase::kAttIdFieldNumber;
const int sAttributeBase::kAttMaxFieldNumber;
const int sAttributeBase::kAttWeightFieldNumber;
const int sAttributeBase::kSkillIdFieldNumber;
const int sAttributeBase::kAbilityFieldNumber;
#endif  // !_MSC_VER

sAttributeBase::sAttributeBase()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sAttributeBase::InitAsDefaultInstance() {
}

sAttributeBase::sAttributeBase(const sAttributeBase& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sAttributeBase::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  part_ = 0u;
  star_ = 0u;
  att_id_ = 0u;
  att_max_ = 0u;
  att_weight_ = 0u;
  skill_id_ = 0u;
  ability_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sAttributeBase::~sAttributeBase() {
  SharedDtor();
}

void sAttributeBase::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sAttributeBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sAttributeBase& sAttributeBase::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sAttributeBase* sAttributeBase::default_instance_ = NULL;

sAttributeBase* sAttributeBase::New() const {
  return new sAttributeBase;
}

void sAttributeBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    part_ = 0u;
    star_ = 0u;
    att_id_ = 0u;
    att_max_ = 0u;
    att_weight_ = 0u;
    skill_id_ = 0u;
    ability_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sAttributeBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_part;
        break;
      }

      // optional uint32 part = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional uint32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_att_id;
        break;
      }

      // optional uint32 att_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &att_id_)));
          set_has_att_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_att_max;
        break;
      }

      // optional uint32 att_max = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &att_max_)));
          set_has_att_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_att_weight;
        break;
      }

      // optional uint32 att_weight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &att_weight_)));
          set_has_att_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ability;
        break;
      }

      // optional uint32 ability = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_)));
          set_has_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sAttributeBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 part = 2;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->part(), output);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  // optional uint32 att_id = 4;
  if (has_att_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->att_id(), output);
  }

  // optional uint32 att_max = 5;
  if (has_att_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->att_max(), output);
  }

  // optional uint32 att_weight = 6;
  if (has_att_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->att_weight(), output);
  }

  // optional uint32 skill_id = 7;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->skill_id(), output);
  }

  // optional uint32 ability = 8;
  if (has_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ability(), output);
  }

}

int sAttributeBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 part = 2;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part());
    }

    // optional uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 att_id = 4;
    if (has_att_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->att_id());
    }

    // optional uint32 att_max = 5;
    if (has_att_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->att_max());
    }

    // optional uint32 att_weight = 6;
    if (has_att_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->att_weight());
    }

    // optional uint32 skill_id = 7;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional uint32 ability = 8;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sAttributeBase::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sAttributeBase*>(&from));
}

void sAttributeBase::MergeFrom(const sAttributeBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_part()) {
      set_part(from.part());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_att_id()) {
      set_att_id(from.att_id());
    }
    if (from.has_att_max()) {
      set_att_max(from.att_max());
    }
    if (from.has_att_weight()) {
      set_att_weight(from.att_weight());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_ability()) {
      set_ability(from.ability());
    }
  }
}

void sAttributeBase::CopyFrom(const sAttributeBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sAttributeBase::IsInitialized() const {

  return true;
}

void sAttributeBase::Swap(sAttributeBase* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(part_, other->part_);
    std::swap(star_, other->star_);
    std::swap(att_id_, other->att_id_);
    std::swap(att_max_, other->att_max_);
    std::swap(att_weight_, other->att_weight_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(ability_, other->ability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sAttributeBase::GetTypeName() const {
  return "jynetwork.proto.sAttributeBase";
}


// ===================================================================

#ifndef _MSC_VER
const int sCorpsLevel::kLvFieldNumber;
const int sCorpsLevel::kExpFieldNumber;
const int sCorpsLevel::kMemberCountFieldNumber;
#endif  // !_MSC_VER

sCorpsLevel::sCorpsLevel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sCorpsLevel::InitAsDefaultInstance() {
}

sCorpsLevel::sCorpsLevel(const sCorpsLevel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sCorpsLevel::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0u;
  exp_ = 0u;
  member_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCorpsLevel::~sCorpsLevel() {
  SharedDtor();
}

void sCorpsLevel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sCorpsLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sCorpsLevel& sCorpsLevel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sCorpsLevel* sCorpsLevel::default_instance_ = NULL;

sCorpsLevel* sCorpsLevel::New() const {
  return new sCorpsLevel;
}

void sCorpsLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0u;
    exp_ = 0u;
    member_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sCorpsLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_member_count;
        break;
      }

      // optional uint32 member_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
          set_has_member_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCorpsLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lv(), output);
  }

  // optional uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // optional uint32 member_count = 3;
  if (has_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->member_count(), output);
  }

}

int sCorpsLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 member_count = 3;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCorpsLevel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sCorpsLevel*>(&from));
}

void sCorpsLevel::MergeFrom(const sCorpsLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_member_count()) {
      set_member_count(from.member_count());
    }
  }
}

void sCorpsLevel::CopyFrom(const sCorpsLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCorpsLevel::IsInitialized() const {

  return true;
}

void sCorpsLevel::Swap(sCorpsLevel* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(member_count_, other->member_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sCorpsLevel::GetTypeName() const {
  return "jynetwork.proto.sCorpsLevel";
}


// ===================================================================

#ifndef _MSC_VER
const int sVipStats::kVipLvFieldNumber;
const int sVipStats::kVipExpFieldNumber;
const int sVipStats::kVipOperTimesFieldNumber;
const int sVipStats::kVipFunctionFieldNumber;
#endif  // !_MSC_VER

sVipStats::sVipStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sVipStats::InitAsDefaultInstance() {
}

sVipStats::sVipStats(const sVipStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sVipStats::SharedCtor() {
  _cached_size_ = 0;
  vip_lv_ = 0u;
  vip_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sVipStats::~sVipStats() {
  SharedDtor();
}

void sVipStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sVipStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sVipStats& sVipStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sVipStats* sVipStats::default_instance_ = NULL;

sVipStats* sVipStats::New() const {
  return new sVipStats;
}

void sVipStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vip_lv_ = 0u;
    vip_exp_ = 0u;
  }
  vip_oper_times_.Clear();
  vip_function_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sVipStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vip_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_lv_)));
          set_has_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_exp;
        break;
      }

      // optional uint32 vip_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_oper_times;
        break;
      }

      // repeated uint32 vip_oper_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_oper_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_vip_oper_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vip_oper_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_oper_times;
        if (input->ExpectTag(32)) goto parse_vip_function;
        break;
      }

      // repeated uint32 vip_function = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_function:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_vip_function())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vip_function())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_function;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sVipStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 vip_lv = 1;
  if (has_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vip_lv(), output);
  }

  // optional uint32 vip_exp = 2;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vip_exp(), output);
  }

  // repeated uint32 vip_oper_times = 3;
  for (int i = 0; i < this->vip_oper_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->vip_oper_times(i), output);
  }

  // repeated uint32 vip_function = 4;
  for (int i = 0; i < this->vip_function_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->vip_function(i), output);
  }

}

int sVipStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 vip_lv = 1;
    if (has_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_lv());
    }

    // optional uint32 vip_exp = 2;
    if (has_vip_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_exp());
    }

  }
  // repeated uint32 vip_oper_times = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->vip_oper_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vip_oper_times(i));
    }
    total_size += 1 * this->vip_oper_times_size() + data_size;
  }

  // repeated uint32 vip_function = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->vip_function_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vip_function(i));
    }
    total_size += 1 * this->vip_function_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sVipStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sVipStats*>(&from));
}

void sVipStats::MergeFrom(const sVipStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  vip_oper_times_.MergeFrom(from.vip_oper_times_);
  vip_function_.MergeFrom(from.vip_function_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vip_lv()) {
      set_vip_lv(from.vip_lv());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
  }
}

void sVipStats::CopyFrom(const sVipStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sVipStats::IsInitialized() const {

  return true;
}

void sVipStats::Swap(sVipStats* other) {
  if (other != this) {
    std::swap(vip_lv_, other->vip_lv_);
    std::swap(vip_exp_, other->vip_exp_);
    vip_oper_times_.Swap(&other->vip_oper_times_);
    vip_function_.Swap(&other->vip_function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sVipStats::GetTypeName() const {
  return "jynetwork.proto.sVipStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sVipCostStats::kTimesFieldNumber;
const int sVipCostStats::kOperFieldNumber;
const int sVipCostStats::kVipCostFieldNumber;
#endif  // !_MSC_VER

sVipCostStats::sVipCostStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sVipCostStats::InitAsDefaultInstance() {
}

sVipCostStats::sVipCostStats(const sVipCostStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sVipCostStats::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0u;
  oper_ = 0;
  vip_cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sVipCostStats::~sVipCostStats() {
  SharedDtor();
}

void sVipCostStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sVipCostStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sVipCostStats& sVipCostStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sVipCostStats* sVipCostStats::default_instance_ = NULL;

sVipCostStats* sVipCostStats::New() const {
  return new sVipCostStats;
}

void sVipCostStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    times_ = 0u;
    oper_ = 0;
    vip_cost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sVipCostStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oper;
        break;
      }

      // optional .jynetwork.proto.eVipOper oper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jynetwork::proto::eVipOper_IsValid(value)) {
            set_oper(static_cast< ::jynetwork::proto::eVipOper >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_cost;
        break;
      }

      // optional uint32 vip_cost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_cost_)));
          set_has_vip_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sVipCostStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->times(), output);
  }

  // optional .jynetwork.proto.eVipOper oper = 2;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->oper(), output);
  }

  // optional uint32 vip_cost = 3;
  if (has_vip_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vip_cost(), output);
  }

}

int sVipCostStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional .jynetwork.proto.eVipOper oper = 2;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional uint32 vip_cost = 3;
    if (has_vip_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_cost());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sVipCostStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sVipCostStats*>(&from));
}

void sVipCostStats::MergeFrom(const sVipCostStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_vip_cost()) {
      set_vip_cost(from.vip_cost());
    }
  }
}

void sVipCostStats::CopyFrom(const sVipCostStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sVipCostStats::IsInitialized() const {

  return true;
}

void sVipCostStats::Swap(sVipCostStats* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(oper_, other->oper_);
    std::swap(vip_cost_, other->vip_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sVipCostStats::GetTypeName() const {
  return "jynetwork.proto.sVipCostStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sServerStats::kUidFieldNumber;
const int sServerStats::kNameFieldNumber;
const int sServerStats::kIpFieldNumber;
const int sServerStats::kIsRecommendFieldNumber;
const int sServerStats::kStatusFieldNumber;
#endif  // !_MSC_VER

sServerStats::sServerStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sServerStats::InitAsDefaultInstance() {
}

sServerStats::sServerStats(const sServerStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sServerStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isrecommend_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sServerStats::~sServerStats() {
  SharedDtor();
}

void sServerStats::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sServerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sServerStats& sServerStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sServerStats* sServerStats::default_instance_ = NULL;

sServerStats* sServerStats::New() const {
  return new sServerStats;
}

void sServerStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    isrecommend_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sServerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional bytes ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isRecommend;
        break;
      }

      // optional uint32 isRecommend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRecommend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isrecommend_)));
          set_has_isrecommend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sServerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional bytes ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ip(), output);
  }

  // optional uint32 isRecommend = 4;
  if (has_isrecommend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isrecommend(), output);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

}

int sServerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional uint32 isRecommend = 4;
    if (has_isrecommend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isrecommend());
    }

    // optional uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sServerStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sServerStats*>(&from));
}

void sServerStats::MergeFrom(const sServerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_isrecommend()) {
      set_isrecommend(from.isrecommend());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void sServerStats::CopyFrom(const sServerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sServerStats::IsInitialized() const {

  return true;
}

void sServerStats::Swap(sServerStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(ip_, other->ip_);
    std::swap(isrecommend_, other->isrecommend_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sServerStats::GetTypeName() const {
  return "jynetwork.proto.sServerStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sServerItems::kServerItemFieldNumber;
#endif  // !_MSC_VER

sServerItems::sServerItems()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sServerItems::InitAsDefaultInstance() {
}

sServerItems::sServerItems(const sServerItems& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sServerItems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sServerItems::~sServerItems() {
  SharedDtor();
}

void sServerItems::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void sServerItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sServerItems& sServerItems::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sServerItems* sServerItems::default_instance_ = NULL;

sServerItems* sServerItems::New() const {
  return new sServerItems;
}

void sServerItems::Clear() {
  serveritem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sServerItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jynetwork.proto.sServerStats serverItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serveritem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_serverItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sServerItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jynetwork.proto.sServerStats serverItem = 1;
  for (int i = 0; i < this->serveritem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->serveritem(i), output);
  }

}

int sServerItems::ByteSize() const {
  int total_size = 0;

  // repeated .jynetwork.proto.sServerStats serverItem = 1;
  total_size += 1 * this->serveritem_size();
  for (int i = 0; i < this->serveritem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serveritem(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sServerItems::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sServerItems*>(&from));
}

void sServerItems::MergeFrom(const sServerItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  serveritem_.MergeFrom(from.serveritem_);
}

void sServerItems::CopyFrom(const sServerItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sServerItems::IsInitialized() const {

  return true;
}

void sServerItems::Swap(sServerItems* other) {
  if (other != this) {
    serveritem_.Swap(&other->serveritem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sServerItems::GetTypeName() const {
  return "jynetwork.proto.sServerItems";
}


// ===================================================================

#ifndef _MSC_VER
const int CorpsBossRewardStats::kRankFieldNumber;
const int CorpsBossRewardStats::kDropFieldNumber;
const int CorpsBossRewardStats::kItemsFieldNumber;
#endif  // !_MSC_VER

CorpsBossRewardStats::CorpsBossRewardStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CorpsBossRewardStats::InitAsDefaultInstance() {
}

CorpsBossRewardStats::CorpsBossRewardStats(const CorpsBossRewardStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CorpsBossRewardStats::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  drop_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorpsBossRewardStats::~CorpsBossRewardStats() {
  SharedDtor();
}

void CorpsBossRewardStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CorpsBossRewardStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CorpsBossRewardStats& CorpsBossRewardStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

CorpsBossRewardStats* CorpsBossRewardStats::default_instance_ = NULL;

CorpsBossRewardStats* CorpsBossRewardStats::New() const {
  return new CorpsBossRewardStats;
}

void CorpsBossRewardStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    drop_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CorpsBossRewardStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_drop;
        break;
      }

      // optional uint32 drop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_)));
          set_has_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CorpsBossRewardStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint32 drop = 2;
  if (has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->drop(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->items(i), output);
  }

}

int CorpsBossRewardStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 drop = 2;
    if (has_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorpsBossRewardStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CorpsBossRewardStats*>(&from));
}

void CorpsBossRewardStats::MergeFrom(const CorpsBossRewardStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_drop()) {
      set_drop(from.drop());
    }
  }
}

void CorpsBossRewardStats::CopyFrom(const CorpsBossRewardStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorpsBossRewardStats::IsInitialized() const {

  return true;
}

void CorpsBossRewardStats::Swap(CorpsBossRewardStats* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(drop_, other->drop_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CorpsBossRewardStats::GetTypeName() const {
  return "jynetwork.proto.CorpsBossRewardStats";
}


// ===================================================================

#ifndef _MSC_VER
const int CorpsBossMapStats::kMapIdFieldNumber;
const int CorpsBossMapStats::kDropIdFieldNumber;
const int CorpsBossMapStats::kKillDropIdFieldNumber;
const int CorpsBossMapStats::kHunterPointFieldNumber;
const int CorpsBossMapStats::kKillItemsFieldNumber;
const int CorpsBossMapStats::kItemsFieldNumber;
const int CorpsBossMapStats::kBossHpFieldNumber;
#endif  // !_MSC_VER

CorpsBossMapStats::CorpsBossMapStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CorpsBossMapStats::InitAsDefaultInstance() {
}

CorpsBossMapStats::CorpsBossMapStats(const CorpsBossMapStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CorpsBossMapStats::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  drop_id_ = 0u;
  kill_drop_id_ = 0u;
  hunter_point_ = 0u;
  boss_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorpsBossMapStats::~CorpsBossMapStats() {
  SharedDtor();
}

void CorpsBossMapStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CorpsBossMapStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CorpsBossMapStats& CorpsBossMapStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

CorpsBossMapStats* CorpsBossMapStats::default_instance_ = NULL;

CorpsBossMapStats* CorpsBossMapStats::New() const {
  return new CorpsBossMapStats;
}

void CorpsBossMapStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    drop_id_ = 0u;
    kill_drop_id_ = 0u;
    hunter_point_ = 0u;
    boss_hp_ = 0u;
  }
  kill_items_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CorpsBossMapStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_drop_id;
        break;
      }

      // optional uint32 drop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_id_)));
          set_has_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kill_drop_id;
        break;
      }

      // optional uint32 kill_drop_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_drop_id_)));
          set_has_kill_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hunter_point;
        break;
      }

      // optional uint32 hunter_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hunter_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hunter_point_)));
          set_has_hunter_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kill_items;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem kill_items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kill_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kill_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kill_items;
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }

      // repeated .jynetwork.proto.sSimpleItem items = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_items;
        if (input->ExpectTag(56)) goto parse_boss_hp;
        break;
      }

      // optional uint32 boss_hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_hp_)));
          set_has_boss_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CorpsBossMapStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional uint32 drop_id = 2;
  if (has_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->drop_id(), output);
  }

  // optional uint32 kill_drop_id = 3;
  if (has_kill_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kill_drop_id(), output);
  }

  // optional uint32 hunter_point = 4;
  if (has_hunter_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hunter_point(), output);
  }

  // repeated .jynetwork.proto.sSimpleItem kill_items = 5;
  for (int i = 0; i < this->kill_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->kill_items(i), output);
  }

  // repeated .jynetwork.proto.sSimpleItem items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->items(i), output);
  }

  // optional uint32 boss_hp = 7;
  if (has_boss_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->boss_hp(), output);
  }

}

int CorpsBossMapStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 drop_id = 2;
    if (has_drop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_id());
    }

    // optional uint32 kill_drop_id = 3;
    if (has_kill_drop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_drop_id());
    }

    // optional uint32 hunter_point = 4;
    if (has_hunter_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hunter_point());
    }

    // optional uint32 boss_hp = 7;
    if (has_boss_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_hp());
    }

  }
  // repeated .jynetwork.proto.sSimpleItem kill_items = 5;
  total_size += 1 * this->kill_items_size();
  for (int i = 0; i < this->kill_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kill_items(i));
  }

  // repeated .jynetwork.proto.sSimpleItem items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorpsBossMapStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CorpsBossMapStats*>(&from));
}

void CorpsBossMapStats::MergeFrom(const CorpsBossMapStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  kill_items_.MergeFrom(from.kill_items_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_drop_id()) {
      set_drop_id(from.drop_id());
    }
    if (from.has_kill_drop_id()) {
      set_kill_drop_id(from.kill_drop_id());
    }
    if (from.has_hunter_point()) {
      set_hunter_point(from.hunter_point());
    }
    if (from.has_boss_hp()) {
      set_boss_hp(from.boss_hp());
    }
  }
}

void CorpsBossMapStats::CopyFrom(const CorpsBossMapStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorpsBossMapStats::IsInitialized() const {

  return true;
}

void CorpsBossMapStats::Swap(CorpsBossMapStats* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(drop_id_, other->drop_id_);
    std::swap(kill_drop_id_, other->kill_drop_id_);
    std::swap(hunter_point_, other->hunter_point_);
    kill_items_.Swap(&other->kill_items_);
    items_.Swap(&other->items_);
    std::swap(boss_hp_, other->boss_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CorpsBossMapStats::GetTypeName() const {
  return "jynetwork.proto.CorpsBossMapStats";
}


// ===================================================================

#ifndef _MSC_VER
const int sArenaStats::kUidFieldNumber;
const int sArenaStats::kAddMinFieldNumber;
const int sArenaStats::kAddMaxFieldNumber;
const int sArenaStats::kGameStatFieldNumber;
const int sArenaStats::kMonsterLvFieldNumber;
#endif  // !_MSC_VER

sArenaStats::sArenaStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void sArenaStats::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  game_stat_ = const_cast< ::jynetwork::proto::sGameStats*>(
      ::jynetwork::proto::sGameStats::internal_default_instance());
#else
  game_stat_ = const_cast< ::jynetwork::proto::sGameStats*>(&::jynetwork::proto::sGameStats::default_instance());
#endif
}

sArenaStats::sArenaStats(const sArenaStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void sArenaStats::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  add_min_ = 0u;
  add_max_ = 0u;
  game_stat_ = NULL;
  monster_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sArenaStats::~sArenaStats() {
  SharedDtor();
}

void sArenaStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete game_stat_;
  }
}

void sArenaStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const sArenaStats& sArenaStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XML_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XML_2eproto();
#endif
  return *default_instance_;
}

sArenaStats* sArenaStats::default_instance_ = NULL;

sArenaStats* sArenaStats::New() const {
  return new sArenaStats;
}

void sArenaStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    add_min_ = 0u;
    add_max_ = 0u;
    if (has_game_stat()) {
      if (game_stat_ != NULL) game_stat_->::jynetwork::proto::sGameStats::Clear();
    }
    monster_lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool sArenaStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_min;
        break;
      }

      // optional uint32 add_min = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_min_)));
          set_has_add_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_max;
        break;
      }

      // optional uint32 add_max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_max_)));
          set_has_add_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_game_stat;
        break;
      }

      // optional .jynetwork.proto.sGameStats game_stat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_monster_lv;
        break;
      }

      // optional uint32 monster_lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_lv_)));
          set_has_monster_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sArenaStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 add_min = 2;
  if (has_add_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_min(), output);
  }

  // optional uint32 add_max = 3;
  if (has_add_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->add_max(), output);
  }

  // optional .jynetwork.proto.sGameStats game_stat = 4;
  if (has_game_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->game_stat(), output);
  }

  // optional uint32 monster_lv = 5;
  if (has_monster_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->monster_lv(), output);
  }

}

int sArenaStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 add_min = 2;
    if (has_add_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_min());
    }

    // optional uint32 add_max = 3;
    if (has_add_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_max());
    }

    // optional .jynetwork.proto.sGameStats game_stat = 4;
    if (has_game_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_stat());
    }

    // optional uint32 monster_lv = 5;
    if (has_monster_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_lv());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sArenaStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const sArenaStats*>(&from));
}

void sArenaStats::MergeFrom(const sArenaStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_add_min()) {
      set_add_min(from.add_min());
    }
    if (from.has_add_max()) {
      set_add_max(from.add_max());
    }
    if (from.has_game_stat()) {
      mutable_game_stat()->::jynetwork::proto::sGameStats::MergeFrom(from.game_stat());
    }
    if (from.has_monster_lv()) {
      set_monster_lv(from.monster_lv());
    }
  }
}

void sArenaStats::CopyFrom(const sArenaStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sArenaStats::IsInitialized() const {

  return true;
}

void sArenaStats::Swap(sArenaStats* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(add_min_, other->add_min_);
    std::swap(add_max_, other->add_max_);
    std::swap(game_stat_, other->game_stat_);
    std::swap(monster_lv_, other->monster_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string sArenaStats::GetTypeName() const {
  return "jynetwork.proto.sArenaStats";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace jynetwork

// @@protoc_insertion_point(global_scope)
